{"ast":null,"code":"var _get = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _defineProperty = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\nvar _toConsumableArray = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _toArray = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toArray\");\nvar _slicedToArray = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\MSI GAMING PC\\\\Documents\\\\web project\\\\React\\\\myPortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n/**\n * @licstart The following is the entire license notice for the\n * JavaScript code in this page\n *\n * Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * JavaScript code in this page\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf.worker\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf.worker\"] = factory();else root[\"pdfjs-dist/build/pdf.worker\"] = root.pdfjsWorker = factory();\n})(globalThis, function () {\n  return (/******/function () {\n      // webpackBootstrap\n      /******/\n      \"use strict\";\n\n      /******/\n      var __webpack_modules__ = [\n        /* 0 */\n      , /* 1 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.WorkerTask = exports.WorkerMessageHandler = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _pdf_manager = __w_pdfjs_require__(8);\n        var _cleanup_helper = __w_pdfjs_require__(71);\n        var _writer = __w_pdfjs_require__(65);\n        var _is_node = __w_pdfjs_require__(4);\n        var _message_handler = __w_pdfjs_require__(102);\n        var _worker_stream = __w_pdfjs_require__(103);\n        var WorkerTask = /*#__PURE__*/function () {\n          function WorkerTask(name) {\n            _classCallCheck(this, WorkerTask);\n            this.name = name;\n            this.terminated = false;\n            this._capability = (0, _util.createPromiseCapability)();\n          }\n          _createClass(WorkerTask, [{\n            key: \"finish\",\n            value: function finish() {\n              this._capability.resolve();\n            }\n          }, {\n            key: \"terminate\",\n            value: function terminate() {\n              this.terminated = true;\n            }\n          }, {\n            key: \"ensureNotTerminated\",\n            value: function ensureNotTerminated() {\n              if (this.terminated) {\n                throw new Error(\"Worker task was terminated\");\n              }\n            }\n          }, {\n            key: \"finished\",\n            get: function get() {\n              return this._capability.promise;\n            }\n          }]);\n          return WorkerTask;\n        }();\n        exports.WorkerTask = WorkerTask;\n        var WorkerMessageHandler = /*#__PURE__*/function () {\n          function WorkerMessageHandler() {\n            _classCallCheck(this, WorkerMessageHandler);\n          }\n          _createClass(WorkerMessageHandler, null, [{\n            key: \"setup\",\n            value: function setup(handler, port) {\n              var testMessageProcessed = false;\n              handler.on(\"test\", function wphSetupTest(data) {\n                if (testMessageProcessed) {\n                  return;\n                }\n                testMessageProcessed = true;\n                handler.send(\"test\", data instanceof Uint8Array);\n              });\n              handler.on(\"configure\", function wphConfigure(data) {\n                (0, _util.setVerbosityLevel)(data.verbosity);\n              });\n              handler.on(\"GetDocRequest\", function wphSetupDoc(data) {\n                return WorkerMessageHandler.createDocumentHandler(data, port);\n              });\n            }\n          }, {\n            key: \"createDocumentHandler\",\n            value: function createDocumentHandler(docParams, port) {\n              var pdfManager;\n              var terminated = false;\n              var cancelXHRs = null;\n              var WorkerTasks = [];\n              var verbosity = (0, _util.getVerbosityLevel)();\n              var apiVersion = docParams.apiVersion;\n              var workerVersion = '2.16.105';\n              if (apiVersion !== workerVersion) {\n                throw new Error(\"The API version \\\"\".concat(apiVersion, \"\\\" does not match \") + \"the Worker version \\\"\".concat(workerVersion, \"\\\".\"));\n              }\n              var enumerableProperties = [];\n              for (var property in []) {\n                enumerableProperties.push(property);\n              }\n              if (enumerableProperties.length) {\n                throw new Error(\"The `Array.prototype` contains unexpected enumerable properties: \" + enumerableProperties.join(\", \") + \"; thus breaking e.g. `for...in` iteration of `Array`s.\");\n              }\n              if (typeof ReadableStream === \"undefined\") {\n                var partialMsg = \"The browser/environment lacks native support for critical \" + \"functionality used by the PDF.js library (e.g. `ReadableStream`); \";\n                if (_is_node.isNodeJS) {\n                  throw new Error(partialMsg + \"please use a `legacy`-build instead.\");\n                }\n                throw new Error(partialMsg + \"please update to a supported browser.\");\n              }\n              var docId = docParams.docId;\n              var docBaseUrl = docParams.docBaseUrl;\n              var workerHandlerName = docParams.docId + \"_worker\";\n              var handler = new _message_handler.MessageHandler(workerHandlerName, docId, port);\n              function ensureNotTerminated() {\n                if (terminated) {\n                  throw new Error(\"Worker was terminated\");\n                }\n              }\n              function startWorkerTask(task) {\n                WorkerTasks.push(task);\n              }\n              function finishWorkerTask(task) {\n                task.finish();\n                var i = WorkerTasks.indexOf(task);\n                WorkerTasks.splice(i, 1);\n              }\n              function loadDocument(_x) {\n                return _loadDocument.apply(this, arguments);\n              }\n              function _loadDocument() {\n                _loadDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(recoveryMode) {\n                  var isPureXfa, task, _yield$Promise$all, _yield$Promise$all2, numPages, fingerprints, htmlForXfa;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return pdfManager.ensureDoc(\"checkHeader\");\n                        case 2:\n                          _context.next = 4;\n                          return pdfManager.ensureDoc(\"parseStartXRef\");\n                        case 4:\n                          _context.next = 6;\n                          return pdfManager.ensureDoc(\"parse\", [recoveryMode]);\n                        case 6:\n                          _context.next = 8;\n                          return pdfManager.ensureDoc(\"checkFirstPage\", [recoveryMode]);\n                        case 8:\n                          _context.next = 10;\n                          return pdfManager.ensureDoc(\"checkLastPage\", [recoveryMode]);\n                        case 10:\n                          _context.next = 12;\n                          return pdfManager.ensureDoc(\"isPureXfa\");\n                        case 12:\n                          isPureXfa = _context.sent;\n                          if (!isPureXfa) {\n                            _context.next = 18;\n                            break;\n                          }\n                          task = new WorkerTask(\"loadXfaFonts\");\n                          startWorkerTask(task);\n                          _context.next = 18;\n                          return Promise.all([pdfManager.loadXfaFonts(handler, task).catch(function (reason) {}).then(function () {\n                            return finishWorkerTask(task);\n                          }), pdfManager.loadXfaImages()]);\n                        case 18:\n                          _context.next = 20;\n                          return Promise.all([pdfManager.ensureDoc(\"numPages\"), pdfManager.ensureDoc(\"fingerprints\")]);\n                        case 20:\n                          _yield$Promise$all = _context.sent;\n                          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                          numPages = _yield$Promise$all2[0];\n                          fingerprints = _yield$Promise$all2[1];\n                          if (!isPureXfa) {\n                            _context.next = 30;\n                            break;\n                          }\n                          _context.next = 27;\n                          return pdfManager.ensureDoc(\"htmlForXfa\");\n                        case 27:\n                          _context.t0 = _context.sent;\n                          _context.next = 31;\n                          break;\n                        case 30:\n                          _context.t0 = null;\n                        case 31:\n                          htmlForXfa = _context.t0;\n                          return _context.abrupt(\"return\", {\n                            numPages: numPages,\n                            fingerprints: fingerprints,\n                            htmlForXfa: htmlForXfa\n                          });\n                        case 33:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return _loadDocument.apply(this, arguments);\n              }\n              function getPdfManager(data, evaluatorOptions, enableXfa) {\n                var pdfManagerCapability = (0, _util.createPromiseCapability)();\n                var newPdfManager;\n                var source = data.source;\n                if (source.data) {\n                  try {\n                    newPdfManager = new _pdf_manager.LocalPdfManager(docId, source.data, source.password, handler, evaluatorOptions, enableXfa, docBaseUrl);\n                    pdfManagerCapability.resolve(newPdfManager);\n                  } catch (ex) {\n                    pdfManagerCapability.reject(ex);\n                  }\n                  return pdfManagerCapability.promise;\n                }\n                var pdfStream,\n                  cachedChunks = [];\n                try {\n                  pdfStream = new _worker_stream.PDFWorkerStream(handler);\n                } catch (ex) {\n                  pdfManagerCapability.reject(ex);\n                  return pdfManagerCapability.promise;\n                }\n                var fullRequest = pdfStream.getFullReader();\n                fullRequest.headersReady.then(function () {\n                  if (!fullRequest.isRangeSupported) {\n                    return;\n                  }\n                  var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;\n                  newPdfManager = new _pdf_manager.NetworkPdfManager(docId, pdfStream, {\n                    msgHandler: handler,\n                    password: source.password,\n                    length: fullRequest.contentLength,\n                    disableAutoFetch: disableAutoFetch,\n                    rangeChunkSize: source.rangeChunkSize\n                  }, evaluatorOptions, enableXfa, docBaseUrl);\n                  var _iterator = _createForOfIteratorHelper(cachedChunks),\n                    _step;\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var chunk = _step.value;\n                      newPdfManager.sendProgressiveData(chunk);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                  cachedChunks = [];\n                  pdfManagerCapability.resolve(newPdfManager);\n                  cancelXHRs = null;\n                }).catch(function (reason) {\n                  pdfManagerCapability.reject(reason);\n                  cancelXHRs = null;\n                });\n                var loaded = 0;\n                var flushChunks = function flushChunks() {\n                  var pdfFile = (0, _util.arraysToBytes)(cachedChunks);\n                  if (source.length && pdfFile.length !== source.length) {\n                    (0, _util.warn)(\"reported HTTP length is different from actual\");\n                  }\n                  try {\n                    newPdfManager = new _pdf_manager.LocalPdfManager(docId, pdfFile, source.password, handler, evaluatorOptions, enableXfa, docBaseUrl);\n                    pdfManagerCapability.resolve(newPdfManager);\n                  } catch (ex) {\n                    pdfManagerCapability.reject(ex);\n                  }\n                  cachedChunks = [];\n                };\n                var readPromise = new Promise(function (resolve, reject) {\n                  var readChunk = function readChunk(_ref) {\n                    var value = _ref.value,\n                      done = _ref.done;\n                    try {\n                      ensureNotTerminated();\n                      if (done) {\n                        if (!newPdfManager) {\n                          flushChunks();\n                        }\n                        cancelXHRs = null;\n                        return;\n                      }\n                      loaded += (0, _util.arrayByteLength)(value);\n                      if (!fullRequest.isStreamingSupported) {\n                        handler.send(\"DocProgress\", {\n                          loaded: loaded,\n                          total: Math.max(loaded, fullRequest.contentLength || 0)\n                        });\n                      }\n                      if (newPdfManager) {\n                        newPdfManager.sendProgressiveData(value);\n                      } else {\n                        cachedChunks.push(value);\n                      }\n                      fullRequest.read().then(readChunk, reject);\n                    } catch (e) {\n                      reject(e);\n                    }\n                  };\n                  fullRequest.read().then(readChunk, reject);\n                });\n                readPromise.catch(function (e) {\n                  pdfManagerCapability.reject(e);\n                  cancelXHRs = null;\n                });\n                cancelXHRs = function cancelXHRs(reason) {\n                  pdfStream.cancelAllRequests(reason);\n                };\n                return pdfManagerCapability.promise;\n              }\n              function setupDoc(data) {\n                function onSuccess(doc) {\n                  ensureNotTerminated();\n                  handler.send(\"GetDoc\", {\n                    pdfInfo: doc\n                  });\n                }\n                function onFailure(ex) {\n                  ensureNotTerminated();\n                  if (ex instanceof _util.PasswordException) {\n                    var task = new WorkerTask(\"PasswordException: response \".concat(ex.code));\n                    startWorkerTask(task);\n                    handler.sendWithPromise(\"PasswordRequest\", ex).then(function (_ref2) {\n                      var password = _ref2.password;\n                      finishWorkerTask(task);\n                      pdfManager.updatePassword(password);\n                      pdfManagerReady();\n                    }).catch(function () {\n                      finishWorkerTask(task);\n                      handler.send(\"DocException\", ex);\n                    });\n                  } else if (ex instanceof _util.InvalidPDFException || ex instanceof _util.MissingPDFException || ex instanceof _util.UnexpectedResponseException || ex instanceof _util.UnknownErrorException) {\n                    handler.send(\"DocException\", ex);\n                  } else {\n                    handler.send(\"DocException\", new _util.UnknownErrorException(ex.message, ex.toString()));\n                  }\n                }\n                function pdfManagerReady() {\n                  ensureNotTerminated();\n                  loadDocument(false).then(onSuccess, function (reason) {\n                    ensureNotTerminated();\n                    if (!(reason instanceof _core_utils.XRefParseException)) {\n                      onFailure(reason);\n                      return;\n                    }\n                    pdfManager.requestLoadedStream();\n                    pdfManager.onLoadedStream().then(function () {\n                      ensureNotTerminated();\n                      loadDocument(true).then(onSuccess, onFailure);\n                    });\n                  });\n                }\n                ensureNotTerminated();\n                var evaluatorOptions = {\n                  maxImageSize: data.maxImageSize,\n                  disableFontFace: data.disableFontFace,\n                  ignoreErrors: data.ignoreErrors,\n                  isEvalSupported: data.isEvalSupported,\n                  fontExtraProperties: data.fontExtraProperties,\n                  useSystemFonts: data.useSystemFonts,\n                  cMapUrl: data.cMapUrl,\n                  standardFontDataUrl: data.standardFontDataUrl\n                };\n                getPdfManager(data, evaluatorOptions, data.enableXfa).then(function (newPdfManager) {\n                  if (terminated) {\n                    newPdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n                    throw new Error(\"Worker was terminated\");\n                  }\n                  pdfManager = newPdfManager;\n                  pdfManager.onLoadedStream().then(function (stream) {\n                    handler.send(\"DataLoaded\", {\n                      length: stream.bytes.byteLength\n                    });\n                  });\n                }).then(pdfManagerReady, onFailure);\n              }\n              handler.on(\"GetPage\", function wphSetupGetPage(data) {\n                return pdfManager.getPage(data.pageIndex).then(function (page) {\n                  return Promise.all([pdfManager.ensure(page, \"rotate\"), pdfManager.ensure(page, \"ref\"), pdfManager.ensure(page, \"userUnit\"), pdfManager.ensure(page, \"view\")]).then(function (_ref3) {\n                    var _ref4 = _slicedToArray(_ref3, 4),\n                      rotate = _ref4[0],\n                      ref = _ref4[1],\n                      userUnit = _ref4[2],\n                      view = _ref4[3];\n                    return {\n                      rotate: rotate,\n                      ref: ref,\n                      userUnit: userUnit,\n                      view: view\n                    };\n                  });\n                });\n              });\n              handler.on(\"GetPageIndex\", function wphSetupGetPageIndex(data) {\n                var pageRef = _primitives.Ref.get(data.num, data.gen);\n                return pdfManager.ensureCatalog(\"getPageIndex\", [pageRef]);\n              });\n              handler.on(\"GetDestinations\", function wphSetupGetDestinations(data) {\n                return pdfManager.ensureCatalog(\"destinations\");\n              });\n              handler.on(\"GetDestination\", function wphSetupGetDestination(data) {\n                return pdfManager.ensureCatalog(\"getDestination\", [data.id]);\n              });\n              handler.on(\"GetPageLabels\", function wphSetupGetPageLabels(data) {\n                return pdfManager.ensureCatalog(\"pageLabels\");\n              });\n              handler.on(\"GetPageLayout\", function wphSetupGetPageLayout(data) {\n                return pdfManager.ensureCatalog(\"pageLayout\");\n              });\n              handler.on(\"GetPageMode\", function wphSetupGetPageMode(data) {\n                return pdfManager.ensureCatalog(\"pageMode\");\n              });\n              handler.on(\"GetViewerPreferences\", function (data) {\n                return pdfManager.ensureCatalog(\"viewerPreferences\");\n              });\n              handler.on(\"GetOpenAction\", function (data) {\n                return pdfManager.ensureCatalog(\"openAction\");\n              });\n              handler.on(\"GetAttachments\", function wphSetupGetAttachments(data) {\n                return pdfManager.ensureCatalog(\"attachments\");\n              });\n              handler.on(\"GetJavaScript\", function wphSetupGetJavaScript(data) {\n                return pdfManager.ensureCatalog(\"javaScript\");\n              });\n              handler.on(\"GetDocJSActions\", function wphSetupGetDocJSActions(data) {\n                return pdfManager.ensureCatalog(\"jsActions\");\n              });\n              handler.on(\"GetPageJSActions\", function (_ref5) {\n                var pageIndex = _ref5.pageIndex;\n                return pdfManager.getPage(pageIndex).then(function (page) {\n                  return pdfManager.ensure(page, \"jsActions\");\n                });\n              });\n              handler.on(\"GetOutline\", function wphSetupGetOutline(data) {\n                return pdfManager.ensureCatalog(\"documentOutline\");\n              });\n              handler.on(\"GetOptionalContentConfig\", function (data) {\n                return pdfManager.ensureCatalog(\"optionalContentConfig\");\n              });\n              handler.on(\"GetPermissions\", function (data) {\n                return pdfManager.ensureCatalog(\"permissions\");\n              });\n              handler.on(\"GetMetadata\", function wphSetupGetMetadata(data) {\n                return Promise.all([pdfManager.ensureDoc(\"documentInfo\"), pdfManager.ensureCatalog(\"metadata\")]);\n              });\n              handler.on(\"GetMarkInfo\", function wphSetupGetMarkInfo(data) {\n                return pdfManager.ensureCatalog(\"markInfo\");\n              });\n              handler.on(\"GetData\", function wphSetupGetData(data) {\n                pdfManager.requestLoadedStream();\n                return pdfManager.onLoadedStream().then(function (stream) {\n                  return stream.bytes;\n                });\n              });\n              handler.on(\"GetAnnotations\", function (_ref6) {\n                var pageIndex = _ref6.pageIndex,\n                  intent = _ref6.intent;\n                return pdfManager.getPage(pageIndex).then(function (page) {\n                  var task = new WorkerTask(\"GetAnnotations: page \".concat(pageIndex));\n                  startWorkerTask(task);\n                  return page.getAnnotationsData(handler, task, intent).then(function (data) {\n                    finishWorkerTask(task);\n                    return data;\n                  }, function (reason) {\n                    finishWorkerTask(task);\n                  });\n                });\n              });\n              handler.on(\"GetFieldObjects\", function (data) {\n                return pdfManager.ensureDoc(\"fieldObjects\");\n              });\n              handler.on(\"HasJSActions\", function (data) {\n                return pdfManager.ensureDoc(\"hasJSActions\");\n              });\n              handler.on(\"GetCalculationOrderIds\", function (data) {\n                return pdfManager.ensureDoc(\"calculationOrderIds\");\n              });\n              handler.on(\"SaveDocument\", function (_ref7) {\n                var isPureXfa = _ref7.isPureXfa,\n                  numPages = _ref7.numPages,\n                  annotationStorage = _ref7.annotationStorage,\n                  filename = _ref7.filename;\n                pdfManager.requestLoadedStream();\n                var newAnnotationsByPage = !isPureXfa ? (0, _core_utils.getNewAnnotationsMap)(annotationStorage) : null;\n                var promises = [pdfManager.onLoadedStream(), pdfManager.ensureCatalog(\"acroForm\"), pdfManager.ensureCatalog(\"acroFormRef\"), pdfManager.ensureDoc(\"xref\"), pdfManager.ensureDoc(\"startXRef\")];\n                if (newAnnotationsByPage) {\n                  var _iterator2 = _createForOfIteratorHelper(newAnnotationsByPage),\n                    _step2;\n                  try {\n                    var _loop = function _loop() {\n                      var _step2$value = _slicedToArray(_step2.value, 2),\n                        pageIndex = _step2$value[0],\n                        annotations = _step2$value[1];\n                      promises.push(pdfManager.getPage(pageIndex).then(function (page) {\n                        var task = new WorkerTask(\"Save (editor): page \".concat(pageIndex));\n                        return page.saveNewAnnotations(handler, task, annotations).finally(function () {\n                          finishWorkerTask(task);\n                        });\n                      }));\n                    };\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }\n                if (isPureXfa) {\n                  promises.push(pdfManager.serializeXfaData(annotationStorage));\n                } else {\n                  var _loop2 = function _loop2(pageIndex) {\n                    promises.push(pdfManager.getPage(pageIndex).then(function (page) {\n                      var task = new WorkerTask(\"Save: page \".concat(pageIndex));\n                      return page.save(handler, task, annotationStorage).finally(function () {\n                        finishWorkerTask(task);\n                      });\n                    }));\n                  };\n                  for (var pageIndex = 0; pageIndex < numPages; pageIndex++) {\n                    _loop2(pageIndex);\n                  }\n                }\n                return Promise.all(promises).then(function (_ref8) {\n                  var _ref9 = _toArray(_ref8),\n                    stream = _ref9[0],\n                    acroForm = _ref9[1],\n                    acroFormRef = _ref9[2],\n                    xref = _ref9[3],\n                    startXRef = _ref9[4],\n                    refs = _ref9.slice(5);\n                  var newRefs = [];\n                  var xfaData = null;\n                  if (isPureXfa) {\n                    xfaData = refs[0];\n                    if (!xfaData) {\n                      return stream.bytes;\n                    }\n                  } else {\n                    newRefs = refs.flat(2);\n                    if (newRefs.length === 0) {\n                      return stream.bytes;\n                    }\n                  }\n                  var xfa = acroForm instanceof _primitives.Dict && acroForm.get(\"XFA\") || null;\n                  var xfaDatasetsRef = null;\n                  var hasXfaDatasetsEntry = false;\n                  if (Array.isArray(xfa)) {\n                    for (var i = 0, ii = xfa.length; i < ii; i += 2) {\n                      if (xfa[i] === \"datasets\") {\n                        xfaDatasetsRef = xfa[i + 1];\n                        acroFormRef = null;\n                        hasXfaDatasetsEntry = true;\n                      }\n                    }\n                    if (xfaDatasetsRef === null) {\n                      xfaDatasetsRef = xref.getNewRef();\n                    }\n                  } else if (xfa) {\n                    acroFormRef = null;\n                    (0, _util.warn)(\"Unsupported XFA type.\");\n                  }\n                  var newXrefInfo = Object.create(null);\n                  if (xref.trailer) {\n                    var infoObj = Object.create(null);\n                    var xrefInfo = xref.trailer.get(\"Info\") || null;\n                    if (xrefInfo instanceof _primitives.Dict) {\n                      xrefInfo.forEach(function (key, value) {\n                        if (typeof value === \"string\") {\n                          infoObj[key] = (0, _util.stringToPDFString)(value);\n                        }\n                      });\n                    }\n                    newXrefInfo = {\n                      rootRef: xref.trailer.getRaw(\"Root\") || null,\n                      encryptRef: xref.trailer.getRaw(\"Encrypt\") || null,\n                      newRef: xref.getNewRef(),\n                      infoRef: xref.trailer.getRaw(\"Info\") || null,\n                      info: infoObj,\n                      fileIds: xref.trailer.get(\"ID\") || null,\n                      startXRef: startXRef,\n                      filename: filename\n                    };\n                  }\n                  xref.resetNewRef();\n                  return (0, _writer.incrementalUpdate)({\n                    originalData: stream.bytes,\n                    xrefInfo: newXrefInfo,\n                    newRefs: newRefs,\n                    xref: xref,\n                    hasXfa: !!xfa,\n                    xfaDatasetsRef: xfaDatasetsRef,\n                    hasXfaDatasetsEntry: hasXfaDatasetsEntry,\n                    acroFormRef: acroFormRef,\n                    acroForm: acroForm,\n                    xfaData: xfaData\n                  });\n                });\n              });\n              handler.on(\"GetOperatorList\", function wphSetupRenderPage(data, sink) {\n                var pageIndex = data.pageIndex;\n                pdfManager.getPage(pageIndex).then(function (page) {\n                  var task = new WorkerTask(\"GetOperatorList: page \".concat(pageIndex));\n                  startWorkerTask(task);\n                  var start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n                  page.getOperatorList({\n                    handler: handler,\n                    sink: sink,\n                    task: task,\n                    intent: data.intent,\n                    cacheKey: data.cacheKey,\n                    annotationStorage: data.annotationStorage\n                  }).then(function (operatorListInfo) {\n                    finishWorkerTask(task);\n                    if (start) {\n                      (0, _util.info)(\"page=\".concat(pageIndex + 1, \" - getOperatorList: time=\") + \"\".concat(Date.now() - start, \"ms, len=\").concat(operatorListInfo.length));\n                    }\n                    sink.close();\n                  }, function (reason) {\n                    finishWorkerTask(task);\n                    if (task.terminated) {\n                      return;\n                    }\n                    handler.send(\"UnsupportedFeature\", {\n                      featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n                    });\n                    sink.error(reason);\n                  });\n                });\n              });\n              handler.on(\"GetTextContent\", function wphExtractText(data, sink) {\n                var pageIndex = data.pageIndex;\n                pdfManager.getPage(pageIndex).then(function (page) {\n                  var task = new WorkerTask(\"GetTextContent: page \" + pageIndex);\n                  startWorkerTask(task);\n                  var start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n                  page.extractTextContent({\n                    handler: handler,\n                    task: task,\n                    sink: sink,\n                    includeMarkedContent: data.includeMarkedContent,\n                    combineTextItems: data.combineTextItems\n                  }).then(function () {\n                    finishWorkerTask(task);\n                    if (start) {\n                      (0, _util.info)(\"page=\".concat(pageIndex + 1, \" - getTextContent: time=\") + \"\".concat(Date.now() - start, \"ms\"));\n                    }\n                    sink.close();\n                  }, function (reason) {\n                    finishWorkerTask(task);\n                    if (task.terminated) {\n                      return;\n                    }\n                    sink.error(reason);\n                  });\n                });\n              });\n              handler.on(\"GetStructTree\", function wphGetStructTree(data) {\n                return pdfManager.getPage(data.pageIndex).then(function (page) {\n                  return pdfManager.ensure(page, \"getStructTree\");\n                });\n              });\n              handler.on(\"FontFallback\", function (data) {\n                return pdfManager.fontFallback(data.id, handler);\n              });\n              handler.on(\"Cleanup\", function wphCleanup(data) {\n                return pdfManager.cleanup(true);\n              });\n              handler.on(\"Terminate\", function wphTerminate(data) {\n                terminated = true;\n                var waitOn = [];\n                if (pdfManager) {\n                  pdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n                  var cleanupPromise = pdfManager.cleanup();\n                  waitOn.push(cleanupPromise);\n                  pdfManager = null;\n                } else {\n                  (0, _cleanup_helper.clearGlobalCaches)();\n                }\n                if (cancelXHRs) {\n                  cancelXHRs(new _util.AbortException(\"Worker was terminated.\"));\n                }\n                var _iterator3 = _createForOfIteratorHelper(WorkerTasks),\n                  _step3;\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    var task = _step3.value;\n                    waitOn.push(task.finished);\n                    task.terminate();\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                return Promise.all(waitOn).then(function () {\n                  handler.destroy();\n                  handler = null;\n                });\n              });\n              handler.on(\"Ready\", function wphReady(data) {\n                setupDoc(docParams);\n                docParams = null;\n              });\n              return workerHandlerName;\n            }\n          }, {\n            key: \"initializeFromPort\",\n            value: function initializeFromPort(port) {\n              var handler = new _message_handler.MessageHandler(\"worker\", \"main\", port);\n              WorkerMessageHandler.setup(handler, port);\n              handler.send(\"ready\", null);\n            }\n          }]);\n          return WorkerMessageHandler;\n        }();\n        exports.WorkerMessageHandler = WorkerMessageHandler;\n        function isMessagePort(maybePort) {\n          return typeof maybePort.postMessage === \"function\" && \"onmessage\" in maybePort;\n        }\n        if (typeof window === \"undefined\" && !_is_node.isNodeJS && typeof self !== \"undefined\" && isMessagePort(self)) {\n          WorkerMessageHandler.initializeFromPort(self);\n        }\n\n        /***/\n      }, /* 2 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.VerbosityLevel = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.UNSUPPORTED_FEATURES = exports.TextRenderingMode = exports.StreamType = exports.RenderingIntentFlag = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.LINE_FACTOR = exports.LINE_DESCENT_FACTOR = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FeatureTest = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationEditorType = exports.AnnotationEditorPrefix = exports.AnnotationEditorParamsType = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        __w_pdfjs_require__(3);\n        var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        var LINE_FACTOR = 1.35;\n        exports.LINE_FACTOR = LINE_FACTOR;\n        var LINE_DESCENT_FACTOR = 0.35;\n        exports.LINE_DESCENT_FACTOR = LINE_DESCENT_FACTOR;\n        var RenderingIntentFlag = {\n          ANY: 0x01,\n          DISPLAY: 0x02,\n          PRINT: 0x04,\n          ANNOTATIONS_FORMS: 0x10,\n          ANNOTATIONS_STORAGE: 0x20,\n          ANNOTATIONS_DISABLE: 0x40,\n          OPLIST: 0x100\n        };\n        exports.RenderingIntentFlag = RenderingIntentFlag;\n        var AnnotationMode = {\n          DISABLE: 0,\n          ENABLE: 1,\n          ENABLE_FORMS: 2,\n          ENABLE_STORAGE: 3\n        };\n        exports.AnnotationMode = AnnotationMode;\n        var AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n        exports.AnnotationEditorPrefix = AnnotationEditorPrefix;\n        var AnnotationEditorType = {\n          DISABLE: -1,\n          NONE: 0,\n          FREETEXT: 3,\n          INK: 15\n        };\n        exports.AnnotationEditorType = AnnotationEditorType;\n        var AnnotationEditorParamsType = {\n          FREETEXT_SIZE: 1,\n          FREETEXT_COLOR: 2,\n          FREETEXT_OPACITY: 3,\n          INK_COLOR: 11,\n          INK_THICKNESS: 12,\n          INK_OPACITY: 13\n        };\n        exports.AnnotationEditorParamsType = AnnotationEditorParamsType;\n        var PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        var TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        var ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        var AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        var AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        var AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        var AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        var AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        var AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        var AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        var AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        var AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        var DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        var PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        var StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        var FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1STANDARD: \"TYPE1STANDARD\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        var VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        var CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        var OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        var UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          signatures: \"signatures\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontBuildPath: \"errorFontBuildPath\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\",\n          errorContentSubStream: \"errorContentSubStream\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        var PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        var verbosity = VerbosityLevel.WARNINGS;\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(\"Info: \".concat(msg));\n          }\n        }\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(\"Warning: \".concat(msg));\n          }\n        }\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n            default:\n              return false;\n          }\n        }\n        function createValidAbsoluteUrl(url) {\n          var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          if (!url) {\n            return null;\n          }\n          try {\n            if (options && typeof url === \"string\") {\n              if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                var dots = url.match(/\\./g);\n                if (dots && dots.length >= 2) {\n                  url = \"http://\".concat(url);\n                }\n              }\n              if (options.tryConvertEncoding) {\n                try {\n                  url = stringToUTF8String(url);\n                } catch (ex) {}\n              }\n            }\n            var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n          return null;\n        }\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n        var BaseException = function BaseExceptionClosure() {\n          function BaseException(message, name) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n            this.message = message;\n            this.name = name;\n          }\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n        exports.BaseException = BaseException;\n        var PasswordException = /*#__PURE__*/function (_BaseException) {\n          _inherits(PasswordException, _BaseException);\n          function PasswordException(msg, code) {\n            var _this;\n            _classCallCheck(this, PasswordException);\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(PasswordException).call(this, msg, \"PasswordException\"));\n            _this.code = code;\n            return _this;\n          }\n          return PasswordException;\n        }(BaseException);\n        exports.PasswordException = PasswordException;\n        var UnknownErrorException = /*#__PURE__*/function (_BaseException2) {\n          _inherits(UnknownErrorException, _BaseException2);\n          function UnknownErrorException(msg, details) {\n            var _this2;\n            _classCallCheck(this, UnknownErrorException);\n            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(UnknownErrorException).call(this, msg, \"UnknownErrorException\"));\n            _this2.details = details;\n            return _this2;\n          }\n          return UnknownErrorException;\n        }(BaseException);\n        exports.UnknownErrorException = UnknownErrorException;\n        var InvalidPDFException = /*#__PURE__*/function (_BaseException3) {\n          _inherits(InvalidPDFException, _BaseException3);\n          function InvalidPDFException(msg) {\n            _classCallCheck(this, InvalidPDFException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(InvalidPDFException).call(this, msg, \"InvalidPDFException\"));\n          }\n          return InvalidPDFException;\n        }(BaseException);\n        exports.InvalidPDFException = InvalidPDFException;\n        var MissingPDFException = /*#__PURE__*/function (_BaseException4) {\n          _inherits(MissingPDFException, _BaseException4);\n          function MissingPDFException(msg) {\n            _classCallCheck(this, MissingPDFException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(MissingPDFException).call(this, msg, \"MissingPDFException\"));\n          }\n          return MissingPDFException;\n        }(BaseException);\n        exports.MissingPDFException = MissingPDFException;\n        var UnexpectedResponseException = /*#__PURE__*/function (_BaseException5) {\n          _inherits(UnexpectedResponseException, _BaseException5);\n          function UnexpectedResponseException(msg, status) {\n            var _this3;\n            _classCallCheck(this, UnexpectedResponseException);\n            _this3 = _possibleConstructorReturn(this, _getPrototypeOf(UnexpectedResponseException).call(this, msg, \"UnexpectedResponseException\"));\n            _this3.status = status;\n            return _this3;\n          }\n          return UnexpectedResponseException;\n        }(BaseException);\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n        var FormatError = /*#__PURE__*/function (_BaseException6) {\n          _inherits(FormatError, _BaseException6);\n          function FormatError(msg) {\n            _classCallCheck(this, FormatError);\n            return _possibleConstructorReturn(this, _getPrototypeOf(FormatError).call(this, msg, \"FormatError\"));\n          }\n          return FormatError;\n        }(BaseException);\n        exports.FormatError = FormatError;\n        var AbortException = /*#__PURE__*/function (_BaseException7) {\n          _inherits(AbortException, _BaseException7);\n          function AbortException(msg) {\n            _classCallCheck(this, AbortException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AbortException).call(this, msg, \"AbortException\"));\n          }\n          return AbortException;\n        }(BaseException);\n        exports.AbortException = AbortException;\n        function bytesToString(bytes) {\n          if (typeof bytes !== \"object\" || bytes === null || bytes.length === undefined) {\n            unreachable(\"Invalid argument for bytesToString\");\n          }\n          var length = bytes.length;\n          var MAX_ARGUMENT_COUNT = 8192;\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n          var strBuf = [];\n          for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            var chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n          return strBuf.join(\"\");\n        }\n        function stringToBytes(str) {\n          if (typeof str !== \"string\") {\n            unreachable(\"Invalid argument for stringToBytes\");\n          }\n          var length = str.length;\n          var bytes = new Uint8Array(length);\n          for (var i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n          return bytes;\n        }\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n          if (arr.byteLength !== undefined) {\n            return arr.byteLength;\n          }\n          unreachable(\"Invalid argument for arrayByteLength\");\n        }\n        function arraysToBytes(arr) {\n          var length = arr.length;\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n          var resultLength = 0;\n          for (var i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n          var pos = 0;\n          var data = new Uint8Array(resultLength);\n          for (var _i = 0; _i < length; _i++) {\n            var item = arr[_i];\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n            var itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n          return data;\n        }\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n        function objectFromMap(map) {\n          var obj = Object.create(null);\n          var _iterator4 = _createForOfIteratorHelper(map),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _step4$value = _slicedToArray(_step4.value, 2),\n                key = _step4$value[0],\n                value = _step4$value[1];\n              obj[key] = value;\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          return obj;\n        }\n        function isLittleEndian() {\n          var buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          var view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n        var FeatureTest = /*#__PURE__*/function () {\n          function FeatureTest() {\n            _classCallCheck(this, FeatureTest);\n          }\n          _createClass(FeatureTest, null, [{\n            key: \"isLittleEndian\",\n            get: function get() {\n              return shadow(this, \"isLittleEndian\", isLittleEndian());\n            }\n          }, {\n            key: \"isEvalSupported\",\n            get: function get() {\n              return shadow(this, \"isEvalSupported\", isEvalSupported());\n            }\n          }, {\n            key: \"isOffscreenCanvasSupported\",\n            get: function get() {\n              return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n            }\n          }]);\n          return FeatureTest;\n        }();\n        exports.FeatureTest = FeatureTest;\n        var hexNumbers = _toConsumableArray(Array(256).keys()).map(function (n) {\n          return n.toString(16).padStart(2, \"0\");\n        });\n        var Util = /*#__PURE__*/function () {\n          function Util() {\n            _classCallCheck(this, Util);\n          }\n          _createClass(Util, null, [{\n            key: \"makeHexColor\",\n            value: function makeHexColor(r, g, b) {\n              return \"#\".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);\n            }\n          }, {\n            key: \"scaleMinMax\",\n            value: function scaleMinMax(transform, minMax) {\n              var temp;\n              if (transform[0]) {\n                if (transform[0] < 0) {\n                  temp = minMax[0];\n                  minMax[0] = minMax[1];\n                  minMax[1] = temp;\n                }\n                minMax[0] *= transform[0];\n                minMax[1] *= transform[0];\n                if (transform[3] < 0) {\n                  temp = minMax[2];\n                  minMax[2] = minMax[3];\n                  minMax[3] = temp;\n                }\n                minMax[2] *= transform[3];\n                minMax[3] *= transform[3];\n              } else {\n                temp = minMax[0];\n                minMax[0] = minMax[2];\n                minMax[2] = temp;\n                temp = minMax[1];\n                minMax[1] = minMax[3];\n                minMax[3] = temp;\n                if (transform[1] < 0) {\n                  temp = minMax[2];\n                  minMax[2] = minMax[3];\n                  minMax[3] = temp;\n                }\n                minMax[2] *= transform[1];\n                minMax[3] *= transform[1];\n                if (transform[2] < 0) {\n                  temp = minMax[0];\n                  minMax[0] = minMax[1];\n                  minMax[1] = temp;\n                }\n                minMax[0] *= transform[2];\n                minMax[1] *= transform[2];\n              }\n              minMax[0] += transform[4];\n              minMax[1] += transform[4];\n              minMax[2] += transform[5];\n              minMax[3] += transform[5];\n            }\n          }, {\n            key: \"transform\",\n            value: function transform(m1, m2) {\n              return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n            }\n          }, {\n            key: \"applyTransform\",\n            value: function applyTransform(p, m) {\n              var xt = p[0] * m[0] + p[1] * m[2] + m[4];\n              var yt = p[0] * m[1] + p[1] * m[3] + m[5];\n              return [xt, yt];\n            }\n          }, {\n            key: \"applyInverseTransform\",\n            value: function applyInverseTransform(p, m) {\n              var d = m[0] * m[3] - m[1] * m[2];\n              var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n              var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n              return [xt, yt];\n            }\n          }, {\n            key: \"getAxialAlignedBoundingBox\",\n            value: function getAxialAlignedBoundingBox(r, m) {\n              var p1 = Util.applyTransform(r, m);\n              var p2 = Util.applyTransform(r.slice(2, 4), m);\n              var p3 = Util.applyTransform([r[0], r[3]], m);\n              var p4 = Util.applyTransform([r[2], r[1]], m);\n              return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n            }\n          }, {\n            key: \"inverseTransform\",\n            value: function inverseTransform(m) {\n              var d = m[0] * m[3] - m[1] * m[2];\n              return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n            }\n          }, {\n            key: \"apply3dTransform\",\n            value: function apply3dTransform(m, v) {\n              return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n            }\n          }, {\n            key: \"singularValueDecompose2dScale\",\n            value: function singularValueDecompose2dScale(m) {\n              var transpose = [m[0], m[2], m[1], m[3]];\n              var a = m[0] * transpose[0] + m[1] * transpose[2];\n              var b = m[0] * transpose[1] + m[1] * transpose[3];\n              var c = m[2] * transpose[0] + m[3] * transpose[2];\n              var d = m[2] * transpose[1] + m[3] * transpose[3];\n              var first = (a + d) / 2;\n              var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;\n              var sx = first + second || 1;\n              var sy = first - second || 1;\n              return [Math.sqrt(sx), Math.sqrt(sy)];\n            }\n          }, {\n            key: \"normalizeRect\",\n            value: function normalizeRect(rect) {\n              var r = rect.slice(0);\n              if (rect[0] > rect[2]) {\n                r[0] = rect[2];\n                r[2] = rect[0];\n              }\n              if (rect[1] > rect[3]) {\n                r[1] = rect[3];\n                r[3] = rect[1];\n              }\n              return r;\n            }\n          }, {\n            key: \"intersect\",\n            value: function intersect(rect1, rect2) {\n              var xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\n              var xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\n              if (xLow > xHigh) {\n                return null;\n              }\n              var yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\n              var yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\n              if (yLow > yHigh) {\n                return null;\n              }\n              return [xLow, yLow, xHigh, yHigh];\n            }\n          }, {\n            key: \"bezierBoundingBox\",\n            value: function bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n              var tvalues = [],\n                bounds = [[], []];\n              var a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n              for (var i = 0; i < 2; ++i) {\n                if (i === 0) {\n                  b = 6 * x0 - 12 * x1 + 6 * x2;\n                  a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                  c = 3 * x1 - 3 * x0;\n                } else {\n                  b = 6 * y0 - 12 * y1 + 6 * y2;\n                  a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                  c = 3 * y1 - 3 * y0;\n                }\n                if (Math.abs(a) < 1e-12) {\n                  if (Math.abs(b) < 1e-12) {\n                    continue;\n                  }\n                  t = -c / b;\n                  if (0 < t && t < 1) {\n                    tvalues.push(t);\n                  }\n                  continue;\n                }\n                b2ac = b * b - 4 * c * a;\n                sqrtb2ac = Math.sqrt(b2ac);\n                if (b2ac < 0) {\n                  continue;\n                }\n                t1 = (-b + sqrtb2ac) / (2 * a);\n                if (0 < t1 && t1 < 1) {\n                  tvalues.push(t1);\n                }\n                t2 = (-b - sqrtb2ac) / (2 * a);\n                if (0 < t2 && t2 < 1) {\n                  tvalues.push(t2);\n                }\n              }\n              var j = tvalues.length,\n                mt;\n              var jlen = j;\n              while (j--) {\n                t = tvalues[j];\n                mt = 1 - t;\n                bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n                bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n              }\n              bounds[0][jlen] = x0;\n              bounds[1][jlen] = y0;\n              bounds[0][jlen + 1] = x3;\n              bounds[1][jlen + 1] = y3;\n              bounds[0].length = bounds[1].length = jlen + 2;\n              return [Math.min.apply(Math, _toConsumableArray(bounds[0])), Math.min.apply(Math, _toConsumableArray(bounds[1])), Math.max.apply(Math, _toConsumableArray(bounds[0])), Math.max.apply(Math, _toConsumableArray(bounds[1]))];\n            }\n          }]);\n          return Util;\n        }();\n        exports.Util = Util;\n        var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n        function stringToPDFString(str) {\n          if (str[0] >= \"\\xEF\") {\n            var encoding;\n            if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n              encoding = \"utf-16be\";\n            } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n              encoding = \"utf-16le\";\n            } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n              encoding = \"utf-8\";\n            }\n            if (encoding) {\n              try {\n                var decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                var buffer = stringToBytes(str);\n                return decoder.decode(buffer);\n              } catch (ex) {\n                warn(\"stringToPDFString: \\\"\".concat(ex, \"\\\".\"));\n              }\n            }\n          }\n          var strBuf = [];\n          for (var i = 0, ii = str.length; i < ii; i++) {\n            var code = PDFStringTranslateTable[str.charCodeAt(i)];\n            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n          }\n          return strBuf.join(\"\");\n        }\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, function (match) {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n            return \"\\\\\".concat(match);\n          });\n        }\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n        function stringToUTF16BEString(str) {\n          var buf = [\"\\xFE\\xFF\"];\n          for (var i = 0, ii = str.length; i < ii; i++) {\n            var char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));\n          }\n          return buf.join(\"\");\n        }\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n          for (var i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n          return true;\n        }\n        function getModificationDate() {\n          var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n        function createPromiseCapability() {\n          var capability = Object.create(null);\n          var isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get: function get() {\n              return isSettled;\n            }\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        /***/\n      }, /* 3 */\n      /***/function (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n        var _is_node = __w_pdfjs_require__(4);\n        ;\n\n        /***/\n      }, /* 4 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        var isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n\n        /***/\n      }, /* 5 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.RefSetCache = exports.RefSet = exports.Ref = exports.Name = exports.EOF = exports.Dict = exports.Cmd = exports.CIRCULAR_REF = void 0;\n        exports.clearPrimitiveCaches = clearPrimitiveCaches;\n        exports.isCmd = isCmd;\n        exports.isDict = isDict;\n        exports.isName = isName;\n        exports.isRefsEqual = isRefsEqual;\n        var _util = __w_pdfjs_require__(2);\n        var CIRCULAR_REF = Symbol(\"CIRCULAR_REF\");\n        exports.CIRCULAR_REF = CIRCULAR_REF;\n        var EOF = Symbol(\"EOF\");\n        exports.EOF = EOF;\n        var Name = function NameClosure() {\n          var nameCache = Object.create(null);\n          var Name = /*#__PURE__*/function () {\n            function Name(name) {\n              _classCallCheck(this, Name);\n              this.name = name;\n            }\n            _createClass(Name, null, [{\n              key: \"get\",\n              value: function get(name) {\n                return nameCache[name] || (nameCache[name] = new Name(name));\n              }\n            }, {\n              key: \"_clearCache\",\n              value: function _clearCache() {\n                nameCache = Object.create(null);\n              }\n            }]);\n            return Name;\n          }();\n          return Name;\n        }();\n        exports.Name = Name;\n        var Cmd = function CmdClosure() {\n          var cmdCache = Object.create(null);\n          var Cmd = /*#__PURE__*/function () {\n            function Cmd(cmd) {\n              _classCallCheck(this, Cmd);\n              this.cmd = cmd;\n            }\n            _createClass(Cmd, null, [{\n              key: \"get\",\n              value: function get(cmd) {\n                return cmdCache[cmd] || (cmdCache[cmd] = new Cmd(cmd));\n              }\n            }, {\n              key: \"_clearCache\",\n              value: function _clearCache() {\n                cmdCache = Object.create(null);\n              }\n            }]);\n            return Cmd;\n          }();\n          return Cmd;\n        }();\n        exports.Cmd = Cmd;\n        var nonSerializable = function nonSerializableClosure() {\n          return nonSerializable;\n        };\n        var Dict = /*#__PURE__*/function () {\n          function Dict() {\n            var xref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            _classCallCheck(this, Dict);\n            this._map = Object.create(null);\n            this.xref = xref;\n            this.objId = null;\n            this.suppressEncryption = false;\n            this.__nonSerializable__ = nonSerializable;\n          }\n          _createClass(Dict, [{\n            key: \"assignXref\",\n            value: function assignXref(newXref) {\n              this.xref = newXref;\n            }\n          }, {\n            key: \"get\",\n            value: function get(key1, key2, key3) {\n              var value = this._map[key1];\n              if (value === undefined && key2 !== undefined) {\n                value = this._map[key2];\n                if (value === undefined && key3 !== undefined) {\n                  value = this._map[key3];\n                }\n              }\n              if (value instanceof Ref && this.xref) {\n                return this.xref.fetch(value, this.suppressEncryption);\n              }\n              return value;\n            }\n          }, {\n            key: \"getAsync\",\n            value: function () {\n              var _getAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key1, key2, key3) {\n                var value;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        value = this._map[key1];\n                        if (value === undefined && key2 !== undefined) {\n                          value = this._map[key2];\n                          if (value === undefined && key3 !== undefined) {\n                            value = this._map[key3];\n                          }\n                        }\n                        if (!(value instanceof Ref && this.xref)) {\n                          _context2.next = 4;\n                          break;\n                        }\n                        return _context2.abrupt(\"return\", this.xref.fetchAsync(value, this.suppressEncryption));\n                      case 4:\n                        return _context2.abrupt(\"return\", value);\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              }));\n              function getAsync(_x2, _x3, _x4) {\n                return _getAsync.apply(this, arguments);\n              }\n              return getAsync;\n            }()\n          }, {\n            key: \"getArray\",\n            value: function getArray(key1, key2, key3) {\n              var value = this._map[key1];\n              if (value === undefined && key2 !== undefined) {\n                value = this._map[key2];\n                if (value === undefined && key3 !== undefined) {\n                  value = this._map[key3];\n                }\n              }\n              if (value instanceof Ref && this.xref) {\n                value = this.xref.fetch(value, this.suppressEncryption);\n              }\n              if (Array.isArray(value)) {\n                value = value.slice();\n                for (var i = 0, ii = value.length; i < ii; i++) {\n                  if (value[i] instanceof Ref && this.xref) {\n                    value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n                  }\n                }\n              }\n              return value;\n            }\n          }, {\n            key: \"getRaw\",\n            value: function getRaw(key) {\n              return this._map[key];\n            }\n          }, {\n            key: \"getKeys\",\n            value: function getKeys() {\n              return Object.keys(this._map);\n            }\n          }, {\n            key: \"getRawValues\",\n            value: function getRawValues() {\n              return Object.values(this._map);\n            }\n          }, {\n            key: \"set\",\n            value: function set(key, value) {\n              this._map[key] = value;\n            }\n          }, {\n            key: \"has\",\n            value: function has(key) {\n              return this._map[key] !== undefined;\n            }\n          }, {\n            key: \"forEach\",\n            value: function forEach(callback) {\n              for (var key in this._map) {\n                callback(key, this.get(key));\n              }\n            }\n          }, {\n            key: \"size\",\n            get: function get() {\n              return Object.keys(this._map).length;\n            }\n          }], [{\n            key: \"merge\",\n            value: function merge(_ref10) {\n              var xref = _ref10.xref,\n                dictArray = _ref10.dictArray,\n                _ref10$mergeSubDicts = _ref10.mergeSubDicts,\n                mergeSubDicts = _ref10$mergeSubDicts === void 0 ? false : _ref10$mergeSubDicts;\n              var mergedDict = new Dict(xref),\n                properties = new Map();\n              var _iterator5 = _createForOfIteratorHelper(dictArray),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var dict = _step5.value;\n                  if (!(dict instanceof Dict)) {\n                    continue;\n                  }\n                  for (var _i2 = 0, _Object$entries = Object.entries(dict._map); _i2 < _Object$entries.length; _i2++) {\n                    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n                      key = _Object$entries$_i[0],\n                      value = _Object$entries$_i[1];\n                    var property = properties.get(key);\n                    if (property === undefined) {\n                      property = [];\n                      properties.set(key, property);\n                    } else if (!mergeSubDicts || !(value instanceof Dict)) {\n                      continue;\n                    }\n                    property.push(value);\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n              var _iterator6 = _createForOfIteratorHelper(properties),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var _step6$value = _slicedToArray(_step6.value, 2),\n                    name = _step6$value[0],\n                    values = _step6$value[1];\n                  if (values.length === 1 || !(values[0] instanceof Dict)) {\n                    mergedDict._map[name] = values[0];\n                    continue;\n                  }\n                  var subDict = new Dict(xref);\n                  var _iterator7 = _createForOfIteratorHelper(values),\n                    _step7;\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var _dict = _step7.value;\n                      for (var _i3 = 0, _Object$entries2 = Object.entries(_dict._map); _i3 < _Object$entries2.length; _i3++) {\n                        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n                          _key = _Object$entries2$_i[0],\n                          _value = _Object$entries2$_i[1];\n                        if (subDict._map[_key] === undefined) {\n                          subDict._map[_key] = _value;\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                  if (subDict.size > 0) {\n                    mergedDict._map[name] = subDict;\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              properties.clear();\n              return mergedDict.size > 0 ? mergedDict : Dict.empty;\n            }\n          }, {\n            key: \"empty\",\n            get: function get() {\n              var emptyDict = new Dict(null);\n              emptyDict.set = function (key, value) {\n                (0, _util.unreachable)(\"Should not call `set` on the empty dictionary.\");\n              };\n              return (0, _util.shadow)(this, \"empty\", emptyDict);\n            }\n          }]);\n          return Dict;\n        }();\n        exports.Dict = Dict;\n        var Ref = function RefClosure() {\n          var refCache = Object.create(null);\n          var Ref = /*#__PURE__*/function () {\n            function Ref(num, gen) {\n              _classCallCheck(this, Ref);\n              this.num = num;\n              this.gen = gen;\n            }\n            _createClass(Ref, [{\n              key: \"toString\",\n              value: function toString() {\n                if (this.gen === 0) {\n                  return \"\".concat(this.num, \"R\");\n                }\n                return \"\".concat(this.num, \"R\").concat(this.gen);\n              }\n            }], [{\n              key: \"get\",\n              value: function get(num, gen) {\n                var key = gen === 0 ? \"\".concat(num, \"R\") : \"\".concat(num, \"R\").concat(gen);\n                return refCache[key] || (refCache[key] = new Ref(num, gen));\n              }\n            }, {\n              key: \"_clearCache\",\n              value: function _clearCache() {\n                refCache = Object.create(null);\n              }\n            }]);\n            return Ref;\n          }();\n          return Ref;\n        }();\n        exports.Ref = Ref;\n        var RefSet = /*#__PURE__*/function () {\n          function RefSet() {\n            var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            _classCallCheck(this, RefSet);\n            this._set = new Set(parent && parent._set);\n          }\n          _createClass(RefSet, [{\n            key: \"has\",\n            value: function has(ref) {\n              return this._set.has(ref.toString());\n            }\n          }, {\n            key: \"put\",\n            value: function put(ref) {\n              this._set.add(ref.toString());\n            }\n          }, {\n            key: \"remove\",\n            value: function remove(ref) {\n              this._set.delete(ref.toString());\n            }\n          }, {\n            key: Symbol.iterator,\n            value: function value() {\n              return this._set.values();\n            }\n          }, {\n            key: \"clear\",\n            value: function clear() {\n              this._set.clear();\n            }\n          }]);\n          return RefSet;\n        }();\n        exports.RefSet = RefSet;\n        var RefSetCache = /*#__PURE__*/function () {\n          function RefSetCache() {\n            _classCallCheck(this, RefSetCache);\n            this._map = new Map();\n          }\n          _createClass(RefSetCache, [{\n            key: \"get\",\n            value: function get(ref) {\n              return this._map.get(ref.toString());\n            }\n          }, {\n            key: \"has\",\n            value: function has(ref) {\n              return this._map.has(ref.toString());\n            }\n          }, {\n            key: \"put\",\n            value: function put(ref, obj) {\n              this._map.set(ref.toString(), obj);\n            }\n          }, {\n            key: \"putAlias\",\n            value: function putAlias(ref, aliasRef) {\n              this._map.set(ref.toString(), this.get(aliasRef));\n            }\n          }, {\n            key: Symbol.iterator,\n            value: function value() {\n              return this._map.values();\n            }\n          }, {\n            key: \"clear\",\n            value: function clear() {\n              this._map.clear();\n            }\n          }, {\n            key: \"size\",\n            get: function get() {\n              return this._map.size;\n            }\n          }]);\n          return RefSetCache;\n        }();\n        exports.RefSetCache = RefSetCache;\n        function isName(v, name) {\n          return v instanceof Name && (name === undefined || v.name === name);\n        }\n        function isCmd(v, cmd) {\n          return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n        }\n        function isDict(v, type) {\n          return v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type));\n        }\n        function isRefsEqual(v1, v2) {\n          return v1.num === v2.num && v1.gen === v2.gen;\n        }\n        function clearPrimitiveCaches() {\n          Cmd._clearCache();\n          Name._clearCache();\n          Ref._clearCache();\n        }\n\n        /***/\n      }, /* 6 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XRefParseException = exports.XRefEntryException = exports.ParserEOFException = exports.MissingDataException = exports.DocStats = void 0;\n        exports.collectActions = collectActions;\n        exports.encodeToXmlString = encodeToXmlString;\n        exports.escapePDFName = escapePDFName;\n        exports.getArrayLookupTableFactory = getArrayLookupTableFactory;\n        exports.getInheritableProperty = getInheritableProperty;\n        exports.getLookupTableFactory = getLookupTableFactory;\n        exports.getNewAnnotationsMap = getNewAnnotationsMap;\n        exports.isWhiteSpace = isWhiteSpace;\n        exports.log2 = log2;\n        exports.numberToString = numberToString;\n        exports.parseXFAPath = parseXFAPath;\n        exports.readInt8 = readInt8;\n        exports.readUint16 = readUint16;\n        exports.readUint32 = readUint32;\n        exports.recoverJsURL = recoverJsURL;\n        exports.toRomanNumerals = toRomanNumerals;\n        exports.validateCSSFont = validateCSSFont;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _base_stream = __w_pdfjs_require__(7);\n        function getLookupTableFactory(initializer) {\n          var lookup;\n          return function () {\n            if (initializer) {\n              lookup = Object.create(null);\n              initializer(lookup);\n              initializer = null;\n            }\n            return lookup;\n          };\n        }\n        function getArrayLookupTableFactory(initializer) {\n          var lookup;\n          return function () {\n            if (initializer) {\n              var arr = initializer();\n              initializer = null;\n              lookup = Object.create(null);\n              for (var i = 0, ii = arr.length; i < ii; i += 2) {\n                lookup[arr[i]] = arr[i + 1];\n              }\n              arr = null;\n            }\n            return lookup;\n          };\n        }\n        var MissingDataException = /*#__PURE__*/function (_util$BaseException) {\n          _inherits(MissingDataException, _util$BaseException);\n          function MissingDataException(begin, end) {\n            var _this4;\n            _classCallCheck(this, MissingDataException);\n            _this4 = _possibleConstructorReturn(this, _getPrototypeOf(MissingDataException).call(this, \"Missing data [\".concat(begin, \", \").concat(end, \")\"), \"MissingDataException\"));\n            _this4.begin = begin;\n            _this4.end = end;\n            return _this4;\n          }\n          return MissingDataException;\n        }(_util.BaseException);\n        exports.MissingDataException = MissingDataException;\n        var ParserEOFException = /*#__PURE__*/function (_util$BaseException2) {\n          _inherits(ParserEOFException, _util$BaseException2);\n          function ParserEOFException(msg) {\n            _classCallCheck(this, ParserEOFException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ParserEOFException).call(this, msg, \"ParserEOFException\"));\n          }\n          return ParserEOFException;\n        }(_util.BaseException);\n        exports.ParserEOFException = ParserEOFException;\n        var XRefEntryException = /*#__PURE__*/function (_util$BaseException3) {\n          _inherits(XRefEntryException, _util$BaseException3);\n          function XRefEntryException(msg) {\n            _classCallCheck(this, XRefEntryException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(XRefEntryException).call(this, msg, \"XRefEntryException\"));\n          }\n          return XRefEntryException;\n        }(_util.BaseException);\n        exports.XRefEntryException = XRefEntryException;\n        var XRefParseException = /*#__PURE__*/function (_util$BaseException4) {\n          _inherits(XRefParseException, _util$BaseException4);\n          function XRefParseException(msg) {\n            _classCallCheck(this, XRefParseException);\n            return _possibleConstructorReturn(this, _getPrototypeOf(XRefParseException).call(this, msg, \"XRefParseException\"));\n          }\n          return XRefParseException;\n        }(_util.BaseException);\n        exports.XRefParseException = XRefParseException;\n        var DocStats = /*#__PURE__*/function () {\n          function DocStats(handler) {\n            _classCallCheck(this, DocStats);\n            this._handler = handler;\n            this._streamTypes = new Set();\n            this._fontTypes = new Set();\n          }\n          _createClass(DocStats, [{\n            key: \"_send\",\n            value: function _send() {\n              var streamTypes = Object.create(null),\n                fontTypes = Object.create(null);\n              var _iterator8 = _createForOfIteratorHelper(this._streamTypes),\n                _step8;\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var type = _step8.value;\n                  streamTypes[type] = true;\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              var _iterator9 = _createForOfIteratorHelper(this._fontTypes),\n                _step9;\n              try {\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  var _type = _step9.value;\n                  fontTypes[_type] = true;\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n              this._handler.send(\"DocStats\", {\n                streamTypes: streamTypes,\n                fontTypes: fontTypes\n              });\n            }\n          }, {\n            key: \"addStreamType\",\n            value: function addStreamType(type) {\n              if (this._streamTypes.has(type)) {\n                return;\n              }\n              this._streamTypes.add(type);\n              this._send();\n            }\n          }, {\n            key: \"addFontType\",\n            value: function addFontType(type) {\n              if (this._fontTypes.has(type)) {\n                return;\n              }\n              this._fontTypes.add(type);\n              this._send();\n            }\n          }]);\n          return DocStats;\n        }();\n        exports.DocStats = DocStats;\n        function getInheritableProperty(_ref11) {\n          var dict = _ref11.dict,\n            key = _ref11.key,\n            _ref11$getArray = _ref11.getArray,\n            getArray = _ref11$getArray === void 0 ? false : _ref11$getArray,\n            _ref11$stopWhenFound = _ref11.stopWhenFound,\n            stopWhenFound = _ref11$stopWhenFound === void 0 ? true : _ref11$stopWhenFound;\n          var values;\n          var visited = new _primitives.RefSet();\n          while (dict instanceof _primitives.Dict && !(dict.objId && visited.has(dict.objId))) {\n            if (dict.objId) {\n              visited.put(dict.objId);\n            }\n            var value = getArray ? dict.getArray(key) : dict.get(key);\n            if (value !== undefined) {\n              if (stopWhenFound) {\n                return value;\n              }\n              if (!values) {\n                values = [];\n              }\n              values.push(value);\n            }\n            dict = dict.get(\"Parent\");\n          }\n          return values;\n        }\n        var ROMAN_NUMBER_MAP = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\", \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\n        function toRomanNumerals(number) {\n          var lowerCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          (0, _util.assert)(Number.isInteger(number) && number > 0, \"The number should be a positive integer.\");\n          var romanBuf = [];\n          var pos;\n          while (number >= 1000) {\n            number -= 1000;\n            romanBuf.push(\"M\");\n          }\n          pos = number / 100 | 0;\n          number %= 100;\n          romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n          pos = number / 10 | 0;\n          number %= 10;\n          romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n          romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n          var romanStr = romanBuf.join(\"\");\n          return lowerCase ? romanStr.toLowerCase() : romanStr;\n        }\n        function log2(x) {\n          if (x <= 0) {\n            return 0;\n          }\n          return Math.ceil(Math.log2(x));\n        }\n        function readInt8(data, offset) {\n          return data[offset] << 24 >> 24;\n        }\n        function readUint16(data, offset) {\n          return data[offset] << 8 | data[offset + 1];\n        }\n        function readUint32(data, offset) {\n          return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n        }\n        function isWhiteSpace(ch) {\n          return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n        }\n        function parseXFAPath(path) {\n          var positionPattern = /(.+)\\[(\\d+)\\]$/;\n          return path.split(\".\").map(function (component) {\n            var m = component.match(positionPattern);\n            if (m) {\n              return {\n                name: m[1],\n                pos: parseInt(m[2], 10)\n              };\n            }\n            return {\n              name: component,\n              pos: 0\n            };\n          });\n        }\n        function escapePDFName(str) {\n          var buffer = [];\n          var start = 0;\n          for (var i = 0, ii = str.length; i < ii; i++) {\n            var char = str.charCodeAt(i);\n            if (char < 0x21 || char > 0x7e || char === 0x23 || char === 0x28 || char === 0x29 || char === 0x3c || char === 0x3e || char === 0x5b || char === 0x5d || char === 0x7b || char === 0x7d || char === 0x2f || char === 0x25) {\n              if (start < i) {\n                buffer.push(str.substring(start, i));\n              }\n              buffer.push(\"#\".concat(char.toString(16)));\n              start = i + 1;\n            }\n          }\n          if (buffer.length === 0) {\n            return str;\n          }\n          if (start < str.length) {\n            buffer.push(str.substring(start, str.length));\n          }\n          return buffer.join(\"\");\n        }\n        function _collectJS(entry, xref, list, parents) {\n          if (!entry) {\n            return;\n          }\n          var parent = null;\n          if (entry instanceof _primitives.Ref) {\n            if (parents.has(entry)) {\n              return;\n            }\n            parent = entry;\n            parents.put(parent);\n            entry = xref.fetch(entry);\n          }\n          if (Array.isArray(entry)) {\n            var _iterator10 = _createForOfIteratorHelper(entry),\n              _step10;\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var element = _step10.value;\n                _collectJS(element, xref, list, parents);\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          } else if (entry instanceof _primitives.Dict) {\n            if ((0, _primitives.isName)(entry.get(\"S\"), \"JavaScript\")) {\n              var js = entry.get(\"JS\");\n              var code;\n              if (js instanceof _base_stream.BaseStream) {\n                code = js.getString();\n              } else if (typeof js === \"string\") {\n                code = js;\n              }\n              code = code && (0, _util.stringToPDFString)(code).replace(/\\u0000/g, \"\");\n              if (code) {\n                list.push(code);\n              }\n            }\n            _collectJS(entry.getRaw(\"Next\"), xref, list, parents);\n          }\n          if (parent) {\n            parents.remove(parent);\n          }\n        }\n        function collectActions(xref, dict, eventType) {\n          var actions = Object.create(null);\n          var additionalActionsDicts = getInheritableProperty({\n            dict: dict,\n            key: \"AA\",\n            stopWhenFound: false\n          });\n          if (additionalActionsDicts) {\n            for (var i = additionalActionsDicts.length - 1; i >= 0; i--) {\n              var additionalActions = additionalActionsDicts[i];\n              if (!(additionalActions instanceof _primitives.Dict)) {\n                continue;\n              }\n              var _iterator11 = _createForOfIteratorHelper(additionalActions.getKeys()),\n                _step11;\n              try {\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  var key = _step11.value;\n                  var action = eventType[key];\n                  if (!action) {\n                    continue;\n                  }\n                  var actionDict = additionalActions.getRaw(key);\n                  var parents = new _primitives.RefSet();\n                  var list = [];\n                  _collectJS(actionDict, xref, list, parents);\n                  if (list.length > 0) {\n                    actions[action] = list;\n                  }\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n            }\n          }\n          if (dict.has(\"A\")) {\n            var _actionDict = dict.get(\"A\");\n            var _parents = new _primitives.RefSet();\n            var _list = [];\n            _collectJS(_actionDict, xref, _list, _parents);\n            if (_list.length > 0) {\n              actions.Action = _list;\n            }\n          }\n          return (0, _util.objectSize)(actions) > 0 ? actions : null;\n        }\n        var XMLEntities = {\n          0x3c: \"&lt;\",\n          0x3e: \"&gt;\",\n          0x26: \"&amp;\",\n          0x22: \"&quot;\",\n          0x27: \"&apos;\"\n        };\n        function encodeToXmlString(str) {\n          var buffer = [];\n          var start = 0;\n          for (var i = 0, ii = str.length; i < ii; i++) {\n            var char = str.codePointAt(i);\n            if (0x20 <= char && char <= 0x7e) {\n              var entity = XMLEntities[char];\n              if (entity) {\n                if (start < i) {\n                  buffer.push(str.substring(start, i));\n                }\n                buffer.push(entity);\n                start = i + 1;\n              }\n            } else {\n              if (start < i) {\n                buffer.push(str.substring(start, i));\n              }\n              buffer.push(\"&#x\".concat(char.toString(16).toUpperCase(), \";\"));\n              if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n                i++;\n              }\n              start = i + 1;\n            }\n          }\n          if (buffer.length === 0) {\n            return str;\n          }\n          if (start < str.length) {\n            buffer.push(str.substring(start, str.length));\n          }\n          return buffer.join(\"\");\n        }\n        function validateCSSFont(cssFontInfo) {\n          var DEFAULT_CSS_FONT_OBLIQUE = \"14\";\n          var DEFAULT_CSS_FONT_WEIGHT = \"400\";\n          var CSS_FONT_WEIGHT_VALUES = new Set([\"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\", \"1000\", \"normal\", \"bold\", \"bolder\", \"lighter\"]);\n          var fontFamily = cssFontInfo.fontFamily,\n            fontWeight = cssFontInfo.fontWeight,\n            italicAngle = cssFontInfo.italicAngle;\n          if (/^\".*\"$/.test(fontFamily)) {\n            if (/[^\\\\]\"/.test(fontFamily.slice(1, fontFamily.length - 1))) {\n              (0, _util.warn)(\"XFA - FontFamily contains some unescaped \\\": \".concat(fontFamily, \".\"));\n              return false;\n            }\n          } else if (/^'.*'$/.test(fontFamily)) {\n            if (/[^\\\\]'/.test(fontFamily.slice(1, fontFamily.length - 1))) {\n              (0, _util.warn)(\"XFA - FontFamily contains some unescaped ': \".concat(fontFamily, \".\"));\n              return false;\n            }\n          } else {\n            var _iterator12 = _createForOfIteratorHelper(fontFamily.split(/[ \\t]+/)),\n              _step12;\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                var ident = _step12.value;\n                if (/^(\\d|(-(\\d|-)))/.test(ident) || !/^[\\w-\\\\]+$/.test(ident)) {\n                  (0, _util.warn)(\"XFA - FontFamily contains some invalid <custom-ident>: \".concat(fontFamily, \".\"));\n                  return false;\n                }\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n          }\n          var weight = fontWeight ? fontWeight.toString() : \"\";\n          cssFontInfo.fontWeight = CSS_FONT_WEIGHT_VALUES.has(weight) ? weight : DEFAULT_CSS_FONT_WEIGHT;\n          var angle = parseFloat(italicAngle);\n          cssFontInfo.italicAngle = isNaN(angle) || angle < -90 || angle > 90 ? DEFAULT_CSS_FONT_OBLIQUE : italicAngle.toString();\n          return true;\n        }\n        function recoverJsURL(str) {\n          var URL_OPEN_METHODS = [\"app.launchURL\", \"window.open\", \"xfa.host.gotoURL\"];\n          var regex = new RegExp(\"^\\\\s*(\" + URL_OPEN_METHODS.join(\"|\").split(\".\").join(\"\\\\.\") + \")\\\\((?:'|\\\")([^'\\\"]*)(?:'|\\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))\", \"i\");\n          var jsUrl = regex.exec(str);\n          if (jsUrl && jsUrl[2]) {\n            var url = jsUrl[2];\n            var newWindow = false;\n            if (jsUrl[3] === \"true\" && jsUrl[1] === \"app.launchURL\") {\n              newWindow = true;\n            }\n            return {\n              url: url,\n              newWindow: newWindow\n            };\n          }\n          return null;\n        }\n        function numberToString(value) {\n          if (Number.isInteger(value)) {\n            return value.toString();\n          }\n          var roundedValue = Math.round(value * 100);\n          if (roundedValue % 100 === 0) {\n            return (roundedValue / 100).toString();\n          }\n          if (roundedValue % 10 === 0) {\n            return value.toFixed(1);\n          }\n          return value.toFixed(2);\n        }\n        function getNewAnnotationsMap(annotationStorage) {\n          if (!annotationStorage) {\n            return null;\n          }\n          var newAnnotationsByPage = new Map();\n          var _iterator13 = _createForOfIteratorHelper(annotationStorage),\n            _step13;\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var _step13$value = _slicedToArray(_step13.value, 2),\n                key = _step13$value[0],\n                value = _step13$value[1];\n              if (!key.startsWith(_util.AnnotationEditorPrefix)) {\n                continue;\n              }\n              var annotations = newAnnotationsByPage.get(value.pageIndex);\n              if (!annotations) {\n                annotations = [];\n                newAnnotationsByPage.set(value.pageIndex, annotations);\n              }\n              annotations.push(value);\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n          return newAnnotationsByPage.size > 0 ? newAnnotationsByPage : null;\n        }\n\n        /***/\n      }, /* 7 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseStream = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var BaseStream = /*#__PURE__*/function () {\n          function BaseStream() {\n            _classCallCheck(this, BaseStream);\n            if (this.constructor === BaseStream) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStream.\");\n            }\n          }\n          _createClass(BaseStream, [{\n            key: \"getByte\",\n            value: function getByte() {\n              (0, _util.unreachable)(\"Abstract method `getByte` called\");\n            }\n          }, {\n            key: \"getBytes\",\n            value: function getBytes(length) {\n              (0, _util.unreachable)(\"Abstract method `getBytes` called\");\n            }\n          }, {\n            key: \"peekByte\",\n            value: function peekByte() {\n              var peekedByte = this.getByte();\n              if (peekedByte !== -1) {\n                this.pos--;\n              }\n              return peekedByte;\n            }\n          }, {\n            key: \"peekBytes\",\n            value: function peekBytes(length) {\n              var bytes = this.getBytes(length);\n              this.pos -= bytes.length;\n              return bytes;\n            }\n          }, {\n            key: \"getUint16\",\n            value: function getUint16() {\n              var b0 = this.getByte();\n              var b1 = this.getByte();\n              if (b0 === -1 || b1 === -1) {\n                return -1;\n              }\n              return (b0 << 8) + b1;\n            }\n          }, {\n            key: \"getInt32\",\n            value: function getInt32() {\n              var b0 = this.getByte();\n              var b1 = this.getByte();\n              var b2 = this.getByte();\n              var b3 = this.getByte();\n              return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n            }\n          }, {\n            key: \"getByteRange\",\n            value: function getByteRange(begin, end) {\n              (0, _util.unreachable)(\"Abstract method `getByteRange` called\");\n            }\n          }, {\n            key: \"getString\",\n            value: function getString(length) {\n              return (0, _util.bytesToString)(this.getBytes(length));\n            }\n          }, {\n            key: \"skip\",\n            value: function skip(n) {\n              this.pos += n || 1;\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              (0, _util.unreachable)(\"Abstract method `reset` called\");\n            }\n          }, {\n            key: \"moveStart\",\n            value: function moveStart() {\n              (0, _util.unreachable)(\"Abstract method `moveStart` called\");\n            }\n          }, {\n            key: \"makeSubStream\",\n            value: function makeSubStream(start, length) {\n              var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              (0, _util.unreachable)(\"Abstract method `makeSubStream` called\");\n            }\n          }, {\n            key: \"getBaseStreams\",\n            value: function getBaseStreams() {\n              return null;\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              (0, _util.unreachable)(\"Abstract getter `length` accessed\");\n            }\n          }, {\n            key: \"isEmpty\",\n            get: function get() {\n              (0, _util.unreachable)(\"Abstract getter `isEmpty` accessed\");\n            }\n          }, {\n            key: \"isDataLoaded\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"isDataLoaded\", true);\n            }\n          }]);\n          return BaseStream;\n        }();\n        exports.BaseStream = BaseStream;\n\n        /***/\n      }, /* 8 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NetworkPdfManager = exports.LocalPdfManager = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _chunked_stream = __w_pdfjs_require__(9);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _document = __w_pdfjs_require__(11);\n        var _stream = __w_pdfjs_require__(10);\n        function parseDocBaseUrl(url) {\n          if (url) {\n            var absoluteUrl = (0, _util.createValidAbsoluteUrl)(url);\n            if (absoluteUrl) {\n              return absoluteUrl.href;\n            }\n            (0, _util.warn)(\"Invalid absolute docBaseUrl: \\\"\".concat(url, \"\\\".\"));\n          }\n          return null;\n        }\n        var BasePdfManager = /*#__PURE__*/function () {\n          function BasePdfManager() {\n            _classCallCheck(this, BasePdfManager);\n            if (this.constructor === BasePdfManager) {\n              (0, _util.unreachable)(\"Cannot initialize BasePdfManager.\");\n            }\n          }\n          _createClass(BasePdfManager, [{\n            key: \"onLoadedStream\",\n            value: function onLoadedStream() {\n              (0, _util.unreachable)(\"Abstract method `onLoadedStream` called\");\n            }\n          }, {\n            key: \"ensureDoc\",\n            value: function ensureDoc(prop, args) {\n              return this.ensure(this.pdfDocument, prop, args);\n            }\n          }, {\n            key: \"ensureXRef\",\n            value: function ensureXRef(prop, args) {\n              return this.ensure(this.pdfDocument.xref, prop, args);\n            }\n          }, {\n            key: \"ensureCatalog\",\n            value: function ensureCatalog(prop, args) {\n              return this.ensure(this.pdfDocument.catalog, prop, args);\n            }\n          }, {\n            key: \"getPage\",\n            value: function getPage(pageIndex) {\n              return this.pdfDocument.getPage(pageIndex);\n            }\n          }, {\n            key: \"fontFallback\",\n            value: function fontFallback(id, handler) {\n              return this.pdfDocument.fontFallback(id, handler);\n            }\n          }, {\n            key: \"loadXfaFonts\",\n            value: function loadXfaFonts(handler, task) {\n              return this.pdfDocument.loadXfaFonts(handler, task);\n            }\n          }, {\n            key: \"loadXfaImages\",\n            value: function loadXfaImages() {\n              return this.pdfDocument.loadXfaImages();\n            }\n          }, {\n            key: \"serializeXfaData\",\n            value: function serializeXfaData(annotationStorage) {\n              return this.pdfDocument.serializeXfaData(annotationStorage);\n            }\n          }, {\n            key: \"cleanup\",\n            value: function cleanup() {\n              var manuallyTriggered = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              return this.pdfDocument.cleanup(manuallyTriggered);\n            }\n          }, {\n            key: \"ensure\",\n            value: function () {\n              var _ensure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(obj, prop, args) {\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        (0, _util.unreachable)(\"Abstract method `ensure` called\");\n                      case 1:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n              function ensure(_x5, _x6, _x7) {\n                return _ensure.apply(this, arguments);\n              }\n              return ensure;\n            }()\n          }, {\n            key: \"requestRange\",\n            value: function requestRange(begin, end) {\n              (0, _util.unreachable)(\"Abstract method `requestRange` called\");\n            }\n          }, {\n            key: \"requestLoadedStream\",\n            value: function requestLoadedStream() {\n              (0, _util.unreachable)(\"Abstract method `requestLoadedStream` called\");\n            }\n          }, {\n            key: \"sendProgressiveData\",\n            value: function sendProgressiveData(chunk) {\n              (0, _util.unreachable)(\"Abstract method `sendProgressiveData` called\");\n            }\n          }, {\n            key: \"updatePassword\",\n            value: function updatePassword(password) {\n              this._password = password;\n            }\n          }, {\n            key: \"terminate\",\n            value: function terminate(reason) {\n              (0, _util.unreachable)(\"Abstract method `terminate` called\");\n            }\n          }, {\n            key: \"docId\",\n            get: function get() {\n              return this._docId;\n            }\n          }, {\n            key: \"password\",\n            get: function get() {\n              return this._password;\n            }\n          }, {\n            key: \"docBaseUrl\",\n            get: function get() {\n              var catalog = this.pdfDocument.catalog;\n              return (0, _util.shadow)(this, \"docBaseUrl\", catalog.baseUrl || this._docBaseUrl);\n            }\n          }]);\n          return BasePdfManager;\n        }();\n        var LocalPdfManager = /*#__PURE__*/function (_BasePdfManager) {\n          _inherits(LocalPdfManager, _BasePdfManager);\n          function LocalPdfManager(docId, data, password, msgHandler, evaluatorOptions, enableXfa, docBaseUrl) {\n            var _this5;\n            _classCallCheck(this, LocalPdfManager);\n            _this5 = _possibleConstructorReturn(this, _getPrototypeOf(LocalPdfManager).call(this));\n            _this5._docId = docId;\n            _this5._password = password;\n            _this5._docBaseUrl = parseDocBaseUrl(docBaseUrl);\n            _this5.msgHandler = msgHandler;\n            _this5.evaluatorOptions = evaluatorOptions;\n            _this5.enableXfa = enableXfa;\n            var stream = new _stream.Stream(data);\n            _this5.pdfDocument = new _document.PDFDocument(_assertThisInitialized(_assertThisInitialized(_this5)), stream);\n            _this5._loadedStreamPromise = Promise.resolve(stream);\n            return _this5;\n          }\n          _createClass(LocalPdfManager, [{\n            key: \"ensure\",\n            value: function () {\n              var _ensure2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(obj, prop, args) {\n                var value;\n                return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        value = obj[prop];\n                        if (!(typeof value === \"function\")) {\n                          _context4.next = 3;\n                          break;\n                        }\n                        return _context4.abrupt(\"return\", value.apply(obj, args));\n                      case 3:\n                        return _context4.abrupt(\"return\", value);\n                      case 4:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n              function ensure(_x8, _x9, _x10) {\n                return _ensure2.apply(this, arguments);\n              }\n              return ensure;\n            }()\n          }, {\n            key: \"requestRange\",\n            value: function requestRange(begin, end) {\n              return Promise.resolve();\n            }\n          }, {\n            key: \"requestLoadedStream\",\n            value: function requestLoadedStream() {}\n          }, {\n            key: \"onLoadedStream\",\n            value: function onLoadedStream() {\n              return this._loadedStreamPromise;\n            }\n          }, {\n            key: \"terminate\",\n            value: function terminate(reason) {}\n          }]);\n          return LocalPdfManager;\n        }(BasePdfManager);\n        exports.LocalPdfManager = LocalPdfManager;\n        var NetworkPdfManager = /*#__PURE__*/function (_BasePdfManager2) {\n          _inherits(NetworkPdfManager, _BasePdfManager2);\n          function NetworkPdfManager(docId, pdfNetworkStream, args, evaluatorOptions, enableXfa, docBaseUrl) {\n            var _this6;\n            _classCallCheck(this, NetworkPdfManager);\n            _this6 = _possibleConstructorReturn(this, _getPrototypeOf(NetworkPdfManager).call(this));\n            _this6._docId = docId;\n            _this6._password = args.password;\n            _this6._docBaseUrl = parseDocBaseUrl(docBaseUrl);\n            _this6.msgHandler = args.msgHandler;\n            _this6.evaluatorOptions = evaluatorOptions;\n            _this6.enableXfa = enableXfa;\n            _this6.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {\n              msgHandler: args.msgHandler,\n              length: args.length,\n              disableAutoFetch: args.disableAutoFetch,\n              rangeChunkSize: args.rangeChunkSize\n            });\n            _this6.pdfDocument = new _document.PDFDocument(_assertThisInitialized(_assertThisInitialized(_this6)), _this6.streamManager.getStream());\n            return _this6;\n          }\n          _createClass(NetworkPdfManager, [{\n            key: \"ensure\",\n            value: function () {\n              var _ensure3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(obj, prop, args) {\n                var value;\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.prev = 0;\n                        value = obj[prop];\n                        if (!(typeof value === \"function\")) {\n                          _context5.next = 4;\n                          break;\n                        }\n                        return _context5.abrupt(\"return\", value.apply(obj, args));\n                      case 4:\n                        return _context5.abrupt(\"return\", value);\n                      case 7:\n                        _context5.prev = 7;\n                        _context5.t0 = _context5[\"catch\"](0);\n                        if (_context5.t0 instanceof _core_utils.MissingDataException) {\n                          _context5.next = 11;\n                          break;\n                        }\n                        throw _context5.t0;\n                      case 11:\n                        _context5.next = 13;\n                        return this.requestRange(_context5.t0.begin, _context5.t0.end);\n                      case 13:\n                        return _context5.abrupt(\"return\", this.ensure(obj, prop, args));\n                      case 14:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5, this, [[0, 7]]);\n              }));\n              function ensure(_x11, _x12, _x13) {\n                return _ensure3.apply(this, arguments);\n              }\n              return ensure;\n            }()\n          }, {\n            key: \"requestRange\",\n            value: function requestRange(begin, end) {\n              return this.streamManager.requestRange(begin, end);\n            }\n          }, {\n            key: \"requestLoadedStream\",\n            value: function requestLoadedStream() {\n              this.streamManager.requestAllChunks();\n            }\n          }, {\n            key: \"sendProgressiveData\",\n            value: function sendProgressiveData(chunk) {\n              this.streamManager.onReceiveData({\n                chunk: chunk\n              });\n            }\n          }, {\n            key: \"onLoadedStream\",\n            value: function onLoadedStream() {\n              return this.streamManager.onLoadedStream();\n            }\n          }, {\n            key: \"terminate\",\n            value: function terminate(reason) {\n              this.streamManager.abort(reason);\n            }\n          }]);\n          return NetworkPdfManager;\n        }(BasePdfManager);\n        exports.NetworkPdfManager = NetworkPdfManager;\n\n        /***/\n      }, /* 9 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ChunkedStreamManager = exports.ChunkedStream = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _stream = __w_pdfjs_require__(10);\n        var ChunkedStream = /*#__PURE__*/function (_stream$Stream) {\n          _inherits(ChunkedStream, _stream$Stream);\n          function ChunkedStream(length, chunkSize, manager) {\n            var _this7;\n            _classCallCheck(this, ChunkedStream);\n            _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ChunkedStream).call(this, new Uint8Array(length), 0, length, null));\n            _this7.chunkSize = chunkSize;\n            _this7._loadedChunks = new Set();\n            _this7.numChunks = Math.ceil(length / chunkSize);\n            _this7.manager = manager;\n            _this7.progressiveDataLength = 0;\n            _this7.lastSuccessfulEnsureByteChunk = -1;\n            return _this7;\n          }\n          _createClass(ChunkedStream, [{\n            key: \"getMissingChunks\",\n            value: function getMissingChunks() {\n              var chunks = [];\n              for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n                if (!this._loadedChunks.has(chunk)) {\n                  chunks.push(chunk);\n                }\n              }\n              return chunks;\n            }\n          }, {\n            key: \"onReceiveData\",\n            value: function onReceiveData(begin, chunk) {\n              var chunkSize = this.chunkSize;\n              if (begin % chunkSize !== 0) {\n                throw new Error(\"Bad begin offset: \".concat(begin));\n              }\n              var end = begin + chunk.byteLength;\n              if (end % chunkSize !== 0 && end !== this.bytes.length) {\n                throw new Error(\"Bad end offset: \".concat(end));\n              }\n              this.bytes.set(new Uint8Array(chunk), begin);\n              var beginChunk = Math.floor(begin / chunkSize);\n              var endChunk = Math.floor((end - 1) / chunkSize) + 1;\n              for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n                this._loadedChunks.add(curChunk);\n              }\n            }\n          }, {\n            key: \"onReceiveProgressiveData\",\n            value: function onReceiveProgressiveData(data) {\n              var position = this.progressiveDataLength;\n              var beginChunk = Math.floor(position / this.chunkSize);\n              this.bytes.set(new Uint8Array(data), position);\n              position += data.byteLength;\n              this.progressiveDataLength = position;\n              var endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);\n              for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n                this._loadedChunks.add(curChunk);\n              }\n            }\n          }, {\n            key: \"ensureByte\",\n            value: function ensureByte(pos) {\n              if (pos < this.progressiveDataLength) {\n                return;\n              }\n              var chunk = Math.floor(pos / this.chunkSize);\n              if (chunk > this.numChunks) {\n                return;\n              }\n              if (chunk === this.lastSuccessfulEnsureByteChunk) {\n                return;\n              }\n              if (!this._loadedChunks.has(chunk)) {\n                throw new _core_utils.MissingDataException(pos, pos + 1);\n              }\n              this.lastSuccessfulEnsureByteChunk = chunk;\n            }\n          }, {\n            key: \"ensureRange\",\n            value: function ensureRange(begin, end) {\n              if (begin >= end) {\n                return;\n              }\n              if (end <= this.progressiveDataLength) {\n                return;\n              }\n              var beginChunk = Math.floor(begin / this.chunkSize);\n              if (beginChunk > this.numChunks) {\n                return;\n              }\n              var endChunk = Math.min(Math.floor((end - 1) / this.chunkSize) + 1, this.numChunks);\n              for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\n                if (!this._loadedChunks.has(chunk)) {\n                  throw new _core_utils.MissingDataException(begin, end);\n                }\n              }\n            }\n          }, {\n            key: \"nextEmptyChunk\",\n            value: function nextEmptyChunk(beginChunk) {\n              var numChunks = this.numChunks;\n              for (var i = 0; i < numChunks; ++i) {\n                var chunk = (beginChunk + i) % numChunks;\n                if (!this._loadedChunks.has(chunk)) {\n                  return chunk;\n                }\n              }\n              return null;\n            }\n          }, {\n            key: \"hasChunk\",\n            value: function hasChunk(chunk) {\n              return this._loadedChunks.has(chunk);\n            }\n          }, {\n            key: \"getByte\",\n            value: function getByte() {\n              var pos = this.pos;\n              if (pos >= this.end) {\n                return -1;\n              }\n              if (pos >= this.progressiveDataLength) {\n                this.ensureByte(pos);\n              }\n              return this.bytes[this.pos++];\n            }\n          }, {\n            key: \"getBytes\",\n            value: function getBytes(length) {\n              var bytes = this.bytes;\n              var pos = this.pos;\n              var strEnd = this.end;\n              if (!length) {\n                if (strEnd > this.progressiveDataLength) {\n                  this.ensureRange(pos, strEnd);\n                }\n                return bytes.subarray(pos, strEnd);\n              }\n              var end = pos + length;\n              if (end > strEnd) {\n                end = strEnd;\n              }\n              if (end > this.progressiveDataLength) {\n                this.ensureRange(pos, end);\n              }\n              this.pos = end;\n              return bytes.subarray(pos, end);\n            }\n          }, {\n            key: \"getByteRange\",\n            value: function getByteRange(begin, end) {\n              if (begin < 0) {\n                begin = 0;\n              }\n              if (end > this.end) {\n                end = this.end;\n              }\n              if (end > this.progressiveDataLength) {\n                this.ensureRange(begin, end);\n              }\n              return this.bytes.subarray(begin, end);\n            }\n          }, {\n            key: \"makeSubStream\",\n            value: function makeSubStream(start, length) {\n              var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              if (length) {\n                if (start + length > this.progressiveDataLength) {\n                  this.ensureRange(start, start + length);\n                }\n              } else {\n                if (start >= this.progressiveDataLength) {\n                  this.ensureByte(start);\n                }\n              }\n              function ChunkedStreamSubstream() {}\n              ChunkedStreamSubstream.prototype = Object.create(this);\n              ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n                var chunkSize = this.chunkSize;\n                var beginChunk = Math.floor(this.start / chunkSize);\n                var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n                var missingChunks = [];\n                for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\n                  if (!this._loadedChunks.has(chunk)) {\n                    missingChunks.push(chunk);\n                  }\n                }\n                return missingChunks;\n              };\n              Object.defineProperty(ChunkedStreamSubstream.prototype, \"isDataLoaded\", {\n                get: function get() {\n                  if (this.numChunksLoaded === this.numChunks) {\n                    return true;\n                  }\n                  return this.getMissingChunks().length === 0;\n                },\n                configurable: true\n              });\n              var subStream = new ChunkedStreamSubstream();\n              subStream.pos = subStream.start = start;\n              subStream.end = start + length || this.end;\n              subStream.dict = dict;\n              return subStream;\n            }\n          }, {\n            key: \"getBaseStreams\",\n            value: function getBaseStreams() {\n              return [this];\n            }\n          }, {\n            key: \"numChunksLoaded\",\n            get: function get() {\n              return this._loadedChunks.size;\n            }\n          }, {\n            key: \"isDataLoaded\",\n            get: function get() {\n              return this.numChunksLoaded === this.numChunks;\n            }\n          }]);\n          return ChunkedStream;\n        }(_stream.Stream);\n        exports.ChunkedStream = ChunkedStream;\n        var ChunkedStreamManager = /*#__PURE__*/function () {\n          function ChunkedStreamManager(pdfNetworkStream, args) {\n            _classCallCheck(this, ChunkedStreamManager);\n            this.length = args.length;\n            this.chunkSize = args.rangeChunkSize;\n            this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n            this.pdfNetworkStream = pdfNetworkStream;\n            this.disableAutoFetch = args.disableAutoFetch;\n            this.msgHandler = args.msgHandler;\n            this.currRequestId = 0;\n            this._chunksNeededByRequest = new Map();\n            this._requestsByChunk = new Map();\n            this._promisesByRequest = new Map();\n            this.progressiveDataLength = 0;\n            this.aborted = false;\n            this._loadedStreamCapability = (0, _util.createPromiseCapability)();\n          }\n          _createClass(ChunkedStreamManager, [{\n            key: \"onLoadedStream\",\n            value: function onLoadedStream() {\n              return this._loadedStreamCapability.promise;\n            }\n          }, {\n            key: \"sendRequest\",\n            value: function sendRequest(begin, end) {\n              var _this8 = this;\n              var rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n              if (!rangeReader.isStreamingSupported) {\n                rangeReader.onProgress = this.onProgress.bind(this);\n              }\n              var chunks = [],\n                loaded = 0;\n              return new Promise(function (resolve, reject) {\n                var readChunk = function readChunk(chunk) {\n                  try {\n                    if (!chunk.done) {\n                      var data = chunk.value;\n                      chunks.push(data);\n                      loaded += (0, _util.arrayByteLength)(data);\n                      if (rangeReader.isStreamingSupported) {\n                        _this8.onProgress({\n                          loaded: loaded\n                        });\n                      }\n                      rangeReader.read().then(readChunk, reject);\n                      return;\n                    }\n                    var chunkData = (0, _util.arraysToBytes)(chunks);\n                    chunks = null;\n                    resolve(chunkData);\n                  } catch (e) {\n                    reject(e);\n                  }\n                };\n                rangeReader.read().then(readChunk, reject);\n              }).then(function (data) {\n                if (_this8.aborted) {\n                  return;\n                }\n                _this8.onReceiveData({\n                  chunk: data,\n                  begin: begin\n                });\n              });\n            }\n          }, {\n            key: \"requestAllChunks\",\n            value: function requestAllChunks() {\n              var missingChunks = this.stream.getMissingChunks();\n              this._requestChunks(missingChunks);\n              return this._loadedStreamCapability.promise;\n            }\n          }, {\n            key: \"_requestChunks\",\n            value: function _requestChunks(chunks) {\n              var _this9 = this;\n              var requestId = this.currRequestId++;\n              var chunksNeeded = new Set();\n              this._chunksNeededByRequest.set(requestId, chunksNeeded);\n              var _iterator14 = _createForOfIteratorHelper(chunks),\n                _step14;\n              try {\n                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                  var chunk = _step14.value;\n                  if (!this.stream.hasChunk(chunk)) {\n                    chunksNeeded.add(chunk);\n                  }\n                }\n              } catch (err) {\n                _iterator14.e(err);\n              } finally {\n                _iterator14.f();\n              }\n              if (chunksNeeded.size === 0) {\n                return Promise.resolve();\n              }\n              var capability = (0, _util.createPromiseCapability)();\n              this._promisesByRequest.set(requestId, capability);\n              var chunksToRequest = [];\n              var _iterator15 = _createForOfIteratorHelper(chunksNeeded),\n                _step15;\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var _chunk = _step15.value;\n                  var requestIds = this._requestsByChunk.get(_chunk);\n                  if (!requestIds) {\n                    requestIds = [];\n                    this._requestsByChunk.set(_chunk, requestIds);\n                    chunksToRequest.push(_chunk);\n                  }\n                  requestIds.push(requestId);\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n              if (chunksToRequest.length > 0) {\n                var groupedChunksToRequest = this.groupChunks(chunksToRequest);\n                var _iterator16 = _createForOfIteratorHelper(groupedChunksToRequest),\n                  _step16;\n                try {\n                  for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                    var groupedChunk = _step16.value;\n                    var begin = groupedChunk.beginChunk * this.chunkSize;\n                    var end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n                    this.sendRequest(begin, end).catch(capability.reject);\n                  }\n                } catch (err) {\n                  _iterator16.e(err);\n                } finally {\n                  _iterator16.f();\n                }\n              }\n              return capability.promise.catch(function (reason) {\n                if (_this9.aborted) {\n                  return;\n                }\n                throw reason;\n              });\n            }\n          }, {\n            key: \"getStream\",\n            value: function getStream() {\n              return this.stream;\n            }\n          }, {\n            key: \"requestRange\",\n            value: function requestRange(begin, end) {\n              end = Math.min(end, this.length);\n              var beginChunk = this.getBeginChunk(begin);\n              var endChunk = this.getEndChunk(end);\n              var chunks = [];\n              for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\n                chunks.push(chunk);\n              }\n              return this._requestChunks(chunks);\n            }\n          }, {\n            key: \"requestRanges\",\n            value: function requestRanges() {\n              var ranges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var chunksToRequest = [];\n              var _iterator17 = _createForOfIteratorHelper(ranges),\n                _step17;\n              try {\n                for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n                  var range = _step17.value;\n                  var beginChunk = this.getBeginChunk(range.begin);\n                  var endChunk = this.getEndChunk(range.end);\n                  for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\n                    if (!chunksToRequest.includes(chunk)) {\n                      chunksToRequest.push(chunk);\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator17.e(err);\n              } finally {\n                _iterator17.f();\n              }\n              chunksToRequest.sort(function (a, b) {\n                return a - b;\n              });\n              return this._requestChunks(chunksToRequest);\n            }\n          }, {\n            key: \"groupChunks\",\n            value: function groupChunks(chunks) {\n              var groupedChunks = [];\n              var beginChunk = -1;\n              var prevChunk = -1;\n              for (var i = 0, ii = chunks.length; i < ii; ++i) {\n                var chunk = chunks[i];\n                if (beginChunk < 0) {\n                  beginChunk = chunk;\n                }\n                if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n                  groupedChunks.push({\n                    beginChunk: beginChunk,\n                    endChunk: prevChunk + 1\n                  });\n                  beginChunk = chunk;\n                }\n                if (i + 1 === chunks.length) {\n                  groupedChunks.push({\n                    beginChunk: beginChunk,\n                    endChunk: chunk + 1\n                  });\n                }\n                prevChunk = chunk;\n              }\n              return groupedChunks;\n            }\n          }, {\n            key: \"onProgress\",\n            value: function onProgress(args) {\n              this.msgHandler.send(\"DocProgress\", {\n                loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n                total: this.length\n              });\n            }\n          }, {\n            key: \"onReceiveData\",\n            value: function onReceiveData(args) {\n              var chunk = args.chunk;\n              var isProgressive = args.begin === undefined;\n              var begin = isProgressive ? this.progressiveDataLength : args.begin;\n              var end = begin + chunk.byteLength;\n              var beginChunk = Math.floor(begin / this.chunkSize);\n              var endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);\n              if (isProgressive) {\n                this.stream.onReceiveProgressiveData(chunk);\n                this.progressiveDataLength = end;\n              } else {\n                this.stream.onReceiveData(begin, chunk);\n              }\n              if (this.stream.isDataLoaded) {\n                this._loadedStreamCapability.resolve(this.stream);\n              }\n              var loadedRequests = [];\n              for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n                var requestIds = this._requestsByChunk.get(curChunk);\n                if (!requestIds) {\n                  continue;\n                }\n                this._requestsByChunk.delete(curChunk);\n                var _iterator18 = _createForOfIteratorHelper(requestIds),\n                  _step18;\n                try {\n                  for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n                    var requestId = _step18.value;\n                    var chunksNeeded = this._chunksNeededByRequest.get(requestId);\n                    if (chunksNeeded.has(curChunk)) {\n                      chunksNeeded.delete(curChunk);\n                    }\n                    if (chunksNeeded.size > 0) {\n                      continue;\n                    }\n                    loadedRequests.push(requestId);\n                  }\n                } catch (err) {\n                  _iterator18.e(err);\n                } finally {\n                  _iterator18.f();\n                }\n              }\n              if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {\n                var nextEmptyChunk;\n                if (this.stream.numChunksLoaded === 1) {\n                  var lastChunk = this.stream.numChunks - 1;\n                  if (!this.stream.hasChunk(lastChunk)) {\n                    nextEmptyChunk = lastChunk;\n                  }\n                } else {\n                  nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n                }\n                if (Number.isInteger(nextEmptyChunk)) {\n                  this._requestChunks([nextEmptyChunk]);\n                }\n              }\n              for (var _i4 = 0, _loadedRequests = loadedRequests; _i4 < _loadedRequests.length; _i4++) {\n                var _requestId = _loadedRequests[_i4];\n                var capability = this._promisesByRequest.get(_requestId);\n                this._promisesByRequest.delete(_requestId);\n                capability.resolve();\n              }\n              this.msgHandler.send(\"DocProgress\", {\n                loaded: this.stream.numChunksLoaded * this.chunkSize,\n                total: this.length\n              });\n            }\n          }, {\n            key: \"onError\",\n            value: function onError(err) {\n              this._loadedStreamCapability.reject(err);\n            }\n          }, {\n            key: \"getBeginChunk\",\n            value: function getBeginChunk(begin) {\n              return Math.floor(begin / this.chunkSize);\n            }\n          }, {\n            key: \"getEndChunk\",\n            value: function getEndChunk(end) {\n              return Math.floor((end - 1) / this.chunkSize) + 1;\n            }\n          }, {\n            key: \"abort\",\n            value: function abort(reason) {\n              this.aborted = true;\n              if (this.pdfNetworkStream) {\n                this.pdfNetworkStream.cancelAllRequests(reason);\n              }\n              var _iterator19 = _createForOfIteratorHelper(this._promisesByRequest.values()),\n                _step19;\n              try {\n                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n                  var capability = _step19.value;\n                  capability.reject(reason);\n                }\n              } catch (err) {\n                _iterator19.e(err);\n              } finally {\n                _iterator19.f();\n              }\n            }\n          }]);\n          return ChunkedStreamManager;\n        }();\n        exports.ChunkedStreamManager = ChunkedStreamManager;\n\n        /***/\n      }, /* 10 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StringStream = exports.Stream = exports.NullStream = void 0;\n        var _base_stream = __w_pdfjs_require__(7);\n        var _util = __w_pdfjs_require__(2);\n        var Stream = /*#__PURE__*/function (_base_stream$BaseStre) {\n          _inherits(Stream, _base_stream$BaseStre);\n          function Stream(arrayBuffer, start, length, dict) {\n            var _this10;\n            _classCallCheck(this, Stream);\n            _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Stream).call(this));\n            _this10.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\n            _this10.start = start || 0;\n            _this10.pos = _this10.start;\n            _this10.end = start + length || _this10.bytes.length;\n            _this10.dict = dict;\n            return _this10;\n          }\n          _createClass(Stream, [{\n            key: \"getByte\",\n            value: function getByte() {\n              if (this.pos >= this.end) {\n                return -1;\n              }\n              return this.bytes[this.pos++];\n            }\n          }, {\n            key: \"getBytes\",\n            value: function getBytes(length) {\n              var bytes = this.bytes;\n              var pos = this.pos;\n              var strEnd = this.end;\n              if (!length) {\n                return bytes.subarray(pos, strEnd);\n              }\n              var end = pos + length;\n              if (end > strEnd) {\n                end = strEnd;\n              }\n              this.pos = end;\n              return bytes.subarray(pos, end);\n            }\n          }, {\n            key: \"getByteRange\",\n            value: function getByteRange(begin, end) {\n              if (begin < 0) {\n                begin = 0;\n              }\n              if (end > this.end) {\n                end = this.end;\n              }\n              return this.bytes.subarray(begin, end);\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              this.pos = this.start;\n            }\n          }, {\n            key: \"moveStart\",\n            value: function moveStart() {\n              this.start = this.pos;\n            }\n          }, {\n            key: \"makeSubStream\",\n            value: function makeSubStream(start, length) {\n              var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              return new Stream(this.bytes.buffer, start, length, dict);\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return this.end - this.start;\n            }\n          }, {\n            key: \"isEmpty\",\n            get: function get() {\n              return this.length === 0;\n            }\n          }]);\n          return Stream;\n        }(_base_stream.BaseStream);\n        exports.Stream = Stream;\n        var StringStream = /*#__PURE__*/function (_Stream) {\n          _inherits(StringStream, _Stream);\n          function StringStream(str) {\n            _classCallCheck(this, StringStream);\n            return _possibleConstructorReturn(this, _getPrototypeOf(StringStream).call(this, (0, _util.stringToBytes)(str)));\n          }\n          return StringStream;\n        }(Stream);\n        exports.StringStream = StringStream;\n        var NullStream = /*#__PURE__*/function (_Stream2) {\n          _inherits(NullStream, _Stream2);\n          function NullStream() {\n            _classCallCheck(this, NullStream);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NullStream).call(this, new Uint8Array(0)));\n          }\n          return NullStream;\n        }(Stream);\n        exports.NullStream = NullStream;\n\n        /***/\n      }, /* 11 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Page = exports.PDFDocument = void 0;\n        var _annotation = __w_pdfjs_require__(12);\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _primitives = __w_pdfjs_require__(5);\n        var _xfa_fonts = __w_pdfjs_require__(51);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _crypto = __w_pdfjs_require__(67);\n        var _catalog = __w_pdfjs_require__(69);\n        var _cleanup_helper = __w_pdfjs_require__(71);\n        var _dataset_reader = __w_pdfjs_require__(100);\n        var _parser = __w_pdfjs_require__(17);\n        var _stream = __w_pdfjs_require__(10);\n        var _object_loader = __w_pdfjs_require__(75);\n        var _operator_list = __w_pdfjs_require__(62);\n        var _evaluator = __w_pdfjs_require__(15);\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _struct_tree = __w_pdfjs_require__(74);\n        var _writer = __w_pdfjs_require__(65);\n        var _factory = __w_pdfjs_require__(76);\n        var _xref = __w_pdfjs_require__(101);\n        var DEFAULT_USER_UNIT = 1.0;\n        var LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n        var Page = /*#__PURE__*/function () {\n          function Page(_ref12) {\n            var pdfManager = _ref12.pdfManager,\n              xref = _ref12.xref,\n              pageIndex = _ref12.pageIndex,\n              pageDict = _ref12.pageDict,\n              ref = _ref12.ref,\n              globalIdFactory = _ref12.globalIdFactory,\n              fontCache = _ref12.fontCache,\n              builtInCMapCache = _ref12.builtInCMapCache,\n              standardFontDataCache = _ref12.standardFontDataCache,\n              globalImageCache = _ref12.globalImageCache,\n              nonBlendModesSet = _ref12.nonBlendModesSet,\n              xfaFactory = _ref12.xfaFactory;\n            _classCallCheck(this, Page);\n            this.pdfManager = pdfManager;\n            this.pageIndex = pageIndex;\n            this.pageDict = pageDict;\n            this.xref = xref;\n            this.ref = ref;\n            this.fontCache = fontCache;\n            this.builtInCMapCache = builtInCMapCache;\n            this.standardFontDataCache = standardFontDataCache;\n            this.globalImageCache = globalImageCache;\n            this.nonBlendModesSet = nonBlendModesSet;\n            this.evaluatorOptions = pdfManager.evaluatorOptions;\n            this.resourcesPromise = null;\n            this.xfaFactory = xfaFactory;\n            var idCounters = {\n              obj: 0\n            };\n            this._localIdFactory = /*#__PURE__*/function (_globalIdFactory) {\n              _inherits(_class, _globalIdFactory);\n              function _class() {\n                _classCallCheck(this, _class);\n                return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n              }\n              _createClass(_class, null, [{\n                key: \"createObjId\",\n                value: function createObjId() {\n                  return \"p\".concat(pageIndex, \"_\").concat(++idCounters.obj);\n                }\n              }, {\n                key: \"getPageObjId\",\n                value: function getPageObjId() {\n                  return \"page\".concat(ref.toString());\n                }\n              }]);\n              return _class;\n            }(globalIdFactory);\n          }\n          _createClass(Page, [{\n            key: \"_getInheritableProperty\",\n            value: function _getInheritableProperty(key) {\n              var getArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              var value = (0, _core_utils.getInheritableProperty)({\n                dict: this.pageDict,\n                key: key,\n                getArray: getArray,\n                stopWhenFound: false\n              });\n              if (!Array.isArray(value)) {\n                return value;\n              }\n              if (value.length === 1 || !(value[0] instanceof _primitives.Dict)) {\n                return value[0];\n              }\n              return _primitives.Dict.merge({\n                xref: this.xref,\n                dictArray: value\n              });\n            }\n          }, {\n            key: \"_getBoundingBox\",\n            value: function _getBoundingBox(name) {\n              if (this.xfaData) {\n                return this.xfaData.bbox;\n              }\n              var box = this._getInheritableProperty(name, true);\n              if (Array.isArray(box) && box.length === 4) {\n                if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n                  return box;\n                }\n                (0, _util.warn)(\"Empty /\".concat(name, \" entry.\"));\n              }\n              return null;\n            }\n          }, {\n            key: \"_onSubStreamError\",\n            value: function _onSubStreamError(handler, reason, objId) {\n              if (this.evaluatorOptions.ignoreErrors) {\n                handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorContentSubStream\n                });\n                (0, _util.warn)(\"getContentStream - ignoring sub-stream (\".concat(objId, \"): \\\"\").concat(reason, \"\\\".\"));\n                return;\n              }\n              throw reason;\n            }\n          }, {\n            key: \"getContentStream\",\n            value: function getContentStream(handler) {\n              var _this11 = this;\n              return this.pdfManager.ensure(this, \"content\").then(function (content) {\n                if (content instanceof _base_stream.BaseStream) {\n                  return content;\n                }\n                if (Array.isArray(content)) {\n                  return new _decode_stream.StreamsSequenceStream(content, _this11._onSubStreamError.bind(_this11, handler));\n                }\n                return new _stream.NullStream();\n              });\n            }\n          }, {\n            key: \"saveNewAnnotations\",\n            value: function () {\n              var _saveNewAnnotations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(handler, task, annotations) {\n                var partialEvaluator, pageDict, annotationsArray, newData, _iterator20, _step20, ref, savedDict, buffer, transform, objects;\n                return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        if (!this.xfaFactory) {\n                          _context6.next = 2;\n                          break;\n                        }\n                        throw new Error(\"XFA: Cannot save new annotations.\");\n                      case 2:\n                        partialEvaluator = new _evaluator.PartialEvaluator({\n                          xref: this.xref,\n                          handler: handler,\n                          pageIndex: this.pageIndex,\n                          idFactory: this._localIdFactory,\n                          fontCache: this.fontCache,\n                          builtInCMapCache: this.builtInCMapCache,\n                          standardFontDataCache: this.standardFontDataCache,\n                          globalImageCache: this.globalImageCache,\n                          options: this.evaluatorOptions\n                        });\n                        pageDict = this.pageDict;\n                        annotationsArray = this.annotations.slice();\n                        _context6.next = 7;\n                        return _annotation.AnnotationFactory.saveNewAnnotations(partialEvaluator, task, annotations);\n                      case 7:\n                        newData = _context6.sent;\n                        _iterator20 = _createForOfIteratorHelper(newData.annotations);\n                        try {\n                          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                            ref = _step20.value.ref;\n                            annotationsArray.push(ref);\n                          }\n                        } catch (err) {\n                          _iterator20.e(err);\n                        } finally {\n                          _iterator20.f();\n                        }\n                        savedDict = pageDict.get(\"Annots\");\n                        pageDict.set(\"Annots\", annotationsArray);\n                        buffer = [];\n                        transform = null;\n                        if (this.xref.encrypt) {\n                          transform = this.xref.encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n                        }\n                        (0, _writer.writeObject)(this.ref, pageDict, buffer, transform);\n                        if (savedDict) {\n                          pageDict.set(\"Annots\", savedDict);\n                        }\n                        objects = newData.dependencies;\n                        objects.push.apply(objects, [{\n                          ref: this.ref,\n                          data: buffer.join(\"\")\n                        }].concat(_toConsumableArray(newData.annotations)));\n                        return _context6.abrupt(\"return\", objects);\n                      case 20:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6, this);\n              }));\n              function saveNewAnnotations(_x14, _x15, _x16) {\n                return _saveNewAnnotations.apply(this, arguments);\n              }\n              return saveNewAnnotations;\n            }()\n          }, {\n            key: \"save\",\n            value: function save(handler, task, annotationStorage) {\n              var partialEvaluator = new _evaluator.PartialEvaluator({\n                xref: this.xref,\n                handler: handler,\n                pageIndex: this.pageIndex,\n                idFactory: this._localIdFactory,\n                fontCache: this.fontCache,\n                builtInCMapCache: this.builtInCMapCache,\n                standardFontDataCache: this.standardFontDataCache,\n                globalImageCache: this.globalImageCache,\n                options: this.evaluatorOptions\n              });\n              return this._parsedAnnotations.then(function (annotations) {\n                var newRefsPromises = [];\n                var _iterator21 = _createForOfIteratorHelper(annotations),\n                  _step21;\n                try {\n                  for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                    var annotation = _step21.value;\n                    if (!annotation.mustBePrinted(annotationStorage)) {\n                      continue;\n                    }\n                    newRefsPromises.push(annotation.save(partialEvaluator, task, annotationStorage).catch(function (reason) {\n                      (0, _util.warn)(\"save - ignoring annotation data during \" + \"\\\"\".concat(task.name, \"\\\" task: \\\"\").concat(reason, \"\\\".\"));\n                      return null;\n                    }));\n                  }\n                } catch (err) {\n                  _iterator21.e(err);\n                } finally {\n                  _iterator21.f();\n                }\n                return Promise.all(newRefsPromises).then(function (newRefs) {\n                  return newRefs.filter(function (newRef) {\n                    return !!newRef;\n                  });\n                });\n              });\n            }\n          }, {\n            key: \"loadResources\",\n            value: function loadResources(keys) {\n              var _this12 = this;\n              if (!this.resourcesPromise) {\n                this.resourcesPromise = this.pdfManager.ensure(this, \"resources\");\n              }\n              return this.resourcesPromise.then(function () {\n                var objectLoader = new _object_loader.ObjectLoader(_this12.resources, keys, _this12.xref);\n                return objectLoader.load();\n              });\n            }\n          }, {\n            key: \"getOperatorList\",\n            value: function getOperatorList(_ref13) {\n              var _this13 = this;\n              var handler = _ref13.handler,\n                sink = _ref13.sink,\n                task = _ref13.task,\n                intent = _ref13.intent,\n                cacheKey = _ref13.cacheKey,\n                _ref13$annotationStor = _ref13.annotationStorage,\n                annotationStorage = _ref13$annotationStor === void 0 ? null : _ref13$annotationStor;\n              var contentStreamPromise = this.getContentStream(handler);\n              var resourcesPromise = this.loadResources([\"ColorSpace\", \"ExtGState\", \"Font\", \"Pattern\", \"Properties\", \"Shading\", \"XObject\"]);\n              var partialEvaluator = new _evaluator.PartialEvaluator({\n                xref: this.xref,\n                handler: handler,\n                pageIndex: this.pageIndex,\n                idFactory: this._localIdFactory,\n                fontCache: this.fontCache,\n                builtInCMapCache: this.builtInCMapCache,\n                standardFontDataCache: this.standardFontDataCache,\n                globalImageCache: this.globalImageCache,\n                options: this.evaluatorOptions\n              });\n              var newAnnotationsByPage = !this.xfaFactory ? (0, _core_utils.getNewAnnotationsMap)(annotationStorage) : null;\n              var newAnnotationsPromise = Promise.resolve(null);\n              if (newAnnotationsByPage) {\n                var newAnnotations = newAnnotationsByPage.get(this.pageIndex);\n                if (newAnnotations) {\n                  newAnnotationsPromise = _annotation.AnnotationFactory.printNewAnnotations(partialEvaluator, task, newAnnotations);\n                }\n              }\n              var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n              var pageListPromise = dataPromises.then(function (_ref14) {\n                var _ref15 = _slicedToArray(_ref14, 1),\n                  contentStream = _ref15[0];\n                var opList = new _operator_list.OperatorList(intent, sink);\n                handler.send(\"StartRenderPage\", {\n                  transparency: partialEvaluator.hasBlendModes(_this13.resources, _this13.nonBlendModesSet),\n                  pageIndex: _this13.pageIndex,\n                  cacheKey: cacheKey\n                });\n                return partialEvaluator.getOperatorList({\n                  stream: contentStream,\n                  task: task,\n                  resources: _this13.resources,\n                  operatorList: opList\n                }).then(function () {\n                  return opList;\n                });\n              });\n              return Promise.all([pageListPromise, this._parsedAnnotations, newAnnotationsPromise]).then(function (_ref16) {\n                var _ref17 = _slicedToArray(_ref16, 3),\n                  pageOpList = _ref17[0],\n                  annotations = _ref17[1],\n                  newAnnotations = _ref17[2];\n                if (newAnnotations) {\n                  annotations = annotations.concat(newAnnotations);\n                }\n                if (annotations.length === 0 || intent & _util.RenderingIntentFlag.ANNOTATIONS_DISABLE) {\n                  pageOpList.flush(true);\n                  return {\n                    length: pageOpList.totalLength\n                  };\n                }\n                var renderForms = !!(intent & _util.RenderingIntentFlag.ANNOTATIONS_FORMS),\n                  intentAny = !!(intent & _util.RenderingIntentFlag.ANY),\n                  intentDisplay = !!(intent & _util.RenderingIntentFlag.DISPLAY),\n                  intentPrint = !!(intent & _util.RenderingIntentFlag.PRINT);\n                var opListPromises = [];\n                var _iterator22 = _createForOfIteratorHelper(annotations),\n                  _step22;\n                try {\n                  for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                    var annotation = _step22.value;\n                    if (intentAny || intentDisplay && annotation.mustBeViewed(annotationStorage) || intentPrint && annotation.mustBePrinted(annotationStorage)) {\n                      opListPromises.push(annotation.getOperatorList(partialEvaluator, task, intent, renderForms, annotationStorage).catch(function (reason) {\n                        (0, _util.warn)(\"getOperatorList - ignoring annotation data during \" + \"\\\"\".concat(task.name, \"\\\" task: \\\"\").concat(reason, \"\\\".\"));\n                        return null;\n                      }));\n                    }\n                  }\n                } catch (err) {\n                  _iterator22.e(err);\n                } finally {\n                  _iterator22.f();\n                }\n                return Promise.all(opListPromises).then(function (opLists) {\n                  var form = false,\n                    canvas = false;\n                  var _iterator23 = _createForOfIteratorHelper(opLists),\n                    _step23;\n                  try {\n                    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n                      var _step23$value = _step23.value,\n                        opList = _step23$value.opList,\n                        separateForm = _step23$value.separateForm,\n                        separateCanvas = _step23$value.separateCanvas;\n                      pageOpList.addOpList(opList);\n                      if (separateForm) {\n                        form = separateForm;\n                      }\n                      if (separateCanvas) {\n                        canvas = separateCanvas;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator23.e(err);\n                  } finally {\n                    _iterator23.f();\n                  }\n                  pageOpList.flush(true, {\n                    form: form,\n                    canvas: canvas\n                  });\n                  return {\n                    length: pageOpList.totalLength\n                  };\n                });\n              });\n            }\n          }, {\n            key: \"extractTextContent\",\n            value: function extractTextContent(_ref18) {\n              var _this14 = this;\n              var handler = _ref18.handler,\n                task = _ref18.task,\n                includeMarkedContent = _ref18.includeMarkedContent,\n                sink = _ref18.sink,\n                combineTextItems = _ref18.combineTextItems;\n              var contentStreamPromise = this.getContentStream(handler);\n              var resourcesPromise = this.loadResources([\"ExtGState\", \"Font\", \"Properties\", \"XObject\"]);\n              var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n              return dataPromises.then(function (_ref19) {\n                var _ref20 = _slicedToArray(_ref19, 1),\n                  contentStream = _ref20[0];\n                var partialEvaluator = new _evaluator.PartialEvaluator({\n                  xref: _this14.xref,\n                  handler: handler,\n                  pageIndex: _this14.pageIndex,\n                  idFactory: _this14._localIdFactory,\n                  fontCache: _this14.fontCache,\n                  builtInCMapCache: _this14.builtInCMapCache,\n                  standardFontDataCache: _this14.standardFontDataCache,\n                  globalImageCache: _this14.globalImageCache,\n                  options: _this14.evaluatorOptions\n                });\n                return partialEvaluator.getTextContent({\n                  stream: contentStream,\n                  task: task,\n                  resources: _this14.resources,\n                  includeMarkedContent: includeMarkedContent,\n                  combineTextItems: combineTextItems,\n                  sink: sink,\n                  viewBox: _this14.view\n                });\n              });\n            }\n          }, {\n            key: \"getStructTree\",\n            value: function () {\n              var _getStructTree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                var structTreeRoot, structTree;\n                return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        _context7.next = 2;\n                        return this.pdfManager.ensureCatalog(\"structTreeRoot\");\n                      case 2:\n                        structTreeRoot = _context7.sent;\n                        if (structTreeRoot) {\n                          _context7.next = 5;\n                          break;\n                        }\n                        return _context7.abrupt(\"return\", null);\n                      case 5:\n                        _context7.next = 7;\n                        return this.pdfManager.ensure(this, \"_parseStructTree\", [structTreeRoot]);\n                      case 7:\n                        structTree = _context7.sent;\n                        return _context7.abrupt(\"return\", structTree.serializable);\n                      case 9:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee7, this);\n              }));\n              function getStructTree() {\n                return _getStructTree.apply(this, arguments);\n              }\n              return getStructTree;\n            }()\n          }, {\n            key: \"_parseStructTree\",\n            value: function _parseStructTree(structTreeRoot) {\n              var tree = new _struct_tree.StructTreePage(structTreeRoot, this.pageDict);\n              tree.parse();\n              return tree;\n            }\n          }, {\n            key: \"getAnnotationsData\",\n            value: function () {\n              var _getAnnotationsData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(handler, task, intent) {\n                var annotations, textContentPromises, annotationsData, partialEvaluator, intentAny, intentDisplay, intentPrint, _iterator24, _step24, annotation, isVisible;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        _context8.next = 2;\n                        return this._parsedAnnotations;\n                      case 2:\n                        annotations = _context8.sent;\n                        if (!(annotations.length === 0)) {\n                          _context8.next = 5;\n                          break;\n                        }\n                        return _context8.abrupt(\"return\", []);\n                      case 5:\n                        textContentPromises = [];\n                        annotationsData = [];\n                        intentAny = !!(intent & _util.RenderingIntentFlag.ANY), intentDisplay = !!(intent & _util.RenderingIntentFlag.DISPLAY), intentPrint = !!(intent & _util.RenderingIntentFlag.PRINT);\n                        _iterator24 = _createForOfIteratorHelper(annotations);\n                        try {\n                          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                            annotation = _step24.value;\n                            isVisible = intentAny || intentDisplay && annotation.viewable;\n                            if (isVisible || intentPrint && annotation.printable) {\n                              annotationsData.push(annotation.data);\n                            }\n                            if (annotation.hasTextContent && isVisible) {\n                              if (!partialEvaluator) {\n                                partialEvaluator = new _evaluator.PartialEvaluator({\n                                  xref: this.xref,\n                                  handler: handler,\n                                  pageIndex: this.pageIndex,\n                                  idFactory: this._localIdFactory,\n                                  fontCache: this.fontCache,\n                                  builtInCMapCache: this.builtInCMapCache,\n                                  standardFontDataCache: this.standardFontDataCache,\n                                  globalImageCache: this.globalImageCache,\n                                  options: this.evaluatorOptions\n                                });\n                              }\n                              textContentPromises.push(annotation.extractTextContent(partialEvaluator, task, this.view).catch(function (reason) {\n                                (0, _util.warn)(\"getAnnotationsData - ignoring textContent during \\\"\".concat(task.name, \"\\\" task: \\\"\").concat(reason, \"\\\".\"));\n                              }));\n                            }\n                          }\n                        } catch (err) {\n                          _iterator24.e(err);\n                        } finally {\n                          _iterator24.f();\n                        }\n                        _context8.next = 12;\n                        return Promise.all(textContentPromises);\n                      case 12:\n                        return _context8.abrupt(\"return\", annotationsData);\n                      case 13:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8, this);\n              }));\n              function getAnnotationsData(_x17, _x18, _x19) {\n                return _getAnnotationsData.apply(this, arguments);\n              }\n              return getAnnotationsData;\n            }()\n          }, {\n            key: \"content\",\n            get: function get() {\n              return this.pageDict.getArray(\"Contents\");\n            }\n          }, {\n            key: \"resources\",\n            get: function get() {\n              var resources = this._getInheritableProperty(\"Resources\");\n              return (0, _util.shadow)(this, \"resources\", resources instanceof _primitives.Dict ? resources : _primitives.Dict.empty);\n            }\n          }, {\n            key: \"mediaBox\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"mediaBox\", this._getBoundingBox(\"MediaBox\") || LETTER_SIZE_MEDIABOX);\n            }\n          }, {\n            key: \"cropBox\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"cropBox\", this._getBoundingBox(\"CropBox\") || this.mediaBox);\n            }\n          }, {\n            key: \"userUnit\",\n            get: function get() {\n              var obj = this.pageDict.get(\"UserUnit\");\n              if (typeof obj !== \"number\" || obj <= 0) {\n                obj = DEFAULT_USER_UNIT;\n              }\n              return (0, _util.shadow)(this, \"userUnit\", obj);\n            }\n          }, {\n            key: \"view\",\n            get: function get() {\n              var cropBox = this.cropBox,\n                mediaBox = this.mediaBox;\n              var view;\n              if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {\n                view = mediaBox;\n              } else {\n                var box = _util.Util.intersect(cropBox, mediaBox);\n                if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n                  view = box;\n                } else {\n                  (0, _util.warn)(\"Empty /CropBox and /MediaBox intersection.\");\n                }\n              }\n              return (0, _util.shadow)(this, \"view\", view || mediaBox);\n            }\n          }, {\n            key: \"rotate\",\n            get: function get() {\n              var rotate = this._getInheritableProperty(\"Rotate\") || 0;\n              if (rotate % 90 !== 0) {\n                rotate = 0;\n              } else if (rotate >= 360) {\n                rotate %= 360;\n              } else if (rotate < 0) {\n                rotate = (rotate % 360 + 360) % 360;\n              }\n              return (0, _util.shadow)(this, \"rotate\", rotate);\n            }\n          }, {\n            key: \"xfaData\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"xfaData\", this.xfaFactory ? {\n                bbox: this.xfaFactory.getBoundingBox(this.pageIndex)\n              } : null);\n            }\n          }, {\n            key: \"annotations\",\n            get: function get() {\n              var annots = this._getInheritableProperty(\"Annots\");\n              return (0, _util.shadow)(this, \"annotations\", Array.isArray(annots) ? annots : []);\n            }\n          }, {\n            key: \"_parsedAnnotations\",\n            get: function get() {\n              var _this15 = this;\n              var parsedAnnotations = this.pdfManager.ensure(this, \"annotations\").then(function () {\n                var annotationPromises = [];\n                var _iterator25 = _createForOfIteratorHelper(_this15.annotations),\n                  _step25;\n                try {\n                  for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n                    var annotationRef = _step25.value;\n                    annotationPromises.push(_annotation.AnnotationFactory.create(_this15.xref, annotationRef, _this15.pdfManager, _this15._localIdFactory, false).catch(function (reason) {\n                      (0, _util.warn)(\"_parsedAnnotations: \\\"\".concat(reason, \"\\\".\"));\n                      return null;\n                    }));\n                  }\n                } catch (err) {\n                  _iterator25.e(err);\n                } finally {\n                  _iterator25.f();\n                }\n                return Promise.all(annotationPromises).then(function (annotations) {\n                  if (annotations.length === 0) {\n                    return annotations;\n                  }\n                  var sortedAnnotations = [];\n                  var popupAnnotations;\n                  var _iterator26 = _createForOfIteratorHelper(annotations),\n                    _step26;\n                  try {\n                    for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                      var annotation = _step26.value;\n                      if (!annotation) {\n                        continue;\n                      }\n                      if (annotation instanceof _annotation.PopupAnnotation) {\n                        if (!popupAnnotations) {\n                          popupAnnotations = [];\n                        }\n                        popupAnnotations.push(annotation);\n                        continue;\n                      }\n                      sortedAnnotations.push(annotation);\n                    }\n                  } catch (err) {\n                    _iterator26.e(err);\n                  } finally {\n                    _iterator26.f();\n                  }\n                  if (popupAnnotations) {\n                    sortedAnnotations.push.apply(sortedAnnotations, _toConsumableArray(popupAnnotations));\n                  }\n                  return sortedAnnotations;\n                });\n              });\n              return (0, _util.shadow)(this, \"_parsedAnnotations\", parsedAnnotations);\n            }\n          }, {\n            key: \"jsActions\",\n            get: function get() {\n              var actions = (0, _core_utils.collectActions)(this.xref, this.pageDict, _util.PageActionEventType);\n              return (0, _util.shadow)(this, \"jsActions\", actions);\n            }\n          }]);\n          return Page;\n        }();\n        exports.Page = Page;\n        var PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\n        var STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\n        var ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\n        var FINGERPRINT_FIRST_BYTES = 1024;\n        var EMPTY_FINGERPRINT = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n        var PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.\\d$/;\n        function find(stream, signature) {\n          var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024;\n          var backwards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n          var signatureLength = signature.length;\n          var scanBytes = stream.peekBytes(limit);\n          var scanLength = scanBytes.length - signatureLength;\n          if (scanLength <= 0) {\n            return false;\n          }\n          if (backwards) {\n            var signatureEnd = signatureLength - 1;\n            var pos = scanBytes.length - 1;\n            while (pos >= signatureEnd) {\n              var j = 0;\n              while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {\n                j++;\n              }\n              if (j >= signatureLength) {\n                stream.pos += pos - signatureEnd;\n                return true;\n              }\n              pos--;\n            }\n          } else {\n            var _pos = 0;\n            while (_pos <= scanLength) {\n              var _j = 0;\n              while (_j < signatureLength && scanBytes[_pos + _j] === signature[_j]) {\n                _j++;\n              }\n              if (_j >= signatureLength) {\n                stream.pos += _pos;\n                return true;\n              }\n              _pos++;\n            }\n          }\n          return false;\n        }\n        var PDFDocument = /*#__PURE__*/function () {\n          function PDFDocument(pdfManager, stream) {\n            _classCallCheck(this, PDFDocument);\n            if (stream.length <= 0) {\n              throw new _util.InvalidPDFException(\"The PDF file is empty, i.e. its size is zero bytes.\");\n            }\n            this.pdfManager = pdfManager;\n            this.stream = stream;\n            this.xref = new _xref.XRef(stream, pdfManager);\n            this._pagePromises = new Map();\n            this._version = null;\n            var idCounters = {\n              font: 0\n            };\n            this._globalIdFactory = /*#__PURE__*/function () {\n              function _class2() {\n                _classCallCheck(this, _class2);\n              }\n              _createClass(_class2, null, [{\n                key: \"getDocId\",\n                value: function getDocId() {\n                  return \"g_\".concat(pdfManager.docId);\n                }\n              }, {\n                key: \"createFontId\",\n                value: function createFontId() {\n                  return \"f\".concat(++idCounters.font);\n                }\n              }, {\n                key: \"createObjId\",\n                value: function createObjId() {\n                  (0, _util.unreachable)(\"Abstract method `createObjId` called.\");\n                }\n              }, {\n                key: \"getPageObjId\",\n                value: function getPageObjId() {\n                  (0, _util.unreachable)(\"Abstract method `getPageObjId` called.\");\n                }\n              }]);\n              return _class2;\n            }();\n          }\n          _createClass(PDFDocument, [{\n            key: \"parse\",\n            value: function parse(recoveryMode) {\n              this.xref.parse(recoveryMode);\n              this.catalog = new _catalog.Catalog(this.pdfManager, this.xref);\n              if (this.catalog.version) {\n                this._version = this.catalog.version;\n              }\n            }\n          }, {\n            key: \"checkHeader\",\n            value: function checkHeader() {\n              var stream = this.stream;\n              stream.reset();\n              if (!find(stream, PDF_HEADER_SIGNATURE)) {\n                return;\n              }\n              stream.moveStart();\n              var MAX_PDF_VERSION_LENGTH = 12;\n              var version = \"\",\n                ch;\n              while ((ch = stream.getByte()) > 0x20) {\n                if (version.length >= MAX_PDF_VERSION_LENGTH) {\n                  break;\n                }\n                version += String.fromCharCode(ch);\n              }\n              if (!this._version) {\n                this._version = version.substring(5);\n              }\n            }\n          }, {\n            key: \"parseStartXRef\",\n            value: function parseStartXRef() {\n              this.xref.setStartXRef(this.startXRef);\n            }\n          }, {\n            key: \"_hasOnlyDocumentSignatures\",\n            value: function _hasOnlyDocumentSignatures(fields) {\n              var _this16 = this;\n              var recursionDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n              var RECURSION_LIMIT = 10;\n              if (!Array.isArray(fields)) {\n                return false;\n              }\n              return fields.every(function (field) {\n                field = _this16.xref.fetchIfRef(field);\n                if (!(field instanceof _primitives.Dict)) {\n                  return false;\n                }\n                if (field.has(\"Kids\")) {\n                  if (++recursionDepth > RECURSION_LIMIT) {\n                    (0, _util.warn)(\"_hasOnlyDocumentSignatures: maximum recursion depth reached\");\n                    return false;\n                  }\n                  return _this16._hasOnlyDocumentSignatures(field.get(\"Kids\"), recursionDepth);\n                }\n                var isSignature = (0, _primitives.isName)(field.get(\"FT\"), \"Sig\");\n                var rectangle = field.get(\"Rect\");\n                var isInvisible = Array.isArray(rectangle) && rectangle.every(function (value) {\n                  return value === 0;\n                });\n                return isSignature && isInvisible;\n              });\n            }\n          }, {\n            key: \"loadXfaImages\",\n            value: function () {\n              var _loadXfaImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n                var xfaImagesDict, keys, objectLoader, xfaImages, _iterator27, _step27, key, stream;\n                return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        _context9.next = 2;\n                        return this.pdfManager.ensureCatalog(\"xfaImages\");\n                      case 2:\n                        xfaImagesDict = _context9.sent;\n                        if (xfaImagesDict) {\n                          _context9.next = 5;\n                          break;\n                        }\n                        return _context9.abrupt(\"return\");\n                      case 5:\n                        keys = xfaImagesDict.getKeys();\n                        objectLoader = new _object_loader.ObjectLoader(xfaImagesDict, keys, this.xref);\n                        _context9.next = 9;\n                        return objectLoader.load();\n                      case 9:\n                        xfaImages = new Map();\n                        _iterator27 = _createForOfIteratorHelper(keys);\n                        try {\n                          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n                            key = _step27.value;\n                            stream = xfaImagesDict.get(key);\n                            if (stream instanceof _base_stream.BaseStream) {\n                              xfaImages.set(key, stream.getBytes());\n                            }\n                          }\n                        } catch (err) {\n                          _iterator27.e(err);\n                        } finally {\n                          _iterator27.f();\n                        }\n                        this.xfaFactory.setImages(xfaImages);\n                      case 13:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9, this);\n              }));\n              function loadXfaImages() {\n                return _loadXfaImages.apply(this, arguments);\n              }\n              return loadXfaImages;\n            }()\n          }, {\n            key: \"loadXfaFonts\",\n            value: function () {\n              var _loadXfaFonts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(handler, task) {\n                var acroForm, resources, objectLoader, fontRes, options, partialEvaluator, operatorList, pdfFonts, initialState, fonts, promises, _iterator28, _step28, _step28$value, fontName, font, descriptor, fontFamily, fontWeight, italicAngle, cssFontInfo, missingFonts, reallyMissingFonts, _iterator29, _step29, missing, _iterator30, _step30, _missing, _i5, _arr, fontInfo, name, dict;\n                return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _context10.next = 2;\n                        return this.pdfManager.ensureCatalog(\"acroForm\");\n                      case 2:\n                        acroForm = _context10.sent;\n                        if (acroForm) {\n                          _context10.next = 5;\n                          break;\n                        }\n                        return _context10.abrupt(\"return\");\n                      case 5:\n                        _context10.next = 7;\n                        return acroForm.getAsync(\"DR\");\n                      case 7:\n                        resources = _context10.sent;\n                        if (resources instanceof _primitives.Dict) {\n                          _context10.next = 10;\n                          break;\n                        }\n                        return _context10.abrupt(\"return\");\n                      case 10:\n                        objectLoader = new _object_loader.ObjectLoader(resources, [\"Font\"], this.xref);\n                        _context10.next = 13;\n                        return objectLoader.load();\n                      case 13:\n                        fontRes = resources.get(\"Font\");\n                        if (fontRes instanceof _primitives.Dict) {\n                          _context10.next = 16;\n                          break;\n                        }\n                        return _context10.abrupt(\"return\");\n                      case 16:\n                        options = Object.assign(Object.create(null), this.pdfManager.evaluatorOptions);\n                        options.useSystemFonts = false;\n                        partialEvaluator = new _evaluator.PartialEvaluator({\n                          xref: this.xref,\n                          handler: handler,\n                          pageIndex: -1,\n                          idFactory: this._globalIdFactory,\n                          fontCache: this.catalog.fontCache,\n                          builtInCMapCache: this.catalog.builtInCMapCache,\n                          standardFontDataCache: this.catalog.standardFontDataCache,\n                          options: options\n                        });\n                        operatorList = new _operator_list.OperatorList();\n                        pdfFonts = [];\n                        _context10.t0 = function clone() {\n                          return this;\n                        };\n                        initialState = {\n                          get font() {\n                            return pdfFonts.at(-1);\n                          },\n                          set font(font) {\n                            pdfFonts.push(font);\n                          },\n                          clone: _context10.t0\n                        };\n                        fonts = new Map();\n                        fontRes.forEach(function (fontName, font) {\n                          fonts.set(fontName, font);\n                        });\n                        promises = [];\n                        _iterator28 = _createForOfIteratorHelper(fonts);\n                        _context10.prev = 27;\n                        _iterator28.s();\n                      case 29:\n                        if ((_step28 = _iterator28.n()).done) {\n                          _context10.next = 44;\n                          break;\n                        }\n                        _step28$value = _slicedToArray(_step28.value, 2), fontName = _step28$value[0], font = _step28$value[1];\n                        descriptor = font.get(\"FontDescriptor\");\n                        if (descriptor instanceof _primitives.Dict) {\n                          _context10.next = 34;\n                          break;\n                        }\n                        return _context10.abrupt(\"continue\", 42);\n                      case 34:\n                        fontFamily = descriptor.get(\"FontFamily\");\n                        fontFamily = fontFamily.replace(/[ ]+(\\d)/g, \"$1\");\n                        fontWeight = descriptor.get(\"FontWeight\");\n                        italicAngle = -descriptor.get(\"ItalicAngle\");\n                        cssFontInfo = {\n                          fontFamily: fontFamily,\n                          fontWeight: fontWeight,\n                          italicAngle: italicAngle\n                        };\n                        if ((0, _core_utils.validateCSSFont)(cssFontInfo)) {\n                          _context10.next = 41;\n                          break;\n                        }\n                        return _context10.abrupt(\"continue\", 42);\n                      case 41:\n                        promises.push(partialEvaluator.handleSetFont(resources, [_primitives.Name.get(fontName), 1], null, operatorList, task, initialState, null, cssFontInfo).catch(function (reason) {\n                          (0, _util.warn)(\"loadXfaFonts: \\\"\".concat(reason, \"\\\".\"));\n                          return null;\n                        }));\n                      case 42:\n                        _context10.next = 29;\n                        break;\n                      case 44:\n                        _context10.next = 49;\n                        break;\n                      case 46:\n                        _context10.prev = 46;\n                        _context10.t1 = _context10[\"catch\"](27);\n                        _iterator28.e(_context10.t1);\n                      case 49:\n                        _context10.prev = 49;\n                        _iterator28.f();\n                        return _context10.finish(49);\n                      case 52:\n                        _context10.next = 54;\n                        return Promise.all(promises);\n                      case 54:\n                        missingFonts = this.xfaFactory.setFonts(pdfFonts);\n                        if (missingFonts) {\n                          _context10.next = 57;\n                          break;\n                        }\n                        return _context10.abrupt(\"return\");\n                      case 57:\n                        options.ignoreErrors = true;\n                        promises.length = 0;\n                        pdfFonts.length = 0;\n                        reallyMissingFonts = new Set();\n                        _iterator29 = _createForOfIteratorHelper(missingFonts);\n                        try {\n                          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n                            missing = _step29.value;\n                            if (!(0, _xfa_fonts.getXfaFontName)(\"\".concat(missing, \"-Regular\"))) {\n                              reallyMissingFonts.add(missing);\n                            }\n                          }\n                        } catch (err) {\n                          _iterator29.e(err);\n                        } finally {\n                          _iterator29.f();\n                        }\n                        if (reallyMissingFonts.size) {\n                          missingFonts.push(\"PdfJS-Fallback\");\n                        }\n                        _iterator30 = _createForOfIteratorHelper(missingFonts);\n                        _context10.prev = 65;\n                        _iterator30.s();\n                      case 67:\n                        if ((_step30 = _iterator30.n()).done) {\n                          _context10.next = 74;\n                          break;\n                        }\n                        _missing = _step30.value;\n                        if (!reallyMissingFonts.has(_missing)) {\n                          _context10.next = 71;\n                          break;\n                        }\n                        return _context10.abrupt(\"continue\", 72);\n                      case 71:\n                        for (_i5 = 0, _arr = [{\n                          name: \"Regular\",\n                          fontWeight: 400,\n                          italicAngle: 0\n                        }, {\n                          name: \"Bold\",\n                          fontWeight: 700,\n                          italicAngle: 0\n                        }, {\n                          name: \"Italic\",\n                          fontWeight: 400,\n                          italicAngle: 12\n                        }, {\n                          name: \"BoldItalic\",\n                          fontWeight: 700,\n                          italicAngle: 12\n                        }]; _i5 < _arr.length; _i5++) {\n                          fontInfo = _arr[_i5];\n                          name = \"\".concat(_missing, \"-\").concat(fontInfo.name);\n                          dict = (0, _xfa_fonts.getXfaFontDict)(name);\n                          promises.push(partialEvaluator.handleSetFont(resources, [_primitives.Name.get(name), 1], null, operatorList, task, initialState, dict, {\n                            fontFamily: _missing,\n                            fontWeight: fontInfo.fontWeight,\n                            italicAngle: fontInfo.italicAngle\n                          }).catch(function (reason) {\n                            (0, _util.warn)(\"loadXfaFonts: \\\"\".concat(reason, \"\\\".\"));\n                            return null;\n                          }));\n                        }\n                      case 72:\n                        _context10.next = 67;\n                        break;\n                      case 74:\n                        _context10.next = 79;\n                        break;\n                      case 76:\n                        _context10.prev = 76;\n                        _context10.t2 = _context10[\"catch\"](65);\n                        _iterator30.e(_context10.t2);\n                      case 79:\n                        _context10.prev = 79;\n                        _iterator30.f();\n                        return _context10.finish(79);\n                      case 82:\n                        _context10.next = 84;\n                        return Promise.all(promises);\n                      case 84:\n                        this.xfaFactory.appendFonts(pdfFonts, reallyMissingFonts);\n                      case 85:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee10, this, [[27, 46, 49, 52], [65, 76, 79, 82]]);\n              }));\n              function loadXfaFonts(_x20, _x21) {\n                return _loadXfaFonts.apply(this, arguments);\n              }\n              return loadXfaFonts;\n            }()\n          }, {\n            key: \"serializeXfaData\",\n            value: function () {\n              var _serializeXfaData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(annotationStorage) {\n                return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        return _context11.abrupt(\"return\", this.xfaFactory ? this.xfaFactory.serializeData(annotationStorage) : null);\n                      case 1:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11, this);\n              }));\n              function serializeXfaData(_x22) {\n                return _serializeXfaData.apply(this, arguments);\n              }\n              return serializeXfaData;\n            }()\n          }, {\n            key: \"_getLinearizationPage\",\n            value: function () {\n              var _getLinearizationPage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(pageIndex) {\n                var catalog, linearization, xref, ref, obj, type;\n                return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        catalog = this.catalog, linearization = this.linearization, xref = this.xref;\n                        ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);\n                        _context12.prev = 2;\n                        _context12.next = 5;\n                        return xref.fetchAsync(ref);\n                      case 5:\n                        obj = _context12.sent;\n                        if (!(obj instanceof _primitives.Dict)) {\n                          _context12.next = 16;\n                          break;\n                        }\n                        type = obj.getRaw(\"Type\");\n                        if (!(type instanceof _primitives.Ref)) {\n                          _context12.next = 12;\n                          break;\n                        }\n                        _context12.next = 11;\n                        return xref.fetchAsync(type);\n                      case 11:\n                        type = _context12.sent;\n                      case 12:\n                        if (!((0, _primitives.isName)(type, \"Page\") || !obj.has(\"Type\") && !obj.has(\"Kids\"))) {\n                          _context12.next = 16;\n                          break;\n                        }\n                        if (!catalog.pageKidsCountCache.has(ref)) {\n                          catalog.pageKidsCountCache.put(ref, 1);\n                        }\n                        if (!catalog.pageIndexCache.has(ref)) {\n                          catalog.pageIndexCache.put(ref, 0);\n                        }\n                        return _context12.abrupt(\"return\", [obj, ref]);\n                      case 16:\n                        throw new _util.FormatError(\"The Linearization dictionary doesn't point to a valid Page dictionary.\");\n                      case 19:\n                        _context12.prev = 19;\n                        _context12.t0 = _context12[\"catch\"](2);\n                        (0, _util.warn)(\"_getLinearizationPage: \\\"\".concat(_context12.t0.message, \"\\\".\"));\n                        return _context12.abrupt(\"return\", catalog.getPageDict(pageIndex));\n                      case 23:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee12, this, [[2, 19]]);\n              }));\n              function _getLinearizationPage(_x23) {\n                return _getLinearizationPage2.apply(this, arguments);\n              }\n              return _getLinearizationPage;\n            }()\n          }, {\n            key: \"getPage\",\n            value: function getPage(pageIndex) {\n              var _this17 = this;\n              var cachedPromise = this._pagePromises.get(pageIndex);\n              if (cachedPromise) {\n                return cachedPromise;\n              }\n              var catalog = this.catalog,\n                linearization = this.linearization,\n                xfaFactory = this.xfaFactory;\n              var promise;\n              if (xfaFactory) {\n                promise = Promise.resolve([_primitives.Dict.empty, null]);\n              } else if (linearization && linearization.pageFirst === pageIndex) {\n                promise = this._getLinearizationPage(pageIndex);\n              } else {\n                promise = catalog.getPageDict(pageIndex);\n              }\n              promise = promise.then(function (_ref21) {\n                var _ref22 = _slicedToArray(_ref21, 2),\n                  pageDict = _ref22[0],\n                  ref = _ref22[1];\n                return new Page({\n                  pdfManager: _this17.pdfManager,\n                  xref: _this17.xref,\n                  pageIndex: pageIndex,\n                  pageDict: pageDict,\n                  ref: ref,\n                  globalIdFactory: _this17._globalIdFactory,\n                  fontCache: catalog.fontCache,\n                  builtInCMapCache: catalog.builtInCMapCache,\n                  standardFontDataCache: catalog.standardFontDataCache,\n                  globalImageCache: catalog.globalImageCache,\n                  nonBlendModesSet: catalog.nonBlendModesSet,\n                  xfaFactory: xfaFactory\n                });\n              });\n              this._pagePromises.set(pageIndex, promise);\n              return promise;\n            }\n          }, {\n            key: \"checkFirstPage\",\n            value: function () {\n              var _checkFirstPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n                var recoveryMode,\n                  _args13 = arguments;\n                return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        recoveryMode = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : false;\n                        if (!recoveryMode) {\n                          _context13.next = 3;\n                          break;\n                        }\n                        return _context13.abrupt(\"return\");\n                      case 3:\n                        _context13.prev = 3;\n                        _context13.next = 6;\n                        return this.getPage(0);\n                      case 6:\n                        _context13.next = 15;\n                        break;\n                      case 8:\n                        _context13.prev = 8;\n                        _context13.t0 = _context13[\"catch\"](3);\n                        if (!(_context13.t0 instanceof _core_utils.XRefEntryException)) {\n                          _context13.next = 15;\n                          break;\n                        }\n                        this._pagePromises.delete(0);\n                        _context13.next = 14;\n                        return this.cleanup();\n                      case 14:\n                        throw new _core_utils.XRefParseException();\n                      case 15:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee13, this, [[3, 8]]);\n              }));\n              function checkFirstPage() {\n                return _checkFirstPage.apply(this, arguments);\n              }\n              return checkFirstPage;\n            }()\n          }, {\n            key: \"checkLastPage\",\n            value: function () {\n              var _checkLastPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                var recoveryMode,\n                  catalog,\n                  pdfManager,\n                  numPages,\n                  pagesTree,\n                  _iterator31,\n                  _step31,\n                  _step31$value,\n                  pageIndex,\n                  _step31$value$,\n                  pageDict,\n                  ref,\n                  promise,\n                  _args14 = arguments;\n                return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                  while (1) {\n                    switch (_context14.prev = _context14.next) {\n                      case 0:\n                        recoveryMode = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : false;\n                        catalog = this.catalog, pdfManager = this.pdfManager;\n                        catalog.setActualNumPages();\n                        _context14.prev = 3;\n                        _context14.next = 6;\n                        return Promise.all([pdfManager.ensureDoc(\"xfaFactory\"), pdfManager.ensureDoc(\"linearization\"), pdfManager.ensureCatalog(\"numPages\")]);\n                      case 6:\n                        if (!this.xfaFactory) {\n                          _context14.next = 10;\n                          break;\n                        }\n                        return _context14.abrupt(\"return\");\n                      case 10:\n                        if (this.linearization) {\n                          numPages = this.linearization.numPages;\n                        } else {\n                          numPages = catalog.numPages;\n                        }\n                      case 11:\n                        if (Number.isInteger(numPages)) {\n                          _context14.next = 15;\n                          break;\n                        }\n                        throw new _util.FormatError(\"Page count is not an integer.\");\n                      case 15:\n                        if (!(numPages <= 1)) {\n                          _context14.next = 17;\n                          break;\n                        }\n                        return _context14.abrupt(\"return\");\n                      case 17:\n                        _context14.next = 19;\n                        return this.getPage(numPages - 1);\n                      case 19:\n                        _context14.next = 44;\n                        break;\n                      case 21:\n                        _context14.prev = 21;\n                        _context14.t0 = _context14[\"catch\"](3);\n                        this._pagePromises.delete(numPages - 1);\n                        _context14.next = 26;\n                        return this.cleanup();\n                      case 26:\n                        if (!(_context14.t0 instanceof _core_utils.XRefEntryException && !recoveryMode)) {\n                          _context14.next = 28;\n                          break;\n                        }\n                        throw new _core_utils.XRefParseException();\n                      case 28:\n                        (0, _util.warn)(\"checkLastPage - invalid /Pages tree /Count: \".concat(numPages, \".\"));\n                        _context14.prev = 29;\n                        _context14.next = 32;\n                        return catalog.getAllPageDicts(recoveryMode);\n                      case 32:\n                        pagesTree = _context14.sent;\n                        _context14.next = 41;\n                        break;\n                      case 35:\n                        _context14.prev = 35;\n                        _context14.t1 = _context14[\"catch\"](29);\n                        if (!(_context14.t1 instanceof _core_utils.XRefEntryException && !recoveryMode)) {\n                          _context14.next = 39;\n                          break;\n                        }\n                        throw new _core_utils.XRefParseException();\n                      case 39:\n                        catalog.setActualNumPages(1);\n                        return _context14.abrupt(\"return\");\n                      case 41:\n                        _iterator31 = _createForOfIteratorHelper(pagesTree);\n                        try {\n                          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n                            _step31$value = _slicedToArray(_step31.value, 2), pageIndex = _step31$value[0], _step31$value$ = _slicedToArray(_step31$value[1], 2), pageDict = _step31$value$[0], ref = _step31$value$[1];\n                            promise = void 0;\n                            if (pageDict instanceof Error) {\n                              promise = Promise.reject(pageDict);\n                              promise.catch(function () {});\n                            } else {\n                              promise = Promise.resolve(new Page({\n                                pdfManager: pdfManager,\n                                xref: this.xref,\n                                pageIndex: pageIndex,\n                                pageDict: pageDict,\n                                ref: ref,\n                                globalIdFactory: this._globalIdFactory,\n                                fontCache: catalog.fontCache,\n                                builtInCMapCache: catalog.builtInCMapCache,\n                                standardFontDataCache: catalog.standardFontDataCache,\n                                globalImageCache: catalog.globalImageCache,\n                                nonBlendModesSet: catalog.nonBlendModesSet,\n                                xfaFactory: null\n                              }));\n                            }\n                            this._pagePromises.set(pageIndex, promise);\n                          }\n                        } catch (err) {\n                          _iterator31.e(err);\n                        } finally {\n                          _iterator31.f();\n                        }\n                        catalog.setActualNumPages(pagesTree.size);\n                      case 44:\n                      case \"end\":\n                        return _context14.stop();\n                    }\n                  }\n                }, _callee14, this, [[3, 21], [29, 35]]);\n              }));\n              function checkLastPage() {\n                return _checkLastPage.apply(this, arguments);\n              }\n              return checkLastPage;\n            }()\n          }, {\n            key: \"fontFallback\",\n            value: function fontFallback(id, handler) {\n              return this.catalog.fontFallback(id, handler);\n            }\n          }, {\n            key: \"cleanup\",\n            value: function () {\n              var _cleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                var manuallyTriggered,\n                  _args15 = arguments;\n                return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                  while (1) {\n                    switch (_context15.prev = _context15.next) {\n                      case 0:\n                        manuallyTriggered = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : false;\n                        return _context15.abrupt(\"return\", this.catalog ? this.catalog.cleanup(manuallyTriggered) : (0, _cleanup_helper.clearGlobalCaches)());\n                      case 2:\n                      case \"end\":\n                        return _context15.stop();\n                    }\n                  }\n                }, _callee15, this);\n              }));\n              function cleanup() {\n                return _cleanup.apply(this, arguments);\n              }\n              return cleanup;\n            }()\n          }, {\n            key: \"_collectFieldObjects\",\n            value: function _collectFieldObjects(name, fieldRef, promises) {\n              var field = this.xref.fetchIfRef(fieldRef);\n              if (field.has(\"T\")) {\n                var partName = (0, _util.stringToPDFString)(field.get(\"T\"));\n                if (name === \"\") {\n                  name = partName;\n                } else {\n                  name = \"\".concat(name, \".\").concat(partName);\n                }\n              }\n              if (!promises.has(name)) {\n                promises.set(name, []);\n              }\n              promises.get(name).push(_annotation.AnnotationFactory.create(this.xref, fieldRef, this.pdfManager, this._localIdFactory, true).then(function (annotation) {\n                return annotation && annotation.getFieldObject();\n              }).catch(function (reason) {\n                (0, _util.warn)(\"_collectFieldObjects: \\\"\".concat(reason, \"\\\".\"));\n                return null;\n              }));\n              if (field.has(\"Kids\")) {\n                var kids = field.get(\"Kids\");\n                var _iterator32 = _createForOfIteratorHelper(kids),\n                  _step32;\n                try {\n                  for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                    var kid = _step32.value;\n                    this._collectFieldObjects(name, kid, promises);\n                  }\n                } catch (err) {\n                  _iterator32.e(err);\n                } finally {\n                  _iterator32.f();\n                }\n              }\n            }\n          }, {\n            key: \"_parseHasJSActions\",\n            value: function () {\n              var _parseHasJSActions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n                var _yield$Promise$all3, _yield$Promise$all4, catalogJsActions, fieldObjects;\n                return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n                  while (1) {\n                    switch (_context16.prev = _context16.next) {\n                      case 0:\n                        _context16.next = 2;\n                        return Promise.all([this.pdfManager.ensureCatalog(\"jsActions\"), this.pdfManager.ensureDoc(\"fieldObjects\")]);\n                      case 2:\n                        _yield$Promise$all3 = _context16.sent;\n                        _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n                        catalogJsActions = _yield$Promise$all4[0];\n                        fieldObjects = _yield$Promise$all4[1];\n                        if (!catalogJsActions) {\n                          _context16.next = 8;\n                          break;\n                        }\n                        return _context16.abrupt(\"return\", true);\n                      case 8:\n                        if (!fieldObjects) {\n                          _context16.next = 10;\n                          break;\n                        }\n                        return _context16.abrupt(\"return\", Object.values(fieldObjects).some(function (fieldObject) {\n                          return fieldObject.some(function (object) {\n                            return object.actions !== null;\n                          });\n                        }));\n                      case 10:\n                        return _context16.abrupt(\"return\", false);\n                      case 11:\n                      case \"end\":\n                        return _context16.stop();\n                    }\n                  }\n                }, _callee16, this);\n              }));\n              function _parseHasJSActions() {\n                return _parseHasJSActions2.apply(this, arguments);\n              }\n              return _parseHasJSActions;\n            }()\n          }, {\n            key: \"linearization\",\n            get: function get() {\n              var linearization = null;\n              try {\n                linearization = _parser.Linearization.create(this.stream);\n              } catch (err) {\n                if (err instanceof _core_utils.MissingDataException) {\n                  throw err;\n                }\n                (0, _util.info)(err);\n              }\n              return (0, _util.shadow)(this, \"linearization\", linearization);\n            }\n          }, {\n            key: \"startXRef\",\n            get: function get() {\n              var stream = this.stream;\n              var startXRef = 0;\n              if (this.linearization) {\n                stream.reset();\n                if (find(stream, ENDOBJ_SIGNATURE)) {\n                  startXRef = stream.pos + 6 - stream.start;\n                }\n              } else {\n                var step = 1024;\n                var startXRefLength = STARTXREF_SIGNATURE.length;\n                var found = false,\n                  pos = stream.end;\n                while (!found && pos > 0) {\n                  pos -= step - startXRefLength;\n                  if (pos < 0) {\n                    pos = 0;\n                  }\n                  stream.pos = pos;\n                  found = find(stream, STARTXREF_SIGNATURE, step, true);\n                }\n                if (found) {\n                  stream.skip(9);\n                  var ch;\n                  do {\n                    ch = stream.getByte();\n                  } while ((0, _core_utils.isWhiteSpace)(ch));\n                  var str = \"\";\n                  while (ch >= 0x20 && ch <= 0x39) {\n                    str += String.fromCharCode(ch);\n                    ch = stream.getByte();\n                  }\n                  startXRef = parseInt(str, 10);\n                  if (isNaN(startXRef)) {\n                    startXRef = 0;\n                  }\n                }\n              }\n              return (0, _util.shadow)(this, \"startXRef\", startXRef);\n            }\n          }, {\n            key: \"numPages\",\n            get: function get() {\n              var num = 0;\n              if (this.catalog.hasActualNumPages) {\n                num = this.catalog.numPages;\n              } else if (this.xfaFactory) {\n                num = this.xfaFactory.getNumPages();\n              } else if (this.linearization) {\n                num = this.linearization.numPages;\n              } else {\n                num = this.catalog.numPages;\n              }\n              return (0, _util.shadow)(this, \"numPages\", num);\n            }\n          }, {\n            key: \"_xfaStreams\",\n            get: function get() {\n              var acroForm = this.catalog.acroForm;\n              if (!acroForm) {\n                return null;\n              }\n              var xfa = acroForm.get(\"XFA\");\n              var entries = {\n                \"xdp:xdp\": \"\",\n                template: \"\",\n                datasets: \"\",\n                config: \"\",\n                connectionSet: \"\",\n                localeSet: \"\",\n                stylesheet: \"\",\n                \"/xdp:xdp\": \"\"\n              };\n              if (xfa instanceof _base_stream.BaseStream && !xfa.isEmpty) {\n                entries[\"xdp:xdp\"] = xfa;\n                return entries;\n              }\n              if (!Array.isArray(xfa) || xfa.length === 0) {\n                return null;\n              }\n              for (var i = 0, ii = xfa.length; i < ii; i += 2) {\n                var name = void 0;\n                if (i === 0) {\n                  name = \"xdp:xdp\";\n                } else if (i === ii - 2) {\n                  name = \"/xdp:xdp\";\n                } else {\n                  name = xfa[i];\n                }\n                if (!entries.hasOwnProperty(name)) {\n                  continue;\n                }\n                var data = this.xref.fetchIfRef(xfa[i + 1]);\n                if (!(data instanceof _base_stream.BaseStream) || data.isEmpty) {\n                  continue;\n                }\n                entries[name] = data;\n              }\n              return entries;\n            }\n          }, {\n            key: \"xfaDatasets\",\n            get: function get() {\n              var streams = this._xfaStreams;\n              if (!streams) {\n                return (0, _util.shadow)(this, \"xfaDatasets\", null);\n              }\n              for (var _i6 = 0, _arr2 = [\"datasets\", \"xdp:xdp\"]; _i6 < _arr2.length; _i6++) {\n                var key = _arr2[_i6];\n                var stream = streams[key];\n                if (!stream) {\n                  continue;\n                }\n                try {\n                  var str = (0, _util.stringToUTF8String)(stream.getString());\n                  var data = _defineProperty({}, key, str);\n                  return (0, _util.shadow)(this, \"xfaDatasets\", new _dataset_reader.DatasetReader(data));\n                } catch (_) {\n                  (0, _util.warn)(\"XFA - Invalid utf-8 string.\");\n                  break;\n                }\n              }\n              return (0, _util.shadow)(this, \"xfaDatasets\", null);\n            }\n          }, {\n            key: \"xfaData\",\n            get: function get() {\n              var streams = this._xfaStreams;\n              if (!streams) {\n                return null;\n              }\n              var data = Object.create(null);\n              for (var _i7 = 0, _Object$entries3 = Object.entries(streams); _i7 < _Object$entries3.length; _i7++) {\n                var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i7], 2),\n                  key = _Object$entries3$_i[0],\n                  stream = _Object$entries3$_i[1];\n                if (!stream) {\n                  continue;\n                }\n                try {\n                  data[key] = (0, _util.stringToUTF8String)(stream.getString());\n                } catch (_) {\n                  (0, _util.warn)(\"XFA - Invalid utf-8 string.\");\n                  return null;\n                }\n              }\n              return data;\n            }\n          }, {\n            key: \"xfaFactory\",\n            get: function get() {\n              var data;\n              if (this.pdfManager.enableXfa && this.catalog.needsRendering && this.formInfo.hasXfa && !this.formInfo.hasAcroForm) {\n                data = this.xfaData;\n              }\n              return (0, _util.shadow)(this, \"xfaFactory\", data ? new _factory.XFAFactory(data) : null);\n            }\n          }, {\n            key: \"isPureXfa\",\n            get: function get() {\n              return this.xfaFactory ? this.xfaFactory.isValid() : false;\n            }\n          }, {\n            key: \"htmlForXfa\",\n            get: function get() {\n              return this.xfaFactory ? this.xfaFactory.getPages() : null;\n            }\n          }, {\n            key: \"formInfo\",\n            get: function get() {\n              var formInfo = {\n                hasFields: false,\n                hasAcroForm: false,\n                hasXfa: false,\n                hasSignatures: false\n              };\n              var acroForm = this.catalog.acroForm;\n              if (!acroForm) {\n                return (0, _util.shadow)(this, \"formInfo\", formInfo);\n              }\n              try {\n                var fields = acroForm.get(\"Fields\");\n                var hasFields = Array.isArray(fields) && fields.length > 0;\n                formInfo.hasFields = hasFields;\n                var xfa = acroForm.get(\"XFA\");\n                formInfo.hasXfa = Array.isArray(xfa) && xfa.length > 0 || xfa instanceof _base_stream.BaseStream && !xfa.isEmpty;\n                var sigFlags = acroForm.get(\"SigFlags\");\n                var hasSignatures = !!(sigFlags & 0x1);\n                var hasOnlyDocumentSignatures = hasSignatures && this._hasOnlyDocumentSignatures(fields);\n                formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;\n                formInfo.hasSignatures = hasSignatures;\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Cannot fetch form information: \\\"\".concat(ex, \"\\\".\"));\n              }\n              return (0, _util.shadow)(this, \"formInfo\", formInfo);\n            }\n          }, {\n            key: \"documentInfo\",\n            get: function get() {\n              var version = this._version;\n              if (typeof version !== \"string\" || !PDF_HEADER_VERSION_REGEXP.test(version)) {\n                (0, _util.warn)(\"Invalid PDF header version number: \".concat(version));\n                version = null;\n              }\n              var docInfo = {\n                PDFFormatVersion: version,\n                Language: this.catalog.lang,\n                EncryptFilterName: this.xref.encrypt ? this.xref.encrypt.filterName : null,\n                IsLinearized: !!this.linearization,\n                IsAcroFormPresent: this.formInfo.hasAcroForm,\n                IsXFAPresent: this.formInfo.hasXfa,\n                IsCollectionPresent: !!this.catalog.collection,\n                IsSignaturesPresent: this.formInfo.hasSignatures\n              };\n              var infoDict;\n              try {\n                infoDict = this.xref.trailer.get(\"Info\");\n              } catch (err) {\n                if (err instanceof _core_utils.MissingDataException) {\n                  throw err;\n                }\n                (0, _util.info)(\"The document information dictionary is invalid.\");\n              }\n              if (!(infoDict instanceof _primitives.Dict)) {\n                return (0, _util.shadow)(this, \"documentInfo\", docInfo);\n              }\n              var _iterator33 = _createForOfIteratorHelper(infoDict.getKeys()),\n                _step33;\n              try {\n                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n                  var key = _step33.value;\n                  var value = infoDict.get(key);\n                  switch (key) {\n                    case \"Title\":\n                    case \"Author\":\n                    case \"Subject\":\n                    case \"Keywords\":\n                    case \"Creator\":\n                    case \"Producer\":\n                    case \"CreationDate\":\n                    case \"ModDate\":\n                      if (typeof value === \"string\") {\n                        docInfo[key] = (0, _util.stringToPDFString)(value);\n                        continue;\n                      }\n                      break;\n                    case \"Trapped\":\n                      if (value instanceof _primitives.Name) {\n                        docInfo[key] = value;\n                        continue;\n                      }\n                      break;\n                    default:\n                      var customValue = void 0;\n                      switch (typeof value) {\n                        case \"string\":\n                          customValue = (0, _util.stringToPDFString)(value);\n                          break;\n                        case \"number\":\n                        case \"boolean\":\n                          customValue = value;\n                          break;\n                        default:\n                          if (value instanceof _primitives.Name) {\n                            customValue = value;\n                          }\n                          break;\n                      }\n                      if (customValue === undefined) {\n                        (0, _util.warn)(\"Bad value, for custom key \\\"\".concat(key, \"\\\", in Info: \").concat(value, \".\"));\n                        continue;\n                      }\n                      if (!docInfo.Custom) {\n                        docInfo.Custom = Object.create(null);\n                      }\n                      docInfo.Custom[key] = customValue;\n                      continue;\n                  }\n                  (0, _util.warn)(\"Bad value, for key \\\"\".concat(key, \"\\\", in Info: \").concat(value, \".\"));\n                }\n              } catch (err) {\n                _iterator33.e(err);\n              } finally {\n                _iterator33.f();\n              }\n              return (0, _util.shadow)(this, \"documentInfo\", docInfo);\n            }\n          }, {\n            key: \"fingerprints\",\n            get: function get() {\n              function validate(data) {\n                return typeof data === \"string\" && data.length > 0 && data !== EMPTY_FINGERPRINT;\n              }\n              function hexString(hash) {\n                var buf = [];\n                for (var i = 0, ii = hash.length; i < ii; i++) {\n                  var hex = hash[i].toString(16);\n                  buf.push(hex.padStart(2, \"0\"));\n                }\n                return buf.join(\"\");\n              }\n              var idArray = this.xref.trailer.get(\"ID\");\n              var hashOriginal, hashModified;\n              if (Array.isArray(idArray) && validate(idArray[0])) {\n                hashOriginal = (0, _util.stringToBytes)(idArray[0]);\n                if (idArray[1] !== idArray[0] && validate(idArray[1])) {\n                  hashModified = (0, _util.stringToBytes)(idArray[1]);\n                }\n              } else {\n                hashOriginal = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);\n              }\n              return (0, _util.shadow)(this, \"fingerprints\", [hexString(hashOriginal), hashModified ? hexString(hashModified) : null]);\n            }\n          }, {\n            key: \"fieldObjects\",\n            get: function get() {\n              if (!this.formInfo.hasFields) {\n                return (0, _util.shadow)(this, \"fieldObjects\", Promise.resolve(null));\n              }\n              var allFields = Object.create(null);\n              var fieldPromises = new Map();\n              var _iterator34 = _createForOfIteratorHelper(this.catalog.acroForm.get(\"Fields\")),\n                _step34;\n              try {\n                for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n                  var fieldRef = _step34.value;\n                  this._collectFieldObjects(\"\", fieldRef, fieldPromises);\n                }\n              } catch (err) {\n                _iterator34.e(err);\n              } finally {\n                _iterator34.f();\n              }\n              var allPromises = [];\n              var _iterator35 = _createForOfIteratorHelper(fieldPromises),\n                _step35;\n              try {\n                var _loop3 = function _loop3() {\n                  var _step35$value = _slicedToArray(_step35.value, 2),\n                    name = _step35$value[0],\n                    promises = _step35$value[1];\n                  allPromises.push(Promise.all(promises).then(function (fields) {\n                    fields = fields.filter(function (field) {\n                      return !!field;\n                    });\n                    if (fields.length > 0) {\n                      allFields[name] = fields;\n                    }\n                  }));\n                };\n                for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n                  _loop3();\n                }\n              } catch (err) {\n                _iterator35.e(err);\n              } finally {\n                _iterator35.f();\n              }\n              return (0, _util.shadow)(this, \"fieldObjects\", Promise.all(allPromises).then(function () {\n                return allFields;\n              }));\n            }\n          }, {\n            key: \"hasJSActions\",\n            get: function get() {\n              var promise = this.pdfManager.ensureDoc(\"_parseHasJSActions\");\n              return (0, _util.shadow)(this, \"hasJSActions\", promise);\n            }\n          }, {\n            key: \"calculationOrderIds\",\n            get: function get() {\n              var acroForm = this.catalog.acroForm;\n              if (!acroForm || !acroForm.has(\"CO\")) {\n                return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n              }\n              var calculationOrder = acroForm.get(\"CO\");\n              if (!Array.isArray(calculationOrder) || calculationOrder.length === 0) {\n                return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n              }\n              var ids = [];\n              var _iterator36 = _createForOfIteratorHelper(calculationOrder),\n                _step36;\n              try {\n                for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n                  var id = _step36.value;\n                  if (id instanceof _primitives.Ref) {\n                    ids.push(id.toString());\n                  }\n                }\n              } catch (err) {\n                _iterator36.e(err);\n              } finally {\n                _iterator36.f();\n              }\n              if (ids.length === 0) {\n                return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n              }\n              return (0, _util.shadow)(this, \"calculationOrderIds\", ids);\n            }\n          }]);\n          return PDFDocument;\n        }();\n        exports.PDFDocument = PDFDocument;\n\n        /***/\n      }, /* 12 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PopupAnnotation = exports.MarkupAnnotation = exports.AnnotationFactory = exports.AnnotationBorderStyle = exports.Annotation = void 0;\n        exports.getQuadPoints = getQuadPoints;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _default_appearance = __w_pdfjs_require__(13);\n        var _primitives = __w_pdfjs_require__(5);\n        var _writer = __w_pdfjs_require__(65);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _bidi = __w_pdfjs_require__(60);\n        var _catalog = __w_pdfjs_require__(69);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _file_spec = __w_pdfjs_require__(72);\n        var _object_loader = __w_pdfjs_require__(75);\n        var _operator_list = __w_pdfjs_require__(62);\n        var _stream = __w_pdfjs_require__(10);\n        var _factory = __w_pdfjs_require__(76);\n        var AnnotationFactory = /*#__PURE__*/function () {\n          function AnnotationFactory() {\n            _classCallCheck(this, AnnotationFactory);\n          }\n          _createClass(AnnotationFactory, null, [{\n            key: \"create\",\n            value: function create(xref, ref, pdfManager, idFactory, collectFields) {\n              var _this18 = this;\n              return Promise.all([pdfManager.ensureCatalog(\"acroForm\"), pdfManager.ensureCatalog(\"baseUrl\"), pdfManager.ensureDoc(\"xfaDatasets\"), collectFields ? this._getPageIndex(xref, ref, pdfManager) : -1]).then(function (_ref23) {\n                var _ref24 = _slicedToArray(_ref23, 4),\n                  acroForm = _ref24[0],\n                  baseUrl = _ref24[1],\n                  xfaDatasets = _ref24[2],\n                  pageIndex = _ref24[3];\n                return pdfManager.ensure(_this18, \"_create\", [xref, ref, pdfManager, idFactory, acroForm, xfaDatasets, collectFields, pageIndex]);\n              });\n            }\n          }, {\n            key: \"_create\",\n            value: function _create(xref, ref, pdfManager, idFactory, acroForm, xfaDatasets, collectFields) {\n              var pageIndex = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;\n              var dict = xref.fetchIfRef(ref);\n              if (!(dict instanceof _primitives.Dict)) {\n                return undefined;\n              }\n              var id = ref instanceof _primitives.Ref ? ref.toString() : \"annot_\".concat(idFactory.createObjId());\n              var subtype = dict.get(\"Subtype\");\n              subtype = subtype instanceof _primitives.Name ? subtype.name : null;\n              var parameters = {\n                xref: xref,\n                ref: ref,\n                dict: dict,\n                subtype: subtype,\n                id: id,\n                pdfManager: pdfManager,\n                acroForm: acroForm instanceof _primitives.Dict ? acroForm : _primitives.Dict.empty,\n                xfaDatasets: xfaDatasets,\n                collectFields: collectFields,\n                pageIndex: pageIndex\n              };\n              switch (subtype) {\n                case \"Link\":\n                  return new LinkAnnotation(parameters);\n                case \"Text\":\n                  return new TextAnnotation(parameters);\n                case \"Widget\":\n                  var fieldType = (0, _core_utils.getInheritableProperty)({\n                    dict: dict,\n                    key: \"FT\"\n                  });\n                  fieldType = fieldType instanceof _primitives.Name ? fieldType.name : null;\n                  switch (fieldType) {\n                    case \"Tx\":\n                      return new TextWidgetAnnotation(parameters);\n                    case \"Btn\":\n                      return new ButtonWidgetAnnotation(parameters);\n                    case \"Ch\":\n                      return new ChoiceWidgetAnnotation(parameters);\n                    case \"Sig\":\n                      return new SignatureWidgetAnnotation(parameters);\n                  }\n                  (0, _util.warn)(\"Unimplemented widget field type \\\"\".concat(fieldType, \"\\\", \") + \"falling back to base field type.\");\n                  return new WidgetAnnotation(parameters);\n                case \"Popup\":\n                  return new PopupAnnotation(parameters);\n                case \"FreeText\":\n                  return new FreeTextAnnotation(parameters);\n                case \"Line\":\n                  return new LineAnnotation(parameters);\n                case \"Square\":\n                  return new SquareAnnotation(parameters);\n                case \"Circle\":\n                  return new CircleAnnotation(parameters);\n                case \"PolyLine\":\n                  return new PolylineAnnotation(parameters);\n                case \"Polygon\":\n                  return new PolygonAnnotation(parameters);\n                case \"Caret\":\n                  return new CaretAnnotation(parameters);\n                case \"Ink\":\n                  return new InkAnnotation(parameters);\n                case \"Highlight\":\n                  return new HighlightAnnotation(parameters);\n                case \"Underline\":\n                  return new UnderlineAnnotation(parameters);\n                case \"Squiggly\":\n                  return new SquigglyAnnotation(parameters);\n                case \"StrikeOut\":\n                  return new StrikeOutAnnotation(parameters);\n                case \"Stamp\":\n                  return new StampAnnotation(parameters);\n                case \"FileAttachment\":\n                  return new FileAttachmentAnnotation(parameters);\n                default:\n                  if (!collectFields) {\n                    if (!subtype) {\n                      (0, _util.warn)(\"Annotation is missing the required /Subtype.\");\n                    } else {\n                      (0, _util.warn)(\"Unimplemented annotation type \\\"\".concat(subtype, \"\\\", \") + \"falling back to base annotation.\");\n                    }\n                  }\n                  return new Annotation(parameters);\n              }\n            }\n          }, {\n            key: \"_getPageIndex\",\n            value: function () {\n              var _getPageIndex2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(xref, ref, pdfManager) {\n                var annotDict, pageRef, pageIndex;\n                return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n                  while (1) {\n                    switch (_context17.prev = _context17.next) {\n                      case 0:\n                        _context17.prev = 0;\n                        _context17.next = 3;\n                        return xref.fetchIfRefAsync(ref);\n                      case 3:\n                        annotDict = _context17.sent;\n                        if (annotDict instanceof _primitives.Dict) {\n                          _context17.next = 6;\n                          break;\n                        }\n                        return _context17.abrupt(\"return\", -1);\n                      case 6:\n                        pageRef = annotDict.getRaw(\"P\");\n                        if (pageRef instanceof _primitives.Ref) {\n                          _context17.next = 9;\n                          break;\n                        }\n                        return _context17.abrupt(\"return\", -1);\n                      case 9:\n                        _context17.next = 11;\n                        return pdfManager.ensureCatalog(\"getPageIndex\", [pageRef]);\n                      case 11:\n                        pageIndex = _context17.sent;\n                        return _context17.abrupt(\"return\", pageIndex);\n                      case 15:\n                        _context17.prev = 15;\n                        _context17.t0 = _context17[\"catch\"](0);\n                        (0, _util.warn)(\"_getPageIndex: \\\"\".concat(_context17.t0, \"\\\".\"));\n                        return _context17.abrupt(\"return\", -1);\n                      case 19:\n                      case \"end\":\n                        return _context17.stop();\n                    }\n                  }\n                }, _callee17, null, [[0, 15]]);\n              }));\n              function _getPageIndex(_x24, _x25, _x26) {\n                return _getPageIndex2.apply(this, arguments);\n              }\n              return _getPageIndex;\n            }()\n          }, {\n            key: \"saveNewAnnotations\",\n            value: function () {\n              var _saveNewAnnotations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(evaluator, task, annotations) {\n                var xref, baseFontRef, dependencies, promises, _iterator37, _step37, annotation, baseFont, buffer;\n                return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n                  while (1) {\n                    switch (_context18.prev = _context18.next) {\n                      case 0:\n                        xref = evaluator.xref;\n                        dependencies = [];\n                        promises = [];\n                        _iterator37 = _createForOfIteratorHelper(annotations);\n                        _context18.prev = 4;\n                        _iterator37.s();\n                      case 6:\n                        if ((_step37 = _iterator37.n()).done) {\n                          _context18.next = 17;\n                          break;\n                        }\n                        annotation = _step37.value;\n                        _context18.t0 = annotation.annotationType;\n                        _context18.next = _context18.t0 === _util.AnnotationEditorType.FREETEXT ? 11 : _context18.t0 === _util.AnnotationEditorType.INK ? 14 : 15;\n                        break;\n                      case 11:\n                        if (!baseFontRef) {\n                          baseFont = new _primitives.Dict(xref);\n                          baseFont.set(\"BaseFont\", _primitives.Name.get(\"Helvetica\"));\n                          baseFont.set(\"Type\", _primitives.Name.get(\"Font\"));\n                          baseFont.set(\"Subtype\", _primitives.Name.get(\"Type1\"));\n                          baseFont.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n                          buffer = [];\n                          baseFontRef = xref.getNewRef();\n                          (0, _writer.writeObject)(baseFontRef, baseFont, buffer, null);\n                          dependencies.push({\n                            ref: baseFontRef,\n                            data: buffer.join(\"\")\n                          });\n                        }\n                        promises.push(FreeTextAnnotation.createNewAnnotation(xref, annotation, dependencies, {\n                          evaluator: evaluator,\n                          task: task,\n                          baseFontRef: baseFontRef\n                        }));\n                        return _context18.abrupt(\"break\", 15);\n                      case 14:\n                        promises.push(InkAnnotation.createNewAnnotation(xref, annotation, dependencies));\n                      case 15:\n                        _context18.next = 6;\n                        break;\n                      case 17:\n                        _context18.next = 22;\n                        break;\n                      case 19:\n                        _context18.prev = 19;\n                        _context18.t1 = _context18[\"catch\"](4);\n                        _iterator37.e(_context18.t1);\n                      case 22:\n                        _context18.prev = 22;\n                        _iterator37.f();\n                        return _context18.finish(22);\n                      case 25:\n                        _context18.next = 27;\n                        return Promise.all(promises);\n                      case 27:\n                        _context18.t2 = _context18.sent;\n                        _context18.t3 = dependencies;\n                        return _context18.abrupt(\"return\", {\n                          annotations: _context18.t2,\n                          dependencies: _context18.t3\n                        });\n                      case 30:\n                      case \"end\":\n                        return _context18.stop();\n                    }\n                  }\n                }, _callee18, null, [[4, 19, 22, 25]]);\n              }));\n              function saveNewAnnotations(_x27, _x28, _x29) {\n                return _saveNewAnnotations2.apply(this, arguments);\n              }\n              return saveNewAnnotations;\n            }()\n          }, {\n            key: \"printNewAnnotations\",\n            value: function () {\n              var _printNewAnnotations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(evaluator, task, annotations) {\n                var xref, promises, _iterator38, _step38, annotation;\n                return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n                  while (1) {\n                    switch (_context19.prev = _context19.next) {\n                      case 0:\n                        if (annotations) {\n                          _context19.next = 2;\n                          break;\n                        }\n                        return _context19.abrupt(\"return\", null);\n                      case 2:\n                        xref = evaluator.xref;\n                        promises = [];\n                        _iterator38 = _createForOfIteratorHelper(annotations);\n                        _context19.prev = 5;\n                        _iterator38.s();\n                      case 7:\n                        if ((_step38 = _iterator38.n()).done) {\n                          _context19.next = 18;\n                          break;\n                        }\n                        annotation = _step38.value;\n                        _context19.t0 = annotation.annotationType;\n                        _context19.next = _context19.t0 === _util.AnnotationEditorType.FREETEXT ? 12 : _context19.t0 === _util.AnnotationEditorType.INK ? 14 : 16;\n                        break;\n                      case 12:\n                        promises.push(FreeTextAnnotation.createNewPrintAnnotation(xref, annotation, {\n                          evaluator: evaluator,\n                          task: task\n                        }));\n                        return _context19.abrupt(\"break\", 16);\n                      case 14:\n                        promises.push(InkAnnotation.createNewPrintAnnotation(xref, annotation));\n                        return _context19.abrupt(\"break\", 16);\n                      case 16:\n                        _context19.next = 7;\n                        break;\n                      case 18:\n                        _context19.next = 23;\n                        break;\n                      case 20:\n                        _context19.prev = 20;\n                        _context19.t1 = _context19[\"catch\"](5);\n                        _iterator38.e(_context19.t1);\n                      case 23:\n                        _context19.prev = 23;\n                        _iterator38.f();\n                        return _context19.finish(23);\n                      case 26:\n                        return _context19.abrupt(\"return\", Promise.all(promises));\n                      case 27:\n                      case \"end\":\n                        return _context19.stop();\n                    }\n                  }\n                }, _callee19, null, [[5, 20, 23, 26]]);\n              }));\n              function printNewAnnotations(_x30, _x31, _x32) {\n                return _printNewAnnotations.apply(this, arguments);\n              }\n              return printNewAnnotations;\n            }()\n          }]);\n          return AnnotationFactory;\n        }();\n        exports.AnnotationFactory = AnnotationFactory;\n        function getRgbColor(color) {\n          var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8ClampedArray(3);\n          if (!Array.isArray(color)) {\n            return defaultColor;\n          }\n          var rgbColor = defaultColor || new Uint8ClampedArray(3);\n          switch (color.length) {\n            case 0:\n              return null;\n            case 1:\n              _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n              return rgbColor;\n            case 3:\n              _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n              return rgbColor;\n            case 4:\n              _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n              return rgbColor;\n            default:\n              return defaultColor;\n          }\n        }\n        function getQuadPoints(dict, rect) {\n          if (!dict.has(\"QuadPoints\")) {\n            return null;\n          }\n          var quadPoints = dict.getArray(\"QuadPoints\");\n          if (!Array.isArray(quadPoints) || quadPoints.length === 0 || quadPoints.length % 8 > 0) {\n            return null;\n          }\n          var quadPointsLists = [];\n          for (var i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n            quadPointsLists.push([]);\n            for (var j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n              var x = quadPoints[j];\n              var y = quadPoints[j + 1];\n              if (rect !== null && (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3])) {\n                return null;\n              }\n              quadPointsLists[i].push({\n                x: x,\n                y: y\n              });\n            }\n          }\n          return quadPointsLists.map(function (quadPointsList) {\n            var _quadPointsList$reduc = quadPointsList.reduce(function (_ref25, quadPoint) {\n                var _ref26 = _slicedToArray(_ref25, 4),\n                  mX = _ref26[0],\n                  MX = _ref26[1],\n                  mY = _ref26[2],\n                  MY = _ref26[3];\n                return [Math.min(mX, quadPoint.x), Math.max(MX, quadPoint.x), Math.min(mY, quadPoint.y), Math.max(MY, quadPoint.y)];\n              }, [Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE]),\n              _quadPointsList$reduc2 = _slicedToArray(_quadPointsList$reduc, 4),\n              minX = _quadPointsList$reduc2[0],\n              maxX = _quadPointsList$reduc2[1],\n              minY = _quadPointsList$reduc2[2],\n              maxY = _quadPointsList$reduc2[3];\n            return [{\n              x: minX,\n              y: maxY\n            }, {\n              x: maxX,\n              y: maxY\n            }, {\n              x: minX,\n              y: minY\n            }, {\n              x: maxX,\n              y: minY\n            }];\n          });\n        }\n        function getTransformMatrix(rect, bbox, matrix) {\n          var _util$Util$getAxialAl = _util.Util.getAxialAlignedBoundingBox(bbox, matrix),\n            _util$Util$getAxialAl2 = _slicedToArray(_util$Util$getAxialAl, 4),\n            minX = _util$Util$getAxialAl2[0],\n            minY = _util$Util$getAxialAl2[1],\n            maxX = _util$Util$getAxialAl2[2],\n            maxY = _util$Util$getAxialAl2[3];\n          if (minX === maxX || minY === maxY) {\n            return [1, 0, 0, 1, rect[0], rect[1]];\n          }\n          var xRatio = (rect[2] - rect[0]) / (maxX - minX);\n          var yRatio = (rect[3] - rect[1]) / (maxY - minY);\n          return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];\n        }\n        var Annotation = /*#__PURE__*/function () {\n          function Annotation(params) {\n            _classCallCheck(this, Annotation);\n            var dict = params.dict;\n            this.setTitle(dict.get(\"T\"));\n            this.setContents(dict.get(\"Contents\"));\n            this.setModificationDate(dict.get(\"M\"));\n            this.setFlags(dict.get(\"F\"));\n            this.setRectangle(dict.getArray(\"Rect\"));\n            this.setColor(dict.getArray(\"C\"));\n            this.setBorderStyle(dict);\n            this.setAppearance(dict);\n            this.setOptionalContent(dict);\n            var MK = dict.get(\"MK\");\n            this.setBorderAndBackgroundColors(MK);\n            this.setRotation(MK);\n            this._streams = [];\n            if (this.appearance) {\n              this._streams.push(this.appearance);\n            }\n            this.data = {\n              annotationFlags: this.flags,\n              borderStyle: this.borderStyle,\n              color: this.color,\n              backgroundColor: this.backgroundColor,\n              borderColor: this.borderColor,\n              rotation: this.rotation,\n              contentsObj: this._contents,\n              hasAppearance: !!this.appearance,\n              id: params.id,\n              modificationDate: this.modificationDate,\n              rect: this.rectangle,\n              subtype: params.subtype,\n              hasOwnCanvas: false\n            };\n            if (params.collectFields) {\n              var kids = dict.get(\"Kids\");\n              if (Array.isArray(kids)) {\n                var kidIds = [];\n                var _iterator39 = _createForOfIteratorHelper(kids),\n                  _step39;\n                try {\n                  for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n                    var kid = _step39.value;\n                    if (kid instanceof _primitives.Ref) {\n                      kidIds.push(kid.toString());\n                    }\n                  }\n                } catch (err) {\n                  _iterator39.e(err);\n                } finally {\n                  _iterator39.f();\n                }\n                if (kidIds.length !== 0) {\n                  this.data.kidIds = kidIds;\n                }\n              }\n              this.data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);\n              this.data.fieldName = this._constructFieldName(dict);\n              this.data.pageIndex = params.pageIndex;\n            }\n            this._fallbackFontDict = null;\n          }\n          _createClass(Annotation, [{\n            key: \"_hasFlag\",\n            value: function _hasFlag(flags, flag) {\n              return !!(flags & flag);\n            }\n          }, {\n            key: \"_isViewable\",\n            value: function _isViewable(flags) {\n              return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);\n            }\n          }, {\n            key: \"_isPrintable\",\n            value: function _isPrintable(flags) {\n              return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE);\n            }\n          }, {\n            key: \"mustBeViewed\",\n            value: function mustBeViewed(annotationStorage) {\n              var storageEntry = annotationStorage && annotationStorage.get(this.data.id);\n              if (storageEntry && storageEntry.hidden !== undefined) {\n                return !storageEntry.hidden;\n              }\n              return this.viewable && !this._hasFlag(this.flags, _util.AnnotationFlag.HIDDEN);\n            }\n          }, {\n            key: \"mustBePrinted\",\n            value: function mustBePrinted(annotationStorage) {\n              var storageEntry = annotationStorage && annotationStorage.get(this.data.id);\n              if (storageEntry && storageEntry.print !== undefined) {\n                return storageEntry.print;\n              }\n              return this.printable;\n            }\n          }, {\n            key: \"_parseStringHelper\",\n            value: function _parseStringHelper(data) {\n              var str = typeof data === \"string\" ? (0, _util.stringToPDFString)(data) : \"\";\n              var dir = str && (0, _bidi.bidi)(str).dir === \"rtl\" ? \"rtl\" : \"ltr\";\n              return {\n                str: str,\n                dir: dir\n              };\n            }\n          }, {\n            key: \"setTitle\",\n            value: function setTitle(title) {\n              this._title = this._parseStringHelper(title);\n            }\n          }, {\n            key: \"setContents\",\n            value: function setContents(contents) {\n              this._contents = this._parseStringHelper(contents);\n            }\n          }, {\n            key: \"setModificationDate\",\n            value: function setModificationDate(modificationDate) {\n              this.modificationDate = typeof modificationDate === \"string\" ? modificationDate : null;\n            }\n          }, {\n            key: \"setFlags\",\n            value: function setFlags(flags) {\n              this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n            }\n          }, {\n            key: \"hasFlag\",\n            value: function hasFlag(flag) {\n              return this._hasFlag(this.flags, flag);\n            }\n          }, {\n            key: \"setRectangle\",\n            value: function setRectangle(rectangle) {\n              if (Array.isArray(rectangle) && rectangle.length === 4) {\n                this.rectangle = _util.Util.normalizeRect(rectangle);\n              } else {\n                this.rectangle = [0, 0, 0, 0];\n              }\n            }\n          }, {\n            key: \"setColor\",\n            value: function setColor(color) {\n              this.color = getRgbColor(color);\n            }\n          }, {\n            key: \"setLineEndings\",\n            value: function setLineEndings(lineEndings) {\n              this.lineEndings = [\"None\", \"None\"];\n              if (Array.isArray(lineEndings) && lineEndings.length === 2) {\n                for (var i = 0; i < 2; i++) {\n                  var obj = lineEndings[i];\n                  if (obj instanceof _primitives.Name) {\n                    switch (obj.name) {\n                      case \"None\":\n                        continue;\n                      case \"Square\":\n                      case \"Circle\":\n                      case \"Diamond\":\n                      case \"OpenArrow\":\n                      case \"ClosedArrow\":\n                      case \"Butt\":\n                      case \"ROpenArrow\":\n                      case \"RClosedArrow\":\n                      case \"Slash\":\n                        this.lineEndings[i] = obj.name;\n                        continue;\n                    }\n                  }\n                  (0, _util.warn)(\"Ignoring invalid lineEnding: \".concat(obj));\n                }\n              }\n            }\n          }, {\n            key: \"setRotation\",\n            value: function setRotation(mk) {\n              this.rotation = 0;\n              if (mk instanceof _primitives.Dict) {\n                var angle = mk.get(\"R\") || 0;\n                if (Number.isInteger(angle) && angle !== 0) {\n                  angle %= 360;\n                  if (angle < 0) {\n                    angle += 360;\n                  }\n                  if (angle % 90 === 0) {\n                    this.rotation = angle;\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"setBorderAndBackgroundColors\",\n            value: function setBorderAndBackgroundColors(mk) {\n              if (mk instanceof _primitives.Dict) {\n                this.borderColor = getRgbColor(mk.getArray(\"BC\"), null);\n                this.backgroundColor = getRgbColor(mk.getArray(\"BG\"), null);\n              } else {\n                this.borderColor = this.backgroundColor = null;\n              }\n            }\n          }, {\n            key: \"setBorderStyle\",\n            value: function setBorderStyle(borderStyle) {\n              this.borderStyle = new AnnotationBorderStyle();\n              if (!(borderStyle instanceof _primitives.Dict)) {\n                return;\n              }\n              if (borderStyle.has(\"BS\")) {\n                var dict = borderStyle.get(\"BS\");\n                var dictType = dict.get(\"Type\");\n                if (!dictType || (0, _primitives.isName)(dictType, \"Border\")) {\n                  this.borderStyle.setWidth(dict.get(\"W\"), this.rectangle);\n                  this.borderStyle.setStyle(dict.get(\"S\"));\n                  this.borderStyle.setDashArray(dict.getArray(\"D\"));\n                }\n              } else if (borderStyle.has(\"Border\")) {\n                var array = borderStyle.getArray(\"Border\");\n                if (Array.isArray(array) && array.length >= 3) {\n                  this.borderStyle.setHorizontalCornerRadius(array[0]);\n                  this.borderStyle.setVerticalCornerRadius(array[1]);\n                  this.borderStyle.setWidth(array[2], this.rectangle);\n                  if (array.length === 4) {\n                    this.borderStyle.setDashArray(array[3], true);\n                  }\n                }\n              } else {\n                this.borderStyle.setWidth(0);\n              }\n            }\n          }, {\n            key: \"setAppearance\",\n            value: function setAppearance(dict) {\n              this.appearance = null;\n              var appearanceStates = dict.get(\"AP\");\n              if (!(appearanceStates instanceof _primitives.Dict)) {\n                return;\n              }\n              var normalAppearanceState = appearanceStates.get(\"N\");\n              if (normalAppearanceState instanceof _base_stream.BaseStream) {\n                this.appearance = normalAppearanceState;\n                return;\n              }\n              if (!(normalAppearanceState instanceof _primitives.Dict)) {\n                return;\n              }\n              var as = dict.get(\"AS\");\n              if (!(as instanceof _primitives.Name) || !normalAppearanceState.has(as.name)) {\n                return;\n              }\n              this.appearance = normalAppearanceState.get(as.name);\n            }\n          }, {\n            key: \"setOptionalContent\",\n            value: function setOptionalContent(dict) {\n              this.oc = null;\n              var oc = dict.get(\"OC\");\n              if (oc instanceof _primitives.Name) {\n                (0, _util.warn)(\"setOptionalContent: Support for /Name-entry is not implemented.\");\n              } else if (oc instanceof _primitives.Dict) {\n                this.oc = oc;\n              }\n            }\n          }, {\n            key: \"loadResources\",\n            value: function loadResources(keys, appearance) {\n              return appearance.dict.getAsync(\"Resources\").then(function (resources) {\n                if (!resources) {\n                  return undefined;\n                }\n                var objectLoader = new _object_loader.ObjectLoader(resources, keys, resources.xref);\n                return objectLoader.load().then(function () {\n                  return resources;\n                });\n              });\n            }\n          }, {\n            key: \"getOperatorList\",\n            value: function () {\n              var _getOperatorList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(evaluator, task, intent, renderForms, annotationStorage) {\n                var data, appearance, isUsingOwnCanvas, appearanceDict, resources, bbox, matrix, transform, opList, optionalContent;\n                return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n                  while (1) {\n                    switch (_context20.prev = _context20.next) {\n                      case 0:\n                        data = this.data;\n                        appearance = this.appearance;\n                        isUsingOwnCanvas = !!(this.data.hasOwnCanvas && intent & _util.RenderingIntentFlag.DISPLAY);\n                        if (appearance) {\n                          _context20.next = 8;\n                          break;\n                        }\n                        if (isUsingOwnCanvas) {\n                          _context20.next = 6;\n                          break;\n                        }\n                        return _context20.abrupt(\"return\", {\n                          opList: new _operator_list.OperatorList(),\n                          separateForm: false,\n                          separateCanvas: false\n                        });\n                      case 6:\n                        appearance = new _stream.StringStream(\"\");\n                        appearance.dict = new _primitives.Dict();\n                      case 8:\n                        appearanceDict = appearance.dict;\n                        _context20.next = 11;\n                        return this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"], appearance);\n                      case 11:\n                        resources = _context20.sent;\n                        bbox = appearanceDict.getArray(\"BBox\") || [0, 0, 1, 1];\n                        matrix = appearanceDict.getArray(\"Matrix\") || [1, 0, 0, 1, 0, 0];\n                        transform = getTransformMatrix(data.rect, bbox, matrix);\n                        opList = new _operator_list.OperatorList();\n                        if (!this.oc) {\n                          _context20.next = 20;\n                          break;\n                        }\n                        _context20.next = 19;\n                        return evaluator.parseMarkedContentProps(this.oc, null);\n                      case 19:\n                        optionalContent = _context20.sent;\n                      case 20:\n                        if (optionalContent !== undefined) {\n                          opList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", optionalContent]);\n                        }\n                        opList.addOp(_util.OPS.beginAnnotation, [data.id, data.rect, transform, matrix, isUsingOwnCanvas]);\n                        _context20.next = 24;\n                        return evaluator.getOperatorList({\n                          stream: appearance,\n                          task: task,\n                          resources: resources,\n                          operatorList: opList,\n                          fallbackFontDict: this._fallbackFontDict\n                        });\n                      case 24:\n                        opList.addOp(_util.OPS.endAnnotation, []);\n                        if (optionalContent !== undefined) {\n                          opList.addOp(_util.OPS.endMarkedContent, []);\n                        }\n                        this.reset();\n                        return _context20.abrupt(\"return\", {\n                          opList: opList,\n                          separateForm: false,\n                          separateCanvas: isUsingOwnCanvas\n                        });\n                      case 28:\n                      case \"end\":\n                        return _context20.stop();\n                    }\n                  }\n                }, _callee20, this);\n              }));\n              function getOperatorList(_x33, _x34, _x35, _x36, _x37) {\n                return _getOperatorList.apply(this, arguments);\n              }\n              return getOperatorList;\n            }()\n          }, {\n            key: \"save\",\n            value: function () {\n              var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(evaluator, task, annotationStorage) {\n                return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n                  while (1) {\n                    switch (_context21.prev = _context21.next) {\n                      case 0:\n                        return _context21.abrupt(\"return\", null);\n                      case 1:\n                      case \"end\":\n                        return _context21.stop();\n                    }\n                  }\n                }, _callee21);\n              }));\n              function save(_x38, _x39, _x40) {\n                return _save.apply(this, arguments);\n              }\n              return save;\n            }()\n          }, {\n            key: \"extractTextContent\",\n            value: function () {\n              var _extractTextContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(evaluator, task, viewBox) {\n                var resources, text, buffer, sink;\n                return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n                  while (1) {\n                    switch (_context22.prev = _context22.next) {\n                      case 0:\n                        if (this.appearance) {\n                          _context22.next = 2;\n                          break;\n                        }\n                        return _context22.abrupt(\"return\");\n                      case 2:\n                        _context22.next = 4;\n                        return this.loadResources([\"ExtGState\", \"Font\", \"Properties\", \"XObject\"], this.appearance);\n                      case 4:\n                        resources = _context22.sent;\n                        text = [];\n                        buffer = [];\n                        sink = {\n                          desiredSize: Math.Infinity,\n                          ready: true,\n                          enqueue: function enqueue(chunk, size) {\n                            var _iterator40 = _createForOfIteratorHelper(chunk.items),\n                              _step40;\n                            try {\n                              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n                                var item = _step40.value;\n                                buffer.push(item.str);\n                                if (item.hasEOL) {\n                                  text.push(buffer.join(\"\"));\n                                  buffer.length = 0;\n                                }\n                              }\n                            } catch (err) {\n                              _iterator40.e(err);\n                            } finally {\n                              _iterator40.f();\n                            }\n                          }\n                        };\n                        _context22.next = 10;\n                        return evaluator.getTextContent({\n                          stream: this.appearance,\n                          task: task,\n                          resources: resources,\n                          includeMarkedContent: true,\n                          combineTextItems: true,\n                          sink: sink,\n                          viewBox: viewBox\n                        });\n                      case 10:\n                        this.reset();\n                        if (buffer.length) {\n                          text.push(buffer.join(\"\"));\n                        }\n                        if (text.length > 0) {\n                          this.data.textContent = text;\n                        }\n                      case 13:\n                      case \"end\":\n                        return _context22.stop();\n                    }\n                  }\n                }, _callee22, this);\n              }));\n              function extractTextContent(_x41, _x42, _x43) {\n                return _extractTextContent.apply(this, arguments);\n              }\n              return extractTextContent;\n            }()\n          }, {\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              if (this.data.kidIds) {\n                return {\n                  id: this.data.id,\n                  actions: this.data.actions,\n                  name: this.data.fieldName,\n                  strokeColor: this.data.borderColor,\n                  fillColor: this.data.backgroundColor,\n                  type: \"\",\n                  kidIds: this.data.kidIds,\n                  page: this.data.pageIndex,\n                  rotation: this.rotation\n                };\n              }\n              return null;\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              var _iterator41 = _createForOfIteratorHelper(this._streams),\n                _step41;\n              try {\n                for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n                  var stream = _step41.value;\n                  stream.reset();\n                }\n              } catch (err) {\n                _iterator41.e(err);\n              } finally {\n                _iterator41.f();\n              }\n            }\n          }, {\n            key: \"_constructFieldName\",\n            value: function _constructFieldName(dict) {\n              if (!dict.has(\"T\") && !dict.has(\"Parent\")) {\n                (0, _util.warn)(\"Unknown field name, falling back to empty field name.\");\n                return \"\";\n              }\n              if (!dict.has(\"Parent\")) {\n                return (0, _util.stringToPDFString)(dict.get(\"T\"));\n              }\n              var fieldName = [];\n              if (dict.has(\"T\")) {\n                fieldName.unshift((0, _util.stringToPDFString)(dict.get(\"T\")));\n              }\n              var loopDict = dict;\n              var visited = new _primitives.RefSet();\n              if (dict.objId) {\n                visited.put(dict.objId);\n              }\n              while (loopDict.has(\"Parent\")) {\n                loopDict = loopDict.get(\"Parent\");\n                if (!(loopDict instanceof _primitives.Dict) || loopDict.objId && visited.has(loopDict.objId)) {\n                  break;\n                }\n                if (loopDict.objId) {\n                  visited.put(loopDict.objId);\n                }\n                if (loopDict.has(\"T\")) {\n                  fieldName.unshift((0, _util.stringToPDFString)(loopDict.get(\"T\")));\n                }\n              }\n              return fieldName.join(\".\");\n            }\n          }, {\n            key: \"viewable\",\n            get: function get() {\n              if (this.data.quadPoints === null) {\n                return false;\n              }\n              if (this.flags === 0) {\n                return true;\n              }\n              return this._isViewable(this.flags);\n            }\n          }, {\n            key: \"printable\",\n            get: function get() {\n              if (this.data.quadPoints === null) {\n                return false;\n              }\n              if (this.flags === 0) {\n                return false;\n              }\n              return this._isPrintable(this.flags);\n            }\n          }, {\n            key: \"hasTextContent\",\n            get: function get() {\n              return false;\n            }\n          }]);\n          return Annotation;\n        }();\n        exports.Annotation = Annotation;\n        var AnnotationBorderStyle = /*#__PURE__*/function () {\n          function AnnotationBorderStyle() {\n            _classCallCheck(this, AnnotationBorderStyle);\n            this.width = 1;\n            this.style = _util.AnnotationBorderStyleType.SOLID;\n            this.dashArray = [3];\n            this.horizontalCornerRadius = 0;\n            this.verticalCornerRadius = 0;\n          }\n          _createClass(AnnotationBorderStyle, [{\n            key: \"setWidth\",\n            value: function setWidth(width) {\n              var rect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0];\n              if (width instanceof _primitives.Name) {\n                this.width = 0;\n                return;\n              }\n              if (typeof width === \"number\") {\n                if (width > 0) {\n                  var maxWidth = (rect[2] - rect[0]) / 2;\n                  var maxHeight = (rect[3] - rect[1]) / 2;\n                  if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {\n                    (0, _util.warn)(\"AnnotationBorderStyle.setWidth - ignoring width: \".concat(width));\n                    width = 1;\n                  }\n                }\n                this.width = width;\n              }\n            }\n          }, {\n            key: \"setStyle\",\n            value: function setStyle(style) {\n              if (!(style instanceof _primitives.Name)) {\n                return;\n              }\n              switch (style.name) {\n                case \"S\":\n                  this.style = _util.AnnotationBorderStyleType.SOLID;\n                  break;\n                case \"D\":\n                  this.style = _util.AnnotationBorderStyleType.DASHED;\n                  break;\n                case \"B\":\n                  this.style = _util.AnnotationBorderStyleType.BEVELED;\n                  break;\n                case \"I\":\n                  this.style = _util.AnnotationBorderStyleType.INSET;\n                  break;\n                case \"U\":\n                  this.style = _util.AnnotationBorderStyleType.UNDERLINE;\n                  break;\n                default:\n                  break;\n              }\n            }\n          }, {\n            key: \"setDashArray\",\n            value: function setDashArray(dashArray) {\n              var forceStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              if (Array.isArray(dashArray) && dashArray.length > 0) {\n                var isValid = true;\n                var allZeros = true;\n                var _iterator42 = _createForOfIteratorHelper(dashArray),\n                  _step42;\n                try {\n                  for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n                    var element = _step42.value;\n                    var validNumber = +element >= 0;\n                    if (!validNumber) {\n                      isValid = false;\n                      break;\n                    } else if (element > 0) {\n                      allZeros = false;\n                    }\n                  }\n                } catch (err) {\n                  _iterator42.e(err);\n                } finally {\n                  _iterator42.f();\n                }\n                if (isValid && !allZeros) {\n                  this.dashArray = dashArray;\n                  if (forceStyle) {\n                    this.setStyle(_primitives.Name.get(\"D\"));\n                  }\n                } else {\n                  this.width = 0;\n                }\n              } else if (dashArray) {\n                this.width = 0;\n              }\n            }\n          }, {\n            key: \"setHorizontalCornerRadius\",\n            value: function setHorizontalCornerRadius(radius) {\n              if (Number.isInteger(radius)) {\n                this.horizontalCornerRadius = radius;\n              }\n            }\n          }, {\n            key: \"setVerticalCornerRadius\",\n            value: function setVerticalCornerRadius(radius) {\n              if (Number.isInteger(radius)) {\n                this.verticalCornerRadius = radius;\n              }\n            }\n          }]);\n          return AnnotationBorderStyle;\n        }();\n        exports.AnnotationBorderStyle = AnnotationBorderStyle;\n        var MarkupAnnotation = /*#__PURE__*/function (_Annotation) {\n          _inherits(MarkupAnnotation, _Annotation);\n          function MarkupAnnotation(parameters) {\n            var _this19;\n            _classCallCheck(this, MarkupAnnotation);\n            _this19 = _possibleConstructorReturn(this, _getPrototypeOf(MarkupAnnotation).call(this, parameters));\n            var dict = parameters.dict;\n            if (dict.has(\"IRT\")) {\n              var rawIRT = dict.getRaw(\"IRT\");\n              _this19.data.inReplyTo = rawIRT instanceof _primitives.Ref ? rawIRT.toString() : null;\n              var rt = dict.get(\"RT\");\n              _this19.data.replyType = rt instanceof _primitives.Name ? rt.name : _util.AnnotationReplyType.REPLY;\n            }\n            if (_this19.data.replyType === _util.AnnotationReplyType.GROUP) {\n              var parent = dict.get(\"IRT\");\n              _this19.setTitle(parent.get(\"T\"));\n              _this19.data.titleObj = _this19._title;\n              _this19.setContents(parent.get(\"Contents\"));\n              _this19.data.contentsObj = _this19._contents;\n              if (!parent.has(\"CreationDate\")) {\n                _this19.data.creationDate = null;\n              } else {\n                _this19.setCreationDate(parent.get(\"CreationDate\"));\n                _this19.data.creationDate = _this19.creationDate;\n              }\n              if (!parent.has(\"M\")) {\n                _this19.data.modificationDate = null;\n              } else {\n                _this19.setModificationDate(parent.get(\"M\"));\n                _this19.data.modificationDate = _this19.modificationDate;\n              }\n              _this19.data.hasPopup = parent.has(\"Popup\");\n              if (!parent.has(\"C\")) {\n                _this19.data.color = null;\n              } else {\n                _this19.setColor(parent.getArray(\"C\"));\n                _this19.data.color = _this19.color;\n              }\n            } else {\n              _this19.data.titleObj = _this19._title;\n              _this19.setCreationDate(dict.get(\"CreationDate\"));\n              _this19.data.creationDate = _this19.creationDate;\n              _this19.data.hasPopup = dict.has(\"Popup\");\n              if (!dict.has(\"C\")) {\n                _this19.data.color = null;\n              }\n            }\n            if (dict.has(\"RC\")) {\n              _this19.data.richText = _factory.XFAFactory.getRichTextAsHtml(dict.get(\"RC\"));\n            }\n            return _this19;\n          }\n          _createClass(MarkupAnnotation, [{\n            key: \"setCreationDate\",\n            value: function setCreationDate(creationDate) {\n              this.creationDate = typeof creationDate === \"string\" ? creationDate : null;\n            }\n          }, {\n            key: \"_setDefaultAppearance\",\n            value: function _setDefaultAppearance(_ref27) {\n              var xref = _ref27.xref,\n                extra = _ref27.extra,\n                strokeColor = _ref27.strokeColor,\n                fillColor = _ref27.fillColor,\n                blendMode = _ref27.blendMode,\n                strokeAlpha = _ref27.strokeAlpha,\n                fillAlpha = _ref27.fillAlpha,\n                pointsCallback = _ref27.pointsCallback;\n              var minX = Number.MAX_VALUE;\n              var minY = Number.MAX_VALUE;\n              var maxX = Number.MIN_VALUE;\n              var maxY = Number.MIN_VALUE;\n              var buffer = [\"q\"];\n              if (extra) {\n                buffer.push(extra);\n              }\n              if (strokeColor) {\n                buffer.push(\"\".concat(strokeColor[0], \" \").concat(strokeColor[1], \" \").concat(strokeColor[2], \" RG\"));\n              }\n              if (fillColor) {\n                buffer.push(\"\".concat(fillColor[0], \" \").concat(fillColor[1], \" \").concat(fillColor[2], \" rg\"));\n              }\n              var pointsArray = this.data.quadPoints;\n              if (!pointsArray) {\n                pointsArray = [[{\n                  x: this.rectangle[0],\n                  y: this.rectangle[3]\n                }, {\n                  x: this.rectangle[2],\n                  y: this.rectangle[3]\n                }, {\n                  x: this.rectangle[0],\n                  y: this.rectangle[1]\n                }, {\n                  x: this.rectangle[2],\n                  y: this.rectangle[1]\n                }]];\n              }\n              var _iterator43 = _createForOfIteratorHelper(pointsArray),\n                _step43;\n              try {\n                for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n                  var points = _step43.value;\n                  var _pointsCallback = pointsCallback(buffer, points),\n                    _pointsCallback2 = _slicedToArray(_pointsCallback, 4),\n                    mX = _pointsCallback2[0],\n                    MX = _pointsCallback2[1],\n                    mY = _pointsCallback2[2],\n                    MY = _pointsCallback2[3];\n                  minX = Math.min(minX, mX);\n                  maxX = Math.max(maxX, MX);\n                  minY = Math.min(minY, mY);\n                  maxY = Math.max(maxY, MY);\n                }\n              } catch (err) {\n                _iterator43.e(err);\n              } finally {\n                _iterator43.f();\n              }\n              buffer.push(\"Q\");\n              var formDict = new _primitives.Dict(xref);\n              var appearanceStreamDict = new _primitives.Dict(xref);\n              appearanceStreamDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n              var appearanceStream = new _stream.StringStream(buffer.join(\" \"));\n              appearanceStream.dict = appearanceStreamDict;\n              formDict.set(\"Fm0\", appearanceStream);\n              var gsDict = new _primitives.Dict(xref);\n              if (blendMode) {\n                gsDict.set(\"BM\", _primitives.Name.get(blendMode));\n              }\n              if (typeof strokeAlpha === \"number\") {\n                gsDict.set(\"CA\", strokeAlpha);\n              }\n              if (typeof fillAlpha === \"number\") {\n                gsDict.set(\"ca\", fillAlpha);\n              }\n              var stateDict = new _primitives.Dict(xref);\n              stateDict.set(\"GS0\", gsDict);\n              var resources = new _primitives.Dict(xref);\n              resources.set(\"ExtGState\", stateDict);\n              resources.set(\"XObject\", formDict);\n              var appearanceDict = new _primitives.Dict(xref);\n              appearanceDict.set(\"Resources\", resources);\n              var bbox = this.data.rect = [minX, minY, maxX, maxY];\n              appearanceDict.set(\"BBox\", bbox);\n              this.appearance = new _stream.StringStream(\"/GS0 gs /Fm0 Do\");\n              this.appearance.dict = appearanceDict;\n              this._streams.push(this.appearance, appearanceStream);\n            }\n          }], [{\n            key: \"createNewAnnotation\",\n            value: function () {\n              var _createNewAnnotation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(xref, annotation, dependencies, params) {\n                var annotationRef, apRef, annotationDict, ap, buffer, transform;\n                return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n                  while (1) {\n                    switch (_context23.prev = _context23.next) {\n                      case 0:\n                        annotationRef = xref.getNewRef();\n                        apRef = xref.getNewRef();\n                        annotationDict = this.createNewDict(annotation, xref, {\n                          apRef: apRef\n                        });\n                        _context23.next = 5;\n                        return this.createNewAppearanceStream(annotation, xref, params);\n                      case 5:\n                        ap = _context23.sent;\n                        buffer = [];\n                        transform = xref.encrypt ? xref.encrypt.createCipherTransform(apRef.num, apRef.gen) : null;\n                        (0, _writer.writeObject)(apRef, ap, buffer, transform);\n                        dependencies.push({\n                          ref: apRef,\n                          data: buffer.join(\"\")\n                        });\n                        buffer.length = 0;\n                        transform = xref.encrypt ? xref.encrypt.createCipherTransform(annotationRef.num, annotationRef.gen) : null;\n                        (0, _writer.writeObject)(annotationRef, annotationDict, buffer, transform);\n                        return _context23.abrupt(\"return\", {\n                          ref: annotationRef,\n                          data: buffer.join(\"\")\n                        });\n                      case 14:\n                      case \"end\":\n                        return _context23.stop();\n                    }\n                  }\n                }, _callee23, this);\n              }));\n              function createNewAnnotation(_x44, _x45, _x46, _x47) {\n                return _createNewAnnotation.apply(this, arguments);\n              }\n              return createNewAnnotation;\n            }()\n          }, {\n            key: \"createNewPrintAnnotation\",\n            value: function () {\n              var _createNewPrintAnnotation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(xref, annotation, params) {\n                var ap, annotationDict;\n                return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n                  while (1) {\n                    switch (_context24.prev = _context24.next) {\n                      case 0:\n                        _context24.next = 2;\n                        return this.createNewAppearanceStream(annotation, xref, params);\n                      case 2:\n                        ap = _context24.sent;\n                        annotationDict = this.createNewDict(annotation, xref, {\n                          ap: ap\n                        });\n                        return _context24.abrupt(\"return\", new this.prototype.constructor({\n                          dict: annotationDict,\n                          xref: xref\n                        }));\n                      case 5:\n                      case \"end\":\n                        return _context24.stop();\n                    }\n                  }\n                }, _callee24, this);\n              }));\n              function createNewPrintAnnotation(_x48, _x49, _x50) {\n                return _createNewPrintAnnotation.apply(this, arguments);\n              }\n              return createNewPrintAnnotation;\n            }()\n          }]);\n          return MarkupAnnotation;\n        }(Annotation);\n        exports.MarkupAnnotation = MarkupAnnotation;\n        var WidgetAnnotation = /*#__PURE__*/function (_Annotation2) {\n          _inherits(WidgetAnnotation, _Annotation2);\n          function WidgetAnnotation(params) {\n            var _this20;\n            _classCallCheck(this, WidgetAnnotation);\n            _this20 = _possibleConstructorReturn(this, _getPrototypeOf(WidgetAnnotation).call(this, params));\n            var dict = params.dict;\n            var data = _this20.data;\n            _this20.ref = params.ref;\n            data.annotationType = _util.AnnotationType.WIDGET;\n            if (data.fieldName === undefined) {\n              data.fieldName = _this20._constructFieldName(dict);\n            }\n            if (data.actions === undefined) {\n              data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);\n            }\n            var fieldValue = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"V\",\n              getArray: true\n            });\n            data.fieldValue = _this20._decodeFormValue(fieldValue);\n            var defaultFieldValue = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"DV\",\n              getArray: true\n            });\n            data.defaultFieldValue = _this20._decodeFormValue(defaultFieldValue);\n            if (fieldValue === undefined && params.xfaDatasets) {\n              var path = _this20._title.str;\n              if (path) {\n                _this20._hasValueFromXFA = true;\n                data.fieldValue = fieldValue = params.xfaDatasets.getValue(path);\n              }\n            }\n            if (fieldValue === undefined && data.defaultFieldValue !== null) {\n              data.fieldValue = data.defaultFieldValue;\n            }\n            data.alternativeText = (0, _util.stringToPDFString)(dict.get(\"TU\") || \"\");\n            var defaultAppearance = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"DA\"\n            }) || params.acroForm.get(\"DA\");\n            _this20._defaultAppearance = typeof defaultAppearance === \"string\" ? defaultAppearance : \"\";\n            data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(_this20._defaultAppearance);\n            var fieldType = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"FT\"\n            });\n            data.fieldType = fieldType instanceof _primitives.Name ? fieldType.name : null;\n            var localResources = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"DR\"\n            });\n            var acroFormResources = params.acroForm.get(\"DR\");\n            var appearanceResources = _this20.appearance && _this20.appearance.dict.get(\"Resources\");\n            _this20._fieldResources = {\n              localResources: localResources,\n              acroFormResources: acroFormResources,\n              appearanceResources: appearanceResources,\n              mergedResources: _primitives.Dict.merge({\n                xref: params.xref,\n                dictArray: [localResources, appearanceResources, acroFormResources],\n                mergeSubDicts: true\n              })\n            };\n            data.fieldFlags = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"Ff\"\n            });\n            if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n              data.fieldFlags = 0;\n            }\n            data.readOnly = _this20.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);\n            data.required = _this20.hasFieldFlag(_util.AnnotationFieldFlag.REQUIRED);\n            data.hidden = _this20._hasFlag(data.annotationFlags, _util.AnnotationFlag.HIDDEN);\n            return _this20;\n          }\n          _createClass(WidgetAnnotation, [{\n            key: \"_decodeFormValue\",\n            value: function _decodeFormValue(formValue) {\n              if (Array.isArray(formValue)) {\n                return formValue.filter(function (item) {\n                  return typeof item === \"string\";\n                }).map(function (item) {\n                  return (0, _util.stringToPDFString)(item);\n                });\n              } else if (formValue instanceof _primitives.Name) {\n                return (0, _util.stringToPDFString)(formValue.name);\n              } else if (typeof formValue === \"string\") {\n                return (0, _util.stringToPDFString)(formValue);\n              }\n              return null;\n            }\n          }, {\n            key: \"hasFieldFlag\",\n            value: function hasFieldFlag(flag) {\n              return !!(this.data.fieldFlags & flag);\n            }\n          }, {\n            key: \"getRotationMatrix\",\n            value: function getRotationMatrix(annotationStorage) {\n              var storageEntry = annotationStorage ? annotationStorage.get(this.data.id) : undefined;\n              var rotation = storageEntry && storageEntry.rotation;\n              if (rotation === undefined) {\n                rotation = this.rotation;\n              }\n              if (rotation === 0) {\n                return _util.IDENTITY_MATRIX;\n              }\n              var width = this.data.rect[2] - this.data.rect[0];\n              var height = this.data.rect[3] - this.data.rect[1];\n              return WidgetAnnotation._getRotationMatrix(rotation, width, height);\n            }\n          }, {\n            key: \"getBorderAndBackgroundAppearances\",\n            value: function getBorderAndBackgroundAppearances(annotationStorage) {\n              var storageEntry = annotationStorage ? annotationStorage.get(this.data.id) : undefined;\n              var rotation = storageEntry && storageEntry.rotation;\n              if (rotation === undefined) {\n                rotation = this.rotation;\n              }\n              if (!this.backgroundColor && !this.borderColor) {\n                return \"\";\n              }\n              var width = this.data.rect[2] - this.data.rect[0];\n              var height = this.data.rect[3] - this.data.rect[1];\n              var rect = rotation === 0 || rotation === 180 ? \"0 0 \".concat(width, \" \").concat(height, \" re\") : \"0 0 \".concat(height, \" \").concat(width, \" re\");\n              var str = \"\";\n              if (this.backgroundColor) {\n                str = \"\".concat((0, _default_appearance.getPdfColor)(this.backgroundColor, true), \" \").concat(rect, \" f \");\n              }\n              if (this.borderColor) {\n                var borderWidth = this.borderStyle.width || 1;\n                str += \"\".concat(borderWidth, \" w \").concat((0, _default_appearance.getPdfColor)(this.borderColor, false), \" \").concat(rect, \" S \");\n              }\n              return str;\n            }\n          }, {\n            key: \"getOperatorList\",\n            value: function () {\n              var _getOperatorList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(evaluator, task, intent, renderForms, annotationStorage) {\n                var content, opList, matrix, bbox, transform, optionalContent, stream;\n                return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n                  while (1) {\n                    switch (_context25.prev = _context25.next) {\n                      case 0:\n                        if (!(renderForms && !(this instanceof SignatureWidgetAnnotation))) {\n                          _context25.next = 2;\n                          break;\n                        }\n                        return _context25.abrupt(\"return\", {\n                          opList: new _operator_list.OperatorList(),\n                          separateForm: true,\n                          separateCanvas: false\n                        });\n                      case 2:\n                        if (this._hasText) {\n                          _context25.next = 4;\n                          break;\n                        }\n                        return _context25.abrupt(\"return\", _get(_getPrototypeOf(WidgetAnnotation.prototype), \"getOperatorList\", this).call(this, evaluator, task, intent, renderForms, annotationStorage));\n                      case 4:\n                        _context25.next = 6;\n                        return this._getAppearance(evaluator, task, annotationStorage);\n                      case 6:\n                        content = _context25.sent;\n                        if (!(this.appearance && content === null)) {\n                          _context25.next = 9;\n                          break;\n                        }\n                        return _context25.abrupt(\"return\", _get(_getPrototypeOf(WidgetAnnotation.prototype), \"getOperatorList\", this).call(this, evaluator, task, intent, renderForms, annotationStorage));\n                      case 9:\n                        opList = new _operator_list.OperatorList();\n                        if (!(!this._defaultAppearance || content === null)) {\n                          _context25.next = 12;\n                          break;\n                        }\n                        return _context25.abrupt(\"return\", {\n                          opList: opList,\n                          separateForm: false,\n                          separateCanvas: false\n                        });\n                      case 12:\n                        matrix = [1, 0, 0, 1, 0, 0];\n                        bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n                        transform = getTransformMatrix(this.data.rect, bbox, matrix);\n                        if (!this.oc) {\n                          _context25.next = 19;\n                          break;\n                        }\n                        _context25.next = 18;\n                        return evaluator.parseMarkedContentProps(this.oc, null);\n                      case 18:\n                        optionalContent = _context25.sent;\n                      case 19:\n                        if (optionalContent !== undefined) {\n                          opList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", optionalContent]);\n                        }\n                        opList.addOp(_util.OPS.beginAnnotation, [this.data.id, this.data.rect, transform, this.getRotationMatrix(annotationStorage), false]);\n                        stream = new _stream.StringStream(content);\n                        _context25.next = 24;\n                        return evaluator.getOperatorList({\n                          stream: stream,\n                          task: task,\n                          resources: this._fieldResources.mergedResources,\n                          operatorList: opList\n                        });\n                      case 24:\n                        opList.addOp(_util.OPS.endAnnotation, []);\n                        if (optionalContent !== undefined) {\n                          opList.addOp(_util.OPS.endMarkedContent, []);\n                        }\n                        return _context25.abrupt(\"return\", {\n                          opList: opList,\n                          separateForm: false,\n                          separateCanvas: false\n                        });\n                      case 27:\n                      case \"end\":\n                        return _context25.stop();\n                    }\n                  }\n                }, _callee25, this);\n              }));\n              function getOperatorList(_x51, _x52, _x53, _x54, _x55) {\n                return _getOperatorList2.apply(this, arguments);\n              }\n              return getOperatorList;\n            }()\n          }, {\n            key: \"_getMKDict\",\n            value: function _getMKDict(rotation) {\n              var mk = new _primitives.Dict(null);\n              if (rotation) {\n                mk.set(\"R\", rotation);\n              }\n              if (this.borderColor) {\n                mk.set(\"BC\", Array.from(this.borderColor).map(function (c) {\n                  return c / 255;\n                }));\n              }\n              if (this.backgroundColor) {\n                mk.set(\"BG\", Array.from(this.backgroundColor).map(function (c) {\n                  return c / 255;\n                }));\n              }\n              return mk.size > 0 ? mk : null;\n            }\n          }, {\n            key: \"save\",\n            value: function () {\n              var _save2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(evaluator, task, annotationStorage) {\n                var _this21 = this;\n                var storageEntry, value, rotation, appearance, xref, dict, bbox, xfa, newRef, AP, encrypt, originalTransform, newTransform, encoder, maybeMK, appearanceDict, rotationMatrix, bufferOriginal, bufferNew;\n                return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n                  while (1) {\n                    switch (_context26.prev = _context26.next) {\n                      case 0:\n                        storageEntry = annotationStorage ? annotationStorage.get(this.data.id) : undefined;\n                        value = storageEntry && storageEntry.value;\n                        rotation = storageEntry && storageEntry.rotation;\n                        if (!(value === this.data.fieldValue || value === undefined)) {\n                          _context26.next = 7;\n                          break;\n                        }\n                        if (!(!this._hasValueFromXFA && rotation === undefined)) {\n                          _context26.next = 6;\n                          break;\n                        }\n                        return _context26.abrupt(\"return\", null);\n                      case 6:\n                        value = value || this.data.fieldValue;\n                      case 7:\n                        if (!(rotation === undefined && !this._hasValueFromXFA && Array.isArray(value) && Array.isArray(this.data.fieldValue) && value.length === this.data.fieldValue.length && value.every(function (x, i) {\n                          return x === _this21.data.fieldValue[i];\n                        }))) {\n                          _context26.next = 9;\n                          break;\n                        }\n                        return _context26.abrupt(\"return\", null);\n                      case 9:\n                        if (rotation === undefined) {\n                          rotation = this.rotation;\n                        }\n                        _context26.next = 12;\n                        return this._getAppearance(evaluator, task, annotationStorage);\n                      case 12:\n                        appearance = _context26.sent;\n                        if (!(appearance === null)) {\n                          _context26.next = 15;\n                          break;\n                        }\n                        return _context26.abrupt(\"return\", null);\n                      case 15:\n                        xref = evaluator.xref;\n                        dict = xref.fetchIfRef(this.ref);\n                        if (dict instanceof _primitives.Dict) {\n                          _context26.next = 19;\n                          break;\n                        }\n                        return _context26.abrupt(\"return\", null);\n                      case 19:\n                        bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n                        xfa = {\n                          path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n                          value: value\n                        };\n                        newRef = xref.getNewRef();\n                        AP = new _primitives.Dict(xref);\n                        AP.set(\"N\", newRef);\n                        encrypt = xref.encrypt;\n                        originalTransform = null;\n                        newTransform = null;\n                        if (encrypt) {\n                          originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n                          newTransform = encrypt.createCipherTransform(newRef.num, newRef.gen);\n                          appearance = newTransform.encryptString(appearance);\n                        }\n                        encoder = function encoder(val) {\n                          return (0, _util.isAscii)(val) ? val : (0, _util.stringToUTF16BEString)(val);\n                        };\n                        dict.set(\"V\", Array.isArray(value) ? value.map(encoder) : encoder(value));\n                        dict.set(\"AP\", AP);\n                        dict.set(\"M\", \"D:\".concat((0, _util.getModificationDate)()));\n                        maybeMK = this._getMKDict(rotation);\n                        if (maybeMK) {\n                          dict.set(\"MK\", maybeMK);\n                        }\n                        appearanceDict = new _primitives.Dict(xref);\n                        appearanceDict.set(\"Length\", appearance.length);\n                        appearanceDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n                        appearanceDict.set(\"Resources\", this._getSaveFieldResources(xref));\n                        appearanceDict.set(\"BBox\", bbox);\n                        rotationMatrix = this.getRotationMatrix(annotationStorage);\n                        if (rotationMatrix !== _util.IDENTITY_MATRIX) {\n                          appearanceDict.set(\"Matrix\", rotationMatrix);\n                        }\n                        bufferOriginal = [\"\".concat(this.ref.num, \" \").concat(this.ref.gen, \" obj\\n\")];\n                        (0, _writer.writeDict)(dict, bufferOriginal, originalTransform);\n                        bufferOriginal.push(\"\\nendobj\\n\");\n                        bufferNew = [\"\".concat(newRef.num, \" \").concat(newRef.gen, \" obj\\n\")];\n                        (0, _writer.writeDict)(appearanceDict, bufferNew, newTransform);\n                        bufferNew.push(\" stream\\n\", appearance, \"\\nendstream\\nendobj\\n\");\n                        return _context26.abrupt(\"return\", [{\n                          ref: this.ref,\n                          data: bufferOriginal.join(\"\"),\n                          xfa: xfa\n                        }, {\n                          ref: newRef,\n                          data: bufferNew.join(\"\"),\n                          xfa: null\n                        }]);\n                      case 48:\n                      case \"end\":\n                        return _context26.stop();\n                    }\n                  }\n                }, _callee26, this);\n              }));\n              function save(_x56, _x57, _x58) {\n                return _save2.apply(this, arguments);\n              }\n              return save;\n            }()\n          }, {\n            key: \"_getAppearance\",\n            value: function () {\n              var _getAppearance2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(evaluator, task, annotationStorage) {\n                var isPassword, storageEntry, value, rotation, lineCount, defaultPadding, hPadding, totalHeight, totalWidth, _ref28, font, _this$_computeFontSiz, _this$_computeFontSiz2, defaultAppearance, fontSize, descent, defaultVPadding, vPadding, alignment, encodedString, colors, renderedText;\n                return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n                  while (1) {\n                    switch (_context27.prev = _context27.next) {\n                      case 0:\n                        isPassword = this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD);\n                        if (!isPassword) {\n                          _context27.next = 3;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", null);\n                      case 3:\n                        storageEntry = annotationStorage ? annotationStorage.get(this.data.id) : undefined;\n                        if (storageEntry) {\n                          value = storageEntry.formattedValue || storageEntry.value;\n                          rotation = storageEntry.rotation;\n                        }\n                        if (!(rotation === undefined && value === undefined)) {\n                          _context27.next = 8;\n                          break;\n                        }\n                        if (!(!this._hasValueFromXFA || this.appearance)) {\n                          _context27.next = 8;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", null);\n                      case 8:\n                        if (!(value === undefined)) {\n                          _context27.next = 12;\n                          break;\n                        }\n                        value = this.data.fieldValue;\n                        if (value) {\n                          _context27.next = 12;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", \"\");\n                      case 12:\n                        if (Array.isArray(value) && value.length === 1) {\n                          value = value[0];\n                        }\n                        (0, _util.assert)(typeof value === \"string\", \"Expected `value` to be a string.\");\n                        value = value.trim();\n                        if (!(value === \"\")) {\n                          _context27.next = 17;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", \"\");\n                      case 17:\n                        if (rotation === undefined) {\n                          rotation = this.rotation;\n                        }\n                        lineCount = -1;\n                        if (this.data.multiLine) {\n                          lineCount = value.split(/\\r\\n|\\r|\\n/).length;\n                        }\n                        defaultPadding = 2;\n                        hPadding = defaultPadding;\n                        totalHeight = this.data.rect[3] - this.data.rect[1];\n                        totalWidth = this.data.rect[2] - this.data.rect[0];\n                        if (rotation === 90 || rotation === 270) {\n                          _ref28 = [totalHeight, totalWidth];\n                          totalWidth = _ref28[0];\n                          totalHeight = _ref28[1];\n                        }\n                        if (!this._defaultAppearance) {\n                          this.data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(this._defaultAppearance = \"/Helvetica 0 Tf 0 g\");\n                        }\n                        _context27.next = 28;\n                        return WidgetAnnotation._getFontData(evaluator, task, this.data.defaultAppearanceData, this._fieldResources.mergedResources);\n                      case 28:\n                        font = _context27.sent;\n                        _this$_computeFontSiz = this._computeFontSize(totalHeight - defaultPadding, totalWidth - 2 * hPadding, value, font, lineCount), _this$_computeFontSiz2 = _slicedToArray(_this$_computeFontSiz, 2), defaultAppearance = _this$_computeFontSiz2[0], fontSize = _this$_computeFontSiz2[1];\n                        descent = font.descent;\n                        if (isNaN(descent)) {\n                          descent = 0;\n                        }\n                        defaultVPadding = Math.min(Math.floor((totalHeight - fontSize) / 2), defaultPadding);\n                        vPadding = defaultVPadding + Math.abs(descent) * fontSize;\n                        alignment = this.data.textAlignment;\n                        if (!this.data.multiLine) {\n                          _context27.next = 37;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", this._getMultilineAppearance(defaultAppearance, value, font, fontSize, totalWidth, totalHeight, alignment, hPadding, vPadding, annotationStorage));\n                      case 37:\n                        encodedString = font.encodeString(value).join(\"\");\n                        if (!this.data.comb) {\n                          _context27.next = 40;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", this._getCombAppearance(defaultAppearance, font, encodedString, totalWidth, hPadding, vPadding, annotationStorage));\n                      case 40:\n                        colors = this.getBorderAndBackgroundAppearances(annotationStorage);\n                        if (!(alignment === 0 || alignment > 2)) {\n                          _context27.next = 43;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", \"/Tx BMC q \".concat(colors, \"BT \") + defaultAppearance + \" 1 0 0 1 \".concat(hPadding, \" \").concat(vPadding, \" Tm (\").concat((0, _util.escapeString)(encodedString), \") Tj\") + \" ET Q EMC\");\n                      case 43:\n                        renderedText = this._renderText(encodedString, font, fontSize, totalWidth, alignment, hPadding, vPadding);\n                        return _context27.abrupt(\"return\", \"/Tx BMC q \".concat(colors, \"BT \") + defaultAppearance + \" 1 0 0 1 0 0 Tm \".concat(renderedText) + \" ET Q EMC\");\n                      case 45:\n                      case \"end\":\n                        return _context27.stop();\n                    }\n                  }\n                }, _callee27, this);\n              }));\n              function _getAppearance(_x59, _x60, _x61) {\n                return _getAppearance2.apply(this, arguments);\n              }\n              return _getAppearance;\n            }()\n          }, {\n            key: \"_getTextWidth\",\n            value: function _getTextWidth(text, font) {\n              return font.charsToGlyphs(text).reduce(function (width, glyph) {\n                return width + glyph.width;\n              }, 0) / 1000;\n            }\n          }, {\n            key: \"_computeFontSize\",\n            value: function _computeFontSize(height, width, text, font, lineCount) {\n              var _this22 = this;\n              var fontSize = this.data.defaultAppearanceData.fontSize;\n              if (!fontSize) {\n                var roundWithTwoDigits = function roundWithTwoDigits(x) {\n                  return Math.floor(x * 100) / 100;\n                };\n                if (lineCount === -1) {\n                  var textWidth = this._getTextWidth(text, font);\n                  fontSize = roundWithTwoDigits(Math.min(height / _util.LINE_FACTOR, width / textWidth));\n                } else {\n                  var lines = text.split(/\\r\\n?|\\n/);\n                  var cachedLines = [];\n                  var _iterator44 = _createForOfIteratorHelper(lines),\n                    _step44;\n                  try {\n                    for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n                      var line = _step44.value;\n                      var encoded = font.encodeString(line).join(\"\");\n                      var glyphs = font.charsToGlyphs(encoded);\n                      var positions = font.getCharPositions(encoded);\n                      cachedLines.push({\n                        line: encoded,\n                        glyphs: glyphs,\n                        positions: positions\n                      });\n                    }\n                  } catch (err) {\n                    _iterator44.e(err);\n                  } finally {\n                    _iterator44.f();\n                  }\n                  var isTooBig = function isTooBig(fsize) {\n                    var totalHeight = 0;\n                    var _iterator45 = _createForOfIteratorHelper(cachedLines),\n                      _step45;\n                    try {\n                      for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n                        var cache = _step45.value;\n                        var chunks = _this22._splitLine(null, font, fsize, width, cache);\n                        totalHeight += chunks.length * fsize;\n                        if (totalHeight > height) {\n                          return true;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator45.e(err);\n                    } finally {\n                      _iterator45.f();\n                    }\n                    return false;\n                  };\n                  fontSize = 12;\n                  var lineHeight = fontSize * _util.LINE_FACTOR;\n                  var numberOfLines = Math.round(height / lineHeight);\n                  numberOfLines = Math.max(numberOfLines, lineCount);\n                  while (true) {\n                    lineHeight = height / numberOfLines;\n                    fontSize = roundWithTwoDigits(lineHeight / _util.LINE_FACTOR);\n                    if (isTooBig(fontSize)) {\n                      numberOfLines++;\n                      continue;\n                    }\n                    break;\n                  }\n                }\n                var _this$data$defaultApp = this.data.defaultAppearanceData,\n                  fontName = _this$data$defaultApp.fontName,\n                  fontColor = _this$data$defaultApp.fontColor;\n                this._defaultAppearance = (0, _default_appearance.createDefaultAppearance)({\n                  fontSize: fontSize,\n                  fontName: fontName,\n                  fontColor: fontColor\n                });\n              }\n              return [this._defaultAppearance, fontSize];\n            }\n          }, {\n            key: \"_renderText\",\n            value: function _renderText(text, font, fontSize, totalWidth, alignment, hPadding, vPadding) {\n              var shift;\n              if (alignment === 1) {\n                var width = this._getTextWidth(text, font) * fontSize;\n                shift = (totalWidth - width) / 2;\n              } else if (alignment === 2) {\n                var _width = this._getTextWidth(text, font) * fontSize;\n                shift = totalWidth - _width - hPadding;\n              } else {\n                shift = hPadding;\n              }\n              shift = (0, _core_utils.numberToString)(shift);\n              vPadding = (0, _core_utils.numberToString)(vPadding);\n              return \"\".concat(shift, \" \").concat(vPadding, \" Td (\").concat((0, _util.escapeString)(text), \") Tj\");\n            }\n          }, {\n            key: \"_getSaveFieldResources\",\n            value: function _getSaveFieldResources(xref) {\n              var _this$_fieldResources = this._fieldResources,\n                localResources = _this$_fieldResources.localResources,\n                appearanceResources = _this$_fieldResources.appearanceResources,\n                acroFormResources = _this$_fieldResources.acroFormResources;\n              var fontName = this.data.defaultAppearanceData && this.data.defaultAppearanceData.fontName;\n              if (!fontName) {\n                return localResources || _primitives.Dict.empty;\n              }\n              for (var _i8 = 0, _arr3 = [localResources, appearanceResources]; _i8 < _arr3.length; _i8++) {\n                var resources = _arr3[_i8];\n                if (resources instanceof _primitives.Dict) {\n                  var localFont = resources.get(\"Font\");\n                  if (localFont instanceof _primitives.Dict && localFont.has(fontName)) {\n                    return resources;\n                  }\n                }\n              }\n              if (acroFormResources instanceof _primitives.Dict) {\n                var acroFormFont = acroFormResources.get(\"Font\");\n                if (acroFormFont instanceof _primitives.Dict && acroFormFont.has(fontName)) {\n                  var subFontDict = new _primitives.Dict(xref);\n                  subFontDict.set(fontName, acroFormFont.getRaw(fontName));\n                  var subResourcesDict = new _primitives.Dict(xref);\n                  subResourcesDict.set(\"Font\", subFontDict);\n                  return _primitives.Dict.merge({\n                    xref: xref,\n                    dictArray: [subResourcesDict, localResources],\n                    mergeSubDicts: true\n                  });\n                }\n              }\n              return localResources || _primitives.Dict.empty;\n            }\n          }, {\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              return null;\n            }\n          }], [{\n            key: \"_getRotationMatrix\",\n            value: function _getRotationMatrix(rotation, width, height) {\n              switch (rotation) {\n                case 90:\n                  return [0, 1, -1, 0, width, 0];\n                case 180:\n                  return [-1, 0, 0, -1, width, height];\n                case 270:\n                  return [0, -1, 1, 0, 0, height];\n                default:\n                  throw new Error(\"Invalid rotation\");\n              }\n            }\n          }, {\n            key: \"_getFontData\",\n            value: function () {\n              var _getFontData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(evaluator, task, appearanceData, resources) {\n                var operatorList, initialState, fontName, fontSize;\n                return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                  while (1) {\n                    switch (_context28.prev = _context28.next) {\n                      case 0:\n                        operatorList = new _operator_list.OperatorList();\n                        initialState = {\n                          font: null,\n                          clone: function clone() {\n                            return this;\n                          }\n                        };\n                        fontName = appearanceData.fontName, fontSize = appearanceData.fontSize;\n                        _context28.next = 5;\n                        return evaluator.handleSetFont(resources, [fontName && _primitives.Name.get(fontName), fontSize], null, operatorList, task, initialState, null);\n                      case 5:\n                        return _context28.abrupt(\"return\", initialState.font);\n                      case 6:\n                      case \"end\":\n                        return _context28.stop();\n                    }\n                  }\n                }, _callee28);\n              }));\n              function _getFontData(_x62, _x63, _x64, _x65) {\n                return _getFontData2.apply(this, arguments);\n              }\n              return _getFontData;\n            }()\n          }]);\n          return WidgetAnnotation;\n        }(Annotation);\n        var TextWidgetAnnotation = /*#__PURE__*/function (_WidgetAnnotation) {\n          _inherits(TextWidgetAnnotation, _WidgetAnnotation);\n          function TextWidgetAnnotation(params) {\n            var _this23;\n            _classCallCheck(this, TextWidgetAnnotation);\n            _this23 = _possibleConstructorReturn(this, _getPrototypeOf(TextWidgetAnnotation).call(this, params));\n            _this23._hasText = true;\n            var dict = params.dict;\n            if (typeof _this23.data.fieldValue !== \"string\") {\n              _this23.data.fieldValue = \"\";\n            }\n            var alignment = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"Q\"\n            });\n            if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n              alignment = null;\n            }\n            _this23.data.textAlignment = alignment;\n            var maximumLength = (0, _core_utils.getInheritableProperty)({\n              dict: dict,\n              key: \"MaxLen\"\n            });\n            if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n              maximumLength = 0;\n            }\n            _this23.data.maxLen = maximumLength;\n            _this23.data.multiLine = _this23.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);\n            _this23.data.comb = _this23.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !_this23.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !_this23.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !_this23.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && _this23.data.maxLen !== 0;\n            _this23.data.doNotScroll = _this23.hasFieldFlag(_util.AnnotationFieldFlag.DONOTSCROLL);\n            return _this23;\n          }\n          _createClass(TextWidgetAnnotation, [{\n            key: \"_getCombAppearance\",\n            value: function _getCombAppearance(defaultAppearance, font, text, width, hPadding, vPadding, annotationStorage) {\n              var combWidth = (0, _core_utils.numberToString)(width / this.data.maxLen);\n              var buf = [];\n              var positions = font.getCharPositions(text);\n              var _iterator46 = _createForOfIteratorHelper(positions),\n                _step46;\n              try {\n                for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n                  var _step46$value = _slicedToArray(_step46.value, 2),\n                    start = _step46$value[0],\n                    end = _step46$value[1];\n                  buf.push(\"(\".concat((0, _util.escapeString)(text.substring(start, end)), \") Tj\"));\n                }\n              } catch (err) {\n                _iterator46.e(err);\n              } finally {\n                _iterator46.f();\n              }\n              var colors = this.getBorderAndBackgroundAppearances(annotationStorage);\n              var renderedComb = buf.join(\" \".concat(combWidth, \" 0 Td \"));\n              return \"/Tx BMC q \".concat(colors, \"BT \") + defaultAppearance + \" 1 0 0 1 \".concat(hPadding, \" \").concat(vPadding, \" Tm \").concat(renderedComb) + \" ET Q EMC\";\n            }\n          }, {\n            key: \"_getMultilineAppearance\",\n            value: function _getMultilineAppearance(defaultAppearance, text, font, fontSize, width, height, alignment, hPadding, vPadding, annotationStorage) {\n              var lines = text.split(/\\r\\n?|\\n/);\n              var buf = [];\n              var totalWidth = width - 2 * hPadding;\n              var _iterator47 = _createForOfIteratorHelper(lines),\n                _step47;\n              try {\n                for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n                  var line = _step47.value;\n                  var chunks = this._splitLine(line, font, fontSize, totalWidth);\n                  var _iterator48 = _createForOfIteratorHelper(chunks),\n                    _step48;\n                  try {\n                    for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n                      var chunk = _step48.value;\n                      var padding = buf.length === 0 ? hPadding : 0;\n                      buf.push(this._renderText(chunk, font, fontSize, width, alignment, padding, -fontSize));\n                    }\n                  } catch (err) {\n                    _iterator48.e(err);\n                  } finally {\n                    _iterator48.f();\n                  }\n                }\n              } catch (err) {\n                _iterator47.e(err);\n              } finally {\n                _iterator47.f();\n              }\n              var renderedText = buf.join(\"\\n\");\n              var colors = this.getBorderAndBackgroundAppearances(annotationStorage);\n              return \"/Tx BMC q \".concat(colors, \"BT \") + defaultAppearance + \" 1 0 0 1 0 \".concat(height, \" Tm \").concat(renderedText) + \" ET Q EMC\";\n            }\n          }, {\n            key: \"_splitLine\",\n            value: function _splitLine(line, font, fontSize, width) {\n              var cache = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n              line = cache.line || font.encodeString(line).join(\"\");\n              var glyphs = cache.glyphs || font.charsToGlyphs(line);\n              if (glyphs.length <= 1) {\n                return [line];\n              }\n              var positions = cache.positions || font.getCharPositions(line);\n              var scale = fontSize / 1000;\n              var chunks = [];\n              var lastSpacePosInStringStart = -1,\n                lastSpacePosInStringEnd = -1,\n                lastSpacePos = -1,\n                startChunk = 0,\n                currentWidth = 0;\n              for (var i = 0, ii = glyphs.length; i < ii; i++) {\n                var _positions$i = _slicedToArray(positions[i], 2),\n                  start = _positions$i[0],\n                  end = _positions$i[1];\n                var glyph = glyphs[i];\n                var glyphWidth = glyph.width * scale;\n                if (glyph.unicode === \" \") {\n                  if (currentWidth + glyphWidth > width) {\n                    chunks.push(line.substring(startChunk, start));\n                    startChunk = start;\n                    currentWidth = glyphWidth;\n                    lastSpacePosInStringStart = -1;\n                    lastSpacePos = -1;\n                  } else {\n                    currentWidth += glyphWidth;\n                    lastSpacePosInStringStart = start;\n                    lastSpacePosInStringEnd = end;\n                    lastSpacePos = i;\n                  }\n                } else {\n                  if (currentWidth + glyphWidth > width) {\n                    if (lastSpacePosInStringStart !== -1) {\n                      chunks.push(line.substring(startChunk, lastSpacePosInStringEnd));\n                      startChunk = lastSpacePosInStringEnd;\n                      i = lastSpacePos + 1;\n                      lastSpacePosInStringStart = -1;\n                      currentWidth = 0;\n                    } else {\n                      chunks.push(line.substring(startChunk, start));\n                      startChunk = start;\n                      currentWidth = glyphWidth;\n                    }\n                  } else {\n                    currentWidth += glyphWidth;\n                  }\n                }\n              }\n              if (startChunk < line.length) {\n                chunks.push(line.substring(startChunk, line.length));\n              }\n              return chunks;\n            }\n          }, {\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              return {\n                id: this.data.id,\n                value: this.data.fieldValue,\n                defaultValue: this.data.defaultFieldValue || \"\",\n                multiline: this.data.multiLine,\n                password: this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD),\n                charLimit: this.data.maxLen,\n                comb: this.data.comb,\n                editable: !this.data.readOnly,\n                hidden: this.data.hidden,\n                name: this.data.fieldName,\n                rect: this.data.rect,\n                actions: this.data.actions,\n                page: this.data.pageIndex,\n                strokeColor: this.data.borderColor,\n                fillColor: this.data.backgroundColor,\n                rotation: this.rotation,\n                type: \"text\"\n              };\n            }\n          }]);\n          return TextWidgetAnnotation;\n        }(WidgetAnnotation);\n        var ButtonWidgetAnnotation = /*#__PURE__*/function (_WidgetAnnotation2) {\n          _inherits(ButtonWidgetAnnotation, _WidgetAnnotation2);\n          function ButtonWidgetAnnotation(params) {\n            var _this24;\n            _classCallCheck(this, ButtonWidgetAnnotation);\n            _this24 = _possibleConstructorReturn(this, _getPrototypeOf(ButtonWidgetAnnotation).call(this, params));\n            _this24.checkedAppearance = null;\n            _this24.uncheckedAppearance = null;\n            _this24.data.checkBox = !_this24.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !_this24.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n            _this24.data.radioButton = _this24.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !_this24.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n            _this24.data.pushButton = _this24.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n            _this24.data.isTooltipOnly = false;\n            if (_this24.data.checkBox) {\n              _this24._processCheckBox(params);\n            } else if (_this24.data.radioButton) {\n              _this24._processRadioButton(params);\n            } else if (_this24.data.pushButton) {\n              _this24.data.hasOwnCanvas = true;\n              _this24._processPushButton(params);\n            } else {\n              (0, _util.warn)(\"Invalid field flags for button widget annotation\");\n            }\n            return _this24;\n          }\n          _createClass(ButtonWidgetAnnotation, [{\n            key: \"getOperatorList\",\n            value: function () {\n              var _getOperatorList3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(evaluator, task, intent, renderForms, annotationStorage) {\n                var value, rotation, storageEntry, appearance, savedAppearance, savedMatrix, operatorList;\n                return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n                  while (1) {\n                    switch (_context29.prev = _context29.next) {\n                      case 0:\n                        if (!this.data.pushButton) {\n                          _context29.next = 2;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\", _get(_getPrototypeOf(ButtonWidgetAnnotation.prototype), \"getOperatorList\", this).call(this, evaluator, task, intent, false, annotationStorage));\n                      case 2:\n                        value = null;\n                        rotation = null;\n                        if (annotationStorage) {\n                          storageEntry = annotationStorage.get(this.data.id);\n                          value = storageEntry ? storageEntry.value : null;\n                          rotation = storageEntry ? storageEntry.rotation : null;\n                        }\n                        if (!(value === null && this.appearance)) {\n                          _context29.next = 7;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\", _get(_getPrototypeOf(ButtonWidgetAnnotation.prototype), \"getOperatorList\", this).call(this, evaluator, task, intent, renderForms, annotationStorage));\n                      case 7:\n                        if (value === null || value === undefined) {\n                          if (this.data.checkBox) {\n                            value = this.data.fieldValue === this.data.exportValue;\n                          } else {\n                            value = this.data.fieldValue === this.data.buttonValue;\n                          }\n                        }\n                        appearance = value ? this.checkedAppearance : this.uncheckedAppearance;\n                        if (!appearance) {\n                          _context29.next = 18;\n                          break;\n                        }\n                        savedAppearance = this.appearance;\n                        savedMatrix = appearance.dict.getArray(\"Matrix\") || _util.IDENTITY_MATRIX;\n                        if (rotation) {\n                          appearance.dict.set(\"Matrix\", this.getRotationMatrix(annotationStorage));\n                        }\n                        this.appearance = appearance;\n                        operatorList = _get(_getPrototypeOf(ButtonWidgetAnnotation.prototype), \"getOperatorList\", this).call(this, evaluator, task, intent, renderForms, annotationStorage);\n                        this.appearance = savedAppearance;\n                        appearance.dict.set(\"Matrix\", savedMatrix);\n                        return _context29.abrupt(\"return\", operatorList);\n                      case 18:\n                        return _context29.abrupt(\"return\", {\n                          opList: new _operator_list.OperatorList(),\n                          separateForm: false,\n                          separateCanvas: false\n                        });\n                      case 19:\n                      case \"end\":\n                        return _context29.stop();\n                    }\n                  }\n                }, _callee29, this);\n              }));\n              function getOperatorList(_x66, _x67, _x68, _x69, _x70) {\n                return _getOperatorList3.apply(this, arguments);\n              }\n              return getOperatorList;\n            }()\n          }, {\n            key: \"save\",\n            value: function () {\n              var _save3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(evaluator, task, annotationStorage) {\n                return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n                  while (1) {\n                    switch (_context30.prev = _context30.next) {\n                      case 0:\n                        if (!this.data.checkBox) {\n                          _context30.next = 2;\n                          break;\n                        }\n                        return _context30.abrupt(\"return\", this._saveCheckbox(evaluator, task, annotationStorage));\n                      case 2:\n                        if (!this.data.radioButton) {\n                          _context30.next = 4;\n                          break;\n                        }\n                        return _context30.abrupt(\"return\", this._saveRadioButton(evaluator, task, annotationStorage));\n                      case 4:\n                        return _context30.abrupt(\"return\", null);\n                      case 5:\n                      case \"end\":\n                        return _context30.stop();\n                    }\n                  }\n                }, _callee30, this);\n              }));\n              function save(_x71, _x72, _x73) {\n                return _save3.apply(this, arguments);\n              }\n              return save;\n            }()\n          }, {\n            key: \"_saveCheckbox\",\n            value: function () {\n              var _saveCheckbox2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(evaluator, task, annotationStorage) {\n                var storageEntry, rotation, value, defaultValue, dict, xfa, name, maybeMK, encrypt, originalTransform, buffer;\n                return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                  while (1) {\n                    switch (_context31.prev = _context31.next) {\n                      case 0:\n                        if (annotationStorage) {\n                          _context31.next = 2;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 2:\n                        storageEntry = annotationStorage.get(this.data.id);\n                        rotation = storageEntry && storageEntry.rotation;\n                        value = storageEntry && storageEntry.value;\n                        if (!(rotation === undefined)) {\n                          _context31.next = 11;\n                          break;\n                        }\n                        if (!(value === undefined)) {\n                          _context31.next = 8;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 8:\n                        defaultValue = this.data.fieldValue === this.data.exportValue;\n                        if (!(defaultValue === value)) {\n                          _context31.next = 11;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 11:\n                        dict = evaluator.xref.fetchIfRef(this.ref);\n                        if (dict instanceof _primitives.Dict) {\n                          _context31.next = 14;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 14:\n                        if (rotation === undefined) {\n                          rotation = this.rotation;\n                        }\n                        if (value === undefined) {\n                          value = this.data.fieldValue === this.data.exportValue;\n                        }\n                        xfa = {\n                          path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n                          value: value ? this.data.exportValue : \"\"\n                        };\n                        name = _primitives.Name.get(value ? this.data.exportValue : \"Off\");\n                        dict.set(\"V\", name);\n                        dict.set(\"AS\", name);\n                        dict.set(\"M\", \"D:\".concat((0, _util.getModificationDate)()));\n                        maybeMK = this._getMKDict(rotation);\n                        if (maybeMK) {\n                          dict.set(\"MK\", maybeMK);\n                        }\n                        encrypt = evaluator.xref.encrypt;\n                        originalTransform = null;\n                        if (encrypt) {\n                          originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n                        }\n                        buffer = [\"\".concat(this.ref.num, \" \").concat(this.ref.gen, \" obj\\n\")];\n                        (0, _writer.writeDict)(dict, buffer, originalTransform);\n                        buffer.push(\"\\nendobj\\n\");\n                        return _context31.abrupt(\"return\", [{\n                          ref: this.ref,\n                          data: buffer.join(\"\"),\n                          xfa: xfa\n                        }]);\n                      case 30:\n                      case \"end\":\n                        return _context31.stop();\n                    }\n                  }\n                }, _callee31, this);\n              }));\n              function _saveCheckbox(_x74, _x75, _x76) {\n                return _saveCheckbox2.apply(this, arguments);\n              }\n              return _saveCheckbox;\n            }()\n          }, {\n            key: \"_saveRadioButton\",\n            value: function () {\n              var _saveRadioButton2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(evaluator, task, annotationStorage) {\n                var storageEntry, rotation, value, defaultValue, dict, xfa, name, parentBuffer, encrypt, parent, parentTransform, maybeMK, originalTransform, buffer, newRefs;\n                return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n                  while (1) {\n                    switch (_context32.prev = _context32.next) {\n                      case 0:\n                        if (annotationStorage) {\n                          _context32.next = 2;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\", null);\n                      case 2:\n                        storageEntry = annotationStorage.get(this.data.id);\n                        rotation = storageEntry && storageEntry.rotation;\n                        value = storageEntry && storageEntry.value;\n                        if (!(rotation === undefined)) {\n                          _context32.next = 11;\n                          break;\n                        }\n                        if (!(value === undefined)) {\n                          _context32.next = 8;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\", null);\n                      case 8:\n                        defaultValue = this.data.fieldValue === this.data.buttonValue;\n                        if (!(defaultValue === value)) {\n                          _context32.next = 11;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\", null);\n                      case 11:\n                        dict = evaluator.xref.fetchIfRef(this.ref);\n                        if (dict instanceof _primitives.Dict) {\n                          _context32.next = 14;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\", null);\n                      case 14:\n                        if (value === undefined) {\n                          value = this.data.fieldValue === this.data.buttonValue;\n                        }\n                        if (rotation === undefined) {\n                          rotation = this.rotation;\n                        }\n                        xfa = {\n                          path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n                          value: value ? this.data.buttonValue : \"\"\n                        };\n                        name = _primitives.Name.get(value ? this.data.buttonValue : \"Off\");\n                        parentBuffer = null;\n                        encrypt = evaluator.xref.encrypt;\n                        if (value) {\n                          if (this.parent instanceof _primitives.Ref) {\n                            parent = evaluator.xref.fetch(this.parent);\n                            parentTransform = null;\n                            if (encrypt) {\n                              parentTransform = encrypt.createCipherTransform(this.parent.num, this.parent.gen);\n                            }\n                            parent.set(\"V\", name);\n                            parentBuffer = [\"\".concat(this.parent.num, \" \").concat(this.parent.gen, \" obj\\n\")];\n                            (0, _writer.writeDict)(parent, parentBuffer, parentTransform);\n                            parentBuffer.push(\"\\nendobj\\n\");\n                          } else if (this.parent instanceof _primitives.Dict) {\n                            this.parent.set(\"V\", name);\n                          }\n                        }\n                        dict.set(\"AS\", name);\n                        dict.set(\"M\", \"D:\".concat((0, _util.getModificationDate)()));\n                        maybeMK = this._getMKDict(rotation);\n                        if (maybeMK) {\n                          dict.set(\"MK\", maybeMK);\n                        }\n                        originalTransform = null;\n                        if (encrypt) {\n                          originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n                        }\n                        buffer = [\"\".concat(this.ref.num, \" \").concat(this.ref.gen, \" obj\\n\")];\n                        (0, _writer.writeDict)(dict, buffer, originalTransform);\n                        buffer.push(\"\\nendobj\\n\");\n                        newRefs = [{\n                          ref: this.ref,\n                          data: buffer.join(\"\"),\n                          xfa: xfa\n                        }];\n                        if (parentBuffer !== null) {\n                          newRefs.push({\n                            ref: this.parent,\n                            data: parentBuffer.join(\"\"),\n                            xfa: null\n                          });\n                        }\n                        return _context32.abrupt(\"return\", newRefs);\n                      case 33:\n                      case \"end\":\n                        return _context32.stop();\n                    }\n                  }\n                }, _callee32, this);\n              }));\n              function _saveRadioButton(_x77, _x78, _x79) {\n                return _saveRadioButton2.apply(this, arguments);\n              }\n              return _saveRadioButton;\n            }()\n          }, {\n            key: \"_getDefaultCheckedAppearance\",\n            value: function _getDefaultCheckedAppearance(params, type) {\n              var width = this.data.rect[2] - this.data.rect[0];\n              var height = this.data.rect[3] - this.data.rect[1];\n              var bbox = [0, 0, width, height];\n              var FONT_RATIO = 0.8;\n              var fontSize = Math.min(width, height) * FONT_RATIO;\n              var metrics, char;\n              if (type === \"check\") {\n                metrics = {\n                  width: 0.755 * fontSize,\n                  height: 0.705 * fontSize\n                };\n                char = \"\\x33\";\n              } else if (type === \"disc\") {\n                metrics = {\n                  width: 0.791 * fontSize,\n                  height: 0.705 * fontSize\n                };\n                char = \"\\x6C\";\n              } else {\n                (0, _util.unreachable)(\"_getDefaultCheckedAppearance - unsupported type: \".concat(type));\n              }\n              var xShift = (0, _core_utils.numberToString)((width - metrics.width) / 2);\n              var yShift = (0, _core_utils.numberToString)((height - metrics.height) / 2);\n              var appearance = \"q BT /PdfJsZaDb \".concat(fontSize, \" Tf 0 g \").concat(xShift, \" \").concat(yShift, \" Td (\").concat(char, \") Tj ET Q\");\n              var appearanceStreamDict = new _primitives.Dict(params.xref);\n              appearanceStreamDict.set(\"FormType\", 1);\n              appearanceStreamDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n              appearanceStreamDict.set(\"Type\", _primitives.Name.get(\"XObject\"));\n              appearanceStreamDict.set(\"BBox\", bbox);\n              appearanceStreamDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n              appearanceStreamDict.set(\"Length\", appearance.length);\n              var resources = new _primitives.Dict(params.xref);\n              var font = new _primitives.Dict(params.xref);\n              font.set(\"PdfJsZaDb\", this.fallbackFontDict);\n              resources.set(\"Font\", font);\n              appearanceStreamDict.set(\"Resources\", resources);\n              this.checkedAppearance = new _stream.StringStream(appearance);\n              this.checkedAppearance.dict = appearanceStreamDict;\n              this._streams.push(this.checkedAppearance);\n            }\n          }, {\n            key: \"_processCheckBox\",\n            value: function _processCheckBox(params) {\n              var customAppearance = params.dict.get(\"AP\");\n              if (!(customAppearance instanceof _primitives.Dict)) {\n                return;\n              }\n              var normalAppearance = customAppearance.get(\"N\");\n              if (!(normalAppearance instanceof _primitives.Dict)) {\n                return;\n              }\n              var asValue = this._decodeFormValue(params.dict.get(\"AS\"));\n              if (typeof asValue === \"string\") {\n                this.data.fieldValue = asValue;\n              }\n              var yes = this.data.fieldValue !== null && this.data.fieldValue !== \"Off\" ? this.data.fieldValue : \"Yes\";\n              var exportValues = normalAppearance.getKeys();\n              if (exportValues.length === 0) {\n                exportValues.push(\"Off\", yes);\n              } else if (exportValues.length === 1) {\n                if (exportValues[0] === \"Off\") {\n                  exportValues.push(yes);\n                } else {\n                  exportValues.unshift(\"Off\");\n                }\n              } else if (exportValues.includes(yes)) {\n                exportValues.length = 0;\n                exportValues.push(\"Off\", yes);\n              } else {\n                var otherYes = exportValues.find(function (v) {\n                  return v !== \"Off\";\n                });\n                exportValues.length = 0;\n                exportValues.push(\"Off\", otherYes);\n              }\n              if (!exportValues.includes(this.data.fieldValue)) {\n                this.data.fieldValue = \"Off\";\n              }\n              this.data.exportValue = exportValues[1];\n              this.checkedAppearance = normalAppearance.get(this.data.exportValue) || null;\n              this.uncheckedAppearance = normalAppearance.get(\"Off\") || null;\n              if (this.checkedAppearance) {\n                this._streams.push(this.checkedAppearance);\n              } else {\n                this._getDefaultCheckedAppearance(params, \"check\");\n              }\n              if (this.uncheckedAppearance) {\n                this._streams.push(this.uncheckedAppearance);\n              }\n              this._fallbackFontDict = this.fallbackFontDict;\n            }\n          }, {\n            key: \"_processRadioButton\",\n            value: function _processRadioButton(params) {\n              this.data.fieldValue = this.data.buttonValue = null;\n              var fieldParent = params.dict.get(\"Parent\");\n              if (fieldParent instanceof _primitives.Dict) {\n                this.parent = params.dict.getRaw(\"Parent\");\n                var fieldParentValue = fieldParent.get(\"V\");\n                if (fieldParentValue instanceof _primitives.Name) {\n                  this.data.fieldValue = this._decodeFormValue(fieldParentValue);\n                }\n              }\n              var appearanceStates = params.dict.get(\"AP\");\n              if (!(appearanceStates instanceof _primitives.Dict)) {\n                return;\n              }\n              var normalAppearance = appearanceStates.get(\"N\");\n              if (!(normalAppearance instanceof _primitives.Dict)) {\n                return;\n              }\n              var _iterator49 = _createForOfIteratorHelper(normalAppearance.getKeys()),\n                _step49;\n              try {\n                for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n                  var key = _step49.value;\n                  if (key !== \"Off\") {\n                    this.data.buttonValue = this._decodeFormValue(key);\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator49.e(err);\n              } finally {\n                _iterator49.f();\n              }\n              this.checkedAppearance = normalAppearance.get(this.data.buttonValue) || null;\n              this.uncheckedAppearance = normalAppearance.get(\"Off\") || null;\n              if (this.checkedAppearance) {\n                this._streams.push(this.checkedAppearance);\n              } else {\n                this._getDefaultCheckedAppearance(params, \"disc\");\n              }\n              if (this.uncheckedAppearance) {\n                this._streams.push(this.uncheckedAppearance);\n              }\n              this._fallbackFontDict = this.fallbackFontDict;\n            }\n          }, {\n            key: \"_processPushButton\",\n            value: function _processPushButton(params) {\n              if (!params.dict.has(\"A\") && !params.dict.has(\"AA\") && !this.data.alternativeText) {\n                (0, _util.warn)(\"Push buttons without action dictionaries are not supported\");\n                return;\n              }\n              this.data.isTooltipOnly = !params.dict.has(\"A\") && !params.dict.has(\"AA\");\n              _catalog.Catalog.parseDestDictionary({\n                destDict: params.dict,\n                resultObj: this.data,\n                docBaseUrl: params.pdfManager.docBaseUrl\n              });\n            }\n          }, {\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              var type = \"button\";\n              var exportValues;\n              if (this.data.checkBox) {\n                type = \"checkbox\";\n                exportValues = this.data.exportValue;\n              } else if (this.data.radioButton) {\n                type = \"radiobutton\";\n                exportValues = this.data.buttonValue;\n              }\n              return {\n                id: this.data.id,\n                value: this.data.fieldValue || \"Off\",\n                defaultValue: this.data.defaultFieldValue,\n                exportValues: exportValues,\n                editable: !this.data.readOnly,\n                name: this.data.fieldName,\n                rect: this.data.rect,\n                hidden: this.data.hidden,\n                actions: this.data.actions,\n                page: this.data.pageIndex,\n                strokeColor: this.data.borderColor,\n                fillColor: this.data.backgroundColor,\n                rotation: this.rotation,\n                type: type\n              };\n            }\n          }, {\n            key: \"fallbackFontDict\",\n            get: function get() {\n              var dict = new _primitives.Dict();\n              dict.set(\"BaseFont\", _primitives.Name.get(\"ZapfDingbats\"));\n              dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n              dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n              dict.set(\"Encoding\", _primitives.Name.get(\"ZapfDingbatsEncoding\"));\n              return (0, _util.shadow)(this, \"fallbackFontDict\", dict);\n            }\n          }]);\n          return ButtonWidgetAnnotation;\n        }(WidgetAnnotation);\n        var ChoiceWidgetAnnotation = /*#__PURE__*/function (_WidgetAnnotation3) {\n          _inherits(ChoiceWidgetAnnotation, _WidgetAnnotation3);\n          function ChoiceWidgetAnnotation(params) {\n            var _this25;\n            _classCallCheck(this, ChoiceWidgetAnnotation);\n            _this25 = _possibleConstructorReturn(this, _getPrototypeOf(ChoiceWidgetAnnotation).call(this, params));\n            _this25.data.options = [];\n            var options = (0, _core_utils.getInheritableProperty)({\n              dict: params.dict,\n              key: \"Opt\"\n            });\n            if (Array.isArray(options)) {\n              var xref = params.xref;\n              for (var i = 0, ii = options.length; i < ii; i++) {\n                var option = xref.fetchIfRef(options[i]);\n                var isOptionArray = Array.isArray(option);\n                _this25.data.options[i] = {\n                  exportValue: _this25._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[0]) : option),\n                  displayValue: _this25._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[1]) : option)\n                };\n              }\n            }\n            if (typeof _this25.data.fieldValue === \"string\") {\n              _this25.data.fieldValue = [_this25.data.fieldValue];\n            } else if (!_this25.data.fieldValue) {\n              _this25.data.fieldValue = [];\n            }\n            _this25.data.combo = _this25.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);\n            _this25.data.multiSelect = _this25.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);\n            _this25._hasText = true;\n            return _this25;\n          }\n          _createClass(ChoiceWidgetAnnotation, [{\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              var type = this.data.combo ? \"combobox\" : \"listbox\";\n              var value = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;\n              return {\n                id: this.data.id,\n                value: value,\n                defaultValue: this.data.defaultFieldValue,\n                editable: !this.data.readOnly,\n                name: this.data.fieldName,\n                rect: this.data.rect,\n                numItems: this.data.fieldValue.length,\n                multipleSelection: this.data.multiSelect,\n                hidden: this.data.hidden,\n                actions: this.data.actions,\n                items: this.data.options,\n                page: this.data.pageIndex,\n                strokeColor: this.data.borderColor,\n                fillColor: this.data.backgroundColor,\n                rotation: this.rotation,\n                type: type\n              };\n            }\n          }, {\n            key: \"_getAppearance\",\n            value: function () {\n              var _getAppearance3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(evaluator, task, annotationStorage) {\n                var storageEntry, rotation, exportedValue, defaultPadding, hPadding, totalHeight, totalWidth, _ref29, lineCount, valueIndices, i, exportValue, font, defaultAppearance, fontSize, _lineHeight, lineWidth, value, _iterator50, _step50, displayValue, width, _this$_computeFontSiz3, _this$_computeFontSiz4, lineHeight, vPadding, numberOfVisibleLines, firstIndex, valuePosition, indexInPage, end, buf, _iterator51, _step51, index, _i9, _displayValue, hpadding, vpadding;\n                return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                  while (1) {\n                    switch (_context33.prev = _context33.next) {\n                      case 0:\n                        if (!this.data.combo) {\n                          _context33.next = 2;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", _get(_getPrototypeOf(ChoiceWidgetAnnotation.prototype), \"_getAppearance\", this).call(this, evaluator, task, annotationStorage));\n                      case 2:\n                        if (annotationStorage) {\n                          _context33.next = 4;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", null);\n                      case 4:\n                        storageEntry = annotationStorage.get(this.data.id);\n                        if (storageEntry) {\n                          _context33.next = 7;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", null);\n                      case 7:\n                        rotation = storageEntry.rotation;\n                        exportedValue = storageEntry.value;\n                        if (!(rotation === undefined && exportedValue === undefined)) {\n                          _context33.next = 11;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", null);\n                      case 11:\n                        if (exportedValue === undefined) {\n                          exportedValue = this.data.fieldValue;\n                        } else if (!Array.isArray(exportedValue)) {\n                          exportedValue = [exportedValue];\n                        }\n                        defaultPadding = 2;\n                        hPadding = defaultPadding;\n                        totalHeight = this.data.rect[3] - this.data.rect[1];\n                        totalWidth = this.data.rect[2] - this.data.rect[0];\n                        if (rotation === 90 || rotation === 270) {\n                          _ref29 = [totalHeight, totalWidth];\n                          totalWidth = _ref29[0];\n                          totalHeight = _ref29[1];\n                        }\n                        lineCount = this.data.options.length;\n                        valueIndices = [];\n                        for (i = 0; i < lineCount; i++) {\n                          exportValue = this.data.options[i].exportValue;\n                          if (exportedValue.includes(exportValue)) {\n                            valueIndices.push(i);\n                          }\n                        }\n                        if (!this._defaultAppearance) {\n                          this.data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(this._defaultAppearance = \"/Helvetica 0 Tf 0 g\");\n                        }\n                        _context33.next = 23;\n                        return WidgetAnnotation._getFontData(evaluator, task, this.data.defaultAppearanceData, this._fieldResources.mergedResources);\n                      case 23:\n                        font = _context33.sent;\n                        fontSize = this.data.defaultAppearanceData.fontSize;\n                        if (!fontSize) {\n                          _lineHeight = (totalHeight - defaultPadding) / lineCount;\n                          lineWidth = -1;\n                          _iterator50 = _createForOfIteratorHelper(this.data.options);\n                          try {\n                            for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n                              displayValue = _step50.value.displayValue;\n                              width = this._getTextWidth(displayValue, font);\n                              if (width > lineWidth) {\n                                lineWidth = width;\n                                value = displayValue;\n                              }\n                            }\n                          } catch (err) {\n                            _iterator50.e(err);\n                          } finally {\n                            _iterator50.f();\n                          }\n                          _this$_computeFontSiz3 = this._computeFontSize(_lineHeight, totalWidth - 2 * hPadding, value, font, -1);\n                          _this$_computeFontSiz4 = _slicedToArray(_this$_computeFontSiz3, 2);\n                          defaultAppearance = _this$_computeFontSiz4[0];\n                          fontSize = _this$_computeFontSiz4[1];\n                        } else {\n                          defaultAppearance = this._defaultAppearance;\n                        }\n                        lineHeight = fontSize * _util.LINE_FACTOR;\n                        vPadding = (lineHeight - fontSize) / 2;\n                        numberOfVisibleLines = Math.floor(totalHeight / lineHeight);\n                        if (valueIndices.length === 1) {\n                          valuePosition = valueIndices[0];\n                          indexInPage = valuePosition % numberOfVisibleLines;\n                          firstIndex = valuePosition - indexInPage;\n                        } else {\n                          firstIndex = valueIndices.length ? valueIndices[0] : 0;\n                        }\n                        end = Math.min(firstIndex + numberOfVisibleLines + 1, lineCount);\n                        buf = [\"/Tx BMC q\", \"1 1 \".concat(totalWidth, \" \").concat(totalHeight, \" re W n\")];\n                        if (valueIndices.length) {\n                          buf.push(\"0.600006 0.756866 0.854904 rg\");\n                          _iterator51 = _createForOfIteratorHelper(valueIndices);\n                          try {\n                            for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n                              index = _step51.value;\n                              if (firstIndex <= index && index < end) {\n                                buf.push(\"1 \".concat(totalHeight - (index - firstIndex + 1) * lineHeight, \" \").concat(totalWidth, \" \").concat(lineHeight, \" re f\"));\n                              }\n                            }\n                          } catch (err) {\n                            _iterator51.e(err);\n                          } finally {\n                            _iterator51.f();\n                          }\n                        }\n                        buf.push(\"BT\", defaultAppearance, \"1 0 0 1 0 \".concat(totalHeight, \" Tm\"));\n                        for (_i9 = firstIndex; _i9 < end; _i9++) {\n                          _displayValue = this.data.options[_i9].displayValue;\n                          hpadding = _i9 === firstIndex ? hPadding : 0;\n                          vpadding = _i9 === firstIndex ? vPadding : 0;\n                          buf.push(this._renderText(_displayValue, font, fontSize, totalWidth, 0, hpadding, -lineHeight + vpadding));\n                        }\n                        buf.push(\"ET Q EMC\");\n                        return _context33.abrupt(\"return\", buf.join(\"\\n\"));\n                      case 37:\n                      case \"end\":\n                        return _context33.stop();\n                    }\n                  }\n                }, _callee33, this);\n              }));\n              function _getAppearance(_x80, _x81, _x82) {\n                return _getAppearance3.apply(this, arguments);\n              }\n              return _getAppearance;\n            }()\n          }]);\n          return ChoiceWidgetAnnotation;\n        }(WidgetAnnotation);\n        var SignatureWidgetAnnotation = /*#__PURE__*/function (_WidgetAnnotation4) {\n          _inherits(SignatureWidgetAnnotation, _WidgetAnnotation4);\n          function SignatureWidgetAnnotation(params) {\n            var _this26;\n            _classCallCheck(this, SignatureWidgetAnnotation);\n            _this26 = _possibleConstructorReturn(this, _getPrototypeOf(SignatureWidgetAnnotation).call(this, params));\n            _this26.data.fieldValue = null;\n            return _this26;\n          }\n          _createClass(SignatureWidgetAnnotation, [{\n            key: \"getFieldObject\",\n            value: function getFieldObject() {\n              return {\n                id: this.data.id,\n                value: null,\n                page: this.data.pageIndex,\n                type: \"signature\"\n              };\n            }\n          }]);\n          return SignatureWidgetAnnotation;\n        }(WidgetAnnotation);\n        var TextAnnotation = /*#__PURE__*/function (_MarkupAnnotation) {\n          _inherits(TextAnnotation, _MarkupAnnotation);\n          function TextAnnotation(parameters) {\n            var _this27;\n            _classCallCheck(this, TextAnnotation);\n            var DEFAULT_ICON_SIZE = 22;\n            _this27 = _possibleConstructorReturn(this, _getPrototypeOf(TextAnnotation).call(this, parameters));\n            var dict = parameters.dict;\n            _this27.data.annotationType = _util.AnnotationType.TEXT;\n            if (_this27.data.hasAppearance) {\n              _this27.data.name = \"NoIcon\";\n            } else {\n              _this27.data.rect[1] = _this27.data.rect[3] - DEFAULT_ICON_SIZE;\n              _this27.data.rect[2] = _this27.data.rect[0] + DEFAULT_ICON_SIZE;\n              _this27.data.name = dict.has(\"Name\") ? dict.get(\"Name\").name : \"Note\";\n            }\n            if (dict.has(\"State\")) {\n              _this27.data.state = dict.get(\"State\") || null;\n              _this27.data.stateModel = dict.get(\"StateModel\") || null;\n            } else {\n              _this27.data.state = null;\n              _this27.data.stateModel = null;\n            }\n            return _this27;\n          }\n          return TextAnnotation;\n        }(MarkupAnnotation);\n        var LinkAnnotation = /*#__PURE__*/function (_Annotation3) {\n          _inherits(LinkAnnotation, _Annotation3);\n          function LinkAnnotation(params) {\n            var _this28;\n            _classCallCheck(this, LinkAnnotation);\n            _this28 = _possibleConstructorReturn(this, _getPrototypeOf(LinkAnnotation).call(this, params));\n            _this28.data.annotationType = _util.AnnotationType.LINK;\n            var quadPoints = getQuadPoints(params.dict, _this28.rectangle);\n            if (quadPoints) {\n              _this28.data.quadPoints = quadPoints;\n            }\n            _this28.data.borderColor = _this28.data.borderColor || _this28.data.color;\n            _catalog.Catalog.parseDestDictionary({\n              destDict: params.dict,\n              resultObj: _this28.data,\n              docBaseUrl: params.pdfManager.docBaseUrl\n            });\n            return _this28;\n          }\n          return LinkAnnotation;\n        }(Annotation);\n        var PopupAnnotation = /*#__PURE__*/function (_Annotation4) {\n          _inherits(PopupAnnotation, _Annotation4);\n          function PopupAnnotation(parameters) {\n            var _this29;\n            _classCallCheck(this, PopupAnnotation);\n            _this29 = _possibleConstructorReturn(this, _getPrototypeOf(PopupAnnotation).call(this, parameters));\n            _this29.data.annotationType = _util.AnnotationType.POPUP;\n            var parentItem = parameters.dict.get(\"Parent\");\n            if (!parentItem) {\n              (0, _util.warn)(\"Popup annotation has a missing or invalid parent annotation.\");\n              return _possibleConstructorReturn(_this29);\n            }\n            var parentSubtype = parentItem.get(\"Subtype\");\n            _this29.data.parentType = parentSubtype instanceof _primitives.Name ? parentSubtype.name : null;\n            var rawParent = parameters.dict.getRaw(\"Parent\");\n            _this29.data.parentId = rawParent instanceof _primitives.Ref ? rawParent.toString() : null;\n            var parentRect = parentItem.getArray(\"Rect\");\n            if (Array.isArray(parentRect) && parentRect.length === 4) {\n              _this29.data.parentRect = _util.Util.normalizeRect(parentRect);\n            } else {\n              _this29.data.parentRect = [0, 0, 0, 0];\n            }\n            var rt = parentItem.get(\"RT\");\n            if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {\n              parentItem = parentItem.get(\"IRT\");\n            }\n            if (!parentItem.has(\"M\")) {\n              _this29.data.modificationDate = null;\n            } else {\n              _this29.setModificationDate(parentItem.get(\"M\"));\n              _this29.data.modificationDate = _this29.modificationDate;\n            }\n            if (!parentItem.has(\"C\")) {\n              _this29.data.color = null;\n            } else {\n              _this29.setColor(parentItem.getArray(\"C\"));\n              _this29.data.color = _this29.color;\n            }\n            if (!_this29.viewable) {\n              var parentFlags = parentItem.get(\"F\");\n              if (_this29._isViewable(parentFlags)) {\n                _this29.setFlags(parentFlags);\n              }\n            }\n            _this29.setTitle(parentItem.get(\"T\"));\n            _this29.data.titleObj = _this29._title;\n            _this29.setContents(parentItem.get(\"Contents\"));\n            _this29.data.contentsObj = _this29._contents;\n            if (parentItem.has(\"RC\")) {\n              _this29.data.richText = _factory.XFAFactory.getRichTextAsHtml(parentItem.get(\"RC\"));\n            }\n            return _this29;\n          }\n          return PopupAnnotation;\n        }(Annotation);\n        exports.PopupAnnotation = PopupAnnotation;\n        var FreeTextAnnotation = /*#__PURE__*/function (_MarkupAnnotation2) {\n          _inherits(FreeTextAnnotation, _MarkupAnnotation2);\n          function FreeTextAnnotation(parameters) {\n            var _this30;\n            _classCallCheck(this, FreeTextAnnotation);\n            _this30 = _possibleConstructorReturn(this, _getPrototypeOf(FreeTextAnnotation).call(this, parameters));\n            _this30.data.annotationType = _util.AnnotationType.FREETEXT;\n            return _this30;\n          }\n          _createClass(FreeTextAnnotation, [{\n            key: \"hasTextContent\",\n            get: function get() {\n              return !!this.appearance;\n            }\n          }], [{\n            key: \"createNewDict\",\n            value: function createNewDict(annotation, xref, _ref30) {\n              var apRef = _ref30.apRef,\n                ap = _ref30.ap;\n              var color = annotation.color,\n                fontSize = annotation.fontSize,\n                rect = annotation.rect,\n                rotation = annotation.rotation,\n                user = annotation.user,\n                value = annotation.value;\n              var freetext = new _primitives.Dict(xref);\n              freetext.set(\"Type\", _primitives.Name.get(\"Annot\"));\n              freetext.set(\"Subtype\", _primitives.Name.get(\"FreeText\"));\n              freetext.set(\"CreationDate\", \"D:\".concat((0, _util.getModificationDate)()));\n              freetext.set(\"Rect\", rect);\n              var da = \"/Helv \".concat(fontSize, \" Tf \").concat((0, _default_appearance.getPdfColor)(color, true));\n              freetext.set(\"DA\", da);\n              freetext.set(\"Contents\", value);\n              freetext.set(\"F\", 4);\n              freetext.set(\"Border\", [0, 0, 0]);\n              freetext.set(\"Rotate\", rotation);\n              if (user) {\n                freetext.set(\"T\", (0, _util.stringToUTF8String)(user));\n              }\n              var n = new _primitives.Dict(xref);\n              freetext.set(\"AP\", n);\n              if (apRef) {\n                n.set(\"N\", apRef);\n              } else {\n                n.set(\"N\", ap);\n              }\n              return freetext;\n            }\n          }, {\n            key: \"createNewAppearanceStream\",\n            value: function () {\n              var _createNewAppearanceStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(annotation, xref, params) {\n                var baseFontRef, evaluator, task, color, fontSize, rect, rotation, value, resources, font, baseFont, helv, _rect, x1, y1, x2, y2, w, h, _ref31, lines, scale, totalWidth, encodedLines, _iterator52, _step52, _line, lineWidth, glyphs, _iterator53, _step53, glyph, hscale, vscale, lineHeight, lineDescent, totalHeight, fscale, newFontSize, buffer, vShift, _i10, _encodedLines, line, appearance, appearanceStreamDict, matrix, ap;\n                return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n                  while (1) {\n                    switch (_context34.prev = _context34.next) {\n                      case 0:\n                        baseFontRef = params.baseFontRef, evaluator = params.evaluator, task = params.task;\n                        color = annotation.color, fontSize = annotation.fontSize, rect = annotation.rect, rotation = annotation.rotation, value = annotation.value;\n                        resources = new _primitives.Dict(xref);\n                        font = new _primitives.Dict(xref);\n                        if (baseFontRef) {\n                          font.set(\"Helv\", baseFontRef);\n                        } else {\n                          baseFont = new _primitives.Dict(xref);\n                          baseFont.set(\"BaseFont\", _primitives.Name.get(\"Helvetica\"));\n                          baseFont.set(\"Type\", _primitives.Name.get(\"Font\"));\n                          baseFont.set(\"Subtype\", _primitives.Name.get(\"Type1\"));\n                          baseFont.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n                          font.set(\"Helv\", baseFont);\n                        }\n                        resources.set(\"Font\", font);\n                        _context34.next = 8;\n                        return WidgetAnnotation._getFontData(evaluator, task, {\n                          fontName: \"Helvetica\",\n                          fontSize: fontSize\n                        }, resources);\n                      case 8:\n                        helv = _context34.sent;\n                        _rect = _slicedToArray(rect, 4), x1 = _rect[0], y1 = _rect[1], x2 = _rect[2], y2 = _rect[3];\n                        w = x2 - x1;\n                        h = y2 - y1;\n                        if (rotation % 180 !== 0) {\n                          _ref31 = [h, w];\n                          w = _ref31[0];\n                          h = _ref31[1];\n                        }\n                        lines = value.split(\"\\n\");\n                        scale = fontSize / 1000;\n                        totalWidth = -Infinity;\n                        encodedLines = [];\n                        _iterator52 = _createForOfIteratorHelper(lines);\n                        try {\n                          for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n                            _line = _step52.value;\n                            _line = helv.encodeString(_line).join(\"\");\n                            encodedLines.push(_line);\n                            lineWidth = 0;\n                            glyphs = helv.charsToGlyphs(_line);\n                            _iterator53 = _createForOfIteratorHelper(glyphs);\n                            try {\n                              for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n                                glyph = _step53.value;\n                                lineWidth += glyph.width * scale;\n                              }\n                            } catch (err) {\n                              _iterator53.e(err);\n                            } finally {\n                              _iterator53.f();\n                            }\n                            totalWidth = Math.max(totalWidth, lineWidth);\n                          }\n                        } catch (err) {\n                          _iterator52.e(err);\n                        } finally {\n                          _iterator52.f();\n                        }\n                        hscale = 1;\n                        if (totalWidth > w) {\n                          hscale = w / totalWidth;\n                        }\n                        vscale = 1;\n                        lineHeight = _util.LINE_FACTOR * fontSize;\n                        lineDescent = _util.LINE_DESCENT_FACTOR * fontSize;\n                        totalHeight = lineHeight * lines.length;\n                        if (totalHeight > h) {\n                          vscale = h / totalHeight;\n                        }\n                        fscale = Math.min(hscale, vscale);\n                        newFontSize = fontSize * fscale;\n                        buffer = [\"q\", \"0 0 \".concat((0, _core_utils.numberToString)(w), \" \").concat((0, _core_utils.numberToString)(h), \" re W n\"), \"BT\", \"1 0 0 1 0 \".concat((0, _core_utils.numberToString)(h + lineDescent), \" Tm 0 Tc \").concat((0, _default_appearance.getPdfColor)(color, true)), \"/Helv \".concat((0, _core_utils.numberToString)(newFontSize), \" Tf\")];\n                        vShift = (0, _core_utils.numberToString)(lineHeight);\n                        for (_i10 = 0, _encodedLines = encodedLines; _i10 < _encodedLines.length; _i10++) {\n                          line = _encodedLines[_i10];\n                          buffer.push(\"0 -\".concat(vShift, \" Td (\").concat((0, _util.escapeString)(line), \") Tj\"));\n                        }\n                        buffer.push(\"ET\", \"Q\");\n                        appearance = buffer.join(\"\\n\");\n                        appearanceStreamDict = new _primitives.Dict(xref);\n                        appearanceStreamDict.set(\"FormType\", 1);\n                        appearanceStreamDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n                        appearanceStreamDict.set(\"Type\", _primitives.Name.get(\"XObject\"));\n                        appearanceStreamDict.set(\"BBox\", [0, 0, w, h]);\n                        appearanceStreamDict.set(\"Length\", appearance.length);\n                        appearanceStreamDict.set(\"Resources\", resources);\n                        if (rotation) {\n                          matrix = WidgetAnnotation._getRotationMatrix(rotation, w, h);\n                          appearanceStreamDict.set(\"Matrix\", matrix);\n                        }\n                        ap = new _stream.StringStream(appearance);\n                        ap.dict = appearanceStreamDict;\n                        return _context34.abrupt(\"return\", ap);\n                      case 44:\n                      case \"end\":\n                        return _context34.stop();\n                    }\n                  }\n                }, _callee34);\n              }));\n              function createNewAppearanceStream(_x83, _x84, _x85) {\n                return _createNewAppearanceStream.apply(this, arguments);\n              }\n              return createNewAppearanceStream;\n            }()\n          }]);\n          return FreeTextAnnotation;\n        }(MarkupAnnotation);\n        var LineAnnotation = /*#__PURE__*/function (_MarkupAnnotation3) {\n          _inherits(LineAnnotation, _MarkupAnnotation3);\n          function LineAnnotation(parameters) {\n            var _this31;\n            _classCallCheck(this, LineAnnotation);\n            _this31 = _possibleConstructorReturn(this, _getPrototypeOf(LineAnnotation).call(this, parameters));\n            var dict = parameters.dict;\n            _this31.data.annotationType = _util.AnnotationType.LINE;\n            var lineCoordinates = dict.getArray(\"L\");\n            _this31.data.lineCoordinates = _util.Util.normalizeRect(lineCoordinates);\n            _this31.setLineEndings(dict.getArray(\"LE\"));\n            _this31.data.lineEndings = _this31.lineEndings;\n            if (!_this31.appearance) {\n              var strokeColor = _this31.color ? Array.from(_this31.color).map(function (c) {\n                return c / 255;\n              }) : [0, 0, 0];\n              var strokeAlpha = dict.get(\"CA\");\n              var fillColor = null,\n                interiorColor = dict.getArray(\"IC\");\n              if (interiorColor) {\n                interiorColor = getRgbColor(interiorColor, null);\n                fillColor = interiorColor ? Array.from(interiorColor).map(function (c) {\n                  return c / 255;\n                }) : null;\n              }\n              var fillAlpha = fillColor ? strokeAlpha : null;\n              var borderWidth = _this31.borderStyle.width || 1,\n                borderAdjust = 2 * borderWidth;\n              var bbox = [_this31.data.lineCoordinates[0] - borderAdjust, _this31.data.lineCoordinates[1] - borderAdjust, _this31.data.lineCoordinates[2] + borderAdjust, _this31.data.lineCoordinates[3] + borderAdjust];\n              if (!_util.Util.intersect(_this31.rectangle, bbox)) {\n                _this31.rectangle = bbox;\n              }\n              _this31._setDefaultAppearance({\n                xref: parameters.xref,\n                extra: \"\".concat(borderWidth, \" w\"),\n                strokeColor: strokeColor,\n                fillColor: fillColor,\n                strokeAlpha: strokeAlpha,\n                fillAlpha: fillAlpha,\n                pointsCallback: function pointsCallback(buffer, points) {\n                  buffer.push(\"\".concat(lineCoordinates[0], \" \").concat(lineCoordinates[1], \" m\"), \"\".concat(lineCoordinates[2], \" \").concat(lineCoordinates[3], \" l\"), \"S\");\n                  return [points[0].x - borderWidth, points[1].x + borderWidth, points[3].y - borderWidth, points[1].y + borderWidth];\n                }\n              });\n            }\n            return _this31;\n          }\n          return LineAnnotation;\n        }(MarkupAnnotation);\n        var SquareAnnotation = /*#__PURE__*/function (_MarkupAnnotation4) {\n          _inherits(SquareAnnotation, _MarkupAnnotation4);\n          function SquareAnnotation(parameters) {\n            var _this32;\n            _classCallCheck(this, SquareAnnotation);\n            _this32 = _possibleConstructorReturn(this, _getPrototypeOf(SquareAnnotation).call(this, parameters));\n            _this32.data.annotationType = _util.AnnotationType.SQUARE;\n            if (!_this32.appearance) {\n              var strokeColor = _this32.color ? Array.from(_this32.color).map(function (c) {\n                return c / 255;\n              }) : [0, 0, 0];\n              var strokeAlpha = parameters.dict.get(\"CA\");\n              var fillColor = null,\n                interiorColor = parameters.dict.getArray(\"IC\");\n              if (interiorColor) {\n                interiorColor = getRgbColor(interiorColor, null);\n                fillColor = interiorColor ? Array.from(interiorColor).map(function (c) {\n                  return c / 255;\n                }) : null;\n              }\n              var fillAlpha = fillColor ? strokeAlpha : null;\n              if (_this32.borderStyle.width === 0 && !fillColor) {\n                return _possibleConstructorReturn(_this32);\n              }\n              _this32._setDefaultAppearance({\n                xref: parameters.xref,\n                extra: \"\".concat(_this32.borderStyle.width, \" w\"),\n                strokeColor: strokeColor,\n                fillColor: fillColor,\n                strokeAlpha: strokeAlpha,\n                fillAlpha: fillAlpha,\n                pointsCallback: function pointsCallback(buffer, points) {\n                  var x = points[2].x + _this32.borderStyle.width / 2;\n                  var y = points[2].y + _this32.borderStyle.width / 2;\n                  var width = points[3].x - points[2].x - _this32.borderStyle.width;\n                  var height = points[1].y - points[3].y - _this32.borderStyle.width;\n                  buffer.push(\"\".concat(x, \" \").concat(y, \" \").concat(width, \" \").concat(height, \" re\"));\n                  if (fillColor) {\n                    buffer.push(\"B\");\n                  } else {\n                    buffer.push(\"S\");\n                  }\n                  return [points[0].x, points[1].x, points[3].y, points[1].y];\n                }\n              });\n            }\n            return _this32;\n          }\n          return SquareAnnotation;\n        }(MarkupAnnotation);\n        var CircleAnnotation = /*#__PURE__*/function (_MarkupAnnotation5) {\n          _inherits(CircleAnnotation, _MarkupAnnotation5);\n          function CircleAnnotation(parameters) {\n            var _this33;\n            _classCallCheck(this, CircleAnnotation);\n            _this33 = _possibleConstructorReturn(this, _getPrototypeOf(CircleAnnotation).call(this, parameters));\n            _this33.data.annotationType = _util.AnnotationType.CIRCLE;\n            if (!_this33.appearance) {\n              var strokeColor = _this33.color ? Array.from(_this33.color).map(function (c) {\n                return c / 255;\n              }) : [0, 0, 0];\n              var strokeAlpha = parameters.dict.get(\"CA\");\n              var fillColor = null;\n              var interiorColor = parameters.dict.getArray(\"IC\");\n              if (interiorColor) {\n                interiorColor = getRgbColor(interiorColor, null);\n                fillColor = interiorColor ? Array.from(interiorColor).map(function (c) {\n                  return c / 255;\n                }) : null;\n              }\n              var fillAlpha = fillColor ? strokeAlpha : null;\n              if (_this33.borderStyle.width === 0 && !fillColor) {\n                return _possibleConstructorReturn(_this33);\n              }\n              var controlPointsDistance = 4 / 3 * Math.tan(Math.PI / (2 * 4));\n              _this33._setDefaultAppearance({\n                xref: parameters.xref,\n                extra: \"\".concat(_this33.borderStyle.width, \" w\"),\n                strokeColor: strokeColor,\n                fillColor: fillColor,\n                strokeAlpha: strokeAlpha,\n                fillAlpha: fillAlpha,\n                pointsCallback: function pointsCallback(buffer, points) {\n                  var x0 = points[0].x + _this33.borderStyle.width / 2;\n                  var y0 = points[0].y - _this33.borderStyle.width / 2;\n                  var x1 = points[3].x - _this33.borderStyle.width / 2;\n                  var y1 = points[3].y + _this33.borderStyle.width / 2;\n                  var xMid = x0 + (x1 - x0) / 2;\n                  var yMid = y0 + (y1 - y0) / 2;\n                  var xOffset = (x1 - x0) / 2 * controlPointsDistance;\n                  var yOffset = (y1 - y0) / 2 * controlPointsDistance;\n                  buffer.push(\"\".concat(xMid, \" \").concat(y1, \" m\"), \"\".concat(xMid + xOffset, \" \").concat(y1, \" \").concat(x1, \" \").concat(yMid + yOffset, \" \").concat(x1, \" \").concat(yMid, \" c\"), \"\".concat(x1, \" \").concat(yMid - yOffset, \" \").concat(xMid + xOffset, \" \").concat(y0, \" \").concat(xMid, \" \").concat(y0, \" c\"), \"\".concat(xMid - xOffset, \" \").concat(y0, \" \").concat(x0, \" \").concat(yMid - yOffset, \" \").concat(x0, \" \").concat(yMid, \" c\"), \"\".concat(x0, \" \").concat(yMid + yOffset, \" \").concat(xMid - xOffset, \" \").concat(y1, \" \").concat(xMid, \" \").concat(y1, \" c\"), \"h\");\n                  if (fillColor) {\n                    buffer.push(\"B\");\n                  } else {\n                    buffer.push(\"S\");\n                  }\n                  return [points[0].x, points[1].x, points[3].y, points[1].y];\n                }\n              });\n            }\n            return _this33;\n          }\n          return CircleAnnotation;\n        }(MarkupAnnotation);\n        var PolylineAnnotation = /*#__PURE__*/function (_MarkupAnnotation6) {\n          _inherits(PolylineAnnotation, _MarkupAnnotation6);\n          function PolylineAnnotation(parameters) {\n            var _this34;\n            _classCallCheck(this, PolylineAnnotation);\n            _this34 = _possibleConstructorReturn(this, _getPrototypeOf(PolylineAnnotation).call(this, parameters));\n            var dict = parameters.dict;\n            _this34.data.annotationType = _util.AnnotationType.POLYLINE;\n            _this34.data.vertices = [];\n            if (!(_assertThisInitialized(_assertThisInitialized(_this34)) instanceof PolygonAnnotation)) {\n              _this34.setLineEndings(dict.getArray(\"LE\"));\n              _this34.data.lineEndings = _this34.lineEndings;\n            }\n            var rawVertices = dict.getArray(\"Vertices\");\n            if (!Array.isArray(rawVertices)) {\n              return _possibleConstructorReturn(_this34);\n            }\n            for (var i = 0, ii = rawVertices.length; i < ii; i += 2) {\n              _this34.data.vertices.push({\n                x: rawVertices[i],\n                y: rawVertices[i + 1]\n              });\n            }\n            if (!_this34.appearance) {\n              var strokeColor = _this34.color ? Array.from(_this34.color).map(function (c) {\n                return c / 255;\n              }) : [0, 0, 0];\n              var strokeAlpha = dict.get(\"CA\");\n              var borderWidth = _this34.borderStyle.width || 1,\n                borderAdjust = 2 * borderWidth;\n              var bbox = [Infinity, Infinity, -Infinity, -Infinity];\n              var _iterator54 = _createForOfIteratorHelper(_this34.data.vertices),\n                _step54;\n              try {\n                for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n                  var vertex = _step54.value;\n                  bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);\n                  bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);\n                  bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);\n                  bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);\n                }\n              } catch (err) {\n                _iterator54.e(err);\n              } finally {\n                _iterator54.f();\n              }\n              if (!_util.Util.intersect(_this34.rectangle, bbox)) {\n                _this34.rectangle = bbox;\n              }\n              _this34._setDefaultAppearance({\n                xref: parameters.xref,\n                extra: \"\".concat(borderWidth, \" w\"),\n                strokeColor: strokeColor,\n                strokeAlpha: strokeAlpha,\n                pointsCallback: function pointsCallback(buffer, points) {\n                  var vertices = _this34.data.vertices;\n                  for (var _i11 = 0, _ii = vertices.length; _i11 < _ii; _i11++) {\n                    buffer.push(\"\".concat(vertices[_i11].x, \" \").concat(vertices[_i11].y, \" \").concat(_i11 === 0 ? \"m\" : \"l\"));\n                  }\n                  buffer.push(\"S\");\n                  return [points[0].x, points[1].x, points[3].y, points[1].y];\n                }\n              });\n            }\n            return _this34;\n          }\n          return PolylineAnnotation;\n        }(MarkupAnnotation);\n        var PolygonAnnotation = /*#__PURE__*/function (_PolylineAnnotation) {\n          _inherits(PolygonAnnotation, _PolylineAnnotation);\n          function PolygonAnnotation(parameters) {\n            var _this35;\n            _classCallCheck(this, PolygonAnnotation);\n            _this35 = _possibleConstructorReturn(this, _getPrototypeOf(PolygonAnnotation).call(this, parameters));\n            _this35.data.annotationType = _util.AnnotationType.POLYGON;\n            return _this35;\n          }\n          return PolygonAnnotation;\n        }(PolylineAnnotation);\n        var CaretAnnotation = /*#__PURE__*/function (_MarkupAnnotation7) {\n          _inherits(CaretAnnotation, _MarkupAnnotation7);\n          function CaretAnnotation(parameters) {\n            var _this36;\n            _classCallCheck(this, CaretAnnotation);\n            _this36 = _possibleConstructorReturn(this, _getPrototypeOf(CaretAnnotation).call(this, parameters));\n            _this36.data.annotationType = _util.AnnotationType.CARET;\n            return _this36;\n          }\n          return CaretAnnotation;\n        }(MarkupAnnotation);\n        var InkAnnotation = /*#__PURE__*/function (_MarkupAnnotation8) {\n          _inherits(InkAnnotation, _MarkupAnnotation8);\n          function InkAnnotation(parameters) {\n            var _this37;\n            _classCallCheck(this, InkAnnotation);\n            _this37 = _possibleConstructorReturn(this, _getPrototypeOf(InkAnnotation).call(this, parameters));\n            _this37.data.annotationType = _util.AnnotationType.INK;\n            _this37.data.inkLists = [];\n            var rawInkLists = parameters.dict.getArray(\"InkList\");\n            if (!Array.isArray(rawInkLists)) {\n              return _possibleConstructorReturn(_this37);\n            }\n            var xref = parameters.xref;\n            for (var i = 0, ii = rawInkLists.length; i < ii; ++i) {\n              _this37.data.inkLists.push([]);\n              for (var j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {\n                _this37.data.inkLists[i].push({\n                  x: xref.fetchIfRef(rawInkLists[i][j]),\n                  y: xref.fetchIfRef(rawInkLists[i][j + 1])\n                });\n              }\n            }\n            if (!_this37.appearance) {\n              var strokeColor = _this37.color ? Array.from(_this37.color).map(function (c) {\n                return c / 255;\n              }) : [0, 0, 0];\n              var strokeAlpha = parameters.dict.get(\"CA\");\n              var borderWidth = _this37.borderStyle.width || 1,\n                borderAdjust = 2 * borderWidth;\n              var bbox = [Infinity, Infinity, -Infinity, -Infinity];\n              var _iterator55 = _createForOfIteratorHelper(_this37.data.inkLists),\n                _step55;\n              try {\n                for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n                  var inkLists = _step55.value;\n                  var _iterator57 = _createForOfIteratorHelper(inkLists),\n                    _step57;\n                  try {\n                    for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {\n                      var vertex = _step57.value;\n                      bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);\n                      bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);\n                      bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);\n                      bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);\n                    }\n                  } catch (err) {\n                    _iterator57.e(err);\n                  } finally {\n                    _iterator57.f();\n                  }\n                }\n              } catch (err) {\n                _iterator55.e(err);\n              } finally {\n                _iterator55.f();\n              }\n              if (!_util.Util.intersect(_this37.rectangle, bbox)) {\n                _this37.rectangle = bbox;\n              }\n              _this37._setDefaultAppearance({\n                xref: parameters.xref,\n                extra: \"\".concat(borderWidth, \" w\"),\n                strokeColor: strokeColor,\n                strokeAlpha: strokeAlpha,\n                pointsCallback: function pointsCallback(buffer, points) {\n                  var _iterator56 = _createForOfIteratorHelper(_this37.data.inkLists),\n                    _step56;\n                  try {\n                    for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {\n                      var inkList = _step56.value;\n                      for (var _i12 = 0, _ii2 = inkList.length; _i12 < _ii2; _i12++) {\n                        buffer.push(\"\".concat(inkList[_i12].x, \" \").concat(inkList[_i12].y, \" \").concat(_i12 === 0 ? \"m\" : \"l\"));\n                      }\n                      buffer.push(\"S\");\n                    }\n                  } catch (err) {\n                    _iterator56.e(err);\n                  } finally {\n                    _iterator56.f();\n                  }\n                  return [points[0].x, points[1].x, points[3].y, points[1].y];\n                }\n              });\n            }\n            return _this37;\n          }\n          _createClass(InkAnnotation, null, [{\n            key: \"createNewDict\",\n            value: function createNewDict(annotation, xref, _ref32) {\n              var apRef = _ref32.apRef,\n                ap = _ref32.ap;\n              var paths = annotation.paths,\n                rect = annotation.rect,\n                rotation = annotation.rotation;\n              var ink = new _primitives.Dict(xref);\n              ink.set(\"Type\", _primitives.Name.get(\"Annot\"));\n              ink.set(\"Subtype\", _primitives.Name.get(\"Ink\"));\n              ink.set(\"CreationDate\", \"D:\".concat((0, _util.getModificationDate)()));\n              ink.set(\"Rect\", rect);\n              ink.set(\"InkList\", paths.map(function (p) {\n                return p.points;\n              }));\n              ink.set(\"F\", 4);\n              ink.set(\"Border\", [0, 0, 0]);\n              ink.set(\"Rotate\", rotation);\n              var n = new _primitives.Dict(xref);\n              ink.set(\"AP\", n);\n              if (apRef) {\n                n.set(\"N\", apRef);\n              } else {\n                n.set(\"N\", ap);\n              }\n              return ink;\n            }\n          }, {\n            key: \"createNewAppearanceStream\",\n            value: function () {\n              var _createNewAppearanceStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(annotation, xref, params) {\n                var color, rect, rotation, paths, thickness, opacity, _rect2, x1, y1, x2, y2, w, h, _ref33, appearanceBuffer, buffer, _iterator58, _step58, bezier, i, ii, curve, appearance, appearanceStreamDict, matrix, resources, extGState, r0, ap;\n                return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                  while (1) {\n                    switch (_context35.prev = _context35.next) {\n                      case 0:\n                        color = annotation.color, rect = annotation.rect, rotation = annotation.rotation, paths = annotation.paths, thickness = annotation.thickness, opacity = annotation.opacity;\n                        _rect2 = _slicedToArray(rect, 4), x1 = _rect2[0], y1 = _rect2[1], x2 = _rect2[2], y2 = _rect2[3];\n                        w = x2 - x1;\n                        h = y2 - y1;\n                        if (rotation % 180 !== 0) {\n                          _ref33 = [h, w];\n                          w = _ref33[0];\n                          h = _ref33[1];\n                        }\n                        appearanceBuffer = [\"\".concat(thickness, \" w 1 J 1 j\"), \"\".concat((0, _default_appearance.getPdfColor)(color, false))];\n                        if (opacity !== 1) {\n                          appearanceBuffer.push(\"/R0 gs\");\n                        }\n                        buffer = [];\n                        _iterator58 = _createForOfIteratorHelper(paths);\n                        try {\n                          for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {\n                            bezier = _step58.value.bezier;\n                            buffer.length = 0;\n                            buffer.push(\"\".concat((0, _core_utils.numberToString)(bezier[0]), \" \").concat((0, _core_utils.numberToString)(bezier[1]), \" m\"));\n                            for (i = 2, ii = bezier.length; i < ii; i += 6) {\n                              curve = bezier.slice(i, i + 6).map(_core_utils.numberToString).join(\" \");\n                              buffer.push(\"\".concat(curve, \" c\"));\n                            }\n                            buffer.push(\"S\");\n                            appearanceBuffer.push(buffer.join(\"\\n\"));\n                          }\n                        } catch (err) {\n                          _iterator58.e(err);\n                        } finally {\n                          _iterator58.f();\n                        }\n                        appearance = appearanceBuffer.join(\"\\n\");\n                        appearanceStreamDict = new _primitives.Dict(xref);\n                        appearanceStreamDict.set(\"FormType\", 1);\n                        appearanceStreamDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n                        appearanceStreamDict.set(\"Type\", _primitives.Name.get(\"XObject\"));\n                        appearanceStreamDict.set(\"BBox\", [0, 0, w, h]);\n                        appearanceStreamDict.set(\"Length\", appearance.length);\n                        if (rotation) {\n                          matrix = WidgetAnnotation._getRotationMatrix(rotation, w, h);\n                          appearanceStreamDict.set(\"Matrix\", matrix);\n                        }\n                        if (opacity !== 1) {\n                          resources = new _primitives.Dict(xref);\n                          extGState = new _primitives.Dict(xref);\n                          r0 = new _primitives.Dict(xref);\n                          r0.set(\"CA\", opacity);\n                          r0.set(\"Type\", _primitives.Name.get(\"ExtGState\"));\n                          extGState.set(\"R0\", r0);\n                          resources.set(\"ExtGState\", extGState);\n                          appearanceStreamDict.set(\"Resources\", resources);\n                        }\n                        ap = new _stream.StringStream(appearance);\n                        ap.dict = appearanceStreamDict;\n                        return _context35.abrupt(\"return\", ap);\n                      case 22:\n                      case \"end\":\n                        return _context35.stop();\n                    }\n                  }\n                }, _callee35);\n              }));\n              function createNewAppearanceStream(_x86, _x87, _x88) {\n                return _createNewAppearanceStream2.apply(this, arguments);\n              }\n              return createNewAppearanceStream;\n            }()\n          }]);\n          return InkAnnotation;\n        }(MarkupAnnotation);\n        var HighlightAnnotation = /*#__PURE__*/function (_MarkupAnnotation9) {\n          _inherits(HighlightAnnotation, _MarkupAnnotation9);\n          function HighlightAnnotation(parameters) {\n            var _this38;\n            _classCallCheck(this, HighlightAnnotation);\n            _this38 = _possibleConstructorReturn(this, _getPrototypeOf(HighlightAnnotation).call(this, parameters));\n            _this38.data.annotationType = _util.AnnotationType.HIGHLIGHT;\n            var quadPoints = _this38.data.quadPoints = getQuadPoints(parameters.dict, null);\n            if (quadPoints) {\n              var resources = _this38.appearance && _this38.appearance.dict.get(\"Resources\");\n              if (!_this38.appearance || !(resources && resources.has(\"ExtGState\"))) {\n                if (_this38.appearance) {\n                  (0, _util.warn)(\"HighlightAnnotation - ignoring built-in appearance stream.\");\n                }\n                var fillColor = _this38.color ? Array.from(_this38.color).map(function (c) {\n                  return c / 255;\n                }) : [1, 1, 0];\n                var fillAlpha = parameters.dict.get(\"CA\");\n                _this38._setDefaultAppearance({\n                  xref: parameters.xref,\n                  fillColor: fillColor,\n                  blendMode: \"Multiply\",\n                  fillAlpha: fillAlpha,\n                  pointsCallback: function pointsCallback(buffer, points) {\n                    buffer.push(\"\".concat(points[0].x, \" \").concat(points[0].y, \" m\"), \"\".concat(points[1].x, \" \").concat(points[1].y, \" l\"), \"\".concat(points[3].x, \" \").concat(points[3].y, \" l\"), \"\".concat(points[2].x, \" \").concat(points[2].y, \" l\"), \"f\");\n                    return [points[0].x, points[1].x, points[3].y, points[1].y];\n                  }\n                });\n              }\n            } else {\n              _this38.data.hasPopup = false;\n            }\n            return _this38;\n          }\n          return HighlightAnnotation;\n        }(MarkupAnnotation);\n        var UnderlineAnnotation = /*#__PURE__*/function (_MarkupAnnotation10) {\n          _inherits(UnderlineAnnotation, _MarkupAnnotation10);\n          function UnderlineAnnotation(parameters) {\n            var _this39;\n            _classCallCheck(this, UnderlineAnnotation);\n            _this39 = _possibleConstructorReturn(this, _getPrototypeOf(UnderlineAnnotation).call(this, parameters));\n            _this39.data.annotationType = _util.AnnotationType.UNDERLINE;\n            var quadPoints = _this39.data.quadPoints = getQuadPoints(parameters.dict, null);\n            if (quadPoints) {\n              if (!_this39.appearance) {\n                var strokeColor = _this39.color ? Array.from(_this39.color).map(function (c) {\n                  return c / 255;\n                }) : [0, 0, 0];\n                var strokeAlpha = parameters.dict.get(\"CA\");\n                _this39._setDefaultAppearance({\n                  xref: parameters.xref,\n                  extra: \"[] 0 d 1 w\",\n                  strokeColor: strokeColor,\n                  strokeAlpha: strokeAlpha,\n                  pointsCallback: function pointsCallback(buffer, points) {\n                    buffer.push(\"\".concat(points[2].x, \" \").concat(points[2].y, \" m\"), \"\".concat(points[3].x, \" \").concat(points[3].y, \" l\"), \"S\");\n                    return [points[0].x, points[1].x, points[3].y, points[1].y];\n                  }\n                });\n              }\n            } else {\n              _this39.data.hasPopup = false;\n            }\n            return _this39;\n          }\n          return UnderlineAnnotation;\n        }(MarkupAnnotation);\n        var SquigglyAnnotation = /*#__PURE__*/function (_MarkupAnnotation11) {\n          _inherits(SquigglyAnnotation, _MarkupAnnotation11);\n          function SquigglyAnnotation(parameters) {\n            var _this40;\n            _classCallCheck(this, SquigglyAnnotation);\n            _this40 = _possibleConstructorReturn(this, _getPrototypeOf(SquigglyAnnotation).call(this, parameters));\n            _this40.data.annotationType = _util.AnnotationType.SQUIGGLY;\n            var quadPoints = _this40.data.quadPoints = getQuadPoints(parameters.dict, null);\n            if (quadPoints) {\n              if (!_this40.appearance) {\n                var strokeColor = _this40.color ? Array.from(_this40.color).map(function (c) {\n                  return c / 255;\n                }) : [0, 0, 0];\n                var strokeAlpha = parameters.dict.get(\"CA\");\n                _this40._setDefaultAppearance({\n                  xref: parameters.xref,\n                  extra: \"[] 0 d 1 w\",\n                  strokeColor: strokeColor,\n                  strokeAlpha: strokeAlpha,\n                  pointsCallback: function pointsCallback(buffer, points) {\n                    var dy = (points[0].y - points[2].y) / 6;\n                    var shift = dy;\n                    var x = points[2].x;\n                    var y = points[2].y;\n                    var xEnd = points[3].x;\n                    buffer.push(\"\".concat(x, \" \").concat(y + shift, \" m\"));\n                    do {\n                      x += 2;\n                      shift = shift === 0 ? dy : 0;\n                      buffer.push(\"\".concat(x, \" \").concat(y + shift, \" l\"));\n                    } while (x < xEnd);\n                    buffer.push(\"S\");\n                    return [points[2].x, xEnd, y - 2 * dy, y + 2 * dy];\n                  }\n                });\n              }\n            } else {\n              _this40.data.hasPopup = false;\n            }\n            return _this40;\n          }\n          return SquigglyAnnotation;\n        }(MarkupAnnotation);\n        var StrikeOutAnnotation = /*#__PURE__*/function (_MarkupAnnotation12) {\n          _inherits(StrikeOutAnnotation, _MarkupAnnotation12);\n          function StrikeOutAnnotation(parameters) {\n            var _this41;\n            _classCallCheck(this, StrikeOutAnnotation);\n            _this41 = _possibleConstructorReturn(this, _getPrototypeOf(StrikeOutAnnotation).call(this, parameters));\n            _this41.data.annotationType = _util.AnnotationType.STRIKEOUT;\n            var quadPoints = _this41.data.quadPoints = getQuadPoints(parameters.dict, null);\n            if (quadPoints) {\n              if (!_this41.appearance) {\n                var strokeColor = _this41.color ? Array.from(_this41.color).map(function (c) {\n                  return c / 255;\n                }) : [0, 0, 0];\n                var strokeAlpha = parameters.dict.get(\"CA\");\n                _this41._setDefaultAppearance({\n                  xref: parameters.xref,\n                  extra: \"[] 0 d 1 w\",\n                  strokeColor: strokeColor,\n                  strokeAlpha: strokeAlpha,\n                  pointsCallback: function pointsCallback(buffer, points) {\n                    buffer.push(\"\".concat((points[0].x + points[2].x) / 2, \" \") + \"\".concat((points[0].y + points[2].y) / 2, \" m\"), \"\".concat((points[1].x + points[3].x) / 2, \" \") + \"\".concat((points[1].y + points[3].y) / 2, \" l\"), \"S\");\n                    return [points[0].x, points[1].x, points[3].y, points[1].y];\n                  }\n                });\n              }\n            } else {\n              _this41.data.hasPopup = false;\n            }\n            return _this41;\n          }\n          return StrikeOutAnnotation;\n        }(MarkupAnnotation);\n        var StampAnnotation = /*#__PURE__*/function (_MarkupAnnotation13) {\n          _inherits(StampAnnotation, _MarkupAnnotation13);\n          function StampAnnotation(parameters) {\n            var _this42;\n            _classCallCheck(this, StampAnnotation);\n            _this42 = _possibleConstructorReturn(this, _getPrototypeOf(StampAnnotation).call(this, parameters));\n            _this42.data.annotationType = _util.AnnotationType.STAMP;\n            return _this42;\n          }\n          return StampAnnotation;\n        }(MarkupAnnotation);\n        var FileAttachmentAnnotation = /*#__PURE__*/function (_MarkupAnnotation14) {\n          _inherits(FileAttachmentAnnotation, _MarkupAnnotation14);\n          function FileAttachmentAnnotation(parameters) {\n            var _this43;\n            _classCallCheck(this, FileAttachmentAnnotation);\n            _this43 = _possibleConstructorReturn(this, _getPrototypeOf(FileAttachmentAnnotation).call(this, parameters));\n            var file = new _file_spec.FileSpec(parameters.dict.get(\"FS\"), parameters.xref);\n            _this43.data.annotationType = _util.AnnotationType.FILEATTACHMENT;\n            _this43.data.file = file.serializable;\n            return _this43;\n          }\n          return FileAttachmentAnnotation;\n        }(MarkupAnnotation);\n        /***/\n      }, /* 13 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createDefaultAppearance = createDefaultAppearance;\n        exports.getPdfColor = getPdfColor;\n        exports.parseDefaultAppearance = parseDefaultAppearance;\n        var _core_utils = __w_pdfjs_require__(6);\n        var _util = __w_pdfjs_require__(2);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _evaluator = __w_pdfjs_require__(15);\n        var _primitives = __w_pdfjs_require__(5);\n        var _stream = __w_pdfjs_require__(10);\n        var DefaultAppearanceEvaluator = /*#__PURE__*/function (_evaluator$EvaluatorP) {\n          _inherits(DefaultAppearanceEvaluator, _evaluator$EvaluatorP);\n          function DefaultAppearanceEvaluator(str) {\n            _classCallCheck(this, DefaultAppearanceEvaluator);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DefaultAppearanceEvaluator).call(this, new _stream.StringStream(str)));\n          }\n          _createClass(DefaultAppearanceEvaluator, [{\n            key: \"parse\",\n            value: function parse() {\n              var operation = {\n                fn: 0,\n                args: []\n              };\n              var result = {\n                fontSize: 0,\n                fontName: \"\",\n                fontColor: new Uint8ClampedArray(3)\n              };\n              try {\n                while (true) {\n                  operation.args.length = 0;\n                  if (!this.read(operation)) {\n                    break;\n                  }\n                  if (this.savedStatesDepth !== 0) {\n                    continue;\n                  }\n                  var fn = operation.fn,\n                    args = operation.args;\n                  switch (fn | 0) {\n                    case _util.OPS.setFont:\n                      var _args36 = _slicedToArray(args, 2),\n                        fontName = _args36[0],\n                        fontSize = _args36[1];\n                      if (fontName instanceof _primitives.Name) {\n                        result.fontName = fontName.name;\n                      }\n                      if (typeof fontSize === \"number\" && fontSize > 0) {\n                        result.fontSize = fontSize;\n                      }\n                      break;\n                    case _util.OPS.setFillRGBColor:\n                      _colorspace.ColorSpace.singletons.rgb.getRgbItem(args, 0, result.fontColor, 0);\n                      break;\n                    case _util.OPS.setFillGray:\n                      _colorspace.ColorSpace.singletons.gray.getRgbItem(args, 0, result.fontColor, 0);\n                      break;\n                    case _util.OPS.setFillColorSpace:\n                      _colorspace.ColorSpace.singletons.cmyk.getRgbItem(args, 0, result.fontColor, 0);\n                      break;\n                  }\n                }\n              } catch (reason) {\n                (0, _util.warn)(\"parseDefaultAppearance - ignoring errors: \\\"\".concat(reason, \"\\\".\"));\n              }\n              return result;\n            }\n          }]);\n          return DefaultAppearanceEvaluator;\n        }(_evaluator.EvaluatorPreprocessor);\n        function parseDefaultAppearance(str) {\n          return new DefaultAppearanceEvaluator(str).parse();\n        }\n        function getPdfColor(color, isFill) {\n          if (color[0] === color[1] && color[1] === color[2]) {\n            var gray = color[0] / 255;\n            return \"\".concat((0, _core_utils.numberToString)(gray), \" \").concat(isFill ? \"g\" : \"G\");\n          }\n          return Array.from(color).map(function (c) {\n            return (0, _core_utils.numberToString)(c / 255);\n          }).join(\" \") + \" \".concat(isFill ? \"rg\" : \"RG\");\n        }\n        function createDefaultAppearance(_ref34) {\n          var fontSize = _ref34.fontSize,\n            fontName = _ref34.fontName,\n            fontColor = _ref34.fontColor;\n          return \"/\".concat((0, _core_utils.escapePDFName)(fontName), \" \").concat(fontSize, \" Tf \").concat(getPdfColor(fontColor, true));\n        }\n\n        /***/\n      }, /* 14 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorSpace = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _core_utils = __w_pdfjs_require__(6);\n        function resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n          var COMPONENTS = 3;\n          alpha01 = alpha01 !== 1 ? 0 : alpha01;\n          var xRatio = w1 / w2;\n          var yRatio = h1 / h2;\n          var newIndex = 0,\n            oldIndex;\n          var xScaled = new Uint16Array(w2);\n          var w1Scanline = w1 * COMPONENTS;\n          for (var i = 0; i < w2; i++) {\n            xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n          }\n          for (var _i13 = 0; _i13 < h2; _i13++) {\n            var py = Math.floor(_i13 * yRatio) * w1Scanline;\n            for (var j = 0; j < w2; j++) {\n              oldIndex = py + xScaled[j];\n              dest[newIndex++] = src[oldIndex++];\n              dest[newIndex++] = src[oldIndex++];\n              dest[newIndex++] = src[oldIndex++];\n              newIndex += alpha01;\n            }\n          }\n        }\n        var ColorSpace = /*#__PURE__*/function () {\n          function ColorSpace(name, numComps) {\n            _classCallCheck(this, ColorSpace);\n            if (this.constructor === ColorSpace) {\n              (0, _util.unreachable)(\"Cannot initialize ColorSpace.\");\n            }\n            this.name = name;\n            this.numComps = numComps;\n          }\n          _createClass(ColorSpace, [{\n            key: \"getRgb\",\n            value: function getRgb(src, srcOffset) {\n              var rgb = new Uint8ClampedArray(3);\n              this.getRgbItem(src, srcOffset, rgb, 0);\n              return rgb;\n            }\n          }, {\n            key: \"getRgbItem\",\n            value: function getRgbItem(src, srcOffset, dest, destOffset) {\n              (0, _util.unreachable)(\"Should not call ColorSpace.getRgbItem\");\n            }\n          }, {\n            key: \"getRgbBuffer\",\n            value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n              (0, _util.unreachable)(\"Should not call ColorSpace.getRgbBuffer\");\n            }\n          }, {\n            key: \"getOutputLength\",\n            value: function getOutputLength(inputLength, alpha01) {\n              (0, _util.unreachable)(\"Should not call ColorSpace.getOutputLength\");\n            }\n          }, {\n            key: \"isPassthrough\",\n            value: function isPassthrough(bits) {\n              return false;\n            }\n          }, {\n            key: \"isDefaultDecode\",\n            value: function isDefaultDecode(decodeMap, bpc) {\n              return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n            }\n          }, {\n            key: \"fillRgb\",\n            value: function fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {\n              var count = originalWidth * originalHeight;\n              var rgbBuf = null;\n              var numComponentColors = 1 << bpc;\n              var needsResizing = originalHeight !== height || originalWidth !== width;\n              if (this.isPassthrough(bpc)) {\n                rgbBuf = comps;\n              } else if (this.numComps === 1 && count > numComponentColors && this.name !== \"DeviceGray\" && this.name !== \"DeviceRGB\") {\n                var allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);\n                for (var i = 0; i < numComponentColors; i++) {\n                  allColors[i] = i;\n                }\n                var colorMap = new Uint8ClampedArray(numComponentColors * 3);\n                this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);\n                if (!needsResizing) {\n                  var destPos = 0;\n                  for (var _i14 = 0; _i14 < count; ++_i14) {\n                    var key = comps[_i14] * 3;\n                    dest[destPos++] = colorMap[key];\n                    dest[destPos++] = colorMap[key + 1];\n                    dest[destPos++] = colorMap[key + 2];\n                    destPos += alpha01;\n                  }\n                } else {\n                  rgbBuf = new Uint8Array(count * 3);\n                  var rgbPos = 0;\n                  for (var _i15 = 0; _i15 < count; ++_i15) {\n                    var _key2 = comps[_i15] * 3;\n                    rgbBuf[rgbPos++] = colorMap[_key2];\n                    rgbBuf[rgbPos++] = colorMap[_key2 + 1];\n                    rgbBuf[rgbPos++] = colorMap[_key2 + 2];\n                  }\n                }\n              } else {\n                if (!needsResizing) {\n                  this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);\n                } else {\n                  rgbBuf = new Uint8ClampedArray(count * 3);\n                  this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);\n                }\n              }\n              if (rgbBuf) {\n                if (needsResizing) {\n                  resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);\n                } else {\n                  var _destPos = 0,\n                    _rgbPos = 0;\n                  for (var _i16 = 0, ii = width * actualHeight; _i16 < ii; _i16++) {\n                    dest[_destPos++] = rgbBuf[_rgbPos++];\n                    dest[_destPos++] = rgbBuf[_rgbPos++];\n                    dest[_destPos++] = rgbBuf[_rgbPos++];\n                    _destPos += alpha01;\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"usesZeroToOneRange\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"usesZeroToOneRange\", true);\n            }\n          }], [{\n            key: \"_cache\",\n            value: function _cache(cacheKey, xref, localColorSpaceCache, parsedColorSpace) {\n              if (!localColorSpaceCache) {\n                throw new Error('ColorSpace._cache - expected \"localColorSpaceCache\" argument.');\n              }\n              if (!parsedColorSpace) {\n                throw new Error('ColorSpace._cache - expected \"parsedColorSpace\" argument.');\n              }\n              var csName, csRef;\n              if (cacheKey instanceof _primitives.Ref) {\n                csRef = cacheKey;\n                cacheKey = xref.fetch(cacheKey);\n              }\n              if (cacheKey instanceof _primitives.Name) {\n                csName = cacheKey.name;\n              }\n              if (csName || csRef) {\n                localColorSpaceCache.set(csName, csRef, parsedColorSpace);\n              }\n            }\n          }, {\n            key: \"getCached\",\n            value: function getCached(cacheKey, xref, localColorSpaceCache) {\n              if (!localColorSpaceCache) {\n                throw new Error('ColorSpace.getCached - expected \"localColorSpaceCache\" argument.');\n              }\n              if (cacheKey instanceof _primitives.Ref) {\n                var localColorSpace = localColorSpaceCache.getByRef(cacheKey);\n                if (localColorSpace) {\n                  return localColorSpace;\n                }\n                try {\n                  cacheKey = xref.fetch(cacheKey);\n                } catch (ex) {\n                  if (ex instanceof _core_utils.MissingDataException) {\n                    throw ex;\n                  }\n                }\n              }\n              if (cacheKey instanceof _primitives.Name) {\n                var _localColorSpace = localColorSpaceCache.getByName(cacheKey.name);\n                if (_localColorSpace) {\n                  return _localColorSpace;\n                }\n              }\n              return null;\n            }\n          }, {\n            key: \"parseAsync\",\n            value: function () {\n              var _parseAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(_ref35) {\n                var cs, xref, _ref35$resources, resources, pdfFunctionFactory, localColorSpaceCache, parsedColorSpace;\n                return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n                  while (1) {\n                    switch (_context36.prev = _context36.next) {\n                      case 0:\n                        cs = _ref35.cs, xref = _ref35.xref, _ref35$resources = _ref35.resources, resources = _ref35$resources === void 0 ? null : _ref35$resources, pdfFunctionFactory = _ref35.pdfFunctionFactory, localColorSpaceCache = _ref35.localColorSpaceCache;\n                        parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n                        this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n                        return _context36.abrupt(\"return\", parsedColorSpace);\n                      case 4:\n                      case \"end\":\n                        return _context36.stop();\n                    }\n                  }\n                }, _callee36, this);\n              }));\n              function parseAsync(_x89) {\n                return _parseAsync.apply(this, arguments);\n              }\n              return parseAsync;\n            }()\n          }, {\n            key: \"parse\",\n            value: function parse(_ref36) {\n              var cs = _ref36.cs,\n                xref = _ref36.xref,\n                _ref36$resources = _ref36.resources,\n                resources = _ref36$resources === void 0 ? null : _ref36$resources,\n                pdfFunctionFactory = _ref36.pdfFunctionFactory,\n                localColorSpaceCache = _ref36.localColorSpaceCache;\n              var cachedColorSpace = this.getCached(cs, xref, localColorSpaceCache);\n              if (cachedColorSpace) {\n                return cachedColorSpace;\n              }\n              var parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n              this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n              return parsedColorSpace;\n            }\n          }, {\n            key: \"_parse\",\n            value: function _parse(cs, xref) {\n              var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              var pdfFunctionFactory = arguments.length > 3 ? arguments[3] : undefined;\n              cs = xref.fetchIfRef(cs);\n              if (cs instanceof _primitives.Name) {\n                switch (cs.name) {\n                  case \"G\":\n                  case \"DeviceGray\":\n                    return this.singletons.gray;\n                  case \"RGB\":\n                  case \"DeviceRGB\":\n                    return this.singletons.rgb;\n                  case \"CMYK\":\n                  case \"DeviceCMYK\":\n                    return this.singletons.cmyk;\n                  case \"Pattern\":\n                    return new PatternCS(null);\n                  default:\n                    if (resources instanceof _primitives.Dict) {\n                      var colorSpaces = resources.get(\"ColorSpace\");\n                      if (colorSpaces instanceof _primitives.Dict) {\n                        var resourcesCS = colorSpaces.get(cs.name);\n                        if (resourcesCS) {\n                          if (resourcesCS instanceof _primitives.Name) {\n                            return this._parse(resourcesCS, xref, resources, pdfFunctionFactory);\n                          }\n                          cs = resourcesCS;\n                          break;\n                        }\n                      }\n                    }\n                    throw new _util.FormatError(\"Unrecognized ColorSpace: \".concat(cs.name));\n                }\n              }\n              if (Array.isArray(cs)) {\n                var mode = xref.fetchIfRef(cs[0]).name;\n                var params, numComps, baseCS, whitePoint, blackPoint, gamma;\n                switch (mode) {\n                  case \"G\":\n                  case \"DeviceGray\":\n                    return this.singletons.gray;\n                  case \"RGB\":\n                  case \"DeviceRGB\":\n                    return this.singletons.rgb;\n                  case \"CMYK\":\n                  case \"DeviceCMYK\":\n                    return this.singletons.cmyk;\n                  case \"CalGray\":\n                    params = xref.fetchIfRef(cs[1]);\n                    whitePoint = params.getArray(\"WhitePoint\");\n                    blackPoint = params.getArray(\"BlackPoint\");\n                    gamma = params.get(\"Gamma\");\n                    return new CalGrayCS(whitePoint, blackPoint, gamma);\n                  case \"CalRGB\":\n                    params = xref.fetchIfRef(cs[1]);\n                    whitePoint = params.getArray(\"WhitePoint\");\n                    blackPoint = params.getArray(\"BlackPoint\");\n                    gamma = params.getArray(\"Gamma\");\n                    var matrix = params.getArray(\"Matrix\");\n                    return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n                  case \"ICCBased\":\n                    var stream = xref.fetchIfRef(cs[1]);\n                    var dict = stream.dict;\n                    numComps = dict.get(\"N\");\n                    var alt = dict.get(\"Alternate\");\n                    if (alt) {\n                      var altCS = this._parse(alt, xref, resources, pdfFunctionFactory);\n                      if (altCS.numComps === numComps) {\n                        return altCS;\n                      }\n                      (0, _util.warn)(\"ICCBased color space: Ignoring incorrect /Alternate entry.\");\n                    }\n                    if (numComps === 1) {\n                      return this.singletons.gray;\n                    } else if (numComps === 3) {\n                      return this.singletons.rgb;\n                    } else if (numComps === 4) {\n                      return this.singletons.cmyk;\n                    }\n                    break;\n                  case \"Pattern\":\n                    baseCS = cs[1] || null;\n                    if (baseCS) {\n                      baseCS = this._parse(baseCS, xref, resources, pdfFunctionFactory);\n                    }\n                    return new PatternCS(baseCS);\n                  case \"I\":\n                  case \"Indexed\":\n                    baseCS = this._parse(cs[1], xref, resources, pdfFunctionFactory);\n                    var hiVal = xref.fetchIfRef(cs[2]) + 1;\n                    var lookup = xref.fetchIfRef(cs[3]);\n                    return new IndexedCS(baseCS, hiVal, lookup);\n                  case \"Separation\":\n                  case \"DeviceN\":\n                    var name = xref.fetchIfRef(cs[1]);\n                    numComps = Array.isArray(name) ? name.length : 1;\n                    baseCS = this._parse(cs[2], xref, resources, pdfFunctionFactory);\n                    var tintFn = pdfFunctionFactory.create(cs[3]);\n                    return new AlternateCS(numComps, baseCS, tintFn);\n                  case \"Lab\":\n                    params = xref.fetchIfRef(cs[1]);\n                    whitePoint = params.getArray(\"WhitePoint\");\n                    blackPoint = params.getArray(\"BlackPoint\");\n                    var range = params.getArray(\"Range\");\n                    return new LabCS(whitePoint, blackPoint, range);\n                  default:\n                    throw new _util.FormatError(\"Unimplemented ColorSpace object: \".concat(mode));\n                }\n              }\n              throw new _util.FormatError(\"Unrecognized ColorSpace object: \".concat(cs));\n            }\n          }, {\n            key: \"isDefaultDecode\",\n            value: function isDefaultDecode(decode, numComps) {\n              if (!Array.isArray(decode)) {\n                return true;\n              }\n              if (numComps * 2 !== decode.length) {\n                (0, _util.warn)(\"The decode map is not the correct length\");\n                return true;\n              }\n              for (var i = 0, ii = decode.length; i < ii; i += 2) {\n                if (decode[i] !== 0 || decode[i + 1] !== 1) {\n                  return false;\n                }\n              }\n              return true;\n            }\n          }, {\n            key: \"singletons\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"singletons\", {\n                get gray() {\n                  return (0, _util.shadow)(this, \"gray\", new DeviceGrayCS());\n                },\n                get rgb() {\n                  return (0, _util.shadow)(this, \"rgb\", new DeviceRgbCS());\n                },\n                get cmyk() {\n                  return (0, _util.shadow)(this, \"cmyk\", new DeviceCmykCS());\n                }\n              });\n            }\n          }]);\n          return ColorSpace;\n        }();\n        exports.ColorSpace = ColorSpace;\n        var AlternateCS = /*#__PURE__*/function (_ColorSpace) {\n          _inherits(AlternateCS, _ColorSpace);\n          function AlternateCS(numComps, base, tintFn) {\n            var _this44;\n            _classCallCheck(this, AlternateCS);\n            _this44 = _possibleConstructorReturn(this, _getPrototypeOf(AlternateCS).call(this, \"Alternate\", numComps));\n            _this44.base = base;\n            _this44.tintFn = tintFn;\n            _this44.tmpBuf = new Float32Array(base.numComps);\n            return _this44;\n          }\n          _createClass(AlternateCS, [{\n            key: \"getRgbItem\",\n            value: function getRgbItem(src, srcOffset, dest, destOffset) {\n              var tmpBuf = this.tmpBuf;\n              this.tintFn(src, srcOffset, tmpBuf, 0);\n              this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n            }\n          }, {\n            key: \"getRgbBuffer\",\n            value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n              var tintFn = this.tintFn;\n              var base = this.base;\n              var scale = 1 / ((1 << bits) - 1);\n              var baseNumComps = base.numComps;\n              var usesZeroToOneRange = base.usesZeroToOneRange;\n              var isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n              var pos = isPassthrough ? destOffset : 0;\n              var baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);\n              var numComps = this.numComps;\n              var scaled = new Float32Array(numComps);\n              var tinted = new Float32Array(baseNumComps);\n              var i, j;\n              for (i = 0; i < count; i++) {\n                for (j = 0; j < numComps; j++) {\n                  scaled[j] = src[srcOffset++] * scale;\n                }\n                tintFn(scaled, 0, tinted, 0);\n                if (usesZeroToOneRange) {\n                  for (j = 0; j < baseNumComps; j++) {\n                    baseBuf[pos++] = tinted[j] * 255;\n                  }\n                } else {\n                  base.getRgbItem(tinted, 0, baseBuf, pos);\n                  pos += baseNumComps;\n                }\n              }\n              if (!isPassthrough) {\n                base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n              }\n            }\n          }, {\n            key: \"getOutputLength\",\n            value: function getOutputLength(inputLength, alpha01) {\n              return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);\n            }\n          }]);\n          return AlternateCS;\n        }(ColorSpace);\n        var PatternCS = /*#__PURE__*/function (_ColorSpace2) {\n          _inherits(PatternCS, _ColorSpace2);\n          function PatternCS(baseCS) {\n            var _this45;\n            _classCallCheck(this, PatternCS);\n            _this45 = _possibleConstructorReturn(this, _getPrototypeOf(PatternCS).call(this, \"Pattern\", null));\n            _this45.base = baseCS;\n            return _this45;\n          }\n          _createClass(PatternCS, [{\n            key: \"isDefaultDecode\",\n            value: function isDefaultDecode(decodeMap, bpc) {\n              (0, _util.unreachable)(\"Should not call PatternCS.isDefaultDecode\");\n            }\n          }]);\n          return PatternCS;\n        }(ColorSpace);\n        var IndexedCS = /*#__PURE__*/function (_ColorSpace3) {\n          _inherits(IndexedCS, _ColorSpace3);\n          function IndexedCS(base, highVal, lookup) {\n            var _this46;\n            _classCallCheck(this, IndexedCS);\n            _this46 = _possibleConstructorReturn(this, _getPrototypeOf(IndexedCS).call(this, \"Indexed\", 1));\n            _this46.base = base;\n            _this46.highVal = highVal;\n            var length = base.numComps * highVal;\n            _this46.lookup = new Uint8Array(length);\n            if (lookup instanceof _base_stream.BaseStream) {\n              var bytes = lookup.getBytes(length);\n              _this46.lookup.set(bytes);\n            } else if (typeof lookup === \"string\") {\n              for (var i = 0; i < length; ++i) {\n                _this46.lookup[i] = lookup.charCodeAt(i) & 0xff;\n              }\n            } else {\n              throw new _util.FormatError(\"IndexedCS - unrecognized lookup table: \".concat(lookup));\n            }\n            return _this46;\n          }\n          _createClass(IndexedCS, [{\n            key: \"getRgbItem\",\n            value: function getRgbItem(src, srcOffset, dest, destOffset) {\n              var numComps = this.base.numComps;\n              var start = src[srcOffset] * numComps;\n              this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n            }\n          }, {\n            key: \"getRgbBuffer\",\n            value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n              var base = this.base;\n              var numComps = base.numComps;\n              var outputDelta = base.getOutputLength(numComps, alpha01);\n              var lookup = this.lookup;\n              for (var i = 0; i < count; ++i) {\n                var lookupPos = src[srcOffset++] * numComps;\n                base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n                destOffset += outputDelta;\n              }\n            }\n          }, {\n            key: \"getOutputLength\",\n            value: function getOutputLength(inputLength, alpha01) {\n              return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n            }\n          }, {\n            key: \"isDefaultDecode\",\n            value: function isDefaultDecode(decodeMap, bpc) {\n              if (!Array.isArray(decodeMap)) {\n                return true;\n              }\n              if (decodeMap.length !== 2) {\n                (0, _util.warn)(\"Decode map length is not correct\");\n                return true;\n              }\n              if (!Number.isInteger(bpc) || bpc < 1) {\n                (0, _util.warn)(\"Bits per component is not correct\");\n                return true;\n              }\n              return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n            }\n          }]);\n          return IndexedCS;\n        }(ColorSpace);\n        var DeviceGrayCS = /*#__PURE__*/function (_ColorSpace4) {\n          _inherits(DeviceGrayCS, _ColorSpace4);\n          function DeviceGrayCS() {\n            _classCallCheck(this, DeviceGrayCS);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DeviceGrayCS).call(this, \"DeviceGray\", 1));\n          }\n          _createClass(DeviceGrayCS, [{\n            key: \"getRgbItem\",\n            value: function getRgbItem(src, srcOffset, dest, destOffset) {\n              var c = src[srcOffset] * 255;\n              dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n            }\n          }, {\n            key: \"getRgbBuffer\",\n            value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n              var scale = 255 / ((1 << bits) - 1);\n              var j = srcOffset,\n                q = destOffset;\n              for (var i = 0; i < count; ++i) {\n                var c = scale * src[j++];\n                dest[q++] = c;\n                dest[q++] = c;\n                dest[q++] = c;\n                q += alpha01;\n              }\n            }\n          }, {\n            key: \"getOutputLength\",\n            value: function getOutputLength(inputLength, alpha01) {\n              return inputLength * (3 + alpha01);\n            }\n          }]);\n          return DeviceGrayCS;\n        }(ColorSpace);\n        var DeviceRgbCS = /*#__PURE__*/function (_ColorSpace5) {\n          _inherits(DeviceRgbCS, _ColorSpace5);\n          function DeviceRgbCS() {\n            _classCallCheck(this, DeviceRgbCS);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DeviceRgbCS).call(this, \"DeviceRGB\", 3));\n          }\n          _createClass(DeviceRgbCS, [{\n            key: \"getRgbItem\",\n            value: function getRgbItem(src, srcOffset, dest, destOffset) {\n              dest[destOffset] = src[srcOffset] * 255;\n              dest[destOffset + 1] = src[srcOffset + 1] * 255;\n              dest[destOffset + 2] = src[srcOffset + 2] * 255;\n            }\n          }, {\n            key: \"getRgbBuffer\",\n            value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n              if (bits === 8 && alpha01 === 0) {\n                dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n                return;\n              }\n              var scale = 255 / ((1 << bits) - 1);\n              var j = srcOffset,\n                q = destOffset;\n              for (var i = 0; i < count; ++i) {\n                dest[q++] = scale * src[j++];\n                dest[q++] = scale * src[j++];\n                dest[q++] = scale * src[j++];\n                q += alpha01;\n              }\n            }\n          }, {\n            key: \"getOutputLength\",\n            value: function getOutputLength(inputLength, alpha01) {\n              return inputLength * (3 + alpha01) / 3 | 0;\n            }\n          }, {\n            key: \"isPassthrough\",\n            value: function isPassthrough(bits) {\n              return bits === 8;\n            }\n          }]);\n          return DeviceRgbCS;\n        }(ColorSpace);\n        var DeviceCmykCS = function DeviceCmykCSClosure() {\n          function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n            var c = src[srcOffset] * srcScale;\n            var m = src[srcOffset + 1] * srcScale;\n            var y = src[srcOffset + 2] * srcScale;\n            var k = src[srcOffset + 3] * srcScale;\n            dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);\n            dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);\n            dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);\n          }\n          var DeviceCmykCS = /*#__PURE__*/function (_ColorSpace6) {\n            _inherits(DeviceCmykCS, _ColorSpace6);\n            function DeviceCmykCS() {\n              _classCallCheck(this, DeviceCmykCS);\n              return _possibleConstructorReturn(this, _getPrototypeOf(DeviceCmykCS).call(this, \"DeviceCMYK\", 4));\n            }\n            _createClass(DeviceCmykCS, [{\n              key: \"getRgbItem\",\n              value: function getRgbItem(src, srcOffset, dest, destOffset) {\n                convertToRgb(src, srcOffset, 1, dest, destOffset);\n              }\n            }, {\n              key: \"getRgbBuffer\",\n              value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n                var scale = 1 / ((1 << bits) - 1);\n                for (var i = 0; i < count; i++) {\n                  convertToRgb(src, srcOffset, scale, dest, destOffset);\n                  srcOffset += 4;\n                  destOffset += 3 + alpha01;\n                }\n              }\n            }, {\n              key: \"getOutputLength\",\n              value: function getOutputLength(inputLength, alpha01) {\n                return inputLength / 4 * (3 + alpha01) | 0;\n              }\n            }]);\n            return DeviceCmykCS;\n          }(ColorSpace);\n          return DeviceCmykCS;\n        }();\n        var CalGrayCS = function CalGrayCSClosure() {\n          function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n            var A = src[srcOffset] * scale;\n            var AG = Math.pow(A, cs.G);\n            var L = cs.YW * AG;\n            var val = Math.max(295.8 * Math.pow(L, 0.3333333333333333) - 40.8, 0);\n            dest[destOffset] = val;\n            dest[destOffset + 1] = val;\n            dest[destOffset + 2] = val;\n          }\n          var CalGrayCS = /*#__PURE__*/function (_ColorSpace7) {\n            _inherits(CalGrayCS, _ColorSpace7);\n            function CalGrayCS(whitePoint, blackPoint, gamma) {\n              var _this47;\n              _classCallCheck(this, CalGrayCS);\n              _this47 = _possibleConstructorReturn(this, _getPrototypeOf(CalGrayCS).call(this, \"CalGray\", 1));\n              if (!whitePoint) {\n                throw new _util.FormatError(\"WhitePoint missing - required for color space CalGray\");\n              }\n              blackPoint = blackPoint || [0, 0, 0];\n              gamma = gamma || 1;\n              _this47.XW = whitePoint[0];\n              _this47.YW = whitePoint[1];\n              _this47.ZW = whitePoint[2];\n              _this47.XB = blackPoint[0];\n              _this47.YB = blackPoint[1];\n              _this47.ZB = blackPoint[2];\n              _this47.G = gamma;\n              if (_this47.XW < 0 || _this47.ZW < 0 || _this47.YW !== 1) {\n                throw new _util.FormatError(\"Invalid WhitePoint components for \".concat(_this47.name) + \", no fallback available\");\n              }\n              if (_this47.XB < 0 || _this47.YB < 0 || _this47.ZB < 0) {\n                (0, _util.info)(\"Invalid BlackPoint for \".concat(_this47.name, \", falling back to default.\"));\n                _this47.XB = _this47.YB = _this47.ZB = 0;\n              }\n              if (_this47.XB !== 0 || _this47.YB !== 0 || _this47.ZB !== 0) {\n                (0, _util.warn)(\"\".concat(_this47.name, \", BlackPoint: XB: \").concat(_this47.XB, \", YB: \").concat(_this47.YB, \", \") + \"ZB: \".concat(_this47.ZB, \", only default values are supported.\"));\n              }\n              if (_this47.G < 1) {\n                (0, _util.info)(\"Invalid Gamma: \".concat(_this47.G, \" for \").concat(_this47.name, \", \") + \"falling back to default.\");\n                _this47.G = 1;\n              }\n              return _this47;\n            }\n            _createClass(CalGrayCS, [{\n              key: \"getRgbItem\",\n              value: function getRgbItem(src, srcOffset, dest, destOffset) {\n                convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n              }\n            }, {\n              key: \"getRgbBuffer\",\n              value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n                var scale = 1 / ((1 << bits) - 1);\n                for (var i = 0; i < count; ++i) {\n                  convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n                  srcOffset += 1;\n                  destOffset += 3 + alpha01;\n                }\n              }\n            }, {\n              key: \"getOutputLength\",\n              value: function getOutputLength(inputLength, alpha01) {\n                return inputLength * (3 + alpha01);\n              }\n            }]);\n            return CalGrayCS;\n          }(ColorSpace);\n          return CalGrayCS;\n        }();\n        var CalRGBCS = function CalRGBCSClosure() {\n          var BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);\n          var BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);\n          var SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);\n          var FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n          var tempNormalizeMatrix = new Float32Array(3);\n          var tempConvertMatrix1 = new Float32Array(3);\n          var tempConvertMatrix2 = new Float32Array(3);\n          var DECODE_L_CONSTANT = Math.pow((8 + 16) / 116, 3) / 8.0;\n          function matrixProduct(a, b, result) {\n            result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n            result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n            result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n          }\n          function convertToFlat(sourceWhitePoint, LMS, result) {\n            result[0] = LMS[0] * 1 / sourceWhitePoint[0];\n            result[1] = LMS[1] * 1 / sourceWhitePoint[1];\n            result[2] = LMS[2] * 1 / sourceWhitePoint[2];\n          }\n          function convertToD65(sourceWhitePoint, LMS, result) {\n            var D65X = 0.95047;\n            var D65Y = 1;\n            var D65Z = 1.08883;\n            result[0] = LMS[0] * D65X / sourceWhitePoint[0];\n            result[1] = LMS[1] * D65Y / sourceWhitePoint[1];\n            result[2] = LMS[2] * D65Z / sourceWhitePoint[2];\n          }\n          function sRGBTransferFunction(color) {\n            if (color <= 0.0031308) {\n              return adjustToRange(0, 1, 12.92 * color);\n            }\n            if (color >= 0.99554525) {\n              return 1;\n            }\n            return adjustToRange(0, 1, (1 + 0.055) * Math.pow(color, 1 / 2.4) - 0.055);\n          }\n          function adjustToRange(min, max, value) {\n            return Math.max(min, Math.min(max, value));\n          }\n          function decodeL(L) {\n            if (L < 0) {\n              return -decodeL(-L);\n            }\n            if (L > 8.0) {\n              return Math.pow((L + 16) / 116, 3);\n            }\n            return L * DECODE_L_CONSTANT;\n          }\n          function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n            if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {\n              result[0] = XYZ_Flat[0];\n              result[1] = XYZ_Flat[1];\n              result[2] = XYZ_Flat[2];\n              return;\n            }\n            var zeroDecodeL = decodeL(0);\n            var X_DST = zeroDecodeL;\n            var X_SRC = decodeL(sourceBlackPoint[0]);\n            var Y_DST = zeroDecodeL;\n            var Y_SRC = decodeL(sourceBlackPoint[1]);\n            var Z_DST = zeroDecodeL;\n            var Z_SRC = decodeL(sourceBlackPoint[2]);\n            var X_Scale = (1 - X_DST) / (1 - X_SRC);\n            var X_Offset = 1 - X_Scale;\n            var Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n            var Y_Offset = 1 - Y_Scale;\n            var Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n            var Z_Offset = 1 - Z_Scale;\n            result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n            result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n            result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n          }\n          function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n            if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n              result[0] = XYZ_In[0];\n              result[1] = XYZ_In[1];\n              result[2] = XYZ_In[2];\n              return;\n            }\n            var LMS = result;\n            matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n            var LMS_Flat = tempNormalizeMatrix;\n            convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n            matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n          }\n          function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n            var LMS = result;\n            matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n            var LMS_D65 = tempNormalizeMatrix;\n            convertToD65(sourceWhitePoint, LMS, LMS_D65);\n            matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n          }\n          function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n            var A = adjustToRange(0, 1, src[srcOffset] * scale);\n            var B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n            var C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n            var AGR = A === 1 ? 1 : Math.pow(A, cs.GR);\n            var BGG = B === 1 ? 1 : Math.pow(B, cs.GG);\n            var CGB = C === 1 ? 1 : Math.pow(C, cs.GB);\n            var X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n            var Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n            var Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n            var XYZ = tempConvertMatrix1;\n            XYZ[0] = X;\n            XYZ[1] = Y;\n            XYZ[2] = Z;\n            var XYZ_Flat = tempConvertMatrix2;\n            normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n            var XYZ_Black = tempConvertMatrix1;\n            compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n            var XYZ_D65 = tempConvertMatrix2;\n            normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n            var SRGB = tempConvertMatrix1;\n            matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n            dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n            dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n            dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n          }\n          var CalRGBCS = /*#__PURE__*/function (_ColorSpace8) {\n            _inherits(CalRGBCS, _ColorSpace8);\n            function CalRGBCS(whitePoint, blackPoint, gamma, matrix) {\n              var _this48;\n              _classCallCheck(this, CalRGBCS);\n              _this48 = _possibleConstructorReturn(this, _getPrototypeOf(CalRGBCS).call(this, \"CalRGB\", 3));\n              if (!whitePoint) {\n                throw new _util.FormatError(\"WhitePoint missing - required for color space CalRGB\");\n              }\n              blackPoint = blackPoint || new Float32Array(3);\n              gamma = gamma || new Float32Array([1, 1, 1]);\n              matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n              var XW = whitePoint[0];\n              var YW = whitePoint[1];\n              var ZW = whitePoint[2];\n              _this48.whitePoint = whitePoint;\n              var XB = blackPoint[0];\n              var YB = blackPoint[1];\n              var ZB = blackPoint[2];\n              _this48.blackPoint = blackPoint;\n              _this48.GR = gamma[0];\n              _this48.GG = gamma[1];\n              _this48.GB = gamma[2];\n              _this48.MXA = matrix[0];\n              _this48.MYA = matrix[1];\n              _this48.MZA = matrix[2];\n              _this48.MXB = matrix[3];\n              _this48.MYB = matrix[4];\n              _this48.MZB = matrix[5];\n              _this48.MXC = matrix[6];\n              _this48.MYC = matrix[7];\n              _this48.MZC = matrix[8];\n              if (XW < 0 || ZW < 0 || YW !== 1) {\n                throw new _util.FormatError(\"Invalid WhitePoint components for \".concat(_this48.name) + \", no fallback available\");\n              }\n              if (XB < 0 || YB < 0 || ZB < 0) {\n                (0, _util.info)(\"Invalid BlackPoint for \".concat(_this48.name, \" [\").concat(XB, \", \").concat(YB, \", \").concat(ZB, \"], \") + \"falling back to default.\");\n                _this48.blackPoint = new Float32Array(3);\n              }\n              if (_this48.GR < 0 || _this48.GG < 0 || _this48.GB < 0) {\n                (0, _util.info)(\"Invalid Gamma [\".concat(_this48.GR, \", \").concat(_this48.GG, \", \").concat(_this48.GB, \"] for \") + \"\".concat(_this48.name, \", falling back to default.\"));\n                _this48.GR = _this48.GG = _this48.GB = 1;\n              }\n              return _this48;\n            }\n            _createClass(CalRGBCS, [{\n              key: \"getRgbItem\",\n              value: function getRgbItem(src, srcOffset, dest, destOffset) {\n                convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n              }\n            }, {\n              key: \"getRgbBuffer\",\n              value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n                var scale = 1 / ((1 << bits) - 1);\n                for (var i = 0; i < count; ++i) {\n                  convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n                  srcOffset += 3;\n                  destOffset += 3 + alpha01;\n                }\n              }\n            }, {\n              key: \"getOutputLength\",\n              value: function getOutputLength(inputLength, alpha01) {\n                return inputLength * (3 + alpha01) / 3 | 0;\n              }\n            }]);\n            return CalRGBCS;\n          }(ColorSpace);\n          return CalRGBCS;\n        }();\n        var LabCS = function LabCSClosure() {\n          function fn_g(x) {\n            var result;\n            if (x >= 6 / 29) {\n              result = Math.pow(x, 3);\n            } else {\n              result = 108 / 841 * (x - 4 / 29);\n            }\n            return result;\n          }\n          function decode(value, high1, low2, high2) {\n            return low2 + value * (high2 - low2) / high1;\n          }\n          function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n            var Ls = src[srcOffset];\n            var as = src[srcOffset + 1];\n            var bs = src[srcOffset + 2];\n            if (maxVal !== false) {\n              Ls = decode(Ls, maxVal, 0, 100);\n              as = decode(as, maxVal, cs.amin, cs.amax);\n              bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n            }\n            if (as > cs.amax) {\n              as = cs.amax;\n            } else if (as < cs.amin) {\n              as = cs.amin;\n            }\n            if (bs > cs.bmax) {\n              bs = cs.bmax;\n            } else if (bs < cs.bmin) {\n              bs = cs.bmin;\n            }\n            var M = (Ls + 16) / 116;\n            var L = M + as / 500;\n            var N = M - bs / 200;\n            var X = cs.XW * fn_g(L);\n            var Y = cs.YW * fn_g(M);\n            var Z = cs.ZW * fn_g(N);\n            var r, g, b;\n            if (cs.ZW < 1) {\n              r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n              g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n              b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n            } else {\n              r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n              g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n              b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n            }\n            dest[destOffset] = Math.sqrt(r) * 255;\n            dest[destOffset + 1] = Math.sqrt(g) * 255;\n            dest[destOffset + 2] = Math.sqrt(b) * 255;\n          }\n          var LabCS = /*#__PURE__*/function (_ColorSpace9) {\n            _inherits(LabCS, _ColorSpace9);\n            function LabCS(whitePoint, blackPoint, range) {\n              var _this49;\n              _classCallCheck(this, LabCS);\n              _this49 = _possibleConstructorReturn(this, _getPrototypeOf(LabCS).call(this, \"Lab\", 3));\n              if (!whitePoint) {\n                throw new _util.FormatError(\"WhitePoint missing - required for color space Lab\");\n              }\n              blackPoint = blackPoint || [0, 0, 0];\n              range = range || [-100, 100, -100, 100];\n              _this49.XW = whitePoint[0];\n              _this49.YW = whitePoint[1];\n              _this49.ZW = whitePoint[2];\n              _this49.amin = range[0];\n              _this49.amax = range[1];\n              _this49.bmin = range[2];\n              _this49.bmax = range[3];\n              _this49.XB = blackPoint[0];\n              _this49.YB = blackPoint[1];\n              _this49.ZB = blackPoint[2];\n              if (_this49.XW < 0 || _this49.ZW < 0 || _this49.YW !== 1) {\n                throw new _util.FormatError(\"Invalid WhitePoint components, no fallback available\");\n              }\n              if (_this49.XB < 0 || _this49.YB < 0 || _this49.ZB < 0) {\n                (0, _util.info)(\"Invalid BlackPoint, falling back to default\");\n                _this49.XB = _this49.YB = _this49.ZB = 0;\n              }\n              if (_this49.amin > _this49.amax || _this49.bmin > _this49.bmax) {\n                (0, _util.info)(\"Invalid Range, falling back to defaults\");\n                _this49.amin = -100;\n                _this49.amax = 100;\n                _this49.bmin = -100;\n                _this49.bmax = 100;\n              }\n              return _this49;\n            }\n            _createClass(LabCS, [{\n              key: \"getRgbItem\",\n              value: function getRgbItem(src, srcOffset, dest, destOffset) {\n                convertToRgb(this, src, srcOffset, false, dest, destOffset);\n              }\n            }, {\n              key: \"getRgbBuffer\",\n              value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n                var maxVal = (1 << bits) - 1;\n                for (var i = 0; i < count; i++) {\n                  convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n                  srcOffset += 3;\n                  destOffset += 3 + alpha01;\n                }\n              }\n            }, {\n              key: \"getOutputLength\",\n              value: function getOutputLength(inputLength, alpha01) {\n                return inputLength * (3 + alpha01) / 3 | 0;\n              }\n            }, {\n              key: \"isDefaultDecode\",\n              value: function isDefaultDecode(decodeMap, bpc) {\n                return true;\n              }\n            }, {\n              key: \"usesZeroToOneRange\",\n              get: function get() {\n                return (0, _util.shadow)(this, \"usesZeroToOneRange\", false);\n              }\n            }]);\n            return LabCS;\n          }(ColorSpace);\n          return LabCS;\n        }();\n\n        /***/\n      }, /* 15 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PartialEvaluator = exports.EvaluatorPreprocessor = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _cmap = __w_pdfjs_require__(16);\n        var _primitives = __w_pdfjs_require__(5);\n        var _fonts = __w_pdfjs_require__(34);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var _encodings = __w_pdfjs_require__(37);\n        var _standard_fonts = __w_pdfjs_require__(41);\n        var _unicode = __w_pdfjs_require__(40);\n        var _pattern = __w_pdfjs_require__(50);\n        var _xfa_fonts = __w_pdfjs_require__(51);\n        var _to_unicode_map = __w_pdfjs_require__(42);\n        var _function = __w_pdfjs_require__(57);\n        var _parser = __w_pdfjs_require__(17);\n        var _image_utils = __w_pdfjs_require__(59);\n        var _stream = __w_pdfjs_require__(10);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _bidi = __w_pdfjs_require__(60);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _glyphlist = __w_pdfjs_require__(39);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _metrics = __w_pdfjs_require__(45);\n        var _murmurhash = __w_pdfjs_require__(61);\n        var _operator_list = __w_pdfjs_require__(62);\n        var _image = __w_pdfjs_require__(63);\n        var DefaultPartialEvaluatorOptions = Object.freeze({\n          maxImageSize: -1,\n          disableFontFace: false,\n          ignoreErrors: false,\n          isEvalSupported: true,\n          fontExtraProperties: false,\n          useSystemFonts: true,\n          cMapUrl: null,\n          standardFontDataUrl: null\n        });\n        var PatternType = {\n          TILING: 1,\n          SHADING: 2\n        };\n        var TEXT_CHUNK_BATCH_SIZE = 10;\n        var deferred = Promise.resolve();\n        function normalizeBlendMode(value) {\n          var parsingArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (Array.isArray(value)) {\n            for (var i = 0, ii = value.length; i < ii; i++) {\n              var maybeBM = normalizeBlendMode(value[i], true);\n              if (maybeBM) {\n                return maybeBM;\n              }\n            }\n            (0, _util.warn)(\"Unsupported blend mode Array: \".concat(value));\n            return \"source-over\";\n          }\n          if (!(value instanceof _primitives.Name)) {\n            if (parsingArray) {\n              return null;\n            }\n            return \"source-over\";\n          }\n          switch (value.name) {\n            case \"Normal\":\n            case \"Compatible\":\n              return \"source-over\";\n            case \"Multiply\":\n              return \"multiply\";\n            case \"Screen\":\n              return \"screen\";\n            case \"Overlay\":\n              return \"overlay\";\n            case \"Darken\":\n              return \"darken\";\n            case \"Lighten\":\n              return \"lighten\";\n            case \"ColorDodge\":\n              return \"color-dodge\";\n            case \"ColorBurn\":\n              return \"color-burn\";\n            case \"HardLight\":\n              return \"hard-light\";\n            case \"SoftLight\":\n              return \"soft-light\";\n            case \"Difference\":\n              return \"difference\";\n            case \"Exclusion\":\n              return \"exclusion\";\n            case \"Hue\":\n              return \"hue\";\n            case \"Saturation\":\n              return \"saturation\";\n            case \"Color\":\n              return \"color\";\n            case \"Luminosity\":\n              return \"luminosity\";\n          }\n          if (parsingArray) {\n            return null;\n          }\n          (0, _util.warn)(\"Unsupported blend mode: \".concat(value.name));\n          return \"source-over\";\n        }\n        function incrementCachedImageMaskCount(data) {\n          if (data.fn === _util.OPS.paintImageMaskXObject && data.args[0] && data.args[0].count > 0) {\n            data.args[0].count++;\n          }\n        }\n        var TimeSlotManager = /*#__PURE__*/function () {\n          _createClass(TimeSlotManager, null, [{\n            key: \"TIME_SLOT_DURATION_MS\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"TIME_SLOT_DURATION_MS\", 20);\n            }\n          }, {\n            key: \"CHECK_TIME_EVERY\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"CHECK_TIME_EVERY\", 100);\n            }\n          }]);\n          function TimeSlotManager() {\n            _classCallCheck(this, TimeSlotManager);\n            this.reset();\n          }\n          _createClass(TimeSlotManager, [{\n            key: \"check\",\n            value: function check() {\n              if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {\n                return false;\n              }\n              this.checked = 0;\n              return this.endTime <= Date.now();\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;\n              this.checked = 0;\n            }\n          }]);\n          return TimeSlotManager;\n        }();\n        var PartialEvaluator = /*#__PURE__*/function () {\n          function PartialEvaluator(_ref37) {\n            var xref = _ref37.xref,\n              handler = _ref37.handler,\n              pageIndex = _ref37.pageIndex,\n              idFactory = _ref37.idFactory,\n              fontCache = _ref37.fontCache,\n              builtInCMapCache = _ref37.builtInCMapCache,\n              standardFontDataCache = _ref37.standardFontDataCache,\n              globalImageCache = _ref37.globalImageCache,\n              _ref37$options = _ref37.options,\n              options = _ref37$options === void 0 ? null : _ref37$options;\n            _classCallCheck(this, PartialEvaluator);\n            this.xref = xref;\n            this.handler = handler;\n            this.pageIndex = pageIndex;\n            this.idFactory = idFactory;\n            this.fontCache = fontCache;\n            this.builtInCMapCache = builtInCMapCache;\n            this.standardFontDataCache = standardFontDataCache;\n            this.globalImageCache = globalImageCache;\n            this.options = options || DefaultPartialEvaluatorOptions;\n            this.parsingType3Font = false;\n            this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);\n          }\n          _createClass(PartialEvaluator, [{\n            key: \"clone\",\n            value: function clone() {\n              var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              var newEvaluator = Object.create(this);\n              newEvaluator.options = Object.assign(Object.create(null), this.options, newOptions);\n              return newEvaluator;\n            }\n          }, {\n            key: \"hasBlendModes\",\n            value: function hasBlendModes(resources, nonBlendModesSet) {\n              if (!(resources instanceof _primitives.Dict)) {\n                return false;\n              }\n              if (resources.objId && nonBlendModesSet.has(resources.objId)) {\n                return false;\n              }\n              var processed = new _primitives.RefSet(nonBlendModesSet);\n              if (resources.objId) {\n                processed.put(resources.objId);\n              }\n              var nodes = [resources],\n                xref = this.xref;\n              while (nodes.length) {\n                var node = nodes.shift();\n                var graphicStates = node.get(\"ExtGState\");\n                if (graphicStates instanceof _primitives.Dict) {\n                  var _iterator59 = _createForOfIteratorHelper(graphicStates.getRawValues()),\n                    _step59;\n                  try {\n                    for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {\n                      var graphicState = _step59.value;\n                      if (graphicState instanceof _primitives.Ref) {\n                        if (processed.has(graphicState)) {\n                          continue;\n                        }\n                        try {\n                          graphicState = xref.fetch(graphicState);\n                        } catch (ex) {\n                          processed.put(graphicState);\n                          (0, _util.info)(\"hasBlendModes - ignoring ExtGState: \\\"\".concat(ex, \"\\\".\"));\n                          continue;\n                        }\n                      }\n                      if (!(graphicState instanceof _primitives.Dict)) {\n                        continue;\n                      }\n                      if (graphicState.objId) {\n                        processed.put(graphicState.objId);\n                      }\n                      var bm = graphicState.get(\"BM\");\n                      if (bm instanceof _primitives.Name) {\n                        if (bm.name !== \"Normal\") {\n                          return true;\n                        }\n                        continue;\n                      }\n                      if (bm !== undefined && Array.isArray(bm)) {\n                        var _iterator60 = _createForOfIteratorHelper(bm),\n                          _step60;\n                        try {\n                          for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {\n                            var element = _step60.value;\n                            if (element instanceof _primitives.Name && element.name !== \"Normal\") {\n                              return true;\n                            }\n                          }\n                        } catch (err) {\n                          _iterator60.e(err);\n                        } finally {\n                          _iterator60.f();\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _iterator59.e(err);\n                  } finally {\n                    _iterator59.f();\n                  }\n                }\n                var xObjects = node.get(\"XObject\");\n                if (!(xObjects instanceof _primitives.Dict)) {\n                  continue;\n                }\n                var _iterator61 = _createForOfIteratorHelper(xObjects.getRawValues()),\n                  _step61;\n                try {\n                  for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {\n                    var xObject = _step61.value;\n                    if (xObject instanceof _primitives.Ref) {\n                      if (processed.has(xObject)) {\n                        continue;\n                      }\n                      try {\n                        xObject = xref.fetch(xObject);\n                      } catch (ex) {\n                        processed.put(xObject);\n                        (0, _util.info)(\"hasBlendModes - ignoring XObject: \\\"\".concat(ex, \"\\\".\"));\n                        continue;\n                      }\n                    }\n                    if (!(xObject instanceof _base_stream.BaseStream)) {\n                      continue;\n                    }\n                    if (xObject.dict.objId) {\n                      processed.put(xObject.dict.objId);\n                    }\n                    var xResources = xObject.dict.get(\"Resources\");\n                    if (!(xResources instanceof _primitives.Dict)) {\n                      continue;\n                    }\n                    if (xResources.objId && processed.has(xResources.objId)) {\n                      continue;\n                    }\n                    nodes.push(xResources);\n                    if (xResources.objId) {\n                      processed.put(xResources.objId);\n                    }\n                  }\n                } catch (err) {\n                  _iterator61.e(err);\n                } finally {\n                  _iterator61.f();\n                }\n              }\n              var _iterator62 = _createForOfIteratorHelper(processed),\n                _step62;\n              try {\n                for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {\n                  var ref = _step62.value;\n                  nonBlendModesSet.put(ref);\n                }\n              } catch (err) {\n                _iterator62.e(err);\n              } finally {\n                _iterator62.f();\n              }\n              return false;\n            }\n          }, {\n            key: \"fetchBuiltInCMap\",\n            value: function () {\n              var _fetchBuiltInCMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(name) {\n                var cachedData, data, url, response;\n                return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n                  while (1) {\n                    switch (_context37.prev = _context37.next) {\n                      case 0:\n                        cachedData = this.builtInCMapCache.get(name);\n                        if (!cachedData) {\n                          _context37.next = 3;\n                          break;\n                        }\n                        return _context37.abrupt(\"return\", cachedData);\n                      case 3:\n                        if (!(this.options.cMapUrl !== null)) {\n                          _context37.next = 19;\n                          break;\n                        }\n                        url = \"\".concat(this.options.cMapUrl).concat(name, \".bcmap\");\n                        _context37.next = 7;\n                        return fetch(url);\n                      case 7:\n                        response = _context37.sent;\n                        if (response.ok) {\n                          _context37.next = 10;\n                          break;\n                        }\n                        throw new Error(\"fetchBuiltInCMap: failed to fetch file \\\"\".concat(url, \"\\\" with \\\"\").concat(response.statusText, \"\\\".\"));\n                      case 10:\n                        _context37.t0 = Uint8Array;\n                        _context37.next = 13;\n                        return response.arrayBuffer();\n                      case 13:\n                        _context37.t1 = _context37.sent;\n                        _context37.t2 = new _context37.t0(_context37.t1);\n                        _context37.t3 = _util.CMapCompressionType.BINARY;\n                        data = {\n                          cMapData: _context37.t2,\n                          compressionType: _context37.t3\n                        };\n                        _context37.next = 22;\n                        break;\n                      case 19:\n                        _context37.next = 21;\n                        return this.handler.sendWithPromise(\"FetchBuiltInCMap\", {\n                          name: name\n                        });\n                      case 21:\n                        data = _context37.sent;\n                      case 22:\n                        if (data.compressionType !== _util.CMapCompressionType.NONE) {\n                          this.builtInCMapCache.set(name, data);\n                        }\n                        return _context37.abrupt(\"return\", data);\n                      case 24:\n                      case \"end\":\n                        return _context37.stop();\n                    }\n                  }\n                }, _callee37, this);\n              }));\n              function fetchBuiltInCMap(_x90) {\n                return _fetchBuiltInCMap.apply(this, arguments);\n              }\n              return fetchBuiltInCMap;\n            }()\n          }, {\n            key: \"fetchStandardFontData\",\n            value: function () {\n              var _fetchStandardFontData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(name) {\n                var cachedData, standardFontNameToFileName, filename, data, url, response;\n                return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n                  while (1) {\n                    switch (_context38.prev = _context38.next) {\n                      case 0:\n                        cachedData = this.standardFontDataCache.get(name);\n                        if (!cachedData) {\n                          _context38.next = 3;\n                          break;\n                        }\n                        return _context38.abrupt(\"return\", new _stream.Stream(cachedData));\n                      case 3:\n                        if (!(this.options.useSystemFonts && name !== \"Symbol\" && name !== \"ZapfDingbats\")) {\n                          _context38.next = 5;\n                          break;\n                        }\n                        return _context38.abrupt(\"return\", null);\n                      case 5:\n                        standardFontNameToFileName = (0, _standard_fonts.getFontNameToFileMap)(), filename = standardFontNameToFileName[name];\n                        if (!(this.options.standardFontDataUrl !== null)) {\n                          _context38.next = 20;\n                          break;\n                        }\n                        url = \"\".concat(this.options.standardFontDataUrl).concat(filename);\n                        _context38.next = 10;\n                        return fetch(url);\n                      case 10:\n                        response = _context38.sent;\n                        if (response.ok) {\n                          _context38.next = 15;\n                          break;\n                        }\n                        (0, _util.warn)(\"fetchStandardFontData: failed to fetch file \\\"\".concat(url, \"\\\" with \\\"\").concat(response.statusText, \"\\\".\"));\n                        _context38.next = 18;\n                        break;\n                      case 15:\n                        _context38.next = 17;\n                        return response.arrayBuffer();\n                      case 17:\n                        data = _context38.sent;\n                      case 18:\n                        _context38.next = 29;\n                        break;\n                      case 20:\n                        _context38.prev = 20;\n                        _context38.next = 23;\n                        return this.handler.sendWithPromise(\"FetchStandardFontData\", {\n                          filename: filename\n                        });\n                      case 23:\n                        data = _context38.sent;\n                        _context38.next = 29;\n                        break;\n                      case 26:\n                        _context38.prev = 26;\n                        _context38.t0 = _context38[\"catch\"](20);\n                        (0, _util.warn)(\"fetchStandardFontData: failed to fetch file \\\"\".concat(filename, \"\\\" with \\\"\").concat(_context38.t0, \"\\\".\"));\n                      case 29:\n                        if (data) {\n                          _context38.next = 31;\n                          break;\n                        }\n                        return _context38.abrupt(\"return\", null);\n                      case 31:\n                        this.standardFontDataCache.set(name, data);\n                        return _context38.abrupt(\"return\", new _stream.Stream(data));\n                      case 33:\n                      case \"end\":\n                        return _context38.stop();\n                    }\n                  }\n                }, _callee38, this, [[20, 26]]);\n              }));\n              function fetchStandardFontData(_x91) {\n                return _fetchStandardFontData.apply(this, arguments);\n              }\n              return fetchStandardFontData;\n            }()\n          }, {\n            key: \"buildFormXObject\",\n            value: function () {\n              var _buildFormXObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(resources, xobj, smask, operatorList, task, initialState, localColorSpaceCache) {\n                var dict, matrix, bbox, optionalContent, groupOptions, group, groupSubtype, colorSpace, cs, cachedColorSpace, args;\n                return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n                  while (1) {\n                    switch (_context39.prev = _context39.next) {\n                      case 0:\n                        dict = xobj.dict;\n                        matrix = dict.getArray(\"Matrix\");\n                        bbox = dict.getArray(\"BBox\");\n                        if (Array.isArray(bbox) && bbox.length === 4) {\n                          bbox = _util.Util.normalizeRect(bbox);\n                        } else {\n                          bbox = null;\n                        }\n                        if (!dict.has(\"OC\")) {\n                          _context39.next = 8;\n                          break;\n                        }\n                        _context39.next = 7;\n                        return this.parseMarkedContentProps(dict.get(\"OC\"), resources);\n                      case 7:\n                        optionalContent = _context39.sent;\n                      case 8:\n                        if (optionalContent !== undefined) {\n                          operatorList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", optionalContent]);\n                        }\n                        group = dict.get(\"Group\");\n                        if (!group) {\n                          _context39.next = 29;\n                          break;\n                        }\n                        groupOptions = {\n                          matrix: matrix,\n                          bbox: bbox,\n                          smask: smask,\n                          isolated: false,\n                          knockout: false\n                        };\n                        groupSubtype = group.get(\"S\");\n                        colorSpace = null;\n                        if (!(0, _primitives.isName)(groupSubtype, \"Transparency\")) {\n                          _context39.next = 27;\n                          break;\n                        }\n                        groupOptions.isolated = group.get(\"I\") || false;\n                        groupOptions.knockout = group.get(\"K\") || false;\n                        if (!group.has(\"CS\")) {\n                          _context39.next = 27;\n                          break;\n                        }\n                        cs = group.getRaw(\"CS\");\n                        cachedColorSpace = _colorspace.ColorSpace.getCached(cs, this.xref, localColorSpaceCache);\n                        if (!cachedColorSpace) {\n                          _context39.next = 24;\n                          break;\n                        }\n                        colorSpace = cachedColorSpace;\n                        _context39.next = 27;\n                        break;\n                      case 24:\n                        _context39.next = 26;\n                        return this.parseColorSpace({\n                          cs: cs,\n                          resources: resources,\n                          localColorSpaceCache: localColorSpaceCache\n                        });\n                      case 26:\n                        colorSpace = _context39.sent;\n                      case 27:\n                        if (smask && smask.backdrop) {\n                          colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;\n                          smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n                        }\n                        operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);\n                      case 29:\n                        args = group ? [matrix, null] : [matrix, bbox];\n                        operatorList.addOp(_util.OPS.paintFormXObjectBegin, args);\n                        return _context39.abrupt(\"return\", this.getOperatorList({\n                          stream: xobj,\n                          task: task,\n                          resources: dict.get(\"Resources\") || resources,\n                          operatorList: operatorList,\n                          initialState: initialState\n                        }).then(function () {\n                          operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);\n                          if (group) {\n                            operatorList.addOp(_util.OPS.endGroup, [groupOptions]);\n                          }\n                          if (optionalContent !== undefined) {\n                            operatorList.addOp(_util.OPS.endMarkedContent, []);\n                          }\n                        }));\n                      case 32:\n                      case \"end\":\n                        return _context39.stop();\n                    }\n                  }\n                }, _callee39, this);\n              }));\n              function buildFormXObject(_x92, _x93, _x94, _x95, _x96, _x97, _x98) {\n                return _buildFormXObject.apply(this, arguments);\n              }\n              return buildFormXObject;\n            }()\n          }, {\n            key: \"_sendImgData\",\n            value: function _sendImgData(objId, imgData) {\n              var cacheGlobally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              var transfers = imgData ? [imgData.bitmap || imgData.data.buffer] : null;\n              if (this.parsingType3Font || cacheGlobally) {\n                return this.handler.send(\"commonobj\", [objId, \"Image\", imgData], transfers);\n              }\n              return this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", imgData], transfers);\n            }\n          }, {\n            key: \"buildPaintImageXObject\",\n            value: function () {\n              var _buildPaintImageXObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(_ref38) {\n                var _this50 = this;\n                var resources, image, _ref38$isInline, isInline, operatorList, cacheKey, localImageCache, localColorSpaceCache, dict, imageRef, w, h, maxImageSize, msg, optionalContent, imageMask, imgData, args, interpolate, bitStrideLength, imgArray, decode, _objId, softMask, mask, SMALL_IMAGE_DIMENSIONS, imageObj, objId, cacheGlobally;\n                return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n                  while (1) {\n                    switch (_context40.prev = _context40.next) {\n                      case 0:\n                        resources = _ref38.resources, image = _ref38.image, _ref38$isInline = _ref38.isInline, isInline = _ref38$isInline === void 0 ? false : _ref38$isInline, operatorList = _ref38.operatorList, cacheKey = _ref38.cacheKey, localImageCache = _ref38.localImageCache, localColorSpaceCache = _ref38.localColorSpaceCache;\n                        dict = image.dict;\n                        imageRef = dict.objId;\n                        w = dict.get(\"W\", \"Width\");\n                        h = dict.get(\"H\", \"Height\");\n                        if (!(!(w && typeof w === \"number\") || !(h && typeof h === \"number\"))) {\n                          _context40.next = 8;\n                          break;\n                        }\n                        (0, _util.warn)(\"Image dimensions are missing, or not numbers.\");\n                        return _context40.abrupt(\"return\");\n                      case 8:\n                        maxImageSize = this.options.maxImageSize;\n                        if (!(maxImageSize !== -1 && w * h > maxImageSize)) {\n                          _context40.next = 15;\n                          break;\n                        }\n                        msg = \"Image exceeded maximum allowed size and was removed.\";\n                        if (!this.options.ignoreErrors) {\n                          _context40.next = 14;\n                          break;\n                        }\n                        (0, _util.warn)(msg);\n                        return _context40.abrupt(\"return\");\n                      case 14:\n                        throw new Error(msg);\n                      case 15:\n                        if (!dict.has(\"OC\")) {\n                          _context40.next = 19;\n                          break;\n                        }\n                        _context40.next = 18;\n                        return this.parseMarkedContentProps(dict.get(\"OC\"), resources);\n                      case 18:\n                        optionalContent = _context40.sent;\n                      case 19:\n                        imageMask = dict.get(\"IM\", \"ImageMask\") || false;\n                        if (!imageMask) {\n                          _context40.next = 44;\n                          break;\n                        }\n                        interpolate = dict.get(\"I\", \"Interpolate\");\n                        bitStrideLength = w + 7 >> 3;\n                        imgArray = image.getBytes(bitStrideLength * h);\n                        decode = dict.getArray(\"D\", \"Decode\");\n                        if (!this.parsingType3Font) {\n                          _context40.next = 32;\n                          break;\n                        }\n                        imgData = _image.PDFImage.createRawMask({\n                          imgArray: imgArray,\n                          width: w,\n                          height: h,\n                          imageIsFromDecodeStream: image instanceof _decode_stream.DecodeStream,\n                          inverseDecode: !!decode && decode[0] > 0,\n                          interpolate: interpolate\n                        });\n                        imgData.cached = !!cacheKey;\n                        args = [imgData];\n                        operatorList.addImageOps(_util.OPS.paintImageMaskXObject, args, optionalContent);\n                        if (cacheKey) {\n                          localImageCache.set(cacheKey, imageRef, {\n                            fn: _util.OPS.paintImageMaskXObject,\n                            args: args,\n                            optionalContent: optionalContent\n                          });\n                        }\n                        return _context40.abrupt(\"return\");\n                      case 32:\n                        imgData = _image.PDFImage.createMask({\n                          imgArray: imgArray,\n                          width: w,\n                          height: h,\n                          imageIsFromDecodeStream: image instanceof _decode_stream.DecodeStream,\n                          inverseDecode: !!decode && decode[0] > 0,\n                          interpolate: interpolate\n                        });\n                        if (!imgData.isSingleOpaquePixel) {\n                          _context40.next = 37;\n                          break;\n                        }\n                        operatorList.addImageOps(_util.OPS.paintSolidColorImageMask, [], optionalContent);\n                        if (cacheKey) {\n                          localImageCache.set(cacheKey, imageRef, {\n                            fn: _util.OPS.paintSolidColorImageMask,\n                            args: [],\n                            optionalContent: optionalContent\n                          });\n                        }\n                        return _context40.abrupt(\"return\");\n                      case 37:\n                        _objId = \"mask_\".concat(this.idFactory.createObjId());\n                        operatorList.addDependency(_objId);\n                        this._sendImgData(_objId, imgData);\n                        args = [{\n                          data: _objId,\n                          width: imgData.width,\n                          height: imgData.height,\n                          interpolate: imgData.interpolate,\n                          count: 1\n                        }];\n                        operatorList.addImageOps(_util.OPS.paintImageMaskXObject, args, optionalContent);\n                        if (cacheKey) {\n                          localImageCache.set(cacheKey, imageRef, {\n                            fn: _util.OPS.paintImageMaskXObject,\n                            args: args,\n                            optionalContent: optionalContent\n                          });\n                        }\n                        return _context40.abrupt(\"return\");\n                      case 44:\n                        softMask = dict.get(\"SM\", \"SMask\") || false;\n                        mask = dict.get(\"Mask\") || false;\n                        SMALL_IMAGE_DIMENSIONS = 200;\n                        if (!(isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS)) {\n                          _context40.next = 52;\n                          break;\n                        }\n                        imageObj = new _image.PDFImage({\n                          xref: this.xref,\n                          res: resources,\n                          image: image,\n                          isInline: isInline,\n                          pdfFunctionFactory: this._pdfFunctionFactory,\n                          localColorSpaceCache: localColorSpaceCache\n                        });\n                        imgData = imageObj.createImageData(true);\n                        operatorList.addImageOps(_util.OPS.paintInlineImageXObject, [imgData], optionalContent);\n                        return _context40.abrupt(\"return\");\n                      case 52:\n                        objId = \"img_\".concat(this.idFactory.createObjId()), cacheGlobally = false;\n                        if (this.parsingType3Font) {\n                          objId = \"\".concat(this.idFactory.getDocId(), \"_type3_\").concat(objId);\n                        } else if (imageRef) {\n                          cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);\n                          if (cacheGlobally) {\n                            objId = \"\".concat(this.idFactory.getDocId(), \"_\").concat(objId);\n                          }\n                        }\n                        operatorList.addDependency(objId);\n                        args = [objId, w, h];\n                        _image.PDFImage.buildImage({\n                          xref: this.xref,\n                          res: resources,\n                          image: image,\n                          isInline: isInline,\n                          pdfFunctionFactory: this._pdfFunctionFactory,\n                          localColorSpaceCache: localColorSpaceCache\n                        }).then(function (imageObj) {\n                          imgData = imageObj.createImageData(false);\n                          if (cacheKey && imageRef && cacheGlobally) {\n                            _this50.globalImageCache.addByteSize(imageRef, imgData.data.length);\n                          }\n                          return _this50._sendImgData(objId, imgData, cacheGlobally);\n                        }).catch(function (reason) {\n                          (0, _util.warn)(\"Unable to decode image \\\"\".concat(objId, \"\\\": \\\"\").concat(reason, \"\\\".\"));\n                          return _this50._sendImgData(objId, null, cacheGlobally);\n                        });\n                        operatorList.addImageOps(_util.OPS.paintImageXObject, args, optionalContent);\n                        if (cacheKey) {\n                          localImageCache.set(cacheKey, imageRef, {\n                            fn: _util.OPS.paintImageXObject,\n                            args: args,\n                            optionalContent: optionalContent\n                          });\n                          if (imageRef) {\n                            (0, _util.assert)(!isInline, \"Cannot cache an inline image globally.\");\n                            this.globalImageCache.addPageIndex(imageRef, this.pageIndex);\n                            if (cacheGlobally) {\n                              this.globalImageCache.setData(imageRef, {\n                                objId: objId,\n                                fn: _util.OPS.paintImageXObject,\n                                args: args,\n                                optionalContent: optionalContent,\n                                byteSize: 0\n                              });\n                            }\n                          }\n                        }\n                      case 59:\n                      case \"end\":\n                        return _context40.stop();\n                    }\n                  }\n                }, _callee40, this);\n              }));\n              function buildPaintImageXObject(_x99) {\n                return _buildPaintImageXObject.apply(this, arguments);\n              }\n              return buildPaintImageXObject;\n            }()\n          }, {\n            key: \"handleSMask\",\n            value: function handleSMask(smask, resources, operatorList, task, stateManager, localColorSpaceCache) {\n              var smaskContent = smask.get(\"G\");\n              var smaskOptions = {\n                subtype: smask.get(\"S\").name,\n                backdrop: smask.get(\"BC\")\n              };\n              var transferObj = smask.get(\"TR\");\n              if ((0, _function.isPDFFunction)(transferObj)) {\n                var transferFn = this._pdfFunctionFactory.create(transferObj);\n                var transferMap = new Uint8Array(256);\n                var tmp = new Float32Array(1);\n                for (var i = 0; i < 256; i++) {\n                  tmp[0] = i / 255;\n                  transferFn(tmp, 0, tmp, 0);\n                  transferMap[i] = tmp[0] * 255 | 0;\n                }\n                smaskOptions.transferMap = transferMap;\n              }\n              return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone(), localColorSpaceCache);\n            }\n          }, {\n            key: \"handleTransferFunction\",\n            value: function handleTransferFunction(tr) {\n              var transferArray;\n              if (Array.isArray(tr)) {\n                transferArray = tr;\n              } else if ((0, _function.isPDFFunction)(tr)) {\n                transferArray = [tr];\n              } else {\n                return null;\n              }\n              var transferMaps = [];\n              var numFns = 0,\n                numEffectfulFns = 0;\n              var _iterator63 = _createForOfIteratorHelper(transferArray),\n                _step63;\n              try {\n                for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {\n                  var entry = _step63.value;\n                  var transferObj = this.xref.fetchIfRef(entry);\n                  numFns++;\n                  if ((0, _primitives.isName)(transferObj, \"Identity\")) {\n                    transferMaps.push(null);\n                    continue;\n                  } else if (!(0, _function.isPDFFunction)(transferObj)) {\n                    return null;\n                  }\n                  var transferFn = this._pdfFunctionFactory.create(transferObj);\n                  var transferMap = new Uint8Array(256),\n                    tmp = new Float32Array(1);\n                  for (var j = 0; j < 256; j++) {\n                    tmp[0] = j / 255;\n                    transferFn(tmp, 0, tmp, 0);\n                    transferMap[j] = tmp[0] * 255 | 0;\n                  }\n                  transferMaps.push(transferMap);\n                  numEffectfulFns++;\n                }\n              } catch (err) {\n                _iterator63.e(err);\n              } finally {\n                _iterator63.f();\n              }\n              if (!(numFns === 1 || numFns === 4)) {\n                return null;\n              }\n              if (numEffectfulFns === 0) {\n                return null;\n              }\n              return transferMaps;\n            }\n          }, {\n            key: \"handleTilingType\",\n            value: function handleTilingType(fn, color, resources, pattern, patternDict, operatorList, task, localTilingPatternCache) {\n              var _this51 = this;\n              var tilingOpList = new _operator_list.OperatorList();\n              var patternResources = _primitives.Dict.merge({\n                xref: this.xref,\n                dictArray: [patternDict.get(\"Resources\"), resources]\n              });\n              return this.getOperatorList({\n                stream: pattern,\n                task: task,\n                resources: patternResources,\n                operatorList: tilingOpList\n              }).then(function () {\n                var operatorListIR = tilingOpList.getIR();\n                var tilingPatternIR = (0, _pattern.getTilingPatternIR)(operatorListIR, patternDict, color);\n                operatorList.addDependencies(tilingOpList.dependencies);\n                operatorList.addOp(fn, tilingPatternIR);\n                if (patternDict.objId) {\n                  localTilingPatternCache.set(null, patternDict.objId, {\n                    operatorListIR: operatorListIR,\n                    dict: patternDict\n                  });\n                }\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n                if (_this51.options.ignoreErrors) {\n                  _this51.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorTilingPattern\n                  });\n                  (0, _util.warn)(\"handleTilingType - ignoring pattern: \\\"\".concat(reason, \"\\\".\"));\n                  return;\n                }\n                throw reason;\n              });\n            }\n          }, {\n            key: \"handleSetFont\",\n            value: function handleSetFont(resources, fontArgs, fontRef, operatorList, task, state) {\n              var _this52 = this;\n              var fallbackFontDict = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n              var cssFontInfo = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n              var fontName = fontArgs && fontArgs[0] instanceof _primitives.Name ? fontArgs[0].name : null;\n              return this.loadFont(fontName, fontRef, resources, fallbackFontDict, cssFontInfo).then(function (translated) {\n                if (!translated.font.isType3Font) {\n                  return translated;\n                }\n                return translated.loadType3Data(_this52, resources, task).then(function () {\n                  operatorList.addDependencies(translated.type3Dependencies);\n                  return translated;\n                }).catch(function (reason) {\n                  _this52.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadType3\n                  });\n                  return new TranslatedFont({\n                    loadedName: \"g_font_error\",\n                    font: new _fonts.ErrorFont(\"Type3 font load error: \".concat(reason)),\n                    dict: translated.font,\n                    evaluatorOptions: _this52.options\n                  });\n                });\n              }).then(function (translated) {\n                state.font = translated.font;\n                translated.send(_this52.handler);\n                return translated.loadedName;\n              });\n            }\n          }, {\n            key: \"handleText\",\n            value: function handleText(chars, state) {\n              var font = state.font;\n              var glyphs = font.charsToGlyphs(chars);\n              if (font.data) {\n                var isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n                if (isAddToPathSet || state.fillColorSpace.name === \"Pattern\" || font.disableFontFace || this.options.disableFontFace) {\n                  PartialEvaluator.buildFontPaths(font, glyphs, this.handler, this.options);\n                }\n              }\n              return glyphs;\n            }\n          }, {\n            key: \"ensureStateFont\",\n            value: function ensureStateFont(state) {\n              if (state.font) {\n                return;\n              }\n              var reason = new _util.FormatError(\"Missing setFont (Tf) operator before text rendering operator.\");\n              if (this.options.ignoreErrors) {\n                this.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorFontState\n                });\n                (0, _util.warn)(\"ensureStateFont: \\\"\".concat(reason, \"\\\".\"));\n                return;\n              }\n              throw reason;\n            }\n          }, {\n            key: \"setGState\",\n            value: function () {\n              var _setGState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(_ref39) {\n                var _this53 = this;\n                var resources, gState, operatorList, cacheKey, task, stateManager, localGStateCache, localColorSpaceCache, gStateRef, isSimpleGState, gStateObj, gStateKeys, promise, _loop4, i, ii;\n                return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n                  while (1) {\n                    switch (_context41.prev = _context41.next) {\n                      case 0:\n                        resources = _ref39.resources, gState = _ref39.gState, operatorList = _ref39.operatorList, cacheKey = _ref39.cacheKey, task = _ref39.task, stateManager = _ref39.stateManager, localGStateCache = _ref39.localGStateCache, localColorSpaceCache = _ref39.localColorSpaceCache;\n                        gStateRef = gState.objId;\n                        isSimpleGState = true;\n                        gStateObj = [];\n                        gStateKeys = gState.getKeys();\n                        promise = Promise.resolve();\n                        _loop4 = function _loop4(i, ii) {\n                          var key = gStateKeys[i];\n                          var value = gState.get(key);\n                          switch (key) {\n                            case \"Type\":\n                              break;\n                            case \"LW\":\n                            case \"LC\":\n                            case \"LJ\":\n                            case \"ML\":\n                            case \"D\":\n                            case \"RI\":\n                            case \"FL\":\n                            case \"CA\":\n                            case \"ca\":\n                              gStateObj.push([key, value]);\n                              break;\n                            case \"Font\":\n                              isSimpleGState = false;\n                              promise = promise.then(function () {\n                                return _this53.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {\n                                  operatorList.addDependency(loadedName);\n                                  gStateObj.push([key, [loadedName, value[1]]]);\n                                });\n                              });\n                              break;\n                            case \"BM\":\n                              gStateObj.push([key, normalizeBlendMode(value)]);\n                              break;\n                            case \"SMask\":\n                              if ((0, _primitives.isName)(value, \"None\")) {\n                                gStateObj.push([key, false]);\n                                break;\n                              }\n                              if (value instanceof _primitives.Dict) {\n                                isSimpleGState = false;\n                                promise = promise.then(function () {\n                                  return _this53.handleSMask(value, resources, operatorList, task, stateManager, localColorSpaceCache);\n                                });\n                                gStateObj.push([key, true]);\n                              } else {\n                                (0, _util.warn)(\"Unsupported SMask type\");\n                              }\n                              break;\n                            case \"TR\":\n                              var transferMaps = _this53.handleTransferFunction(value);\n                              gStateObj.push([key, transferMaps]);\n                              break;\n                            case \"OP\":\n                            case \"op\":\n                            case \"OPM\":\n                            case \"BG\":\n                            case \"BG2\":\n                            case \"UCR\":\n                            case \"UCR2\":\n                            case \"TR2\":\n                            case \"HT\":\n                            case \"SM\":\n                            case \"SA\":\n                            case \"AIS\":\n                            case \"TK\":\n                              (0, _util.info)(\"graphic state operator \" + key);\n                              break;\n                            default:\n                              (0, _util.info)(\"Unknown graphic state operator \" + key);\n                              break;\n                          }\n                        };\n                        for (i = 0, ii = gStateKeys.length; i < ii; i++) {\n                          _loop4(i, ii);\n                        }\n                        return _context41.abrupt(\"return\", promise.then(function () {\n                          if (gStateObj.length > 0) {\n                            operatorList.addOp(_util.OPS.setGState, [gStateObj]);\n                          }\n                          if (isSimpleGState) {\n                            localGStateCache.set(cacheKey, gStateRef, gStateObj);\n                          }\n                        }));\n                      case 9:\n                      case \"end\":\n                        return _context41.stop();\n                    }\n                  }\n                }, _callee41);\n              }));\n              function setGState(_x100) {\n                return _setGState.apply(this, arguments);\n              }\n              return setGState;\n            }()\n          }, {\n            key: \"loadFont\",\n            value: function loadFont(fontName, font, resources) {\n              var _this54 = this;\n              var fallbackFontDict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n              var cssFontInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n              var errorFont = /*#__PURE__*/function () {\n                var _ref40 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n                  return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n                    while (1) {\n                      switch (_context42.prev = _context42.next) {\n                        case 0:\n                          return _context42.abrupt(\"return\", new TranslatedFont({\n                            loadedName: \"g_font_error\",\n                            font: new _fonts.ErrorFont(\"Font \\\"\".concat(fontName, \"\\\" is not available.\")),\n                            dict: font,\n                            evaluatorOptions: _this54.options\n                          }));\n                        case 1:\n                        case \"end\":\n                          return _context42.stop();\n                      }\n                    }\n                  }, _callee42);\n                }));\n                return function errorFont() {\n                  return _ref40.apply(this, arguments);\n                };\n              }();\n              var xref = this.xref;\n              var fontRef;\n              if (font) {\n                if (font instanceof _primitives.Ref) {\n                  fontRef = font;\n                }\n              } else {\n                var fontRes = resources.get(\"Font\");\n                if (fontRes) {\n                  fontRef = fontRes.getRaw(fontName);\n                }\n              }\n              if (!fontRef) {\n                var partialMsg = \"Font \\\"\".concat(fontName || font && font.toString(), \"\\\" is not available\");\n                if (!this.options.ignoreErrors && !this.parsingType3Font) {\n                  (0, _util.warn)(\"\".concat(partialMsg, \".\"));\n                  return errorFont();\n                }\n                this.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorFontMissing\n                });\n                (0, _util.warn)(\"\".concat(partialMsg, \" -- attempting to fallback to a default font.\"));\n                if (fallbackFontDict) {\n                  fontRef = fallbackFontDict;\n                } else {\n                  fontRef = PartialEvaluator.fallbackFontDict;\n                }\n              }\n              if (this.parsingType3Font && this.type3FontRefs.has(fontRef)) {\n                return errorFont();\n              }\n              if (this.fontCache.has(fontRef)) {\n                return this.fontCache.get(fontRef);\n              }\n              font = xref.fetchIfRef(fontRef);\n              if (!(font instanceof _primitives.Dict)) {\n                return errorFont();\n              }\n              if (font.cacheKey && this.fontCache.has(font.cacheKey)) {\n                return this.fontCache.get(font.cacheKey);\n              }\n              var fontCapability = (0, _util.createPromiseCapability)();\n              var preEvaluatedFont;\n              try {\n                preEvaluatedFont = this.preEvaluateFont(font);\n                preEvaluatedFont.cssFontInfo = cssFontInfo;\n              } catch (reason) {\n                (0, _util.warn)(\"loadFont - preEvaluateFont failed: \\\"\".concat(reason, \"\\\".\"));\n                return errorFont();\n              }\n              var _preEvaluatedFont = preEvaluatedFont,\n                descriptor = _preEvaluatedFont.descriptor,\n                hash = _preEvaluatedFont.hash;\n              var fontRefIsRef = fontRef instanceof _primitives.Ref;\n              var fontID;\n              if (fontRefIsRef) {\n                fontID = \"f\".concat(fontRef.toString());\n              }\n              if (hash && descriptor instanceof _primitives.Dict) {\n                if (!descriptor.fontAliases) {\n                  descriptor.fontAliases = Object.create(null);\n                }\n                var fontAliases = descriptor.fontAliases;\n                if (fontAliases[hash]) {\n                  var aliasFontRef = fontAliases[hash].aliasRef;\n                  if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {\n                    this.fontCache.putAlias(fontRef, aliasFontRef);\n                    return this.fontCache.get(fontRef);\n                  }\n                } else {\n                  fontAliases[hash] = {\n                    fontID: this.idFactory.createFontId()\n                  };\n                }\n                if (fontRefIsRef) {\n                  fontAliases[hash].aliasRef = fontRef;\n                }\n                fontID = fontAliases[hash].fontID;\n              }\n              if (fontRefIsRef) {\n                this.fontCache.put(fontRef, fontCapability.promise);\n              } else {\n                if (!fontID) {\n                  fontID = this.idFactory.createFontId();\n                }\n                font.cacheKey = \"cacheKey_\".concat(fontID);\n                this.fontCache.put(font.cacheKey, fontCapability.promise);\n              }\n              (0, _util.assert)(fontID && fontID.startsWith(\"f\"), 'The \"fontID\" must be (correctly) defined.');\n              font.loadedName = \"\".concat(this.idFactory.getDocId(), \"_\").concat(fontID);\n              this.translateFont(preEvaluatedFont).then(function (translatedFont) {\n                if (translatedFont.fontType !== undefined) {\n                  xref.stats.addFontType(translatedFont.fontType);\n                }\n                fontCapability.resolve(new TranslatedFont({\n                  loadedName: font.loadedName,\n                  font: translatedFont,\n                  dict: font,\n                  evaluatorOptions: _this54.options\n                }));\n              }).catch(function (reason) {\n                _this54.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorFontTranslate\n                });\n                (0, _util.warn)(\"loadFont - translateFont failed: \\\"\".concat(reason, \"\\\".\"));\n                try {\n                  var fontFile3 = descriptor && descriptor.get(\"FontFile3\");\n                  var subtype = fontFile3 && fontFile3.get(\"Subtype\");\n                  var fontType = (0, _fonts_utils.getFontType)(preEvaluatedFont.type, subtype && subtype.name);\n                  if (fontType !== undefined) {\n                    xref.stats.addFontType(fontType);\n                  }\n                } catch (ex) {}\n                fontCapability.resolve(new TranslatedFont({\n                  loadedName: font.loadedName,\n                  font: new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason),\n                  dict: font,\n                  evaluatorOptions: _this54.options\n                }));\n              });\n              return fontCapability.promise;\n            }\n          }, {\n            key: \"buildPath\",\n            value: function buildPath(operatorList, fn, args) {\n              var parsingText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n              var lastIndex = operatorList.length - 1;\n              if (!args) {\n                args = [];\n              }\n              var minMax;\n              if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {\n                if (parsingText) {\n                  (0, _util.warn)(\"Encountered path operator \\\"\".concat(fn, \"\\\" inside of a text object.\"));\n                  operatorList.addOp(_util.OPS.save, null);\n                }\n                minMax = [Infinity, -Infinity, Infinity, -Infinity];\n                operatorList.addOp(_util.OPS.constructPath, [[fn], args, minMax]);\n                if (parsingText) {\n                  operatorList.addOp(_util.OPS.restore, null);\n                }\n              } else {\n                var opArgs = operatorList.argsArray[lastIndex];\n                opArgs[0].push(fn);\n                Array.prototype.push.apply(opArgs[1], args);\n                minMax = opArgs[2];\n              }\n              switch (fn) {\n                case _util.OPS.rectangle:\n                  minMax[0] = Math.min(minMax[0], args[0], args[0] + args[2]);\n                  minMax[1] = Math.max(minMax[1], args[0], args[0] + args[2]);\n                  minMax[2] = Math.min(minMax[2], args[1], args[1] + args[3]);\n                  minMax[3] = Math.max(minMax[3], args[1], args[1] + args[3]);\n                  break;\n                case _util.OPS.moveTo:\n                case _util.OPS.lineTo:\n                  minMax[0] = Math.min(minMax[0], args[0]);\n                  minMax[1] = Math.max(minMax[1], args[0]);\n                  minMax[2] = Math.min(minMax[2], args[1]);\n                  minMax[3] = Math.max(minMax[3], args[1]);\n                  break;\n              }\n            }\n          }, {\n            key: \"parseColorSpace\",\n            value: function parseColorSpace(_ref41) {\n              var _this55 = this;\n              var cs = _ref41.cs,\n                resources = _ref41.resources,\n                localColorSpaceCache = _ref41.localColorSpaceCache;\n              return _colorspace.ColorSpace.parseAsync({\n                cs: cs,\n                xref: this.xref,\n                resources: resources,\n                pdfFunctionFactory: this._pdfFunctionFactory,\n                localColorSpaceCache: localColorSpaceCache\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return null;\n                }\n                if (_this55.options.ignoreErrors) {\n                  _this55.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorColorSpace\n                  });\n                  (0, _util.warn)(\"parseColorSpace - ignoring ColorSpace: \\\"\".concat(reason, \"\\\".\"));\n                  return null;\n                }\n                throw reason;\n              });\n            }\n          }, {\n            key: \"parseShading\",\n            value: function parseShading(_ref42) {\n              var shading = _ref42.shading,\n                resources = _ref42.resources,\n                localColorSpaceCache = _ref42.localColorSpaceCache,\n                localShadingPatternCache = _ref42.localShadingPatternCache;\n              var id = localShadingPatternCache.get(shading);\n              if (!id) {\n                var shadingFill = _pattern.Pattern.parseShading(shading, this.xref, resources, this.handler, this._pdfFunctionFactory, localColorSpaceCache);\n                var patternIR = shadingFill.getIR();\n                id = \"pattern_\".concat(this.idFactory.createObjId());\n                localShadingPatternCache.set(shading, id);\n                this.handler.send(\"obj\", [id, this.pageIndex, \"Pattern\", patternIR]);\n              }\n              return id;\n            }\n          }, {\n            key: \"handleColorN\",\n            value: function handleColorN(operatorList, fn, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache) {\n              var patternName = args.pop();\n              if (patternName instanceof _primitives.Name) {\n                var rawPattern = patterns.getRaw(patternName.name);\n                var localTilingPattern = rawPattern instanceof _primitives.Ref && localTilingPatternCache.getByRef(rawPattern);\n                if (localTilingPattern) {\n                  try {\n                    var color = cs.base ? cs.base.getRgb(args, 0) : null;\n                    var tilingPatternIR = (0, _pattern.getTilingPatternIR)(localTilingPattern.operatorListIR, localTilingPattern.dict, color);\n                    operatorList.addOp(fn, tilingPatternIR);\n                    return undefined;\n                  } catch (ex) {}\n                }\n                var pattern = this.xref.fetchIfRef(rawPattern);\n                if (pattern) {\n                  var dict = pattern instanceof _base_stream.BaseStream ? pattern.dict : pattern;\n                  var typeNum = dict.get(\"PatternType\");\n                  if (typeNum === PatternType.TILING) {\n                    var _color = cs.base ? cs.base.getRgb(args, 0) : null;\n                    return this.handleTilingType(fn, _color, resources, pattern, dict, operatorList, task, localTilingPatternCache);\n                  } else if (typeNum === PatternType.SHADING) {\n                    var shading = dict.get(\"Shading\");\n                    var matrix = dict.getArray(\"Matrix\");\n                    var objId = this.parseShading({\n                      shading: shading,\n                      resources: resources,\n                      localColorSpaceCache: localColorSpaceCache,\n                      localShadingPatternCache: localShadingPatternCache\n                    });\n                    operatorList.addOp(fn, [\"Shading\", objId, matrix]);\n                    return undefined;\n                  }\n                  throw new _util.FormatError(\"Unknown PatternType: \".concat(typeNum));\n                }\n              }\n              throw new _util.FormatError(\"Unknown PatternName: \".concat(patternName));\n            }\n          }, {\n            key: \"_parseVisibilityExpression\",\n            value: function _parseVisibilityExpression(array, nestingCounter, currentResult) {\n              var MAX_NESTING = 10;\n              if (++nestingCounter > MAX_NESTING) {\n                (0, _util.warn)(\"Visibility expression is too deeply nested\");\n                return;\n              }\n              var length = array.length;\n              var operator = this.xref.fetchIfRef(array[0]);\n              if (length < 2 || !(operator instanceof _primitives.Name)) {\n                (0, _util.warn)(\"Invalid visibility expression\");\n                return;\n              }\n              switch (operator.name) {\n                case \"And\":\n                case \"Or\":\n                case \"Not\":\n                  currentResult.push(operator.name);\n                  break;\n                default:\n                  (0, _util.warn)(\"Invalid operator \".concat(operator.name, \" in visibility expression\"));\n                  return;\n              }\n              for (var i = 1; i < length; i++) {\n                var raw = array[i];\n                var object = this.xref.fetchIfRef(raw);\n                if (Array.isArray(object)) {\n                  var nestedResult = [];\n                  currentResult.push(nestedResult);\n                  this._parseVisibilityExpression(object, nestingCounter, nestedResult);\n                } else if (raw instanceof _primitives.Ref) {\n                  currentResult.push(raw.toString());\n                }\n              }\n            }\n          }, {\n            key: \"parseMarkedContentProps\",\n            value: function () {\n              var _parseMarkedContentProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(contentProperties, resources) {\n                var optionalContent, properties, optionalContentType, expression, result, optionalContentGroups, groupIds, _iterator64, _step64, ocg;\n                return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n                  while (1) {\n                    switch (_context43.prev = _context43.next) {\n                      case 0:\n                        if (!(contentProperties instanceof _primitives.Name)) {\n                          _context43.next = 5;\n                          break;\n                        }\n                        properties = resources.get(\"Properties\");\n                        optionalContent = properties.get(contentProperties.name);\n                        _context43.next = 10;\n                        break;\n                      case 5:\n                        if (!(contentProperties instanceof _primitives.Dict)) {\n                          _context43.next = 9;\n                          break;\n                        }\n                        optionalContent = contentProperties;\n                        _context43.next = 10;\n                        break;\n                      case 9:\n                        throw new _util.FormatError(\"Optional content properties malformed.\");\n                      case 10:\n                        optionalContentType = optionalContent.get(\"Type\").name;\n                        if (!(optionalContentType === \"OCG\")) {\n                          _context43.next = 15;\n                          break;\n                        }\n                        return _context43.abrupt(\"return\", {\n                          type: optionalContentType,\n                          id: optionalContent.objId\n                        });\n                      case 15:\n                        if (!(optionalContentType === \"OCMD\")) {\n                          _context43.next = 31;\n                          break;\n                        }\n                        expression = optionalContent.get(\"VE\");\n                        if (!Array.isArray(expression)) {\n                          _context43.next = 22;\n                          break;\n                        }\n                        result = [];\n                        this._parseVisibilityExpression(expression, 0, result);\n                        if (!(result.length > 0)) {\n                          _context43.next = 22;\n                          break;\n                        }\n                        return _context43.abrupt(\"return\", {\n                          type: \"OCMD\",\n                          expression: result\n                        });\n                      case 22:\n                        optionalContentGroups = optionalContent.get(\"OCGs\");\n                        if (!(Array.isArray(optionalContentGroups) || optionalContentGroups instanceof _primitives.Dict)) {\n                          _context43.next = 29;\n                          break;\n                        }\n                        groupIds = [];\n                        if (Array.isArray(optionalContentGroups)) {\n                          _iterator64 = _createForOfIteratorHelper(optionalContentGroups);\n                          try {\n                            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {\n                              ocg = _step64.value;\n                              groupIds.push(ocg.toString());\n                            }\n                          } catch (err) {\n                            _iterator64.e(err);\n                          } finally {\n                            _iterator64.f();\n                          }\n                        } else {\n                          groupIds.push(optionalContentGroups.objId);\n                        }\n                        return _context43.abrupt(\"return\", {\n                          type: optionalContentType,\n                          ids: groupIds,\n                          policy: optionalContent.get(\"P\") instanceof _primitives.Name ? optionalContent.get(\"P\").name : null,\n                          expression: null\n                        });\n                      case 29:\n                        if (!(optionalContentGroups instanceof _primitives.Ref)) {\n                          _context43.next = 31;\n                          break;\n                        }\n                        return _context43.abrupt(\"return\", {\n                          type: optionalContentType,\n                          id: optionalContentGroups.toString()\n                        });\n                      case 31:\n                        return _context43.abrupt(\"return\", null);\n                      case 32:\n                      case \"end\":\n                        return _context43.stop();\n                    }\n                  }\n                }, _callee43, this);\n              }));\n              function parseMarkedContentProps(_x101, _x102) {\n                return _parseMarkedContentProps.apply(this, arguments);\n              }\n              return parseMarkedContentProps;\n            }()\n          }, {\n            key: \"getOperatorList\",\n            value: function getOperatorList(_ref43) {\n              var _this56 = this;\n              var stream = _ref43.stream,\n                task = _ref43.task,\n                resources = _ref43.resources,\n                operatorList = _ref43.operatorList,\n                _ref43$initialState = _ref43.initialState,\n                initialState = _ref43$initialState === void 0 ? null : _ref43$initialState,\n                _ref43$fallbackFontDi = _ref43.fallbackFontDict,\n                fallbackFontDict = _ref43$fallbackFontDi === void 0 ? null : _ref43$fallbackFontDi;\n              resources = resources || _primitives.Dict.empty;\n              initialState = initialState || new EvalState();\n              if (!operatorList) {\n                throw new Error('getOperatorList: missing \"operatorList\" parameter');\n              }\n              var self = this;\n              var xref = this.xref;\n              var parsingText = false;\n              var localImageCache = new _image_utils.LocalImageCache();\n              var localColorSpaceCache = new _image_utils.LocalColorSpaceCache();\n              var localGStateCache = new _image_utils.LocalGStateCache();\n              var localTilingPatternCache = new _image_utils.LocalTilingPatternCache();\n              var localShadingPatternCache = new Map();\n              var xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n              var patterns = resources.get(\"Pattern\") || _primitives.Dict.empty;\n              var stateManager = new StateManager(initialState);\n              var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n              var timeSlotManager = new TimeSlotManager();\n              function closePendingRestoreOPS(argument) {\n                for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n                  operatorList.addOp(_util.OPS.restore, []);\n                }\n              }\n              return new Promise(function promiseBody(resolve, reject) {\n                var next = function next(promise) {\n                  Promise.all([promise, operatorList.ready]).then(function () {\n                    try {\n                      promiseBody(resolve, reject);\n                    } catch (ex) {\n                      reject(ex);\n                    }\n                  }, reject);\n                };\n                task.ensureNotTerminated();\n                timeSlotManager.reset();\n                var operation = {};\n                var stop, i, ii, cs, name, isValidName;\n                while (!(stop = timeSlotManager.check())) {\n                  operation.args = null;\n                  if (!preprocessor.read(operation)) {\n                    break;\n                  }\n                  var args = operation.args;\n                  var fn = operation.fn;\n                  switch (fn | 0) {\n                    case _util.OPS.paintXObject:\n                      isValidName = args[0] instanceof _primitives.Name;\n                      name = args[0].name;\n                      if (isValidName) {\n                        var localImage = localImageCache.getByName(name);\n                        if (localImage) {\n                          operatorList.addImageOps(localImage.fn, localImage.args, localImage.optionalContent);\n                          incrementCachedImageMaskCount(localImage);\n                          args = null;\n                          continue;\n                        }\n                      }\n                      next(new Promise(function (resolveXObject, rejectXObject) {\n                        if (!isValidName) {\n                          throw new _util.FormatError(\"XObject must be referred to by name.\");\n                        }\n                        var xobj = xobjs.getRaw(name);\n                        if (xobj instanceof _primitives.Ref) {\n                          var _localImage = localImageCache.getByRef(xobj);\n                          if (_localImage) {\n                            operatorList.addImageOps(_localImage.fn, _localImage.args, _localImage.optionalContent);\n                            incrementCachedImageMaskCount(_localImage);\n                            resolveXObject();\n                            return;\n                          }\n                          var globalImage = self.globalImageCache.getData(xobj, self.pageIndex);\n                          if (globalImage) {\n                            operatorList.addDependency(globalImage.objId);\n                            operatorList.addImageOps(globalImage.fn, globalImage.args, globalImage.optionalContent);\n                            resolveXObject();\n                            return;\n                          }\n                          xobj = xref.fetch(xobj);\n                        }\n                        if (!(xobj instanceof _base_stream.BaseStream)) {\n                          throw new _util.FormatError(\"XObject should be a stream\");\n                        }\n                        var type = xobj.dict.get(\"Subtype\");\n                        if (!(type instanceof _primitives.Name)) {\n                          throw new _util.FormatError(\"XObject should have a Name subtype\");\n                        }\n                        if (type.name === \"Form\") {\n                          stateManager.save();\n                          self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone(), localColorSpaceCache).then(function () {\n                            stateManager.restore();\n                            resolveXObject();\n                          }, rejectXObject);\n                          return;\n                        } else if (type.name === \"Image\") {\n                          self.buildPaintImageXObject({\n                            resources: resources,\n                            image: xobj,\n                            operatorList: operatorList,\n                            cacheKey: name,\n                            localImageCache: localImageCache,\n                            localColorSpaceCache: localColorSpaceCache\n                          }).then(resolveXObject, rejectXObject);\n                          return;\n                        } else if (type.name === \"PS\") {\n                          (0, _util.info)(\"Ignored XObject subtype PS\");\n                        } else {\n                          throw new _util.FormatError(\"Unhandled XObject subtype \".concat(type.name));\n                        }\n                        resolveXObject();\n                      }).catch(function (reason) {\n                        if (reason instanceof _util.AbortException) {\n                          return;\n                        }\n                        if (self.options.ignoreErrors) {\n                          self.handler.send(\"UnsupportedFeature\", {\n                            featureId: _util.UNSUPPORTED_FEATURES.errorXObject\n                          });\n                          (0, _util.warn)(\"getOperatorList - ignoring XObject: \\\"\".concat(reason, \"\\\".\"));\n                          return;\n                        }\n                        throw reason;\n                      }));\n                      return;\n                    case _util.OPS.setFont:\n                      var fontSize = args[1];\n                      next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state, fallbackFontDict).then(function (loadedName) {\n                        operatorList.addDependency(loadedName);\n                        operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);\n                      }));\n                      return;\n                    case _util.OPS.beginText:\n                      parsingText = true;\n                      break;\n                    case _util.OPS.endText:\n                      parsingText = false;\n                      break;\n                    case _util.OPS.endInlineImage:\n                      var cacheKey = args[0].cacheKey;\n                      if (cacheKey) {\n                        var _localImage2 = localImageCache.getByName(cacheKey);\n                        if (_localImage2) {\n                          operatorList.addImageOps(_localImage2.fn, _localImage2.args, _localImage2.optionalContent);\n                          incrementCachedImageMaskCount(_localImage2);\n                          args = null;\n                          continue;\n                        }\n                      }\n                      next(self.buildPaintImageXObject({\n                        resources: resources,\n                        image: args[0],\n                        isInline: true,\n                        operatorList: operatorList,\n                        cacheKey: cacheKey,\n                        localImageCache: localImageCache,\n                        localColorSpaceCache: localColorSpaceCache\n                      }));\n                      return;\n                    case _util.OPS.showText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      args[0] = self.handleText(args[0], stateManager.state);\n                      break;\n                    case _util.OPS.showSpacedText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      var arr = args[0];\n                      var combinedGlyphs = [];\n                      var arrLength = arr.length;\n                      var state = stateManager.state;\n                      for (i = 0; i < arrLength; ++i) {\n                        var arrItem = arr[i];\n                        if (typeof arrItem === \"string\") {\n                          Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));\n                        } else if (typeof arrItem === \"number\") {\n                          combinedGlyphs.push(arrItem);\n                        }\n                      }\n                      args[0] = combinedGlyphs;\n                      fn = _util.OPS.showText;\n                      break;\n                    case _util.OPS.nextLineShowText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      operatorList.addOp(_util.OPS.nextLine);\n                      args[0] = self.handleText(args[0], stateManager.state);\n                      fn = _util.OPS.showText;\n                      break;\n                    case _util.OPS.nextLineSetSpacingShowText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      operatorList.addOp(_util.OPS.nextLine);\n                      operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);\n                      operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);\n                      args[0] = self.handleText(args[0], stateManager.state);\n                      fn = _util.OPS.showText;\n                      break;\n                    case _util.OPS.setTextRenderingMode:\n                      stateManager.state.textRenderingMode = args[0];\n                      break;\n                    case _util.OPS.setFillColorSpace:\n                      {\n                        var cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n                        if (cachedColorSpace) {\n                          stateManager.state.fillColorSpace = cachedColorSpace;\n                          continue;\n                        }\n                        next(self.parseColorSpace({\n                          cs: args[0],\n                          resources: resources,\n                          localColorSpaceCache: localColorSpaceCache\n                        }).then(function (colorSpace) {\n                          if (colorSpace) {\n                            stateManager.state.fillColorSpace = colorSpace;\n                          }\n                        }));\n                        return;\n                      }\n                    case _util.OPS.setStrokeColorSpace:\n                      {\n                        var _cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n                        if (_cachedColorSpace) {\n                          stateManager.state.strokeColorSpace = _cachedColorSpace;\n                          continue;\n                        }\n                        next(self.parseColorSpace({\n                          cs: args[0],\n                          resources: resources,\n                          localColorSpaceCache: localColorSpaceCache\n                        }).then(function (colorSpace) {\n                          if (colorSpace) {\n                            stateManager.state.strokeColorSpace = colorSpace;\n                          }\n                        }));\n                        return;\n                      }\n                    case _util.OPS.setFillColor:\n                      cs = stateManager.state.fillColorSpace;\n                      args = cs.getRgb(args, 0);\n                      fn = _util.OPS.setFillRGBColor;\n                      break;\n                    case _util.OPS.setStrokeColor:\n                      cs = stateManager.state.strokeColorSpace;\n                      args = cs.getRgb(args, 0);\n                      fn = _util.OPS.setStrokeRGBColor;\n                      break;\n                    case _util.OPS.setFillGray:\n                      stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n                      args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n                      fn = _util.OPS.setFillRGBColor;\n                      break;\n                    case _util.OPS.setStrokeGray:\n                      stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n                      args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n                      fn = _util.OPS.setStrokeRGBColor;\n                      break;\n                    case _util.OPS.setFillCMYKColor:\n                      stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n                      args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n                      fn = _util.OPS.setFillRGBColor;\n                      break;\n                    case _util.OPS.setStrokeCMYKColor:\n                      stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n                      args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n                      fn = _util.OPS.setStrokeRGBColor;\n                      break;\n                    case _util.OPS.setFillRGBColor:\n                      stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;\n                      args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n                      break;\n                    case _util.OPS.setStrokeRGBColor:\n                      stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;\n                      args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n                      break;\n                    case _util.OPS.setFillColorN:\n                      cs = stateManager.state.fillColorSpace;\n                      if (cs.name === \"Pattern\") {\n                        next(self.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));\n                        return;\n                      }\n                      args = cs.getRgb(args, 0);\n                      fn = _util.OPS.setFillRGBColor;\n                      break;\n                    case _util.OPS.setStrokeColorN:\n                      cs = stateManager.state.strokeColorSpace;\n                      if (cs.name === \"Pattern\") {\n                        next(self.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));\n                        return;\n                      }\n                      args = cs.getRgb(args, 0);\n                      fn = _util.OPS.setStrokeRGBColor;\n                      break;\n                    case _util.OPS.shadingFill:\n                      var shadingRes = resources.get(\"Shading\");\n                      if (!shadingRes) {\n                        throw new _util.FormatError(\"No shading resource found\");\n                      }\n                      var shading = shadingRes.get(args[0].name);\n                      if (!shading) {\n                        throw new _util.FormatError(\"No shading object found\");\n                      }\n                      var patternId = self.parseShading({\n                        shading: shading,\n                        resources: resources,\n                        localColorSpaceCache: localColorSpaceCache,\n                        localShadingPatternCache: localShadingPatternCache\n                      });\n                      args = [patternId];\n                      fn = _util.OPS.shadingFill;\n                      break;\n                    case _util.OPS.setGState:\n                      isValidName = args[0] instanceof _primitives.Name;\n                      name = args[0].name;\n                      if (isValidName) {\n                        var localGStateObj = localGStateCache.getByName(name);\n                        if (localGStateObj) {\n                          if (localGStateObj.length > 0) {\n                            operatorList.addOp(_util.OPS.setGState, [localGStateObj]);\n                          }\n                          args = null;\n                          continue;\n                        }\n                      }\n                      next(new Promise(function (resolveGState, rejectGState) {\n                        if (!isValidName) {\n                          throw new _util.FormatError(\"GState must be referred to by name.\");\n                        }\n                        var extGState = resources.get(\"ExtGState\");\n                        if (!(extGState instanceof _primitives.Dict)) {\n                          throw new _util.FormatError(\"ExtGState should be a dictionary.\");\n                        }\n                        var gState = extGState.get(name);\n                        if (!(gState instanceof _primitives.Dict)) {\n                          throw new _util.FormatError(\"GState should be a dictionary.\");\n                        }\n                        self.setGState({\n                          resources: resources,\n                          gState: gState,\n                          operatorList: operatorList,\n                          cacheKey: name,\n                          task: task,\n                          stateManager: stateManager,\n                          localGStateCache: localGStateCache,\n                          localColorSpaceCache: localColorSpaceCache\n                        }).then(resolveGState, rejectGState);\n                      }).catch(function (reason) {\n                        if (reason instanceof _util.AbortException) {\n                          return;\n                        }\n                        if (self.options.ignoreErrors) {\n                          self.handler.send(\"UnsupportedFeature\", {\n                            featureId: _util.UNSUPPORTED_FEATURES.errorExtGState\n                          });\n                          (0, _util.warn)(\"getOperatorList - ignoring ExtGState: \\\"\".concat(reason, \"\\\".\"));\n                          return;\n                        }\n                        throw reason;\n                      }));\n                      return;\n                    case _util.OPS.moveTo:\n                    case _util.OPS.lineTo:\n                    case _util.OPS.curveTo:\n                    case _util.OPS.curveTo2:\n                    case _util.OPS.curveTo3:\n                    case _util.OPS.closePath:\n                    case _util.OPS.rectangle:\n                      self.buildPath(operatorList, fn, args, parsingText);\n                      continue;\n                    case _util.OPS.markPoint:\n                    case _util.OPS.markPointProps:\n                    case _util.OPS.beginCompat:\n                    case _util.OPS.endCompat:\n                      continue;\n                    case _util.OPS.beginMarkedContentProps:\n                      if (!(args[0] instanceof _primitives.Name)) {\n                        (0, _util.warn)(\"Expected name for beginMarkedContentProps arg0=\".concat(args[0]));\n                        continue;\n                      }\n                      if (args[0].name === \"OC\") {\n                        next(self.parseMarkedContentProps(args[1], resources).then(function (data) {\n                          operatorList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", data]);\n                        }).catch(function (reason) {\n                          if (reason instanceof _util.AbortException) {\n                            return;\n                          }\n                          if (self.options.ignoreErrors) {\n                            self.handler.send(\"UnsupportedFeature\", {\n                              featureId: _util.UNSUPPORTED_FEATURES.errorMarkedContent\n                            });\n                            (0, _util.warn)(\"getOperatorList - ignoring beginMarkedContentProps: \\\"\".concat(reason, \"\\\".\"));\n                            return;\n                          }\n                          throw reason;\n                        }));\n                        return;\n                      }\n                      args = [args[0].name, args[1] instanceof _primitives.Dict ? args[1].get(\"MCID\") : null];\n                      break;\n                    case _util.OPS.beginMarkedContent:\n                    case _util.OPS.endMarkedContent:\n                    default:\n                      if (args !== null) {\n                        for (i = 0, ii = args.length; i < ii; i++) {\n                          if (args[i] instanceof _primitives.Dict) {\n                            break;\n                          }\n                        }\n                        if (i < ii) {\n                          (0, _util.warn)(\"getOperatorList - ignoring operator: \" + fn);\n                          continue;\n                        }\n                      }\n                  }\n                  operatorList.addOp(fn, args);\n                }\n                if (stop) {\n                  next(deferred);\n                  return;\n                }\n                closePendingRestoreOPS();\n                resolve();\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n                if (_this56.options.ignoreErrors) {\n                  _this56.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n                  });\n                  (0, _util.warn)(\"getOperatorList - ignoring errors during \\\"\".concat(task.name, \"\\\" \") + \"task: \\\"\".concat(reason, \"\\\".\"));\n                  closePendingRestoreOPS();\n                  return;\n                }\n                throw reason;\n              });\n            }\n          }, {\n            key: \"getTextContent\",\n            value: function getTextContent(_ref44) {\n              var _this57 = this;\n              var stream = _ref44.stream,\n                task = _ref44.task,\n                resources = _ref44.resources,\n                _ref44$stateManager = _ref44.stateManager,\n                stateManager = _ref44$stateManager === void 0 ? null : _ref44$stateManager,\n                _ref44$combineTextIte = _ref44.combineTextItems,\n                combineTextItems = _ref44$combineTextIte === void 0 ? false : _ref44$combineTextIte,\n                _ref44$includeMarkedC = _ref44.includeMarkedContent,\n                includeMarkedContent = _ref44$includeMarkedC === void 0 ? false : _ref44$includeMarkedC,\n                sink = _ref44.sink,\n                _ref44$seenStyles = _ref44.seenStyles,\n                seenStyles = _ref44$seenStyles === void 0 ? new Set() : _ref44$seenStyles,\n                viewBox = _ref44.viewBox;\n              resources = resources || _primitives.Dict.empty;\n              stateManager = stateManager || new StateManager(new TextState());\n              var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();\n              var textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              var textContentItem = {\n                initialized: false,\n                str: [],\n                totalWidth: 0,\n                totalHeight: 0,\n                width: 0,\n                height: 0,\n                vertical: false,\n                prevTransform: null,\n                textAdvanceScale: 0,\n                spaceInFlowMin: 0,\n                spaceInFlowMax: 0,\n                trackingSpaceMin: Infinity,\n                negativeSpaceMax: -Infinity,\n                notASpace: -Infinity,\n                transform: null,\n                fontName: null,\n                hasEOL: false\n              };\n              var twoLastChars = [\" \", \" \"];\n              var twoLastCharsPos = 0;\n              function saveLastChar(char) {\n                var nextPos = (twoLastCharsPos + 1) % 2;\n                var ret = twoLastChars[twoLastCharsPos] !== \" \" && twoLastChars[nextPos] === \" \";\n                twoLastChars[twoLastCharsPos] = char;\n                twoLastCharsPos = nextPos;\n                return ret;\n              }\n              function resetLastChars() {\n                twoLastChars[0] = twoLastChars[1] = \" \";\n                twoLastCharsPos = 0;\n              }\n              var TRACKING_SPACE_FACTOR = 0.1;\n              var NOT_A_SPACE_FACTOR = 0.03;\n              var NEGATIVE_SPACE_FACTOR = -0.2;\n              var SPACE_IN_FLOW_MIN_FACTOR = 0.1;\n              var SPACE_IN_FLOW_MAX_FACTOR = 0.6;\n              var self = this;\n              var xref = this.xref;\n              var showSpacedTextBuffer = [];\n              var xobjs = null;\n              var emptyXObjectCache = new _image_utils.LocalImageCache();\n              var emptyGStateCache = new _image_utils.LocalGStateCache();\n              var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n              var textState;\n              function getCurrentTextTransform() {\n                var font = textState.font;\n                var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];\n                if (font.isType3Font && (textState.fontSize <= 1 || font.isCharBBox) && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {\n                  var glyphHeight = font.bbox[3] - font.bbox[1];\n                  if (glyphHeight > 0) {\n                    tsm[3] *= glyphHeight * textState.fontMatrix[3];\n                  }\n                }\n                return _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));\n              }\n              function ensureTextContentItem() {\n                if (textContentItem.initialized) {\n                  return textContentItem;\n                }\n                var font = textState.font,\n                  loadedName = font.loadedName;\n                if (!seenStyles.has(loadedName)) {\n                  seenStyles.add(loadedName);\n                  textContent.styles[loadedName] = {\n                    fontFamily: font.fallbackName,\n                    ascent: font.ascent,\n                    descent: font.descent,\n                    vertical: font.vertical\n                  };\n                }\n                textContentItem.fontName = loadedName;\n                var trm = textContentItem.transform = getCurrentTextTransform();\n                if (!font.vertical) {\n                  textContentItem.width = textContentItem.totalWidth = 0;\n                  textContentItem.height = textContentItem.totalHeight = Math.hypot(trm[2], trm[3]);\n                  textContentItem.vertical = false;\n                } else {\n                  textContentItem.width = textContentItem.totalWidth = Math.hypot(trm[0], trm[1]);\n                  textContentItem.height = textContentItem.totalHeight = 0;\n                  textContentItem.vertical = true;\n                }\n                var scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);\n                var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);\n                textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n                textContentItem.trackingSpaceMin = textState.fontSize * TRACKING_SPACE_FACTOR;\n                textContentItem.notASpace = textState.fontSize * NOT_A_SPACE_FACTOR;\n                textContentItem.negativeSpaceMax = textState.fontSize * NEGATIVE_SPACE_FACTOR;\n                textContentItem.spaceInFlowMin = textState.fontSize * SPACE_IN_FLOW_MIN_FACTOR;\n                textContentItem.spaceInFlowMax = textState.fontSize * SPACE_IN_FLOW_MAX_FACTOR;\n                textContentItem.hasEOL = false;\n                textContentItem.initialized = true;\n                return textContentItem;\n              }\n              function updateAdvanceScale() {\n                if (!textContentItem.initialized) {\n                  return;\n                }\n                var scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);\n                var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);\n                var scaleFactor = scaleCtmX * scaleLineX;\n                if (scaleFactor === textContentItem.textAdvanceScale) {\n                  return;\n                }\n                if (!textContentItem.vertical) {\n                  textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;\n                  textContentItem.width = 0;\n                } else {\n                  textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;\n                  textContentItem.height = 0;\n                }\n                textContentItem.textAdvanceScale = scaleFactor;\n              }\n              function runBidiTransform(textChunk) {\n                var text = textChunk.str.join(\"\");\n                var bidiResult = (0, _bidi.bidi)(text, -1, textChunk.vertical);\n                return {\n                  str: bidiResult.str,\n                  dir: bidiResult.dir,\n                  width: Math.abs(textChunk.totalWidth),\n                  height: Math.abs(textChunk.totalHeight),\n                  transform: textChunk.transform,\n                  fontName: textChunk.fontName,\n                  hasEOL: textChunk.hasEOL\n                };\n              }\n              function handleSetFont(fontName, fontRef) {\n                return self.loadFont(fontName, fontRef, resources).then(function (translated) {\n                  if (!translated.font.isType3Font) {\n                    return translated;\n                  }\n                  return translated.loadType3Data(self, resources, task).catch(function () {}).then(function () {\n                    return translated;\n                  });\n                }).then(function (translated) {\n                  textState.font = translated.font;\n                  textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n                });\n              }\n              function applyInverseRotation(x, y, matrix) {\n                var scale = Math.hypot(matrix[0], matrix[1]);\n                return [(matrix[0] * x + matrix[1] * y) / scale, (matrix[2] * x + matrix[3] * y) / scale];\n              }\n              function compareWithLastPosition() {\n                var currentTransform = getCurrentTextTransform();\n                var posX = currentTransform[4];\n                var posY = currentTransform[5];\n                var shiftedX = posX - viewBox[0];\n                var shiftedY = posY - viewBox[1];\n                if (shiftedX < 0 || shiftedX > viewBox[2] || shiftedY < 0 || shiftedY > viewBox[3]) {\n                  return false;\n                }\n                if (!combineTextItems || !textState.font || !textContentItem.prevTransform) {\n                  return true;\n                }\n                var lastPosX = textContentItem.prevTransform[4];\n                var lastPosY = textContentItem.prevTransform[5];\n                if (lastPosX === posX && lastPosY === posY) {\n                  return true;\n                }\n                var rotate = -1;\n                if (currentTransform[0] && currentTransform[1] === 0 && currentTransform[2] === 0) {\n                  rotate = currentTransform[0] > 0 ? 0 : 180;\n                } else if (currentTransform[1] && currentTransform[0] === 0 && currentTransform[3] === 0) {\n                  rotate = currentTransform[1] > 0 ? 90 : 270;\n                }\n                switch (rotate) {\n                  case 0:\n                    break;\n                  case 90:\n                    var _ref45 = [posY, posX];\n                    posX = _ref45[0];\n                    posY = _ref45[1];\n                    var _ref46 = [lastPosY, lastPosX];\n                    lastPosX = _ref46[0];\n                    lastPosY = _ref46[1];\n                    break;\n                  case 180:\n                    var _ref47 = [-posX, -posY, -lastPosX, -lastPosY];\n                    posX = _ref47[0];\n                    posY = _ref47[1];\n                    lastPosX = _ref47[2];\n                    lastPosY = _ref47[3];\n                    break;\n                  case 270:\n                    var _ref48 = [-posY, -posX];\n                    posX = _ref48[0];\n                    posY = _ref48[1];\n                    var _ref49 = [-lastPosY, -lastPosX];\n                    lastPosX = _ref49[0];\n                    lastPosY = _ref49[1];\n                    break;\n                  default:\n                    var _applyInverseRotation = applyInverseRotation(posX, posY, currentTransform);\n                    var _applyInverseRotation2 = _slicedToArray(_applyInverseRotation, 2);\n                    posX = _applyInverseRotation2[0];\n                    posY = _applyInverseRotation2[1];\n                    var _applyInverseRotation3 = applyInverseRotation(lastPosX, lastPosY, textContentItem.prevTransform);\n                    var _applyInverseRotation4 = _slicedToArray(_applyInverseRotation3, 2);\n                    lastPosX = _applyInverseRotation4[0];\n                    lastPosY = _applyInverseRotation4[1];\n                }\n                if (textState.font.vertical) {\n                  var _advanceY = (lastPosY - posY) / textContentItem.textAdvanceScale;\n                  var _advanceX = posX - lastPosX;\n                  var _textOrientation = Math.sign(textContentItem.height);\n                  if (_advanceY < _textOrientation * textContentItem.negativeSpaceMax) {\n                    if (Math.abs(_advanceX) > 0.5 * textContentItem.width) {\n                      appendEOL();\n                      return true;\n                    }\n                    resetLastChars();\n                    flushTextContentItem();\n                    return true;\n                  }\n                  if (Math.abs(_advanceX) > textContentItem.width) {\n                    appendEOL();\n                    return true;\n                  }\n                  if (_advanceY <= _textOrientation * textContentItem.notASpace) {\n                    resetLastChars();\n                  }\n                  if (_advanceY <= _textOrientation * textContentItem.trackingSpaceMin) {\n                    textContentItem.height += _advanceY;\n                  } else if (!addFakeSpaces(_advanceY, textContentItem.prevTransform, _textOrientation)) {\n                    if (textContentItem.str.length === 0) {\n                      resetLastChars();\n                      textContent.items.push({\n                        str: \" \",\n                        dir: \"ltr\",\n                        width: 0,\n                        height: Math.abs(_advanceY),\n                        transform: textContentItem.prevTransform,\n                        fontName: textContentItem.fontName,\n                        hasEOL: false\n                      });\n                    } else {\n                      textContentItem.height += _advanceY;\n                    }\n                  }\n                  return true;\n                }\n                var advanceX = (posX - lastPosX) / textContentItem.textAdvanceScale;\n                var advanceY = posY - lastPosY;\n                var textOrientation = Math.sign(textContentItem.width);\n                if (advanceX < textOrientation * textContentItem.negativeSpaceMax) {\n                  if (Math.abs(advanceY) > 0.5 * textContentItem.height) {\n                    appendEOL();\n                    return true;\n                  }\n                  resetLastChars();\n                  flushTextContentItem();\n                  return true;\n                }\n                if (Math.abs(advanceY) > textContentItem.height) {\n                  appendEOL();\n                  return true;\n                }\n                if (advanceX <= textOrientation * textContentItem.notASpace) {\n                  resetLastChars();\n                }\n                if (advanceX <= textOrientation * textContentItem.trackingSpaceMin) {\n                  textContentItem.width += advanceX;\n                } else if (!addFakeSpaces(advanceX, textContentItem.prevTransform, textOrientation)) {\n                  if (textContentItem.str.length === 0) {\n                    resetLastChars();\n                    textContent.items.push({\n                      str: \" \",\n                      dir: \"ltr\",\n                      width: Math.abs(advanceX),\n                      height: 0,\n                      transform: textContentItem.prevTransform,\n                      fontName: textContentItem.fontName,\n                      hasEOL: false\n                    });\n                  } else {\n                    textContentItem.width += advanceX;\n                  }\n                }\n                return true;\n              }\n              function buildTextContentItem(_ref50) {\n                var chars = _ref50.chars,\n                  extraSpacing = _ref50.extraSpacing;\n                var font = textState.font;\n                if (!chars) {\n                  var charSpacing = textState.charSpacing + extraSpacing;\n                  if (charSpacing) {\n                    if (!font.vertical) {\n                      textState.translateTextMatrix(charSpacing * textState.textHScale, 0);\n                    } else {\n                      textState.translateTextMatrix(0, -charSpacing);\n                    }\n                  }\n                  return;\n                }\n                var glyphs = font.charsToGlyphs(chars);\n                var scale = textState.fontMatrix[0] * textState.fontSize;\n                for (var i = 0, ii = glyphs.length; i < ii; i++) {\n                  var glyph = glyphs[i];\n                  if (glyph.isInvisibleFormatMark) {\n                    continue;\n                  }\n                  var _charSpacing = textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);\n                  var glyphWidth = glyph.width;\n                  if (font.vertical) {\n                    glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;\n                  }\n                  var scaledDim = glyphWidth * scale;\n                  if (glyph.isWhitespace) {\n                    if (!font.vertical) {\n                      _charSpacing += scaledDim + textState.wordSpacing;\n                      textState.translateTextMatrix(_charSpacing * textState.textHScale, 0);\n                    } else {\n                      _charSpacing += -scaledDim + textState.wordSpacing;\n                      textState.translateTextMatrix(0, -_charSpacing);\n                    }\n                    saveLastChar(\" \");\n                    continue;\n                  }\n                  if (!compareWithLastPosition()) {\n                    continue;\n                  }\n                  var textChunk = ensureTextContentItem();\n                  if (glyph.isZeroWidthDiacritic) {\n                    scaledDim = 0;\n                  }\n                  if (!font.vertical) {\n                    scaledDim *= textState.textHScale;\n                    textState.translateTextMatrix(scaledDim, 0);\n                    textChunk.width += scaledDim;\n                  } else {\n                    textState.translateTextMatrix(0, scaledDim);\n                    scaledDim = Math.abs(scaledDim);\n                    textChunk.height += scaledDim;\n                  }\n                  if (scaledDim) {\n                    textChunk.prevTransform = getCurrentTextTransform();\n                  }\n                  var glyphUnicode = glyph.unicode;\n                  glyphUnicode = NormalizedUnicodes[glyphUnicode] || glyphUnicode;\n                  glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);\n                  if (saveLastChar(glyphUnicode)) {\n                    textChunk.str.push(\" \");\n                  }\n                  textChunk.str.push(glyphUnicode);\n                  if (_charSpacing) {\n                    if (!font.vertical) {\n                      textState.translateTextMatrix(_charSpacing * textState.textHScale, 0);\n                    } else {\n                      textState.translateTextMatrix(0, -_charSpacing);\n                    }\n                  }\n                }\n              }\n              function appendEOL() {\n                resetLastChars();\n                if (textContentItem.initialized) {\n                  textContentItem.hasEOL = true;\n                  flushTextContentItem();\n                } else {\n                  textContent.items.push({\n                    str: \"\",\n                    dir: \"ltr\",\n                    width: 0,\n                    height: 0,\n                    transform: getCurrentTextTransform(),\n                    fontName: textState.font.loadedName,\n                    hasEOL: true\n                  });\n                }\n              }\n              function addFakeSpaces(width, transf, textOrientation) {\n                if (textOrientation * textContentItem.spaceInFlowMin <= width && width <= textOrientation * textContentItem.spaceInFlowMax) {\n                  if (textContentItem.initialized) {\n                    resetLastChars();\n                    textContentItem.str.push(\" \");\n                  }\n                  return false;\n                }\n                var fontName = textContentItem.fontName;\n                var height = 0;\n                if (textContentItem.vertical) {\n                  height = width;\n                  width = 0;\n                }\n                flushTextContentItem();\n                resetLastChars();\n                textContent.items.push({\n                  str: \" \",\n                  dir: \"ltr\",\n                  width: Math.abs(width),\n                  height: Math.abs(height),\n                  transform: transf || getCurrentTextTransform(),\n                  fontName: fontName,\n                  hasEOL: false\n                });\n                return true;\n              }\n              function flushTextContentItem() {\n                if (!textContentItem.initialized || !textContentItem.str) {\n                  return;\n                }\n                if (!textContentItem.vertical) {\n                  textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;\n                } else {\n                  textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;\n                }\n                textContent.items.push(runBidiTransform(textContentItem));\n                textContentItem.initialized = false;\n                textContentItem.str.length = 0;\n              }\n              function enqueueChunk() {\n                var batch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n                var length = textContent.items.length;\n                if (length === 0) {\n                  return;\n                }\n                if (batch && length < TEXT_CHUNK_BATCH_SIZE) {\n                  return;\n                }\n                sink.enqueue(textContent, length);\n                textContent.items = [];\n                textContent.styles = Object.create(null);\n              }\n              var timeSlotManager = new TimeSlotManager();\n              return new Promise(function promiseBody(resolve, reject) {\n                var next = function next(promise) {\n                  enqueueChunk(true);\n                  Promise.all([promise, sink.ready]).then(function () {\n                    try {\n                      promiseBody(resolve, reject);\n                    } catch (ex) {\n                      reject(ex);\n                    }\n                  }, reject);\n                };\n                task.ensureNotTerminated();\n                timeSlotManager.reset();\n                var operation = {};\n                var stop,\n                  args = [];\n                while (!(stop = timeSlotManager.check())) {\n                  args.length = 0;\n                  operation.args = args;\n                  if (!preprocessor.read(operation)) {\n                    break;\n                  }\n                  textState = stateManager.state;\n                  var fn = operation.fn;\n                  args = operation.args;\n                  switch (fn | 0) {\n                    case _util.OPS.setFont:\n                      var fontNameArg = args[0].name,\n                        fontSizeArg = args[1];\n                      if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {\n                        break;\n                      }\n                      flushTextContentItem();\n                      textState.fontName = fontNameArg;\n                      textState.fontSize = fontSizeArg;\n                      next(handleSetFont(fontNameArg, null));\n                      return;\n                    case _util.OPS.setTextRise:\n                      textState.textRise = args[0];\n                      break;\n                    case _util.OPS.setHScale:\n                      textState.textHScale = args[0] / 100;\n                      break;\n                    case _util.OPS.setLeading:\n                      textState.leading = args[0];\n                      break;\n                    case _util.OPS.moveText:\n                      textState.translateTextLineMatrix(args[0], args[1]);\n                      textState.textMatrix = textState.textLineMatrix.slice();\n                      break;\n                    case _util.OPS.setLeadingMoveText:\n                      textState.leading = -args[1];\n                      textState.translateTextLineMatrix(args[0], args[1]);\n                      textState.textMatrix = textState.textLineMatrix.slice();\n                      break;\n                    case _util.OPS.nextLine:\n                      textState.carriageReturn();\n                      break;\n                    case _util.OPS.setTextMatrix:\n                      textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                      textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                      updateAdvanceScale();\n                      break;\n                    case _util.OPS.setCharSpacing:\n                      textState.charSpacing = args[0];\n                      break;\n                    case _util.OPS.setWordSpacing:\n                      textState.wordSpacing = args[0];\n                      break;\n                    case _util.OPS.beginText:\n                      textState.textMatrix = _util.IDENTITY_MATRIX.slice();\n                      textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n                      break;\n                    case _util.OPS.showSpacedText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      var spaceFactor = (textState.font.vertical ? 1 : -1) * textState.fontSize / 1000;\n                      var elements = args[0];\n                      for (var i = 0, ii = elements.length; i < ii - 1; i++) {\n                        var _item = elements[i];\n                        if (typeof _item === \"string\") {\n                          showSpacedTextBuffer.push(_item);\n                        } else if (typeof _item === \"number\" && _item !== 0) {\n                          var str = showSpacedTextBuffer.join(\"\");\n                          showSpacedTextBuffer.length = 0;\n                          buildTextContentItem({\n                            chars: str,\n                            extraSpacing: _item * spaceFactor\n                          });\n                        }\n                      }\n                      var item = elements.at(-1);\n                      if (typeof item === \"string\") {\n                        showSpacedTextBuffer.push(item);\n                      }\n                      if (showSpacedTextBuffer.length > 0) {\n                        var _str = showSpacedTextBuffer.join(\"\");\n                        showSpacedTextBuffer.length = 0;\n                        buildTextContentItem({\n                          chars: _str,\n                          extraSpacing: 0\n                        });\n                      }\n                      break;\n                    case _util.OPS.showText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      buildTextContentItem({\n                        chars: args[0],\n                        extraSpacing: 0\n                      });\n                      break;\n                    case _util.OPS.nextLineShowText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      textState.carriageReturn();\n                      buildTextContentItem({\n                        chars: args[0],\n                        extraSpacing: 0\n                      });\n                      break;\n                    case _util.OPS.nextLineSetSpacingShowText:\n                      if (!stateManager.state.font) {\n                        self.ensureStateFont(stateManager.state);\n                        continue;\n                      }\n                      textState.wordSpacing = args[0];\n                      textState.charSpacing = args[1];\n                      textState.carriageReturn();\n                      buildTextContentItem({\n                        chars: args[2],\n                        extraSpacing: 0\n                      });\n                      break;\n                    case _util.OPS.paintXObject:\n                      flushTextContentItem();\n                      if (!xobjs) {\n                        xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n                      }\n                      var isValidName = args[0] instanceof _primitives.Name;\n                      var name = args[0].name;\n                      if (isValidName && emptyXObjectCache.getByName(name)) {\n                        break;\n                      }\n                      next(new Promise(function (resolveXObject, rejectXObject) {\n                        if (!isValidName) {\n                          throw new _util.FormatError(\"XObject must be referred to by name.\");\n                        }\n                        var xobj = xobjs.getRaw(name);\n                        if (xobj instanceof _primitives.Ref) {\n                          if (emptyXObjectCache.getByRef(xobj)) {\n                            resolveXObject();\n                            return;\n                          }\n                          var globalImage = self.globalImageCache.getData(xobj, self.pageIndex);\n                          if (globalImage) {\n                            resolveXObject();\n                            return;\n                          }\n                          xobj = xref.fetch(xobj);\n                        }\n                        if (!(xobj instanceof _base_stream.BaseStream)) {\n                          throw new _util.FormatError(\"XObject should be a stream\");\n                        }\n                        var type = xobj.dict.get(\"Subtype\");\n                        if (!(type instanceof _primitives.Name)) {\n                          throw new _util.FormatError(\"XObject should have a Name subtype\");\n                        }\n                        if (type.name !== \"Form\") {\n                          emptyXObjectCache.set(name, xobj.dict.objId, true);\n                          resolveXObject();\n                          return;\n                        }\n                        var currentState = stateManager.state.clone();\n                        var xObjStateManager = new StateManager(currentState);\n                        var matrix = xobj.dict.getArray(\"Matrix\");\n                        if (Array.isArray(matrix) && matrix.length === 6) {\n                          xObjStateManager.transform(matrix);\n                        }\n                        enqueueChunk();\n                        var sinkWrapper = {\n                          enqueueInvoked: false,\n                          enqueue: function enqueue(chunk, size) {\n                            this.enqueueInvoked = true;\n                            sink.enqueue(chunk, size);\n                          },\n                          get desiredSize() {\n                            return sink.desiredSize;\n                          },\n                          get ready() {\n                            return sink.ready;\n                          }\n                        };\n                        self.getTextContent({\n                          stream: xobj,\n                          task: task,\n                          resources: xobj.dict.get(\"Resources\") || resources,\n                          stateManager: xObjStateManager,\n                          combineTextItems: combineTextItems,\n                          includeMarkedContent: includeMarkedContent,\n                          sink: sinkWrapper,\n                          seenStyles: seenStyles,\n                          viewBox: viewBox\n                        }).then(function () {\n                          if (!sinkWrapper.enqueueInvoked) {\n                            emptyXObjectCache.set(name, xobj.dict.objId, true);\n                          }\n                          resolveXObject();\n                        }, rejectXObject);\n                      }).catch(function (reason) {\n                        if (reason instanceof _util.AbortException) {\n                          return;\n                        }\n                        if (self.options.ignoreErrors) {\n                          (0, _util.warn)(\"getTextContent - ignoring XObject: \\\"\".concat(reason, \"\\\".\"));\n                          return;\n                        }\n                        throw reason;\n                      }));\n                      return;\n                    case _util.OPS.setGState:\n                      isValidName = args[0] instanceof _primitives.Name;\n                      name = args[0].name;\n                      if (isValidName && emptyGStateCache.getByName(name)) {\n                        break;\n                      }\n                      next(new Promise(function (resolveGState, rejectGState) {\n                        if (!isValidName) {\n                          throw new _util.FormatError(\"GState must be referred to by name.\");\n                        }\n                        var extGState = resources.get(\"ExtGState\");\n                        if (!(extGState instanceof _primitives.Dict)) {\n                          throw new _util.FormatError(\"ExtGState should be a dictionary.\");\n                        }\n                        var gState = extGState.get(name);\n                        if (!(gState instanceof _primitives.Dict)) {\n                          throw new _util.FormatError(\"GState should be a dictionary.\");\n                        }\n                        var gStateFont = gState.get(\"Font\");\n                        if (!gStateFont) {\n                          emptyGStateCache.set(name, gState.objId, true);\n                          resolveGState();\n                          return;\n                        }\n                        flushTextContentItem();\n                        textState.fontName = null;\n                        textState.fontSize = gStateFont[1];\n                        handleSetFont(null, gStateFont[0]).then(resolveGState, rejectGState);\n                      }).catch(function (reason) {\n                        if (reason instanceof _util.AbortException) {\n                          return;\n                        }\n                        if (self.options.ignoreErrors) {\n                          (0, _util.warn)(\"getTextContent - ignoring ExtGState: \\\"\".concat(reason, \"\\\".\"));\n                          return;\n                        }\n                        throw reason;\n                      }));\n                      return;\n                    case _util.OPS.beginMarkedContent:\n                      flushTextContentItem();\n                      if (includeMarkedContent) {\n                        textContent.items.push({\n                          type: \"beginMarkedContent\",\n                          tag: args[0] instanceof _primitives.Name ? args[0].name : null\n                        });\n                      }\n                      break;\n                    case _util.OPS.beginMarkedContentProps:\n                      flushTextContentItem();\n                      if (includeMarkedContent) {\n                        var mcid = null;\n                        if (args[1] instanceof _primitives.Dict) {\n                          mcid = args[1].get(\"MCID\");\n                        }\n                        textContent.items.push({\n                          type: \"beginMarkedContentProps\",\n                          id: Number.isInteger(mcid) ? \"\".concat(self.idFactory.getPageObjId(), \"_mcid\").concat(mcid) : null,\n                          tag: args[0] instanceof _primitives.Name ? args[0].name : null\n                        });\n                      }\n                      break;\n                    case _util.OPS.endMarkedContent:\n                      flushTextContentItem();\n                      if (includeMarkedContent) {\n                        textContent.items.push({\n                          type: \"endMarkedContent\"\n                        });\n                      }\n                      break;\n                  }\n                  if (textContent.items.length >= sink.desiredSize) {\n                    stop = true;\n                    break;\n                  }\n                }\n                if (stop) {\n                  next(deferred);\n                  return;\n                }\n                flushTextContentItem();\n                enqueueChunk();\n                resolve();\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n                if (_this57.options.ignoreErrors) {\n                  (0, _util.warn)(\"getTextContent - ignoring errors during \\\"\".concat(task.name, \"\\\" \") + \"task: \\\"\".concat(reason, \"\\\".\"));\n                  flushTextContentItem();\n                  enqueueChunk();\n                  return;\n                }\n                throw reason;\n              });\n            }\n          }, {\n            key: \"extractDataStructures\",\n            value: function extractDataStructures(dict, baseDict, properties) {\n              var _this58 = this;\n              var xref = this.xref;\n              var cidToGidBytes;\n              var toUnicodePromise = this.readToUnicode(properties.toUnicode || dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\"));\n              if (properties.composite) {\n                var cidSystemInfo = dict.get(\"CIDSystemInfo\");\n                if (cidSystemInfo instanceof _primitives.Dict) {\n                  properties.cidSystemInfo = {\n                    registry: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Registry\")),\n                    ordering: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Ordering\")),\n                    supplement: cidSystemInfo.get(\"Supplement\")\n                  };\n                }\n                try {\n                  var cidToGidMap = dict.get(\"CIDToGIDMap\");\n                  if (cidToGidMap instanceof _base_stream.BaseStream) {\n                    cidToGidBytes = cidToGidMap.getBytes();\n                  }\n                } catch (ex) {\n                  if (!this.options.ignoreErrors) {\n                    throw ex;\n                  }\n                  (0, _util.warn)(\"extractDataStructures - ignoring CIDToGIDMap data: \\\"\".concat(ex, \"\\\".\"));\n                }\n              }\n              var differences = [];\n              var baseEncodingName = null;\n              var encoding;\n              if (dict.has(\"Encoding\")) {\n                encoding = dict.get(\"Encoding\");\n                if (encoding instanceof _primitives.Dict) {\n                  baseEncodingName = encoding.get(\"BaseEncoding\");\n                  baseEncodingName = baseEncodingName instanceof _primitives.Name ? baseEncodingName.name : null;\n                  if (encoding.has(\"Differences\")) {\n                    var diffEncoding = encoding.get(\"Differences\");\n                    var index = 0;\n                    for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n                      var data = xref.fetchIfRef(diffEncoding[j]);\n                      if (typeof data === \"number\") {\n                        index = data;\n                      } else if (data instanceof _primitives.Name) {\n                        differences[index++] = data.name;\n                      } else {\n                        throw new _util.FormatError(\"Invalid entry in 'Differences' array: \".concat(data));\n                      }\n                    }\n                  }\n                } else if (encoding instanceof _primitives.Name) {\n                  baseEncodingName = encoding.name;\n                } else {\n                  var msg = \"Encoding is not a Name nor a Dict\";\n                  if (!this.options.ignoreErrors) {\n                    throw new _util.FormatError(msg);\n                  }\n                  (0, _util.warn)(msg);\n                }\n                if (baseEncodingName !== \"MacRomanEncoding\" && baseEncodingName !== \"MacExpertEncoding\" && baseEncodingName !== \"WinAnsiEncoding\") {\n                  baseEncodingName = null;\n                }\n              }\n              if (baseEncodingName) {\n                properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n              } else {\n                var isSymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Symbolic);\n                var isNonsymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Nonsymbolic);\n                encoding = _encodings.StandardEncoding;\n                if (properties.type === \"TrueType\" && !isNonsymbolicFont) {\n                  encoding = _encodings.WinAnsiEncoding;\n                }\n                if (isSymbolicFont) {\n                  encoding = _encodings.MacRomanEncoding;\n                  if (!properties.file || properties.isInternalFont) {\n                    if (/Symbol/i.test(properties.name)) {\n                      encoding = _encodings.SymbolSetEncoding;\n                    } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n                      encoding = _encodings.ZapfDingbatsEncoding;\n                    }\n                  }\n                }\n                properties.defaultEncoding = encoding;\n              }\n              properties.differences = differences;\n              properties.baseEncodingName = baseEncodingName;\n              properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n              properties.dict = dict;\n              return toUnicodePromise.then(function (readToUnicode) {\n                properties.toUnicode = readToUnicode;\n                return _this58.buildToUnicode(properties);\n              }).then(function (builtToUnicode) {\n                properties.toUnicode = builtToUnicode;\n                if (cidToGidBytes) {\n                  properties.cidToGidMap = _this58.readCidToGidMap(cidToGidBytes, builtToUnicode);\n                }\n                return properties;\n              });\n            }\n          }, {\n            key: \"_simpleFontToUnicode\",\n            value: function _simpleFontToUnicode(properties) {\n              var forceGlyphs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              (0, _util.assert)(!properties.composite, \"Must be a simple font.\");\n              var toUnicode = [];\n              var encoding = properties.defaultEncoding.slice();\n              var baseEncodingName = properties.baseEncodingName;\n              var differences = properties.differences;\n              for (var charcode in differences) {\n                var glyphName = differences[charcode];\n                if (glyphName === \".notdef\") {\n                  continue;\n                }\n                encoding[charcode] = glyphName;\n              }\n              var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n              for (var _charcode in encoding) {\n                var _glyphName = encoding[_charcode];\n                if (_glyphName === \"\") {\n                  continue;\n                } else if (glyphsUnicodeMap[_glyphName] === undefined) {\n                  var code = 0;\n                  switch (_glyphName[0]) {\n                    case \"G\":\n                      if (_glyphName.length === 3) {\n                        code = parseInt(_glyphName.substring(1), 16);\n                      }\n                      break;\n                    case \"g\":\n                      if (_glyphName.length === 5) {\n                        code = parseInt(_glyphName.substring(1), 16);\n                      }\n                      break;\n                    case \"C\":\n                    case \"c\":\n                      if (_glyphName.length >= 3 && _glyphName.length <= 4) {\n                        var codeStr = _glyphName.substring(1);\n                        if (forceGlyphs) {\n                          code = parseInt(codeStr, 16);\n                          break;\n                        }\n                        code = +codeStr;\n                        if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {\n                          return this._simpleFontToUnicode(properties, true);\n                        }\n                      }\n                      break;\n                    default:\n                      var unicode = (0, _unicode.getUnicodeForGlyph)(_glyphName, glyphsUnicodeMap);\n                      if (unicode !== -1) {\n                        code = unicode;\n                      }\n                  }\n                  if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {\n                    if (baseEncodingName && code === +_charcode) {\n                      var baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n                      if (baseEncoding && (_glyphName = baseEncoding[_charcode])) {\n                        toUnicode[_charcode] = String.fromCharCode(glyphsUnicodeMap[_glyphName]);\n                        continue;\n                      }\n                    }\n                    toUnicode[_charcode] = String.fromCodePoint(code);\n                  }\n                  continue;\n                }\n                toUnicode[_charcode] = String.fromCharCode(glyphsUnicodeMap[_glyphName]);\n              }\n              return toUnicode;\n            }\n          }, {\n            key: \"buildToUnicode\",\n            value: function () {\n              var _buildToUnicode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(properties) {\n                var _properties$cidSystem, registry, ordering, ucs2CMapName, ucs2CMap, toUnicode;\n                return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n                  while (1) {\n                    switch (_context44.prev = _context44.next) {\n                      case 0:\n                        properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;\n                        if (!properties.hasIncludedToUnicodeMap) {\n                          _context44.next = 4;\n                          break;\n                        }\n                        if (!properties.composite && properties.hasEncoding) {\n                          properties.fallbackToUnicode = this._simpleFontToUnicode(properties);\n                        }\n                        return _context44.abrupt(\"return\", properties.toUnicode);\n                      case 4:\n                        if (properties.composite) {\n                          _context44.next = 6;\n                          break;\n                        }\n                        return _context44.abrupt(\"return\", new _to_unicode_map.ToUnicodeMap(this._simpleFontToUnicode(properties)));\n                      case 6:\n                        if (!(properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === \"Adobe\" && (properties.cidSystemInfo.ordering === \"GB1\" || properties.cidSystemInfo.ordering === \"CNS1\" || properties.cidSystemInfo.ordering === \"Japan1\" || properties.cidSystemInfo.ordering === \"Korea1\")))) {\n                          _context44.next = 15;\n                          break;\n                        }\n                        _properties$cidSystem = properties.cidSystemInfo, registry = _properties$cidSystem.registry, ordering = _properties$cidSystem.ordering;\n                        ucs2CMapName = _primitives.Name.get(\"\".concat(registry, \"-\").concat(ordering, \"-UCS2\"));\n                        _context44.next = 11;\n                        return _cmap.CMapFactory.create({\n                          encoding: ucs2CMapName,\n                          fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n                          useCMap: null\n                        });\n                      case 11:\n                        ucs2CMap = _context44.sent;\n                        toUnicode = [];\n                        properties.cMap.forEach(function (charcode, cid) {\n                          if (cid > 0xffff) {\n                            throw new _util.FormatError(\"Max size of CID is 65,535\");\n                          }\n                          var ucs2 = ucs2CMap.lookup(cid);\n                          if (ucs2) {\n                            toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));\n                          }\n                        });\n                        return _context44.abrupt(\"return\", new _to_unicode_map.ToUnicodeMap(toUnicode));\n                      case 15:\n                        return _context44.abrupt(\"return\", new _to_unicode_map.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));\n                      case 16:\n                      case \"end\":\n                        return _context44.stop();\n                    }\n                  }\n                }, _callee44, this);\n              }));\n              function buildToUnicode(_x103) {\n                return _buildToUnicode.apply(this, arguments);\n              }\n              return buildToUnicode;\n            }()\n          }, {\n            key: \"readToUnicode\",\n            value: function readToUnicode(cmapObj) {\n              var _this59 = this;\n              if (!cmapObj) {\n                return Promise.resolve(null);\n              }\n              if (cmapObj instanceof _primitives.Name) {\n                return _cmap.CMapFactory.create({\n                  encoding: cmapObj,\n                  fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n                  useCMap: null\n                }).then(function (cmap) {\n                  if (cmap instanceof _cmap.IdentityCMap) {\n                    return new _to_unicode_map.IdentityToUnicodeMap(0, 0xffff);\n                  }\n                  return new _to_unicode_map.ToUnicodeMap(cmap.getMap());\n                });\n              } else if (cmapObj instanceof _base_stream.BaseStream) {\n                return _cmap.CMapFactory.create({\n                  encoding: cmapObj,\n                  fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n                  useCMap: null\n                }).then(function (cmap) {\n                  if (cmap instanceof _cmap.IdentityCMap) {\n                    return new _to_unicode_map.IdentityToUnicodeMap(0, 0xffff);\n                  }\n                  var map = new Array(cmap.length);\n                  cmap.forEach(function (charCode, token) {\n                    if (typeof token === \"number\") {\n                      map[charCode] = String.fromCodePoint(token);\n                      return;\n                    }\n                    var str = [];\n                    for (var k = 0; k < token.length; k += 2) {\n                      var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n                      if ((w1 & 0xf800) !== 0xd800) {\n                        str.push(w1);\n                        continue;\n                      }\n                      k += 2;\n                      var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n                      str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n                    }\n                    map[charCode] = String.fromCodePoint.apply(String, str);\n                  });\n                  return new _to_unicode_map.ToUnicodeMap(map);\n                }, function (reason) {\n                  if (reason instanceof _util.AbortException) {\n                    return null;\n                  }\n                  if (_this59.options.ignoreErrors) {\n                    _this59.handler.send(\"UnsupportedFeature\", {\n                      featureId: _util.UNSUPPORTED_FEATURES.errorFontToUnicode\n                    });\n                    (0, _util.warn)(\"readToUnicode - ignoring ToUnicode data: \\\"\".concat(reason, \"\\\".\"));\n                    return null;\n                  }\n                  throw reason;\n                });\n              }\n              return Promise.resolve(null);\n            }\n          }, {\n            key: \"readCidToGidMap\",\n            value: function readCidToGidMap(glyphsData, toUnicode) {\n              var result = [];\n              for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n                var glyphID = glyphsData[j++] << 8 | glyphsData[j];\n                var code = j >> 1;\n                if (glyphID === 0 && !toUnicode.has(code)) {\n                  continue;\n                }\n                result[code] = glyphID;\n              }\n              return result;\n            }\n          }, {\n            key: \"extractWidths\",\n            value: function extractWidths(dict, descriptor, properties) {\n              var xref = this.xref;\n              var glyphsWidths = [];\n              var defaultWidth = 0;\n              var glyphsVMetrics = [];\n              var defaultVMetrics;\n              var i, ii, j, jj, start, code, widths;\n              if (properties.composite) {\n                defaultWidth = dict.has(\"DW\") ? dict.get(\"DW\") : 1000;\n                widths = dict.get(\"W\");\n                if (widths) {\n                  for (i = 0, ii = widths.length; i < ii; i++) {\n                    start = xref.fetchIfRef(widths[i++]);\n                    code = xref.fetchIfRef(widths[i]);\n                    if (Array.isArray(code)) {\n                      for (j = 0, jj = code.length; j < jj; j++) {\n                        glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n                      }\n                    } else {\n                      var width = xref.fetchIfRef(widths[++i]);\n                      for (j = start; j <= code; j++) {\n                        glyphsWidths[j] = width;\n                      }\n                    }\n                  }\n                }\n                if (properties.vertical) {\n                  var vmetrics = dict.getArray(\"DW2\") || [880, -1000];\n                  defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n                  vmetrics = dict.get(\"W2\");\n                  if (vmetrics) {\n                    for (i = 0, ii = vmetrics.length; i < ii; i++) {\n                      start = xref.fetchIfRef(vmetrics[i++]);\n                      code = xref.fetchIfRef(vmetrics[i]);\n                      if (Array.isArray(code)) {\n                        for (j = 0, jj = code.length; j < jj; j++) {\n                          glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];\n                        }\n                      } else {\n                        var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];\n                        for (j = start; j <= code; j++) {\n                          glyphsVMetrics[j] = vmetric;\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                var firstChar = properties.firstChar;\n                widths = dict.get(\"Widths\");\n                if (widths) {\n                  j = firstChar;\n                  for (i = 0, ii = widths.length; i < ii; i++) {\n                    glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n                  }\n                  defaultWidth = parseFloat(descriptor.get(\"MissingWidth\")) || 0;\n                } else {\n                  var baseFontName = dict.get(\"BaseFont\");\n                  if (baseFontName instanceof _primitives.Name) {\n                    var metrics = this.getBaseFontMetrics(baseFontName.name);\n                    glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);\n                    defaultWidth = metrics.defaultWidth;\n                  }\n                }\n              }\n              var isMonospace = true;\n              var firstWidth = defaultWidth;\n              for (var glyph in glyphsWidths) {\n                var glyphWidth = glyphsWidths[glyph];\n                if (!glyphWidth) {\n                  continue;\n                }\n                if (!firstWidth) {\n                  firstWidth = glyphWidth;\n                  continue;\n                }\n                if (firstWidth !== glyphWidth) {\n                  isMonospace = false;\n                  break;\n                }\n              }\n              if (isMonospace) {\n                properties.flags |= _fonts_utils.FontFlags.FixedPitch;\n              }\n              properties.defaultWidth = defaultWidth;\n              properties.widths = glyphsWidths;\n              properties.defaultVMetrics = defaultVMetrics;\n              properties.vmetrics = glyphsVMetrics;\n            }\n          }, {\n            key: \"isSerifFont\",\n            value: function isSerifFont(baseFontName) {\n              var fontNameWoStyle = baseFontName.split(\"-\")[0];\n              return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;\n            }\n          }, {\n            key: \"getBaseFontMetrics\",\n            value: function getBaseFontMetrics(name) {\n              var defaultWidth = 0;\n              var widths = Object.create(null);\n              var monospace = false;\n              var stdFontMap = (0, _standard_fonts.getStdFontMap)();\n              var lookupName = stdFontMap[name] || name;\n              var Metrics = (0, _metrics.getMetrics)();\n              if (!(lookupName in Metrics)) {\n                if (this.isSerifFont(name)) {\n                  lookupName = \"Times-Roman\";\n                } else {\n                  lookupName = \"Helvetica\";\n                }\n              }\n              var glyphWidths = Metrics[lookupName];\n              if (typeof glyphWidths === \"number\") {\n                defaultWidth = glyphWidths;\n                monospace = true;\n              } else {\n                widths = glyphWidths();\n              }\n              return {\n                defaultWidth: defaultWidth,\n                monospace: monospace,\n                widths: widths\n              };\n            }\n          }, {\n            key: \"buildCharCodeToWidth\",\n            value: function buildCharCodeToWidth(widthsByGlyphName, properties) {\n              var widths = Object.create(null);\n              var differences = properties.differences;\n              var encoding = properties.defaultEncoding;\n              for (var charCode = 0; charCode < 256; charCode++) {\n                if (charCode in differences && widthsByGlyphName[differences[charCode]]) {\n                  widths[charCode] = widthsByGlyphName[differences[charCode]];\n                  continue;\n                }\n                if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n                  widths[charCode] = widthsByGlyphName[encoding[charCode]];\n                  continue;\n                }\n              }\n              return widths;\n            }\n          }, {\n            key: \"preEvaluateFont\",\n            value: function preEvaluateFont(dict) {\n              var baseDict = dict;\n              var type = dict.get(\"Subtype\");\n              if (!(type instanceof _primitives.Name)) {\n                throw new _util.FormatError(\"invalid font Subtype\");\n              }\n              var composite = false;\n              var hash, toUnicode;\n              if (type.name === \"Type0\") {\n                var df = dict.get(\"DescendantFonts\");\n                if (!df) {\n                  throw new _util.FormatError(\"Descendant fonts are not specified\");\n                }\n                dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n                if (!(dict instanceof _primitives.Dict)) {\n                  throw new _util.FormatError(\"Descendant font is not a dictionary.\");\n                }\n                type = dict.get(\"Subtype\");\n                if (!(type instanceof _primitives.Name)) {\n                  throw new _util.FormatError(\"invalid font Subtype\");\n                }\n                composite = true;\n              }\n              var firstChar = dict.get(\"FirstChar\") || 0,\n                lastChar = dict.get(\"LastChar\") || (composite ? 0xffff : 0xff);\n              var descriptor = dict.get(\"FontDescriptor\");\n              if (descriptor) {\n                hash = new _murmurhash.MurmurHash3_64();\n                var encoding = baseDict.getRaw(\"Encoding\");\n                if (encoding instanceof _primitives.Name) {\n                  hash.update(encoding.name);\n                } else if (encoding instanceof _primitives.Ref) {\n                  hash.update(encoding.toString());\n                } else if (encoding instanceof _primitives.Dict) {\n                  var _iterator65 = _createForOfIteratorHelper(encoding.getRawValues()),\n                    _step65;\n                  try {\n                    for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {\n                      var entry = _step65.value;\n                      if (entry instanceof _primitives.Name) {\n                        hash.update(entry.name);\n                      } else if (entry instanceof _primitives.Ref) {\n                        hash.update(entry.toString());\n                      } else if (Array.isArray(entry)) {\n                        var diffLength = entry.length,\n                          diffBuf = new Array(diffLength);\n                        for (var j = 0; j < diffLength; j++) {\n                          var diffEntry = entry[j];\n                          if (diffEntry instanceof _primitives.Name) {\n                            diffBuf[j] = diffEntry.name;\n                          } else if (typeof diffEntry === \"number\" || diffEntry instanceof _primitives.Ref) {\n                            diffBuf[j] = diffEntry.toString();\n                          }\n                        }\n                        hash.update(diffBuf.join());\n                      }\n                    }\n                  } catch (err) {\n                    _iterator65.e(err);\n                  } finally {\n                    _iterator65.f();\n                  }\n                }\n                hash.update(\"\".concat(firstChar, \"-\").concat(lastChar));\n                toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n                if (toUnicode instanceof _base_stream.BaseStream) {\n                  var stream = toUnicode.str || toUnicode;\n                  var uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);\n                  hash.update(uint8array);\n                } else if (toUnicode instanceof _primitives.Name) {\n                  hash.update(toUnicode.name);\n                }\n                var widths = dict.get(\"Widths\") || baseDict.get(\"Widths\");\n                if (Array.isArray(widths)) {\n                  var widthsBuf = [];\n                  var _iterator66 = _createForOfIteratorHelper(widths),\n                    _step66;\n                  try {\n                    for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {\n                      var _entry = _step66.value;\n                      if (typeof _entry === \"number\" || _entry instanceof _primitives.Ref) {\n                        widthsBuf.push(_entry.toString());\n                      }\n                    }\n                  } catch (err) {\n                    _iterator66.e(err);\n                  } finally {\n                    _iterator66.f();\n                  }\n                  hash.update(widthsBuf.join());\n                }\n                if (composite) {\n                  hash.update(\"compositeFont\");\n                  var compositeWidths = dict.get(\"W\") || baseDict.get(\"W\");\n                  if (Array.isArray(compositeWidths)) {\n                    var _widthsBuf = [];\n                    var _iterator67 = _createForOfIteratorHelper(compositeWidths),\n                      _step67;\n                    try {\n                      for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {\n                        var _entry2 = _step67.value;\n                        if (typeof _entry2 === \"number\" || _entry2 instanceof _primitives.Ref) {\n                          _widthsBuf.push(_entry2.toString());\n                        } else if (Array.isArray(_entry2)) {\n                          var subWidthsBuf = [];\n                          var _iterator68 = _createForOfIteratorHelper(_entry2),\n                            _step68;\n                          try {\n                            for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {\n                              var element = _step68.value;\n                              if (typeof element === \"number\" || element instanceof _primitives.Ref) {\n                                subWidthsBuf.push(element.toString());\n                              }\n                            }\n                          } catch (err) {\n                            _iterator68.e(err);\n                          } finally {\n                            _iterator68.f();\n                          }\n                          _widthsBuf.push(\"[\".concat(subWidthsBuf.join(), \"]\"));\n                        }\n                      }\n                    } catch (err) {\n                      _iterator67.e(err);\n                    } finally {\n                      _iterator67.f();\n                    }\n                    hash.update(_widthsBuf.join());\n                  }\n                  var cidToGidMap = dict.getRaw(\"CIDToGIDMap\") || baseDict.getRaw(\"CIDToGIDMap\");\n                  if (cidToGidMap instanceof _primitives.Name) {\n                    hash.update(cidToGidMap.name);\n                  } else if (cidToGidMap instanceof _primitives.Ref) {\n                    hash.update(cidToGidMap.toString());\n                  } else if (cidToGidMap instanceof _base_stream.BaseStream) {\n                    hash.update(cidToGidMap.peekBytes());\n                  }\n                }\n              }\n              return {\n                descriptor: descriptor,\n                dict: dict,\n                baseDict: baseDict,\n                composite: composite,\n                type: type.name,\n                firstChar: firstChar,\n                lastChar: lastChar,\n                toUnicode: toUnicode,\n                hash: hash ? hash.hexdigest() : \"\"\n              };\n            }\n          }, {\n            key: \"translateFont\",\n            value: function () {\n              var _translateFont = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(_ref51) {\n                var _this60 = this;\n                var descriptor, dict, baseDict, composite, type, firstChar, lastChar, toUnicode, cssFontInfo, isType3Font, properties, baseFontName, metrics, fontNameWoStyle, flags, widths, standardFontName, file, fontName, baseFont, fontNameStr, baseFontStr, fontFile, subtype, length1, length2, length3, isStandardFont, isInternalFont, glyphScaleFactors, subtypeEntry, _standardFontName, _standardFontName2, cidEncoding, cMap;\n                return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n                  while (1) {\n                    switch (_context45.prev = _context45.next) {\n                      case 0:\n                        descriptor = _ref51.descriptor, dict = _ref51.dict, baseDict = _ref51.baseDict, composite = _ref51.composite, type = _ref51.type, firstChar = _ref51.firstChar, lastChar = _ref51.lastChar, toUnicode = _ref51.toUnicode, cssFontInfo = _ref51.cssFontInfo;\n                        isType3Font = type === \"Type3\";\n                        if (descriptor) {\n                          _context45.next = 27;\n                          break;\n                        }\n                        if (!isType3Font) {\n                          _context45.next = 9;\n                          break;\n                        }\n                        descriptor = new _primitives.Dict(null);\n                        descriptor.set(\"FontName\", _primitives.Name.get(type));\n                        descriptor.set(\"FontBBox\", dict.getArray(\"FontBBox\") || [0, 0, 0, 0]);\n                        _context45.next = 27;\n                        break;\n                      case 9:\n                        baseFontName = dict.get(\"BaseFont\");\n                        if (baseFontName instanceof _primitives.Name) {\n                          _context45.next = 12;\n                          break;\n                        }\n                        throw new _util.FormatError(\"Base font is not specified\");\n                      case 12:\n                        baseFontName = baseFontName.name.replace(/[,_]/g, \"-\");\n                        metrics = this.getBaseFontMetrics(baseFontName);\n                        fontNameWoStyle = baseFontName.split(\"-\")[0];\n                        flags = (this.isSerifFont(fontNameWoStyle) ? _fonts_utils.FontFlags.Serif : 0) | (metrics.monospace ? _fonts_utils.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts_utils.FontFlags.Symbolic : _fonts_utils.FontFlags.Nonsymbolic);\n                        properties = {\n                          type: type,\n                          name: baseFontName,\n                          loadedName: baseDict.loadedName,\n                          widths: metrics.widths,\n                          defaultWidth: metrics.defaultWidth,\n                          isSimulatedFlags: true,\n                          flags: flags,\n                          firstChar: firstChar,\n                          lastChar: lastChar,\n                          toUnicode: toUnicode,\n                          xHeight: 0,\n                          capHeight: 0,\n                          italicAngle: 0,\n                          isType3Font: isType3Font\n                        };\n                        widths = dict.get(\"Widths\");\n                        standardFontName = (0, _standard_fonts.getStandardFontName)(baseFontName);\n                        file = null;\n                        if (!standardFontName) {\n                          _context45.next = 26;\n                          break;\n                        }\n                        properties.isStandardFont = true;\n                        _context45.next = 24;\n                        return this.fetchStandardFontData(standardFontName);\n                      case 24:\n                        file = _context45.sent;\n                        properties.isInternalFont = !!file;\n                      case 26:\n                        return _context45.abrupt(\"return\", this.extractDataStructures(dict, dict, properties).then(function (newProperties) {\n                          if (widths) {\n                            var glyphWidths = [];\n                            var j = firstChar;\n                            for (var i = 0, ii = widths.length; i < ii; i++) {\n                              glyphWidths[j++] = _this60.xref.fetchIfRef(widths[i]);\n                            }\n                            newProperties.widths = glyphWidths;\n                          } else {\n                            newProperties.widths = _this60.buildCharCodeToWidth(metrics.widths, newProperties);\n                          }\n                          return new _fonts.Font(baseFontName, file, newProperties);\n                        }));\n                      case 27:\n                        fontName = descriptor.get(\"FontName\");\n                        baseFont = dict.get(\"BaseFont\");\n                        if (typeof fontName === \"string\") {\n                          fontName = _primitives.Name.get(fontName);\n                        }\n                        if (typeof baseFont === \"string\") {\n                          baseFont = _primitives.Name.get(baseFont);\n                        }\n                        if (!isType3Font) {\n                          fontNameStr = fontName && fontName.name;\n                          baseFontStr = baseFont && baseFont.name;\n                          if (fontNameStr !== baseFontStr) {\n                            (0, _util.info)(\"The FontDescriptor's FontName is \\\"\".concat(fontNameStr, \"\\\" but \") + \"should be the same as the Font's BaseFont \\\"\".concat(baseFontStr, \"\\\".\"));\n                            if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {\n                              fontName = baseFont;\n                            }\n                          }\n                        }\n                        fontName = fontName || baseFont;\n                        if (fontName instanceof _primitives.Name) {\n                          _context45.next = 35;\n                          break;\n                        }\n                        throw new _util.FormatError(\"invalid font name\");\n                      case 35:\n                        _context45.prev = 35;\n                        fontFile = descriptor.get(\"FontFile\", \"FontFile2\", \"FontFile3\");\n                        _context45.next = 45;\n                        break;\n                      case 39:\n                        _context45.prev = 39;\n                        _context45.t0 = _context45[\"catch\"](35);\n                        if (this.options.ignoreErrors) {\n                          _context45.next = 43;\n                          break;\n                        }\n                        throw _context45.t0;\n                      case 43:\n                        (0, _util.warn)(\"translateFont - fetching \\\"\".concat(fontName.name, \"\\\" font file: \\\"\").concat(_context45.t0, \"\\\".\"));\n                        fontFile = new _stream.NullStream();\n                      case 45:\n                        isStandardFont = false;\n                        isInternalFont = false;\n                        glyphScaleFactors = null;\n                        if (!fontFile) {\n                          _context45.next = 52;\n                          break;\n                        }\n                        if (fontFile.dict) {\n                          subtypeEntry = fontFile.dict.get(\"Subtype\");\n                          if (subtypeEntry instanceof _primitives.Name) {\n                            subtype = subtypeEntry.name;\n                          }\n                          length1 = fontFile.dict.get(\"Length1\");\n                          length2 = fontFile.dict.get(\"Length2\");\n                          length3 = fontFile.dict.get(\"Length3\");\n                        }\n                        _context45.next = 74;\n                        break;\n                      case 52:\n                        if (!cssFontInfo) {\n                          _context45.next = 66;\n                          break;\n                        }\n                        _standardFontName = (0, _xfa_fonts.getXfaFontName)(fontName.name);\n                        if (!_standardFontName) {\n                          _context45.next = 64;\n                          break;\n                        }\n                        cssFontInfo.fontFamily = \"\".concat(cssFontInfo.fontFamily, \"-PdfJS-XFA\");\n                        cssFontInfo.metrics = _standardFontName.metrics || null;\n                        glyphScaleFactors = _standardFontName.factors || null;\n                        _context45.next = 60;\n                        return this.fetchStandardFontData(_standardFontName.name);\n                      case 60:\n                        fontFile = _context45.sent;\n                        isInternalFont = !!fontFile;\n                        baseDict = dict = (0, _xfa_fonts.getXfaFontDict)(fontName.name);\n                        composite = true;\n                      case 64:\n                        _context45.next = 74;\n                        break;\n                      case 66:\n                        if (isType3Font) {\n                          _context45.next = 74;\n                          break;\n                        }\n                        _standardFontName2 = (0, _standard_fonts.getStandardFontName)(fontName.name);\n                        if (!_standardFontName2) {\n                          _context45.next = 74;\n                          break;\n                        }\n                        isStandardFont = true;\n                        _context45.next = 72;\n                        return this.fetchStandardFontData(_standardFontName2);\n                      case 72:\n                        fontFile = _context45.sent;\n                        isInternalFont = !!fontFile;\n                      case 74:\n                        properties = {\n                          type: type,\n                          name: fontName.name,\n                          subtype: subtype,\n                          file: fontFile,\n                          length1: length1,\n                          length2: length2,\n                          length3: length3,\n                          isStandardFont: isStandardFont,\n                          isInternalFont: isInternalFont,\n                          loadedName: baseDict.loadedName,\n                          composite: composite,\n                          fixedPitch: false,\n                          fontMatrix: dict.getArray(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX,\n                          firstChar: firstChar,\n                          lastChar: lastChar,\n                          toUnicode: toUnicode,\n                          bbox: descriptor.getArray(\"FontBBox\") || dict.getArray(\"FontBBox\"),\n                          ascent: descriptor.get(\"Ascent\"),\n                          descent: descriptor.get(\"Descent\"),\n                          xHeight: descriptor.get(\"XHeight\") || 0,\n                          capHeight: descriptor.get(\"CapHeight\") || 0,\n                          flags: descriptor.get(\"Flags\"),\n                          italicAngle: descriptor.get(\"ItalicAngle\") || 0,\n                          isType3Font: isType3Font,\n                          cssFontInfo: cssFontInfo,\n                          scaleFactors: glyphScaleFactors\n                        };\n                        if (!composite) {\n                          _context45.next = 83;\n                          break;\n                        }\n                        cidEncoding = baseDict.get(\"Encoding\");\n                        if (cidEncoding instanceof _primitives.Name) {\n                          properties.cidEncoding = cidEncoding.name;\n                        }\n                        _context45.next = 80;\n                        return _cmap.CMapFactory.create({\n                          encoding: cidEncoding,\n                          fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n                          useCMap: null\n                        });\n                      case 80:\n                        cMap = _context45.sent;\n                        properties.cMap = cMap;\n                        properties.vertical = properties.cMap.vertical;\n                      case 83:\n                        return _context45.abrupt(\"return\", this.extractDataStructures(dict, baseDict, properties).then(function (newProperties) {\n                          _this60.extractWidths(dict, descriptor, newProperties);\n                          return new _fonts.Font(fontName.name, fontFile, newProperties);\n                        }));\n                      case 84:\n                      case \"end\":\n                        return _context45.stop();\n                    }\n                  }\n                }, _callee45, this, [[35, 39]]);\n              }));\n              function translateFont(_x104) {\n                return _translateFont.apply(this, arguments);\n              }\n              return translateFont;\n            }()\n          }, {\n            key: \"_pdfFunctionFactory\",\n            get: function get() {\n              var pdfFunctionFactory = new _function.PDFFunctionFactory({\n                xref: this.xref,\n                isEvalSupported: this.options.isEvalSupported\n              });\n              return (0, _util.shadow)(this, \"_pdfFunctionFactory\", pdfFunctionFactory);\n            }\n          }], [{\n            key: \"buildFontPaths\",\n            value: function buildFontPaths(font, glyphs, handler, evaluatorOptions) {\n              function buildPath(fontChar) {\n                var glyphName = \"\".concat(font.loadedName, \"_path_\").concat(fontChar);\n                try {\n                  if (font.renderer.hasBuiltPath(fontChar)) {\n                    return;\n                  }\n                  handler.send(\"commonobj\", [glyphName, \"FontPath\", font.renderer.getPathJs(fontChar)]);\n                } catch (reason) {\n                  if (evaluatorOptions.ignoreErrors) {\n                    handler.send(\"UnsupportedFeature\", {\n                      featureId: _util.UNSUPPORTED_FEATURES.errorFontBuildPath\n                    });\n                    (0, _util.warn)(\"buildFontPaths - ignoring \".concat(glyphName, \" glyph: \\\"\").concat(reason, \"\\\".\"));\n                    return;\n                  }\n                  throw reason;\n                }\n              }\n              var _iterator69 = _createForOfIteratorHelper(glyphs),\n                _step69;\n              try {\n                for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {\n                  var glyph = _step69.value;\n                  buildPath(glyph.fontChar);\n                  var accent = glyph.accent;\n                  if (accent && accent.fontChar) {\n                    buildPath(accent.fontChar);\n                  }\n                }\n              } catch (err) {\n                _iterator69.e(err);\n              } finally {\n                _iterator69.f();\n              }\n            }\n          }, {\n            key: \"fallbackFontDict\",\n            get: function get() {\n              var dict = new _primitives.Dict();\n              dict.set(\"BaseFont\", _primitives.Name.get(\"PDFJS-FallbackFont\"));\n              dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n              dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n              dict.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n              return (0, _util.shadow)(this, \"fallbackFontDict\", dict);\n            }\n          }]);\n          return PartialEvaluator;\n        }();\n        exports.PartialEvaluator = PartialEvaluator;\n        var TranslatedFont = /*#__PURE__*/function () {\n          function TranslatedFont(_ref52) {\n            var loadedName = _ref52.loadedName,\n              font = _ref52.font,\n              dict = _ref52.dict,\n              evaluatorOptions = _ref52.evaluatorOptions;\n            _classCallCheck(this, TranslatedFont);\n            this.loadedName = loadedName;\n            this.font = font;\n            this.dict = dict;\n            this._evaluatorOptions = evaluatorOptions || DefaultPartialEvaluatorOptions;\n            this.type3Loaded = null;\n            this.type3Dependencies = font.isType3Font ? new Set() : null;\n            this.sent = false;\n          }\n          _createClass(TranslatedFont, [{\n            key: \"send\",\n            value: function send(handler) {\n              if (this.sent) {\n                return;\n              }\n              this.sent = true;\n              handler.send(\"commonobj\", [this.loadedName, \"Font\", this.font.exportData(this._evaluatorOptions.fontExtraProperties)]);\n            }\n          }, {\n            key: \"fallback\",\n            value: function fallback(handler) {\n              if (!this.font.data) {\n                return;\n              }\n              this.font.disableFontFace = true;\n              PartialEvaluator.buildFontPaths(this.font, this.font.glyphCacheValues, handler, this._evaluatorOptions);\n            }\n          }, {\n            key: \"loadType3Data\",\n            value: function loadType3Data(evaluator, resources, task) {\n              var _this61 = this;\n              if (this.type3Loaded) {\n                return this.type3Loaded;\n              }\n              if (!this.font.isType3Font) {\n                throw new Error(\"Must be a Type3 font.\");\n              }\n              var type3Evaluator = evaluator.clone({\n                ignoreErrors: false\n              });\n              type3Evaluator.parsingType3Font = true;\n              var type3FontRefs = new _primitives.RefSet(evaluator.type3FontRefs);\n              if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {\n                type3FontRefs.put(this.dict.objId);\n              }\n              type3Evaluator.type3FontRefs = type3FontRefs;\n              var translatedFont = this.font,\n                type3Dependencies = this.type3Dependencies;\n              var loadCharProcsPromise = Promise.resolve();\n              var charProcs = this.dict.get(\"CharProcs\");\n              var fontResources = this.dict.get(\"Resources\") || resources;\n              var charProcOperatorList = Object.create(null);\n              var fontBBox = _util.Util.normalizeRect(translatedFont.bbox || [0, 0, 0, 0]),\n                width = fontBBox[2] - fontBBox[0],\n                height = fontBBox[3] - fontBBox[1];\n              var fontBBoxSize = Math.hypot(width, height);\n              var _iterator70 = _createForOfIteratorHelper(charProcs.getKeys()),\n                _step70;\n              try {\n                var _loop5 = function _loop5() {\n                  var key = _step70.value;\n                  loadCharProcsPromise = loadCharProcsPromise.then(function () {\n                    var glyphStream = charProcs.get(key);\n                    var operatorList = new _operator_list.OperatorList();\n                    return type3Evaluator.getOperatorList({\n                      stream: glyphStream,\n                      task: task,\n                      resources: fontResources,\n                      operatorList: operatorList\n                    }).then(function () {\n                      if (operatorList.fnArray[0] === _util.OPS.setCharWidthAndBounds) {\n                        _this61._removeType3ColorOperators(operatorList, fontBBoxSize);\n                      }\n                      charProcOperatorList[key] = operatorList.getIR();\n                      var _iterator71 = _createForOfIteratorHelper(operatorList.dependencies),\n                        _step71;\n                      try {\n                        for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {\n                          var dependency = _step71.value;\n                          type3Dependencies.add(dependency);\n                        }\n                      } catch (err) {\n                        _iterator71.e(err);\n                      } finally {\n                        _iterator71.f();\n                      }\n                    }).catch(function (reason) {\n                      (0, _util.warn)(\"Type3 font resource \\\"\".concat(key, \"\\\" is not available.\"));\n                      var dummyOperatorList = new _operator_list.OperatorList();\n                      charProcOperatorList[key] = dummyOperatorList.getIR();\n                    });\n                  });\n                };\n                for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {\n                  _loop5();\n                }\n              } catch (err) {\n                _iterator70.e(err);\n              } finally {\n                _iterator70.f();\n              }\n              this.type3Loaded = loadCharProcsPromise.then(function () {\n                translatedFont.charProcOperatorList = charProcOperatorList;\n                if (_this61._bbox) {\n                  translatedFont.isCharBBox = true;\n                  translatedFont.bbox = _this61._bbox;\n                }\n              });\n              return this.type3Loaded;\n            }\n          }, {\n            key: \"_removeType3ColorOperators\",\n            value: function _removeType3ColorOperators(operatorList) {\n              var fontBBoxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n              var charBBox = _util.Util.normalizeRect(operatorList.argsArray[0].slice(2)),\n                width = charBBox[2] - charBBox[0],\n                height = charBBox[3] - charBBox[1];\n              var charBBoxSize = Math.hypot(width, height);\n              if (width === 0 || height === 0) {\n                operatorList.fnArray.splice(0, 1);\n                operatorList.argsArray.splice(0, 1);\n              } else if (fontBBoxSize === 0 || Math.round(charBBoxSize / fontBBoxSize) >= 10) {\n                if (!this._bbox) {\n                  this._bbox = [Infinity, Infinity, -Infinity, -Infinity];\n                }\n                this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);\n                this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);\n                this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);\n                this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);\n              }\n              var i = 0,\n                ii = operatorList.length;\n              while (i < ii) {\n                switch (operatorList.fnArray[i]) {\n                  case _util.OPS.setCharWidthAndBounds:\n                    break;\n                  case _util.OPS.setStrokeColorSpace:\n                  case _util.OPS.setFillColorSpace:\n                  case _util.OPS.setStrokeColor:\n                  case _util.OPS.setStrokeColorN:\n                  case _util.OPS.setFillColor:\n                  case _util.OPS.setFillColorN:\n                  case _util.OPS.setStrokeGray:\n                  case _util.OPS.setFillGray:\n                  case _util.OPS.setStrokeRGBColor:\n                  case _util.OPS.setFillRGBColor:\n                  case _util.OPS.setStrokeCMYKColor:\n                  case _util.OPS.setFillCMYKColor:\n                  case _util.OPS.shadingFill:\n                  case _util.OPS.setRenderingIntent:\n                    operatorList.fnArray.splice(i, 1);\n                    operatorList.argsArray.splice(i, 1);\n                    ii--;\n                    continue;\n                  case _util.OPS.setGState:\n                    var _operatorList$argsArr = _slicedToArray(operatorList.argsArray[i], 1),\n                      _gStateObj = _operatorList$argsArr[0];\n                    var j = 0,\n                      jj = _gStateObj.length;\n                    while (j < jj) {\n                      var _gStateObj$j = _slicedToArray(_gStateObj[j], 1),\n                        gStateKey = _gStateObj$j[0];\n                      switch (gStateKey) {\n                        case \"TR\":\n                        case \"TR2\":\n                        case \"HT\":\n                        case \"BG\":\n                        case \"BG2\":\n                        case \"UCR\":\n                        case \"UCR2\":\n                          _gStateObj.splice(j, 1);\n                          jj--;\n                          continue;\n                      }\n                      j++;\n                    }\n                    break;\n                }\n                i++;\n              }\n            }\n          }]);\n          return TranslatedFont;\n        }();\n        var StateManager = /*#__PURE__*/function () {\n          function StateManager() {\n            var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new EvalState();\n            _classCallCheck(this, StateManager);\n            this.state = initialState;\n            this.stateStack = [];\n          }\n          _createClass(StateManager, [{\n            key: \"save\",\n            value: function save() {\n              var old = this.state;\n              this.stateStack.push(this.state);\n              this.state = old.clone();\n            }\n          }, {\n            key: \"restore\",\n            value: function restore() {\n              var prev = this.stateStack.pop();\n              if (prev) {\n                this.state = prev;\n              }\n            }\n          }, {\n            key: \"transform\",\n            value: function transform(args) {\n              this.state.ctm = _util.Util.transform(this.state.ctm, args);\n            }\n          }]);\n          return StateManager;\n        }();\n        var TextState = /*#__PURE__*/function () {\n          function TextState() {\n            _classCallCheck(this, TextState);\n            this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n            this.fontName = null;\n            this.fontSize = 0;\n            this.font = null;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.textMatrix = _util.IDENTITY_MATRIX.slice();\n            this.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.leading = 0;\n            this.textHScale = 1;\n            this.textRise = 0;\n          }\n          _createClass(TextState, [{\n            key: \"setTextMatrix\",\n            value: function setTextMatrix(a, b, c, d, e, f) {\n              var m = this.textMatrix;\n              m[0] = a;\n              m[1] = b;\n              m[2] = c;\n              m[3] = d;\n              m[4] = e;\n              m[5] = f;\n            }\n          }, {\n            key: \"setTextLineMatrix\",\n            value: function setTextLineMatrix(a, b, c, d, e, f) {\n              var m = this.textLineMatrix;\n              m[0] = a;\n              m[1] = b;\n              m[2] = c;\n              m[3] = d;\n              m[4] = e;\n              m[5] = f;\n            }\n          }, {\n            key: \"translateTextMatrix\",\n            value: function translateTextMatrix(x, y) {\n              var m = this.textMatrix;\n              m[4] = m[0] * x + m[2] * y + m[4];\n              m[5] = m[1] * x + m[3] * y + m[5];\n            }\n          }, {\n            key: \"translateTextLineMatrix\",\n            value: function translateTextLineMatrix(x, y) {\n              var m = this.textLineMatrix;\n              m[4] = m[0] * x + m[2] * y + m[4];\n              m[5] = m[1] * x + m[3] * y + m[5];\n            }\n          }, {\n            key: \"carriageReturn\",\n            value: function carriageReturn() {\n              this.translateTextLineMatrix(0, -this.leading);\n              this.textMatrix = this.textLineMatrix.slice();\n            }\n          }, {\n            key: \"clone\",\n            value: function clone() {\n              var clone = Object.create(this);\n              clone.textMatrix = this.textMatrix.slice();\n              clone.textLineMatrix = this.textLineMatrix.slice();\n              clone.fontMatrix = this.fontMatrix.slice();\n              return clone;\n            }\n          }]);\n          return TextState;\n        }();\n        var EvalState = /*#__PURE__*/function () {\n          function EvalState() {\n            _classCallCheck(this, EvalState);\n            this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n            this.font = null;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n            this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n          }\n          _createClass(EvalState, [{\n            key: \"clone\",\n            value: function clone() {\n              return Object.create(this);\n            }\n          }]);\n          return EvalState;\n        }();\n        var EvaluatorPreprocessor = /*#__PURE__*/function () {\n          _createClass(EvaluatorPreprocessor, null, [{\n            key: \"opMap\",\n            get: function get() {\n              var getOPMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n                t.w = {\n                  id: _util.OPS.setLineWidth,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.J = {\n                  id: _util.OPS.setLineCap,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.j = {\n                  id: _util.OPS.setLineJoin,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.M = {\n                  id: _util.OPS.setMiterLimit,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.d = {\n                  id: _util.OPS.setDash,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.ri = {\n                  id: _util.OPS.setRenderingIntent,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.i = {\n                  id: _util.OPS.setFlatness,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.gs = {\n                  id: _util.OPS.setGState,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.q = {\n                  id: _util.OPS.save,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.Q = {\n                  id: _util.OPS.restore,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.cm = {\n                  id: _util.OPS.transform,\n                  numArgs: 6,\n                  variableArgs: false\n                };\n                t.m = {\n                  id: _util.OPS.moveTo,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.l = {\n                  id: _util.OPS.lineTo,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.c = {\n                  id: _util.OPS.curveTo,\n                  numArgs: 6,\n                  variableArgs: false\n                };\n                t.v = {\n                  id: _util.OPS.curveTo2,\n                  numArgs: 4,\n                  variableArgs: false\n                };\n                t.y = {\n                  id: _util.OPS.curveTo3,\n                  numArgs: 4,\n                  variableArgs: false\n                };\n                t.h = {\n                  id: _util.OPS.closePath,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.re = {\n                  id: _util.OPS.rectangle,\n                  numArgs: 4,\n                  variableArgs: false\n                };\n                t.S = {\n                  id: _util.OPS.stroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.s = {\n                  id: _util.OPS.closeStroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.f = {\n                  id: _util.OPS.fill,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.F = {\n                  id: _util.OPS.fill,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t[\"f*\"] = {\n                  id: _util.OPS.eoFill,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.B = {\n                  id: _util.OPS.fillStroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t[\"B*\"] = {\n                  id: _util.OPS.eoFillStroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.b = {\n                  id: _util.OPS.closeFillStroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t[\"b*\"] = {\n                  id: _util.OPS.closeEOFillStroke,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.n = {\n                  id: _util.OPS.endPath,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.W = {\n                  id: _util.OPS.clip,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t[\"W*\"] = {\n                  id: _util.OPS.eoClip,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.BT = {\n                  id: _util.OPS.beginText,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.ET = {\n                  id: _util.OPS.endText,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.Tc = {\n                  id: _util.OPS.setCharSpacing,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Tw = {\n                  id: _util.OPS.setWordSpacing,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Tz = {\n                  id: _util.OPS.setHScale,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.TL = {\n                  id: _util.OPS.setLeading,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Tf = {\n                  id: _util.OPS.setFont,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.Tr = {\n                  id: _util.OPS.setTextRenderingMode,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Ts = {\n                  id: _util.OPS.setTextRise,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Td = {\n                  id: _util.OPS.moveText,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.TD = {\n                  id: _util.OPS.setLeadingMoveText,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.Tm = {\n                  id: _util.OPS.setTextMatrix,\n                  numArgs: 6,\n                  variableArgs: false\n                };\n                t[\"T*\"] = {\n                  id: _util.OPS.nextLine,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.Tj = {\n                  id: _util.OPS.showText,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.TJ = {\n                  id: _util.OPS.showSpacedText,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t[\"'\"] = {\n                  id: _util.OPS.nextLineShowText,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t['\"'] = {\n                  id: _util.OPS.nextLineSetSpacingShowText,\n                  numArgs: 3,\n                  variableArgs: false\n                };\n                t.d0 = {\n                  id: _util.OPS.setCharWidth,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.d1 = {\n                  id: _util.OPS.setCharWidthAndBounds,\n                  numArgs: 6,\n                  variableArgs: false\n                };\n                t.CS = {\n                  id: _util.OPS.setStrokeColorSpace,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.cs = {\n                  id: _util.OPS.setFillColorSpace,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.SC = {\n                  id: _util.OPS.setStrokeColor,\n                  numArgs: 4,\n                  variableArgs: true\n                };\n                t.SCN = {\n                  id: _util.OPS.setStrokeColorN,\n                  numArgs: 33,\n                  variableArgs: true\n                };\n                t.sc = {\n                  id: _util.OPS.setFillColor,\n                  numArgs: 4,\n                  variableArgs: true\n                };\n                t.scn = {\n                  id: _util.OPS.setFillColorN,\n                  numArgs: 33,\n                  variableArgs: true\n                };\n                t.G = {\n                  id: _util.OPS.setStrokeGray,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.g = {\n                  id: _util.OPS.setFillGray,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.RG = {\n                  id: _util.OPS.setStrokeRGBColor,\n                  numArgs: 3,\n                  variableArgs: false\n                };\n                t.rg = {\n                  id: _util.OPS.setFillRGBColor,\n                  numArgs: 3,\n                  variableArgs: false\n                };\n                t.K = {\n                  id: _util.OPS.setStrokeCMYKColor,\n                  numArgs: 4,\n                  variableArgs: false\n                };\n                t.k = {\n                  id: _util.OPS.setFillCMYKColor,\n                  numArgs: 4,\n                  variableArgs: false\n                };\n                t.sh = {\n                  id: _util.OPS.shadingFill,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.BI = {\n                  id: _util.OPS.beginInlineImage,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.ID = {\n                  id: _util.OPS.beginImageData,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.EI = {\n                  id: _util.OPS.endInlineImage,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.Do = {\n                  id: _util.OPS.paintXObject,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.MP = {\n                  id: _util.OPS.markPoint,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.DP = {\n                  id: _util.OPS.markPointProps,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.BMC = {\n                  id: _util.OPS.beginMarkedContent,\n                  numArgs: 1,\n                  variableArgs: false\n                };\n                t.BDC = {\n                  id: _util.OPS.beginMarkedContentProps,\n                  numArgs: 2,\n                  variableArgs: false\n                };\n                t.EMC = {\n                  id: _util.OPS.endMarkedContent,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.BX = {\n                  id: _util.OPS.beginCompat,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.EX = {\n                  id: _util.OPS.endCompat,\n                  numArgs: 0,\n                  variableArgs: false\n                };\n                t.BM = null;\n                t.BD = null;\n                t.true = null;\n                t.fa = null;\n                t.fal = null;\n                t.fals = null;\n                t.false = null;\n                t.nu = null;\n                t.nul = null;\n                t.null = null;\n              });\n              return (0, _util.shadow)(this, \"opMap\", getOPMap());\n            }\n          }, {\n            key: \"MAX_INVALID_PATH_OPS\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MAX_INVALID_PATH_OPS\", 10);\n            }\n          }]);\n          function EvaluatorPreprocessor(stream, xref) {\n            var stateManager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new StateManager();\n            _classCallCheck(this, EvaluatorPreprocessor);\n            this.parser = new _parser.Parser({\n              lexer: new _parser.Lexer(stream, EvaluatorPreprocessor.opMap),\n              xref: xref\n            });\n            this.stateManager = stateManager;\n            this.nonProcessedArgs = [];\n            this._isPathOp = false;\n            this._numInvalidPathOPS = 0;\n          }\n          _createClass(EvaluatorPreprocessor, [{\n            key: \"read\",\n            value: function read(operation) {\n              var args = operation.args;\n              while (true) {\n                var obj = this.parser.getObj();\n                if (obj instanceof _primitives.Cmd) {\n                  var cmd = obj.cmd;\n                  var opSpec = EvaluatorPreprocessor.opMap[cmd];\n                  if (!opSpec) {\n                    (0, _util.warn)(\"Unknown command \\\"\".concat(cmd, \"\\\".\"));\n                    continue;\n                  }\n                  var fn = opSpec.id;\n                  var numArgs = opSpec.numArgs;\n                  var argsLength = args !== null ? args.length : 0;\n                  if (!this._isPathOp) {\n                    this._numInvalidPathOPS = 0;\n                  }\n                  this._isPathOp = fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath;\n                  if (!opSpec.variableArgs) {\n                    if (argsLength !== numArgs) {\n                      var nonProcessedArgs = this.nonProcessedArgs;\n                      while (argsLength > numArgs) {\n                        nonProcessedArgs.push(args.shift());\n                        argsLength--;\n                      }\n                      while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n                        if (args === null) {\n                          args = [];\n                        }\n                        args.unshift(nonProcessedArgs.pop());\n                        argsLength++;\n                      }\n                    }\n                    if (argsLength < numArgs) {\n                      var partialMsg = \"command \".concat(cmd, \": expected \").concat(numArgs, \" args, \") + \"but received \".concat(argsLength, \" args.\");\n                      if (this._isPathOp && ++this._numInvalidPathOPS > EvaluatorPreprocessor.MAX_INVALID_PATH_OPS) {\n                        throw new _util.FormatError(\"Invalid \".concat(partialMsg));\n                      }\n                      (0, _util.warn)(\"Skipping \".concat(partialMsg));\n                      if (args !== null) {\n                        args.length = 0;\n                      }\n                      continue;\n                    }\n                  } else if (argsLength > numArgs) {\n                    (0, _util.info)(\"Command \".concat(cmd, \": expected [0, \").concat(numArgs, \"] args, \") + \"but received \".concat(argsLength, \" args.\"));\n                  }\n                  this.preprocessCommand(fn, args);\n                  operation.fn = fn;\n                  operation.args = args;\n                  return true;\n                }\n                if (obj === _primitives.EOF) {\n                  return false;\n                }\n                if (obj !== null) {\n                  if (args === null) {\n                    args = [];\n                  }\n                  args.push(obj);\n                  if (args.length > 33) {\n                    throw new _util.FormatError(\"Too many arguments\");\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"preprocessCommand\",\n            value: function preprocessCommand(fn, args) {\n              switch (fn | 0) {\n                case _util.OPS.save:\n                  this.stateManager.save();\n                  break;\n                case _util.OPS.restore:\n                  this.stateManager.restore();\n                  break;\n                case _util.OPS.transform:\n                  this.stateManager.transform(args);\n                  break;\n              }\n            }\n          }, {\n            key: \"savedStatesDepth\",\n            get: function get() {\n              return this.stateManager.stateStack.length;\n            }\n          }]);\n          return EvaluatorPreprocessor;\n        }();\n        exports.EvaluatorPreprocessor = EvaluatorPreprocessor;\n\n        /***/\n      }, /* 16 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.IdentityCMap = exports.CMapFactory = exports.CMap = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _parser = __w_pdfjs_require__(17);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _stream = __w_pdfjs_require__(10);\n        var BUILT_IN_CMAPS = [\"Adobe-GB1-UCS2\", \"Adobe-CNS1-UCS2\", \"Adobe-Japan1-UCS2\", \"Adobe-Korea1-UCS2\", \"78-EUC-H\", \"78-EUC-V\", \"78-H\", \"78-RKSJ-H\", \"78-RKSJ-V\", \"78-V\", \"78ms-RKSJ-H\", \"78ms-RKSJ-V\", \"83pv-RKSJ-H\", \"90ms-RKSJ-H\", \"90ms-RKSJ-V\", \"90msp-RKSJ-H\", \"90msp-RKSJ-V\", \"90pv-RKSJ-H\", \"90pv-RKSJ-V\", \"Add-H\", \"Add-RKSJ-H\", \"Add-RKSJ-V\", \"Add-V\", \"Adobe-CNS1-0\", \"Adobe-CNS1-1\", \"Adobe-CNS1-2\", \"Adobe-CNS1-3\", \"Adobe-CNS1-4\", \"Adobe-CNS1-5\", \"Adobe-CNS1-6\", \"Adobe-GB1-0\", \"Adobe-GB1-1\", \"Adobe-GB1-2\", \"Adobe-GB1-3\", \"Adobe-GB1-4\", \"Adobe-GB1-5\", \"Adobe-Japan1-0\", \"Adobe-Japan1-1\", \"Adobe-Japan1-2\", \"Adobe-Japan1-3\", \"Adobe-Japan1-4\", \"Adobe-Japan1-5\", \"Adobe-Japan1-6\", \"Adobe-Korea1-0\", \"Adobe-Korea1-1\", \"Adobe-Korea1-2\", \"B5-H\", \"B5-V\", \"B5pc-H\", \"B5pc-V\", \"CNS-EUC-H\", \"CNS-EUC-V\", \"CNS1-H\", \"CNS1-V\", \"CNS2-H\", \"CNS2-V\", \"ETHK-B5-H\", \"ETHK-B5-V\", \"ETen-B5-H\", \"ETen-B5-V\", \"ETenms-B5-H\", \"ETenms-B5-V\", \"EUC-H\", \"EUC-V\", \"Ext-H\", \"Ext-RKSJ-H\", \"Ext-RKSJ-V\", \"Ext-V\", \"GB-EUC-H\", \"GB-EUC-V\", \"GB-H\", \"GB-V\", \"GBK-EUC-H\", \"GBK-EUC-V\", \"GBK2K-H\", \"GBK2K-V\", \"GBKp-EUC-H\", \"GBKp-EUC-V\", \"GBT-EUC-H\", \"GBT-EUC-V\", \"GBT-H\", \"GBT-V\", \"GBTpc-EUC-H\", \"GBTpc-EUC-V\", \"GBpc-EUC-H\", \"GBpc-EUC-V\", \"H\", \"HKdla-B5-H\", \"HKdla-B5-V\", \"HKdlb-B5-H\", \"HKdlb-B5-V\", \"HKgccs-B5-H\", \"HKgccs-B5-V\", \"HKm314-B5-H\", \"HKm314-B5-V\", \"HKm471-B5-H\", \"HKm471-B5-V\", \"HKscs-B5-H\", \"HKscs-B5-V\", \"Hankaku\", \"Hiragana\", \"KSC-EUC-H\", \"KSC-EUC-V\", \"KSC-H\", \"KSC-Johab-H\", \"KSC-Johab-V\", \"KSC-V\", \"KSCms-UHC-H\", \"KSCms-UHC-HW-H\", \"KSCms-UHC-HW-V\", \"KSCms-UHC-V\", \"KSCpc-EUC-H\", \"KSCpc-EUC-V\", \"Katakana\", \"NWP-H\", \"NWP-V\", \"RKSJ-H\", \"RKSJ-V\", \"Roman\", \"UniCNS-UCS2-H\", \"UniCNS-UCS2-V\", \"UniCNS-UTF16-H\", \"UniCNS-UTF16-V\", \"UniCNS-UTF32-H\", \"UniCNS-UTF32-V\", \"UniCNS-UTF8-H\", \"UniCNS-UTF8-V\", \"UniGB-UCS2-H\", \"UniGB-UCS2-V\", \"UniGB-UTF16-H\", \"UniGB-UTF16-V\", \"UniGB-UTF32-H\", \"UniGB-UTF32-V\", \"UniGB-UTF8-H\", \"UniGB-UTF8-V\", \"UniJIS-UCS2-H\", \"UniJIS-UCS2-HW-H\", \"UniJIS-UCS2-HW-V\", \"UniJIS-UCS2-V\", \"UniJIS-UTF16-H\", \"UniJIS-UTF16-V\", \"UniJIS-UTF32-H\", \"UniJIS-UTF32-V\", \"UniJIS-UTF8-H\", \"UniJIS-UTF8-V\", \"UniJIS2004-UTF16-H\", \"UniJIS2004-UTF16-V\", \"UniJIS2004-UTF32-H\", \"UniJIS2004-UTF32-V\", \"UniJIS2004-UTF8-H\", \"UniJIS2004-UTF8-V\", \"UniJISPro-UCS2-HW-V\", \"UniJISPro-UCS2-V\", \"UniJISPro-UTF8-V\", \"UniJISX0213-UTF32-H\", \"UniJISX0213-UTF32-V\", \"UniJISX02132004-UTF32-H\", \"UniJISX02132004-UTF32-V\", \"UniKS-UCS2-H\", \"UniKS-UCS2-V\", \"UniKS-UTF16-H\", \"UniKS-UTF16-V\", \"UniKS-UTF32-H\", \"UniKS-UTF32-V\", \"UniKS-UTF8-H\", \"UniKS-UTF8-V\", \"V\", \"WP-Symbol\"];\n        var MAX_MAP_RANGE = Math.pow(2, 24) - 1;\n        var CMap = /*#__PURE__*/function () {\n          function CMap() {\n            var builtInCMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            _classCallCheck(this, CMap);\n            this.codespaceRanges = [[], [], [], []];\n            this.numCodespaceRanges = 0;\n            this._map = [];\n            this.name = \"\";\n            this.vertical = false;\n            this.useCMap = null;\n            this.builtInCMap = builtInCMap;\n          }\n          _createClass(CMap, [{\n            key: \"addCodespaceRange\",\n            value: function addCodespaceRange(n, low, high) {\n              this.codespaceRanges[n - 1].push(low, high);\n              this.numCodespaceRanges++;\n            }\n          }, {\n            key: \"mapCidRange\",\n            value: function mapCidRange(low, high, dstLow) {\n              if (high - low > MAX_MAP_RANGE) {\n                throw new Error(\"mapCidRange - ignoring data above MAX_MAP_RANGE.\");\n              }\n              while (low <= high) {\n                this._map[low++] = dstLow++;\n              }\n            }\n          }, {\n            key: \"mapBfRange\",\n            value: function mapBfRange(low, high, dstLow) {\n              if (high - low > MAX_MAP_RANGE) {\n                throw new Error(\"mapBfRange - ignoring data above MAX_MAP_RANGE.\");\n              }\n              var lastByte = dstLow.length - 1;\n              while (low <= high) {\n                this._map[low++] = dstLow;\n                var nextCharCode = dstLow.charCodeAt(lastByte) + 1;\n                if (nextCharCode > 0xff) {\n                  dstLow = dstLow.substring(0, lastByte - 1) + String.fromCharCode(dstLow.charCodeAt(lastByte - 1) + 1) + \"\\x00\";\n                  continue;\n                }\n                dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(nextCharCode);\n              }\n            }\n          }, {\n            key: \"mapBfRangeToArray\",\n            value: function mapBfRangeToArray(low, high, array) {\n              if (high - low > MAX_MAP_RANGE) {\n                throw new Error(\"mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.\");\n              }\n              var ii = array.length;\n              var i = 0;\n              while (low <= high && i < ii) {\n                this._map[low] = array[i++];\n                ++low;\n              }\n            }\n          }, {\n            key: \"mapOne\",\n            value: function mapOne(src, dst) {\n              this._map[src] = dst;\n            }\n          }, {\n            key: \"lookup\",\n            value: function lookup(code) {\n              return this._map[code];\n            }\n          }, {\n            key: \"contains\",\n            value: function contains(code) {\n              return this._map[code] !== undefined;\n            }\n          }, {\n            key: \"forEach\",\n            value: function forEach(callback) {\n              var map = this._map;\n              var length = map.length;\n              if (length <= 0x10000) {\n                for (var i = 0; i < length; i++) {\n                  if (map[i] !== undefined) {\n                    callback(i, map[i]);\n                  }\n                }\n              } else {\n                for (var _i17 in map) {\n                  callback(_i17, map[_i17]);\n                }\n              }\n            }\n          }, {\n            key: \"charCodeOf\",\n            value: function charCodeOf(value) {\n              var map = this._map;\n              if (map.length <= 0x10000) {\n                return map.indexOf(value);\n              }\n              for (var charCode in map) {\n                if (map[charCode] === value) {\n                  return charCode | 0;\n                }\n              }\n              return -1;\n            }\n          }, {\n            key: \"getMap\",\n            value: function getMap() {\n              return this._map;\n            }\n          }, {\n            key: \"readCharCode\",\n            value: function readCharCode(str, offset, out) {\n              var c = 0;\n              var codespaceRanges = this.codespaceRanges;\n              for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {\n                c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;\n                var codespaceRange = codespaceRanges[n];\n                for (var k = 0, kk = codespaceRange.length; k < kk;) {\n                  var low = codespaceRange[k++];\n                  var high = codespaceRange[k++];\n                  if (c >= low && c <= high) {\n                    out.charcode = c;\n                    out.length = n + 1;\n                    return;\n                  }\n                }\n              }\n              out.charcode = 0;\n              out.length = 1;\n            }\n          }, {\n            key: \"getCharCodeLength\",\n            value: function getCharCodeLength(charCode) {\n              var codespaceRanges = this.codespaceRanges;\n              for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {\n                var codespaceRange = codespaceRanges[n];\n                for (var k = 0, kk = codespaceRange.length; k < kk;) {\n                  var low = codespaceRange[k++];\n                  var high = codespaceRange[k++];\n                  if (charCode >= low && charCode <= high) {\n                    return n + 1;\n                  }\n                }\n              }\n              return 1;\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return this._map.length;\n            }\n          }, {\n            key: \"isIdentityCMap\",\n            get: function get() {\n              if (!(this.name === \"Identity-H\" || this.name === \"Identity-V\")) {\n                return false;\n              }\n              if (this._map.length !== 0x10000) {\n                return false;\n              }\n              for (var i = 0; i < 0x10000; i++) {\n                if (this._map[i] !== i) {\n                  return false;\n                }\n              }\n              return true;\n            }\n          }]);\n          return CMap;\n        }();\n        exports.CMap = CMap;\n        var IdentityCMap = /*#__PURE__*/function (_CMap) {\n          _inherits(IdentityCMap, _CMap);\n          function IdentityCMap(vertical, n) {\n            var _this62;\n            _classCallCheck(this, IdentityCMap);\n            _this62 = _possibleConstructorReturn(this, _getPrototypeOf(IdentityCMap).call(this));\n            _this62.vertical = vertical;\n            _this62.addCodespaceRange(n, 0, 0xffff);\n            return _this62;\n          }\n          _createClass(IdentityCMap, [{\n            key: \"mapCidRange\",\n            value: function mapCidRange(low, high, dstLow) {\n              (0, _util.unreachable)(\"should not call mapCidRange\");\n            }\n          }, {\n            key: \"mapBfRange\",\n            value: function mapBfRange(low, high, dstLow) {\n              (0, _util.unreachable)(\"should not call mapBfRange\");\n            }\n          }, {\n            key: \"mapBfRangeToArray\",\n            value: function mapBfRangeToArray(low, high, array) {\n              (0, _util.unreachable)(\"should not call mapBfRangeToArray\");\n            }\n          }, {\n            key: \"mapOne\",\n            value: function mapOne(src, dst) {\n              (0, _util.unreachable)(\"should not call mapCidOne\");\n            }\n          }, {\n            key: \"lookup\",\n            value: function lookup(code) {\n              return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n            }\n          }, {\n            key: \"contains\",\n            value: function contains(code) {\n              return Number.isInteger(code) && code <= 0xffff;\n            }\n          }, {\n            key: \"forEach\",\n            value: function forEach(callback) {\n              for (var i = 0; i <= 0xffff; i++) {\n                callback(i, i);\n              }\n            }\n          }, {\n            key: \"charCodeOf\",\n            value: function charCodeOf(value) {\n              return Number.isInteger(value) && value <= 0xffff ? value : -1;\n            }\n          }, {\n            key: \"getMap\",\n            value: function getMap() {\n              var map = new Array(0x10000);\n              for (var i = 0; i <= 0xffff; i++) {\n                map[i] = i;\n              }\n              return map;\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return 0x10000;\n            }\n          }, {\n            key: \"isIdentityCMap\",\n            get: function get() {\n              (0, _util.unreachable)(\"should not access .isIdentityCMap\");\n            }\n          }]);\n          return IdentityCMap;\n        }(CMap);\n        exports.IdentityCMap = IdentityCMap;\n        var BinaryCMapReader = function BinaryCMapReaderClosure() {\n          function hexToInt(a, size) {\n            var n = 0;\n            for (var i = 0; i <= size; i++) {\n              n = n << 8 | a[i];\n            }\n            return n >>> 0;\n          }\n          function hexToStr(a, size) {\n            if (size === 1) {\n              return String.fromCharCode(a[0], a[1]);\n            }\n            if (size === 3) {\n              return String.fromCharCode(a[0], a[1], a[2], a[3]);\n            }\n            return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n          }\n          function addHex(a, b, size) {\n            var c = 0;\n            for (var i = size; i >= 0; i--) {\n              c += a[i] + b[i];\n              a[i] = c & 255;\n              c >>= 8;\n            }\n          }\n          function incHex(a, size) {\n            var c = 1;\n            for (var i = size; i >= 0 && c > 0; i--) {\n              c += a[i];\n              a[i] = c & 255;\n              c >>= 8;\n            }\n          }\n          var MAX_NUM_SIZE = 16;\n          var MAX_ENCODED_NUM_SIZE = 19;\n          var BinaryCMapStream = /*#__PURE__*/function () {\n            function BinaryCMapStream(data) {\n              _classCallCheck(this, BinaryCMapStream);\n              this.buffer = data;\n              this.pos = 0;\n              this.end = data.length;\n              this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n            }\n            _createClass(BinaryCMapStream, [{\n              key: \"readByte\",\n              value: function readByte() {\n                if (this.pos >= this.end) {\n                  return -1;\n                }\n                return this.buffer[this.pos++];\n              }\n            }, {\n              key: \"readNumber\",\n              value: function readNumber() {\n                var n = 0;\n                var last;\n                do {\n                  var b = this.readByte();\n                  if (b < 0) {\n                    throw new _util.FormatError(\"unexpected EOF in bcmap\");\n                  }\n                  last = !(b & 0x80);\n                  n = n << 7 | b & 0x7f;\n                } while (!last);\n                return n;\n              }\n            }, {\n              key: \"readSigned\",\n              value: function readSigned() {\n                var n = this.readNumber();\n                return n & 1 ? ~(n >>> 1) : n >>> 1;\n              }\n            }, {\n              key: \"readHex\",\n              value: function readHex(num, size) {\n                num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n                this.pos += size + 1;\n              }\n            }, {\n              key: \"readHexNumber\",\n              value: function readHexNumber(num, size) {\n                var last;\n                var stack = this.tmpBuf;\n                var sp = 0;\n                do {\n                  var b = this.readByte();\n                  if (b < 0) {\n                    throw new _util.FormatError(\"unexpected EOF in bcmap\");\n                  }\n                  last = !(b & 0x80);\n                  stack[sp++] = b & 0x7f;\n                } while (!last);\n                var i = size,\n                  buffer = 0,\n                  bufferSize = 0;\n                while (i >= 0) {\n                  while (bufferSize < 8 && stack.length > 0) {\n                    buffer |= stack[--sp] << bufferSize;\n                    bufferSize += 7;\n                  }\n                  num[i] = buffer & 255;\n                  i--;\n                  buffer >>= 8;\n                  bufferSize -= 8;\n                }\n              }\n            }, {\n              key: \"readHexSigned\",\n              value: function readHexSigned(num, size) {\n                this.readHexNumber(num, size);\n                var sign = num[size] & 1 ? 255 : 0;\n                var c = 0;\n                for (var i = 0; i <= size; i++) {\n                  c = (c & 1) << 8 | num[i];\n                  num[i] = c >> 1 ^ sign;\n                }\n              }\n            }, {\n              key: \"readString\",\n              value: function readString() {\n                var len = this.readNumber();\n                var s = \"\";\n                for (var i = 0; i < len; i++) {\n                  s += String.fromCharCode(this.readNumber());\n                }\n                return s;\n              }\n            }]);\n            return BinaryCMapStream;\n          }();\n          var BinaryCMapReader = /*#__PURE__*/function () {\n            function BinaryCMapReader() {\n              _classCallCheck(this, BinaryCMapReader);\n            }\n            _createClass(BinaryCMapReader, [{\n              key: \"process\",\n              value: function () {\n                var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(data, cMap, extend) {\n                  var stream, header, useCMap, start, end, char, charCode, tmp, code, b, type, sequence, dataSize, ucs2DataSize, subitemsCount, i, _i18, _i19, _i20, _i21, _i22;\n                  return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n                    while (1) {\n                      switch (_context46.prev = _context46.next) {\n                        case 0:\n                          stream = new BinaryCMapStream(data);\n                          header = stream.readByte();\n                          cMap.vertical = !!(header & 1);\n                          useCMap = null;\n                          start = new Uint8Array(MAX_NUM_SIZE);\n                          end = new Uint8Array(MAX_NUM_SIZE);\n                          char = new Uint8Array(MAX_NUM_SIZE);\n                          charCode = new Uint8Array(MAX_NUM_SIZE);\n                          tmp = new Uint8Array(MAX_NUM_SIZE);\n                        case 9:\n                          if (!((b = stream.readByte()) >= 0)) {\n                            _context46.next = 68;\n                            break;\n                          }\n                          type = b >> 5;\n                          if (!(type === 7)) {\n                            _context46.next = 20;\n                            break;\n                          }\n                          _context46.t0 = b & 0x1f;\n                          _context46.next = _context46.t0 === 0 ? 15 : _context46.t0 === 1 ? 17 : 19;\n                          break;\n                        case 15:\n                          stream.readString();\n                          return _context46.abrupt(\"break\", 19);\n                        case 17:\n                          useCMap = stream.readString();\n                          return _context46.abrupt(\"break\", 19);\n                        case 19:\n                          return _context46.abrupt(\"continue\", 9);\n                        case 20:\n                          sequence = !!(b & 0x10);\n                          dataSize = b & 15;\n                          if (!(dataSize + 1 > MAX_NUM_SIZE)) {\n                            _context46.next = 24;\n                            break;\n                          }\n                          throw new Error(\"BinaryCMapReader.process: Invalid dataSize.\");\n                        case 24:\n                          ucs2DataSize = 1;\n                          subitemsCount = stream.readNumber();\n                          _context46.t1 = type;\n                          _context46.next = _context46.t1 === 0 ? 29 : _context46.t1 === 1 ? 35 : _context46.t1 === 2 ? 41 : _context46.t1 === 3 ? 46 : _context46.t1 === 4 ? 53 : _context46.t1 === 5 ? 58 : 65;\n                          break;\n                        case 29:\n                          stream.readHex(start, dataSize);\n                          stream.readHexNumber(end, dataSize);\n                          addHex(end, start, dataSize);\n                          cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n                          for (i = 1; i < subitemsCount; i++) {\n                            incHex(end, dataSize);\n                            stream.readHexNumber(start, dataSize);\n                            addHex(start, end, dataSize);\n                            stream.readHexNumber(end, dataSize);\n                            addHex(end, start, dataSize);\n                            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 35:\n                          stream.readHex(start, dataSize);\n                          stream.readHexNumber(end, dataSize);\n                          addHex(end, start, dataSize);\n                          stream.readNumber();\n                          for (_i18 = 1; _i18 < subitemsCount; _i18++) {\n                            incHex(end, dataSize);\n                            stream.readHexNumber(start, dataSize);\n                            addHex(start, end, dataSize);\n                            stream.readHexNumber(end, dataSize);\n                            addHex(end, start, dataSize);\n                            stream.readNumber();\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 41:\n                          stream.readHex(char, dataSize);\n                          code = stream.readNumber();\n                          cMap.mapOne(hexToInt(char, dataSize), code);\n                          for (_i19 = 1; _i19 < subitemsCount; _i19++) {\n                            incHex(char, dataSize);\n                            if (!sequence) {\n                              stream.readHexNumber(tmp, dataSize);\n                              addHex(char, tmp, dataSize);\n                            }\n                            code = stream.readSigned() + (code + 1);\n                            cMap.mapOne(hexToInt(char, dataSize), code);\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 46:\n                          stream.readHex(start, dataSize);\n                          stream.readHexNumber(end, dataSize);\n                          addHex(end, start, dataSize);\n                          code = stream.readNumber();\n                          cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n                          for (_i20 = 1; _i20 < subitemsCount; _i20++) {\n                            incHex(end, dataSize);\n                            if (!sequence) {\n                              stream.readHexNumber(start, dataSize);\n                              addHex(start, end, dataSize);\n                            } else {\n                              start.set(end);\n                            }\n                            stream.readHexNumber(end, dataSize);\n                            addHex(end, start, dataSize);\n                            code = stream.readNumber();\n                            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 53:\n                          stream.readHex(char, ucs2DataSize);\n                          stream.readHex(charCode, dataSize);\n                          cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n                          for (_i21 = 1; _i21 < subitemsCount; _i21++) {\n                            incHex(char, ucs2DataSize);\n                            if (!sequence) {\n                              stream.readHexNumber(tmp, ucs2DataSize);\n                              addHex(char, tmp, ucs2DataSize);\n                            }\n                            incHex(charCode, dataSize);\n                            stream.readHexSigned(tmp, dataSize);\n                            addHex(charCode, tmp, dataSize);\n                            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 58:\n                          stream.readHex(start, ucs2DataSize);\n                          stream.readHexNumber(end, ucs2DataSize);\n                          addHex(end, start, ucs2DataSize);\n                          stream.readHex(charCode, dataSize);\n                          cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n                          for (_i22 = 1; _i22 < subitemsCount; _i22++) {\n                            incHex(end, ucs2DataSize);\n                            if (!sequence) {\n                              stream.readHexNumber(start, ucs2DataSize);\n                              addHex(start, end, ucs2DataSize);\n                            } else {\n                              start.set(end);\n                            }\n                            stream.readHexNumber(end, ucs2DataSize);\n                            addHex(end, start, ucs2DataSize);\n                            stream.readHex(charCode, dataSize);\n                            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n                          }\n                          return _context46.abrupt(\"break\", 66);\n                        case 65:\n                          throw new Error(\"BinaryCMapReader.process - unknown type: \".concat(type));\n                        case 66:\n                          _context46.next = 9;\n                          break;\n                        case 68:\n                          if (!useCMap) {\n                            _context46.next = 70;\n                            break;\n                          }\n                          return _context46.abrupt(\"return\", extend(useCMap));\n                        case 70:\n                          return _context46.abrupt(\"return\", cMap);\n                        case 71:\n                        case \"end\":\n                          return _context46.stop();\n                      }\n                    }\n                  }, _callee46);\n                }));\n                function process(_x105, _x106, _x107) {\n                  return _process.apply(this, arguments);\n                }\n                return process;\n              }()\n            }]);\n            return BinaryCMapReader;\n          }();\n          return BinaryCMapReader;\n        }();\n        var CMapFactory = function CMapFactoryClosure() {\n          function strToInt(str) {\n            var a = 0;\n            for (var i = 0; i < str.length; i++) {\n              a = a << 8 | str.charCodeAt(i);\n            }\n            return a >>> 0;\n          }\n          function expectString(obj) {\n            if (typeof obj !== \"string\") {\n              throw new _util.FormatError(\"Malformed CMap: expected string.\");\n            }\n          }\n          function expectInt(obj) {\n            if (!Number.isInteger(obj)) {\n              throw new _util.FormatError(\"Malformed CMap: expected int.\");\n            }\n          }\n          function parseBfChar(cMap, lexer) {\n            while (true) {\n              var obj = lexer.getObj();\n              if (obj === _primitives.EOF) {\n                break;\n              }\n              if ((0, _primitives.isCmd)(obj, \"endbfchar\")) {\n                return;\n              }\n              expectString(obj);\n              var src = strToInt(obj);\n              obj = lexer.getObj();\n              expectString(obj);\n              var dst = obj;\n              cMap.mapOne(src, dst);\n            }\n          }\n          function parseBfRange(cMap, lexer) {\n            while (true) {\n              var obj = lexer.getObj();\n              if (obj === _primitives.EOF) {\n                break;\n              }\n              if ((0, _primitives.isCmd)(obj, \"endbfrange\")) {\n                return;\n              }\n              expectString(obj);\n              var low = strToInt(obj);\n              obj = lexer.getObj();\n              expectString(obj);\n              var high = strToInt(obj);\n              obj = lexer.getObj();\n              if (Number.isInteger(obj) || typeof obj === \"string\") {\n                var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n                cMap.mapBfRange(low, high, dstLow);\n              } else if ((0, _primitives.isCmd)(obj, \"[\")) {\n                obj = lexer.getObj();\n                var array = [];\n                while (!(0, _primitives.isCmd)(obj, \"]\") && obj !== _primitives.EOF) {\n                  array.push(obj);\n                  obj = lexer.getObj();\n                }\n                cMap.mapBfRangeToArray(low, high, array);\n              } else {\n                break;\n              }\n            }\n            throw new _util.FormatError(\"Invalid bf range.\");\n          }\n          function parseCidChar(cMap, lexer) {\n            while (true) {\n              var obj = lexer.getObj();\n              if (obj === _primitives.EOF) {\n                break;\n              }\n              if ((0, _primitives.isCmd)(obj, \"endcidchar\")) {\n                return;\n              }\n              expectString(obj);\n              var src = strToInt(obj);\n              obj = lexer.getObj();\n              expectInt(obj);\n              var dst = obj;\n              cMap.mapOne(src, dst);\n            }\n          }\n          function parseCidRange(cMap, lexer) {\n            while (true) {\n              var obj = lexer.getObj();\n              if (obj === _primitives.EOF) {\n                break;\n              }\n              if ((0, _primitives.isCmd)(obj, \"endcidrange\")) {\n                return;\n              }\n              expectString(obj);\n              var low = strToInt(obj);\n              obj = lexer.getObj();\n              expectString(obj);\n              var high = strToInt(obj);\n              obj = lexer.getObj();\n              expectInt(obj);\n              var dstLow = obj;\n              cMap.mapCidRange(low, high, dstLow);\n            }\n          }\n          function parseCodespaceRange(cMap, lexer) {\n            while (true) {\n              var obj = lexer.getObj();\n              if (obj === _primitives.EOF) {\n                break;\n              }\n              if ((0, _primitives.isCmd)(obj, \"endcodespacerange\")) {\n                return;\n              }\n              if (typeof obj !== \"string\") {\n                break;\n              }\n              var low = strToInt(obj);\n              obj = lexer.getObj();\n              if (typeof obj !== \"string\") {\n                break;\n              }\n              var high = strToInt(obj);\n              cMap.addCodespaceRange(obj.length, low, high);\n            }\n            throw new _util.FormatError(\"Invalid codespace range.\");\n          }\n          function parseWMode(cMap, lexer) {\n            var obj = lexer.getObj();\n            if (Number.isInteger(obj)) {\n              cMap.vertical = !!obj;\n            }\n          }\n          function parseCMapName(cMap, lexer) {\n            var obj = lexer.getObj();\n            if (obj instanceof _primitives.Name) {\n              cMap.name = obj.name;\n            }\n          }\n          function parseCMap(_x108, _x109, _x110, _x111) {\n            return _parseCMap.apply(this, arguments);\n          }\n          function _parseCMap() {\n            _parseCMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(cMap, lexer, fetchBuiltInCMap, useCMap) {\n              var previous, embeddedUseCMap, obj;\n              return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n                while (1) {\n                  switch (_context48.prev = _context48.next) {\n                    case 0:\n                      if (!true) {\n                        _context48.next = 39;\n                        break;\n                      }\n                      _context48.prev = 1;\n                      obj = lexer.getObj();\n                      if (!(obj === _primitives.EOF)) {\n                        _context48.next = 7;\n                        break;\n                      }\n                      return _context48.abrupt(\"break\", 39);\n                    case 7:\n                      if (!(obj instanceof _primitives.Name)) {\n                        _context48.next = 12;\n                        break;\n                      }\n                      if (obj.name === \"WMode\") {\n                        parseWMode(cMap, lexer);\n                      } else if (obj.name === \"CMapName\") {\n                        parseCMapName(cMap, lexer);\n                      }\n                      previous = obj;\n                      _context48.next = 29;\n                      break;\n                    case 12:\n                      if (!(obj instanceof _primitives.Cmd)) {\n                        _context48.next = 29;\n                        break;\n                      }\n                      _context48.t0 = obj.cmd;\n                      _context48.next = _context48.t0 === \"endcmap\" ? 16 : _context48.t0 === \"usecmap\" ? 17 : _context48.t0 === \"begincodespacerange\" ? 19 : _context48.t0 === \"beginbfchar\" ? 21 : _context48.t0 === \"begincidchar\" ? 23 : _context48.t0 === \"beginbfrange\" ? 25 : _context48.t0 === \"begincidrange\" ? 27 : 29;\n                      break;\n                    case 16:\n                      return _context48.abrupt(\"break\", 39);\n                    case 17:\n                      if (previous instanceof _primitives.Name) {\n                        embeddedUseCMap = previous.name;\n                      }\n                      return _context48.abrupt(\"break\", 29);\n                    case 19:\n                      parseCodespaceRange(cMap, lexer);\n                      return _context48.abrupt(\"break\", 29);\n                    case 21:\n                      parseBfChar(cMap, lexer);\n                      return _context48.abrupt(\"break\", 29);\n                    case 23:\n                      parseCidChar(cMap, lexer);\n                      return _context48.abrupt(\"break\", 29);\n                    case 25:\n                      parseBfRange(cMap, lexer);\n                      return _context48.abrupt(\"break\", 29);\n                    case 27:\n                      parseCidRange(cMap, lexer);\n                      return _context48.abrupt(\"break\", 29);\n                    case 29:\n                      _context48.next = 37;\n                      break;\n                    case 31:\n                      _context48.prev = 31;\n                      _context48.t1 = _context48[\"catch\"](1);\n                      if (!(_context48.t1 instanceof _core_utils.MissingDataException)) {\n                        _context48.next = 35;\n                        break;\n                      }\n                      throw _context48.t1;\n                    case 35:\n                      (0, _util.warn)(\"Invalid cMap data: \" + _context48.t1);\n                      return _context48.abrupt(\"continue\", 0);\n                    case 37:\n                      _context48.next = 0;\n                      break;\n                    case 39:\n                      if (!useCMap && embeddedUseCMap) {\n                        useCMap = embeddedUseCMap;\n                      }\n                      if (!useCMap) {\n                        _context48.next = 42;\n                        break;\n                      }\n                      return _context48.abrupt(\"return\", extendCMap(cMap, fetchBuiltInCMap, useCMap));\n                    case 42:\n                      return _context48.abrupt(\"return\", cMap);\n                    case 43:\n                    case \"end\":\n                      return _context48.stop();\n                  }\n                }\n              }, _callee48, null, [[1, 31]]);\n            }));\n            return _parseCMap.apply(this, arguments);\n          }\n          function extendCMap(_x112, _x113, _x114) {\n            return _extendCMap.apply(this, arguments);\n          }\n          function _extendCMap() {\n            _extendCMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49(cMap, fetchBuiltInCMap, useCMap) {\n              var useCodespaceRanges, i;\n              return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n                while (1) {\n                  switch (_context49.prev = _context49.next) {\n                    case 0:\n                      _context49.next = 2;\n                      return createBuiltInCMap(useCMap, fetchBuiltInCMap);\n                    case 2:\n                      cMap.useCMap = _context49.sent;\n                      if (cMap.numCodespaceRanges === 0) {\n                        useCodespaceRanges = cMap.useCMap.codespaceRanges;\n                        for (i = 0; i < useCodespaceRanges.length; i++) {\n                          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n                        }\n                        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n                      }\n                      cMap.useCMap.forEach(function (key, value) {\n                        if (!cMap.contains(key)) {\n                          cMap.mapOne(key, cMap.useCMap.lookup(key));\n                        }\n                      });\n                      return _context49.abrupt(\"return\", cMap);\n                    case 6:\n                    case \"end\":\n                      return _context49.stop();\n                  }\n                }\n              }, _callee49);\n            }));\n            return _extendCMap.apply(this, arguments);\n          }\n          function createBuiltInCMap(_x115, _x116) {\n            return _createBuiltInCMap.apply(this, arguments);\n          }\n          function _createBuiltInCMap() {\n            _createBuiltInCMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(name, fetchBuiltInCMap) {\n              var _yield$fetchBuiltInCM, cMapData, compressionType, cMap, lexer;\n              return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n                while (1) {\n                  switch (_context50.prev = _context50.next) {\n                    case 0:\n                      if (!(name === \"Identity-H\")) {\n                        _context50.next = 4;\n                        break;\n                      }\n                      return _context50.abrupt(\"return\", new IdentityCMap(false, 2));\n                    case 4:\n                      if (!(name === \"Identity-V\")) {\n                        _context50.next = 6;\n                        break;\n                      }\n                      return _context50.abrupt(\"return\", new IdentityCMap(true, 2));\n                    case 6:\n                      if (BUILT_IN_CMAPS.includes(name)) {\n                        _context50.next = 8;\n                        break;\n                      }\n                      throw new Error(\"Unknown CMap name: \" + name);\n                    case 8:\n                      if (fetchBuiltInCMap) {\n                        _context50.next = 10;\n                        break;\n                      }\n                      throw new Error(\"Built-in CMap parameters are not provided.\");\n                    case 10:\n                      _context50.next = 12;\n                      return fetchBuiltInCMap(name);\n                    case 12:\n                      _yield$fetchBuiltInCM = _context50.sent;\n                      cMapData = _yield$fetchBuiltInCM.cMapData;\n                      compressionType = _yield$fetchBuiltInCM.compressionType;\n                      cMap = new CMap(true);\n                      if (!(compressionType === _util.CMapCompressionType.BINARY)) {\n                        _context50.next = 18;\n                        break;\n                      }\n                      return _context50.abrupt(\"return\", new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {\n                        return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n                      }));\n                    case 18:\n                      if (!(compressionType === _util.CMapCompressionType.NONE)) {\n                        _context50.next = 21;\n                        break;\n                      }\n                      lexer = new _parser.Lexer(new _stream.Stream(cMapData));\n                      return _context50.abrupt(\"return\", parseCMap(cMap, lexer, fetchBuiltInCMap, null));\n                    case 21:\n                      throw new Error(\"TODO: Only BINARY/NONE CMap compression is currently supported.\");\n                    case 22:\n                    case \"end\":\n                      return _context50.stop();\n                  }\n                }\n              }, _callee50);\n            }));\n            return _createBuiltInCMap.apply(this, arguments);\n          }\n          return {\n            create: function () {\n              var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(params) {\n                var encoding, fetchBuiltInCMap, useCMap, parsedCMap;\n                return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n                  while (1) {\n                    switch (_context47.prev = _context47.next) {\n                      case 0:\n                        encoding = params.encoding;\n                        fetchBuiltInCMap = params.fetchBuiltInCMap;\n                        useCMap = params.useCMap;\n                        if (!(encoding instanceof _primitives.Name)) {\n                          _context47.next = 7;\n                          break;\n                        }\n                        return _context47.abrupt(\"return\", createBuiltInCMap(encoding.name, fetchBuiltInCMap));\n                      case 7:\n                        if (!(encoding instanceof _base_stream.BaseStream)) {\n                          _context47.next = 14;\n                          break;\n                        }\n                        _context47.next = 10;\n                        return parseCMap(new CMap(), new _parser.Lexer(encoding), fetchBuiltInCMap, useCMap);\n                      case 10:\n                        parsedCMap = _context47.sent;\n                        if (!parsedCMap.isIdentityCMap) {\n                          _context47.next = 13;\n                          break;\n                        }\n                        return _context47.abrupt(\"return\", createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap));\n                      case 13:\n                        return _context47.abrupt(\"return\", parsedCMap);\n                      case 14:\n                        throw new Error(\"Encoding required.\");\n                      case 15:\n                      case \"end\":\n                        return _context47.stop();\n                    }\n                  }\n                }, _callee47);\n              }));\n              function create(_x117) {\n                return _create2.apply(this, arguments);\n              }\n              return create;\n            }()\n          };\n        }();\n        exports.CMapFactory = CMapFactory;\n\n        /***/\n      }, /* 17 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Parser = exports.Linearization = exports.Lexer = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _ascii_85_stream = __w_pdfjs_require__(18);\n        var _ascii_hex_stream = __w_pdfjs_require__(20);\n        var _ccitt_stream = __w_pdfjs_require__(21);\n        var _flate_stream = __w_pdfjs_require__(23);\n        var _jbig2_stream = __w_pdfjs_require__(24);\n        var _jpeg_stream = __w_pdfjs_require__(27);\n        var _jpx_stream = __w_pdfjs_require__(29);\n        var _lzw_stream = __w_pdfjs_require__(31);\n        var _stream = __w_pdfjs_require__(10);\n        var _predictor_stream = __w_pdfjs_require__(32);\n        var _run_length_stream = __w_pdfjs_require__(33);\n        var MAX_LENGTH_TO_CACHE = 1000;\n        var MAX_ADLER32_LENGTH = 5552;\n        function computeAdler32(bytes) {\n          var bytesLength = bytes.length;\n          var a = 1,\n            b = 0;\n          for (var i = 0; i < bytesLength; ++i) {\n            a += bytes[i] & 0xff;\n            b += a;\n          }\n          return b % 65521 << 16 | a % 65521;\n        }\n        var Parser = /*#__PURE__*/function () {\n          function Parser(_ref53) {\n            var lexer = _ref53.lexer,\n              xref = _ref53.xref,\n              _ref53$allowStreams = _ref53.allowStreams,\n              allowStreams = _ref53$allowStreams === void 0 ? false : _ref53$allowStreams,\n              _ref53$recoveryMode = _ref53.recoveryMode,\n              recoveryMode = _ref53$recoveryMode === void 0 ? false : _ref53$recoveryMode;\n            _classCallCheck(this, Parser);\n            this.lexer = lexer;\n            this.xref = xref;\n            this.allowStreams = allowStreams;\n            this.recoveryMode = recoveryMode;\n            this.imageCache = Object.create(null);\n            this.refill();\n          }\n          _createClass(Parser, [{\n            key: \"refill\",\n            value: function refill() {\n              this.buf1 = this.lexer.getObj();\n              this.buf2 = this.lexer.getObj();\n            }\n          }, {\n            key: \"shift\",\n            value: function shift() {\n              if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === \"ID\") {\n                this.buf1 = this.buf2;\n                this.buf2 = null;\n              } else {\n                this.buf1 = this.buf2;\n                this.buf2 = this.lexer.getObj();\n              }\n            }\n          }, {\n            key: \"tryShift\",\n            value: function tryShift() {\n              try {\n                this.shift();\n                return true;\n              } catch (e) {\n                if (e instanceof _core_utils.MissingDataException) {\n                  throw e;\n                }\n                return false;\n              }\n            }\n          }, {\n            key: \"getObj\",\n            value: function getObj() {\n              var cipherTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              var buf1 = this.buf1;\n              this.shift();\n              if (buf1 instanceof _primitives.Cmd) {\n                switch (buf1.cmd) {\n                  case \"BI\":\n                    return this.makeInlineImage(cipherTransform);\n                  case \"[\":\n                    var array = [];\n                    while (!(0, _primitives.isCmd)(this.buf1, \"]\") && this.buf1 !== _primitives.EOF) {\n                      array.push(this.getObj(cipherTransform));\n                    }\n                    if (this.buf1 === _primitives.EOF) {\n                      if (this.recoveryMode) {\n                        return array;\n                      }\n                      throw new _core_utils.ParserEOFException(\"End of file inside array.\");\n                    }\n                    this.shift();\n                    return array;\n                  case \"<<\":\n                    var dict = new _primitives.Dict(this.xref);\n                    while (!(0, _primitives.isCmd)(this.buf1, \">>\") && this.buf1 !== _primitives.EOF) {\n                      if (!(this.buf1 instanceof _primitives.Name)) {\n                        (0, _util.info)(\"Malformed dictionary: key must be a name object\");\n                        this.shift();\n                        continue;\n                      }\n                      var key = this.buf1.name;\n                      this.shift();\n                      if (this.buf1 === _primitives.EOF) {\n                        break;\n                      }\n                      dict.set(key, this.getObj(cipherTransform));\n                    }\n                    if (this.buf1 === _primitives.EOF) {\n                      if (this.recoveryMode) {\n                        return dict;\n                      }\n                      throw new _core_utils.ParserEOFException(\"End of file inside dictionary.\");\n                    }\n                    if ((0, _primitives.isCmd)(this.buf2, \"stream\")) {\n                      return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;\n                    }\n                    this.shift();\n                    return dict;\n                  default:\n                    return buf1;\n                }\n              }\n              if (Number.isInteger(buf1)) {\n                if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, \"R\")) {\n                  var ref = _primitives.Ref.get(buf1, this.buf1);\n                  this.shift();\n                  this.shift();\n                  return ref;\n                }\n                return buf1;\n              }\n              if (typeof buf1 === \"string\") {\n                if (cipherTransform) {\n                  return cipherTransform.decryptString(buf1);\n                }\n                return buf1;\n              }\n              return buf1;\n            }\n          }, {\n            key: \"findDefaultInlineStreamEnd\",\n            value: function findDefaultInlineStreamEnd(stream) {\n              var E = 0x45,\n                I = 0x49,\n                SPACE = 0x20,\n                LF = 0xa,\n                CR = 0xd,\n                NUL = 0x0;\n              var lexer = this.lexer,\n                startPos = stream.pos,\n                n = 10;\n              var state = 0,\n                ch,\n                maybeEIPos;\n              while ((ch = stream.getByte()) !== -1) {\n                if (state === 0) {\n                  state = ch === E ? 1 : 0;\n                } else if (state === 1) {\n                  state = ch === I ? 2 : 0;\n                } else {\n                  (0, _util.assert)(state === 2, \"findDefaultInlineStreamEnd - invalid state.\");\n                  if (ch === SPACE || ch === LF || ch === CR) {\n                    maybeEIPos = stream.pos;\n                    var followingBytes = stream.peekBytes(n);\n                    for (var i = 0, ii = followingBytes.length; i < ii; i++) {\n                      ch = followingBytes[i];\n                      if (ch === NUL && followingBytes[i + 1] !== NUL) {\n                        continue;\n                      }\n                      if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n                        state = 0;\n                        break;\n                      }\n                    }\n                    if (state !== 2) {\n                      continue;\n                    }\n                    if (lexer.knownCommands) {\n                      var nextObj = lexer.peekObj();\n                      if (nextObj instanceof _primitives.Cmd && !lexer.knownCommands[nextObj.cmd]) {\n                        state = 0;\n                      }\n                    } else {\n                      (0, _util.warn)(\"findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.\");\n                    }\n                    if (state === 2) {\n                      break;\n                    }\n                  } else {\n                    state = 0;\n                  }\n                }\n              }\n              if (ch === -1) {\n                (0, _util.warn)(\"findDefaultInlineStreamEnd: \" + \"Reached the end of the stream without finding a valid EI marker\");\n                if (maybeEIPos) {\n                  (0, _util.warn)('... trying to recover by using the last \"EI\" occurrence.');\n                  stream.skip(-(stream.pos - maybeEIPos));\n                }\n              }\n              var endOffset = 4;\n              stream.skip(-endOffset);\n              ch = stream.peekByte();\n              stream.skip(endOffset);\n              if (!(0, _core_utils.isWhiteSpace)(ch)) {\n                endOffset--;\n              }\n              return stream.pos - endOffset - startPos;\n            }\n          }, {\n            key: \"findDCTDecodeInlineStreamEnd\",\n            value: function findDCTDecodeInlineStreamEnd(stream) {\n              var startPos = stream.pos;\n              var foundEOI = false,\n                b,\n                markerLength;\n              while ((b = stream.getByte()) !== -1) {\n                if (b !== 0xff) {\n                  continue;\n                }\n                switch (stream.getByte()) {\n                  case 0x00:\n                    break;\n                  case 0xff:\n                    stream.skip(-1);\n                    break;\n                  case 0xd9:\n                    foundEOI = true;\n                    break;\n                  case 0xc0:\n                  case 0xc1:\n                  case 0xc2:\n                  case 0xc3:\n                  case 0xc5:\n                  case 0xc6:\n                  case 0xc7:\n                  case 0xc9:\n                  case 0xca:\n                  case 0xcb:\n                  case 0xcd:\n                  case 0xce:\n                  case 0xcf:\n                  case 0xc4:\n                  case 0xcc:\n                  case 0xda:\n                  case 0xdb:\n                  case 0xdc:\n                  case 0xdd:\n                  case 0xde:\n                  case 0xdf:\n                  case 0xe0:\n                  case 0xe1:\n                  case 0xe2:\n                  case 0xe3:\n                  case 0xe4:\n                  case 0xe5:\n                  case 0xe6:\n                  case 0xe7:\n                  case 0xe8:\n                  case 0xe9:\n                  case 0xea:\n                  case 0xeb:\n                  case 0xec:\n                  case 0xed:\n                  case 0xee:\n                  case 0xef:\n                  case 0xfe:\n                    markerLength = stream.getUint16();\n                    if (markerLength > 2) {\n                      stream.skip(markerLength - 2);\n                    } else {\n                      stream.skip(-2);\n                    }\n                    break;\n                }\n                if (foundEOI) {\n                  break;\n                }\n              }\n              var length = stream.pos - startPos;\n              if (b === -1) {\n                (0, _util.warn)(\"Inline DCTDecode image stream: \" + \"EOI marker not found, searching for /EI/ instead.\");\n                stream.skip(-length);\n                return this.findDefaultInlineStreamEnd(stream);\n              }\n              this.inlineStreamSkipEI(stream);\n              return length;\n            }\n          }, {\n            key: \"findASCII85DecodeInlineStreamEnd\",\n            value: function findASCII85DecodeInlineStreamEnd(stream) {\n              var TILDE = 0x7e,\n                GT = 0x3e;\n              var startPos = stream.pos;\n              var ch;\n              while ((ch = stream.getByte()) !== -1) {\n                if (ch === TILDE) {\n                  var tildePos = stream.pos;\n                  ch = stream.peekByte();\n                  while ((0, _core_utils.isWhiteSpace)(ch)) {\n                    stream.skip();\n                    ch = stream.peekByte();\n                  }\n                  if (ch === GT) {\n                    stream.skip();\n                    break;\n                  }\n                  if (stream.pos > tildePos) {\n                    var maybeEI = stream.peekBytes(2);\n                    if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {\n                      break;\n                    }\n                  }\n                }\n              }\n              var length = stream.pos - startPos;\n              if (ch === -1) {\n                (0, _util.warn)(\"Inline ASCII85Decode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n                stream.skip(-length);\n                return this.findDefaultInlineStreamEnd(stream);\n              }\n              this.inlineStreamSkipEI(stream);\n              return length;\n            }\n          }, {\n            key: \"findASCIIHexDecodeInlineStreamEnd\",\n            value: function findASCIIHexDecodeInlineStreamEnd(stream) {\n              var GT = 0x3e;\n              var startPos = stream.pos;\n              var ch;\n              while ((ch = stream.getByte()) !== -1) {\n                if (ch === GT) {\n                  break;\n                }\n              }\n              var length = stream.pos - startPos;\n              if (ch === -1) {\n                (0, _util.warn)(\"Inline ASCIIHexDecode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n                stream.skip(-length);\n                return this.findDefaultInlineStreamEnd(stream);\n              }\n              this.inlineStreamSkipEI(stream);\n              return length;\n            }\n          }, {\n            key: \"inlineStreamSkipEI\",\n            value: function inlineStreamSkipEI(stream) {\n              var E = 0x45,\n                I = 0x49;\n              var state = 0,\n                ch;\n              while ((ch = stream.getByte()) !== -1) {\n                if (state === 0) {\n                  state = ch === E ? 1 : 0;\n                } else if (state === 1) {\n                  state = ch === I ? 2 : 0;\n                } else if (state === 2) {\n                  break;\n                }\n              }\n            }\n          }, {\n            key: \"makeInlineImage\",\n            value: function makeInlineImage(cipherTransform) {\n              var lexer = this.lexer;\n              var stream = lexer.stream;\n              var dict = new _primitives.Dict(this.xref);\n              var dictLength;\n              while (!(0, _primitives.isCmd)(this.buf1, \"ID\") && this.buf1 !== _primitives.EOF) {\n                if (!(this.buf1 instanceof _primitives.Name)) {\n                  throw new _util.FormatError(\"Dictionary key must be a name object\");\n                }\n                var key = this.buf1.name;\n                this.shift();\n                if (this.buf1 === _primitives.EOF) {\n                  break;\n                }\n                dict.set(key, this.getObj(cipherTransform));\n              }\n              if (lexer.beginInlineImagePos !== -1) {\n                dictLength = stream.pos - lexer.beginInlineImagePos;\n              }\n              var filter = dict.get(\"F\", \"Filter\");\n              var filterName;\n              if (filter instanceof _primitives.Name) {\n                filterName = filter.name;\n              } else if (Array.isArray(filter)) {\n                var filterZero = this.xref.fetchIfRef(filter[0]);\n                if (filterZero instanceof _primitives.Name) {\n                  filterName = filterZero.name;\n                }\n              }\n              var startPos = stream.pos;\n              var length;\n              switch (filterName) {\n                case \"DCT\":\n                case \"DCTDecode\":\n                  length = this.findDCTDecodeInlineStreamEnd(stream);\n                  break;\n                case \"A85\":\n                case \"ASCII85Decode\":\n                  length = this.findASCII85DecodeInlineStreamEnd(stream);\n                  break;\n                case \"AHx\":\n                case \"ASCIIHexDecode\":\n                  length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n                  break;\n                default:\n                  length = this.findDefaultInlineStreamEnd(stream);\n              }\n              var imageStream = stream.makeSubStream(startPos, length, dict);\n              var cacheKey;\n              if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n                var imageBytes = imageStream.getBytes();\n                imageStream.reset();\n                var initialStreamPos = stream.pos;\n                stream.pos = lexer.beginInlineImagePos;\n                var dictBytes = stream.getBytes(dictLength);\n                stream.pos = initialStreamPos;\n                cacheKey = computeAdler32(imageBytes) + \"_\" + computeAdler32(dictBytes);\n                var cacheEntry = this.imageCache[cacheKey];\n                if (cacheEntry !== undefined) {\n                  this.buf2 = _primitives.Cmd.get(\"EI\");\n                  this.shift();\n                  cacheEntry.reset();\n                  return cacheEntry;\n                }\n              }\n              if (cipherTransform) {\n                imageStream = cipherTransform.createStream(imageStream, length);\n              }\n              imageStream = this.filter(imageStream, dict, length);\n              imageStream.dict = dict;\n              if (cacheKey !== undefined) {\n                imageStream.cacheKey = \"inline_\".concat(length, \"_\").concat(cacheKey);\n                this.imageCache[cacheKey] = imageStream;\n              }\n              this.buf2 = _primitives.Cmd.get(\"EI\");\n              this.shift();\n              return imageStream;\n            }\n          }, {\n            key: \"_findStreamLength\",\n            value: function _findStreamLength(startPos, signature) {\n              var stream = this.lexer.stream;\n              stream.pos = startPos;\n              var SCAN_BLOCK_LENGTH = 2048;\n              var signatureLength = signature.length;\n              while (stream.pos < stream.end) {\n                var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n                var scanLength = scanBytes.length - signatureLength;\n                if (scanLength <= 0) {\n                  break;\n                }\n                var pos = 0;\n                while (pos < scanLength) {\n                  var j = 0;\n                  while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n                    j++;\n                  }\n                  if (j >= signatureLength) {\n                    stream.pos += pos;\n                    return stream.pos - startPos;\n                  }\n                  pos++;\n                }\n                stream.pos += scanLength;\n              }\n              return -1;\n            }\n          }, {\n            key: \"makeStream\",\n            value: function makeStream(dict, cipherTransform) {\n              var lexer = this.lexer;\n              var stream = lexer.stream;\n              lexer.skipToNextLine();\n              var startPos = stream.pos - 1;\n              var length = dict.get(\"Length\");\n              if (!Number.isInteger(length)) {\n                (0, _util.info)(\"Bad length \\\"\".concat(length && length.toString(), \"\\\" in stream.\"));\n                length = 0;\n              }\n              stream.pos = startPos + length;\n              lexer.nextChar();\n              if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, \"endstream\")) {\n                this.shift();\n              } else {\n                var ENDSTREAM_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d]);\n                var actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n                if (actualLength < 0) {\n                  var MAX_TRUNCATION = 1;\n                  for (var i = 1; i <= MAX_TRUNCATION; i++) {\n                    var end = ENDSTREAM_SIGNATURE.length - i;\n                    var TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n                    var maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);\n                    if (maybeLength >= 0) {\n                      var lastByte = stream.peekBytes(end + 1)[end];\n                      if (!(0, _core_utils.isWhiteSpace)(lastByte)) {\n                        break;\n                      }\n                      (0, _util.info)(\"Found \\\"\".concat((0, _util.bytesToString)(TRUNCATED_SIGNATURE), \"\\\" when \") + \"searching for endstream command.\");\n                      actualLength = maybeLength;\n                      break;\n                    }\n                  }\n                  if (actualLength < 0) {\n                    throw new _util.FormatError(\"Missing endstream command.\");\n                  }\n                }\n                length = actualLength;\n                lexer.nextChar();\n                this.shift();\n                this.shift();\n              }\n              this.shift();\n              stream = stream.makeSubStream(startPos, length, dict);\n              if (cipherTransform) {\n                stream = cipherTransform.createStream(stream, length);\n              }\n              stream = this.filter(stream, dict, length);\n              stream.dict = dict;\n              return stream;\n            }\n          }, {\n            key: \"filter\",\n            value: function filter(stream, dict, length) {\n              var filter = dict.get(\"F\", \"Filter\");\n              var params = dict.get(\"DP\", \"DecodeParms\");\n              if (filter instanceof _primitives.Name) {\n                if (Array.isArray(params)) {\n                  (0, _util.warn)(\"/DecodeParms should not be an Array, when /Filter is a Name.\");\n                }\n                return this.makeFilter(stream, filter.name, length, params);\n              }\n              var maybeLength = length;\n              if (Array.isArray(filter)) {\n                var filterArray = filter;\n                var paramsArray = params;\n                for (var i = 0, ii = filterArray.length; i < ii; ++i) {\n                  filter = this.xref.fetchIfRef(filterArray[i]);\n                  if (!(filter instanceof _primitives.Name)) {\n                    throw new _util.FormatError(\"Bad filter name \\\"\".concat(filter, \"\\\"\"));\n                  }\n                  params = null;\n                  if (Array.isArray(paramsArray) && i in paramsArray) {\n                    params = this.xref.fetchIfRef(paramsArray[i]);\n                  }\n                  stream = this.makeFilter(stream, filter.name, maybeLength, params);\n                  maybeLength = null;\n                }\n              }\n              return stream;\n            }\n          }, {\n            key: \"makeFilter\",\n            value: function makeFilter(stream, name, maybeLength, params) {\n              if (maybeLength === 0) {\n                (0, _util.warn)(\"Empty \\\"\".concat(name, \"\\\" stream.\"));\n                return new _stream.NullStream();\n              }\n              var xrefStats = this.xref.stats;\n              try {\n                switch (name) {\n                  case \"Fl\":\n                  case \"FlateDecode\":\n                    xrefStats.addStreamType(_util.StreamType.FLATE);\n                    if (params) {\n                      return new _predictor_stream.PredictorStream(new _flate_stream.FlateStream(stream, maybeLength), maybeLength, params);\n                    }\n                    return new _flate_stream.FlateStream(stream, maybeLength);\n                  case \"LZW\":\n                  case \"LZWDecode\":\n                    xrefStats.addStreamType(_util.StreamType.LZW);\n                    var earlyChange = 1;\n                    if (params) {\n                      if (params.has(\"EarlyChange\")) {\n                        earlyChange = params.get(\"EarlyChange\");\n                      }\n                      return new _predictor_stream.PredictorStream(new _lzw_stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);\n                    }\n                    return new _lzw_stream.LZWStream(stream, maybeLength, earlyChange);\n                  case \"DCT\":\n                  case \"DCTDecode\":\n                    xrefStats.addStreamType(_util.StreamType.DCT);\n                    return new _jpeg_stream.JpegStream(stream, maybeLength, params);\n                  case \"JPX\":\n                  case \"JPXDecode\":\n                    xrefStats.addStreamType(_util.StreamType.JPX);\n                    return new _jpx_stream.JpxStream(stream, maybeLength, params);\n                  case \"A85\":\n                  case \"ASCII85Decode\":\n                    xrefStats.addStreamType(_util.StreamType.A85);\n                    return new _ascii_85_stream.Ascii85Stream(stream, maybeLength);\n                  case \"AHx\":\n                  case \"ASCIIHexDecode\":\n                    xrefStats.addStreamType(_util.StreamType.AHX);\n                    return new _ascii_hex_stream.AsciiHexStream(stream, maybeLength);\n                  case \"CCF\":\n                  case \"CCITTFaxDecode\":\n                    xrefStats.addStreamType(_util.StreamType.CCF);\n                    return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);\n                  case \"RL\":\n                  case \"RunLengthDecode\":\n                    xrefStats.addStreamType(_util.StreamType.RLX);\n                    return new _run_length_stream.RunLengthStream(stream, maybeLength);\n                  case \"JBIG2Decode\":\n                    xrefStats.addStreamType(_util.StreamType.JBIG);\n                    return new _jbig2_stream.Jbig2Stream(stream, maybeLength, params);\n                }\n                (0, _util.warn)(\"Filter \\\"\".concat(name, \"\\\" is not supported.\"));\n                return stream;\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Invalid stream: \\\"\".concat(ex, \"\\\"\"));\n                return new _stream.NullStream();\n              }\n            }\n          }]);\n          return Parser;\n        }();\n        exports.Parser = Parser;\n        var specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        function toHexDigit(ch) {\n          if (ch >= 0x30 && ch <= 0x39) {\n            return ch & 0x0f;\n          }\n          if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n            return (ch & 0x0f) + 9;\n          }\n          return -1;\n        }\n        var Lexer = /*#__PURE__*/function () {\n          function Lexer(stream) {\n            var knownCommands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            _classCallCheck(this, Lexer);\n            this.stream = stream;\n            this.nextChar();\n            this.strBuf = [];\n            this.knownCommands = knownCommands;\n            this._hexStringNumWarn = 0;\n            this.beginInlineImagePos = -1;\n          }\n          _createClass(Lexer, [{\n            key: \"nextChar\",\n            value: function nextChar() {\n              return this.currentChar = this.stream.getByte();\n            }\n          }, {\n            key: \"peekChar\",\n            value: function peekChar() {\n              return this.stream.peekByte();\n            }\n          }, {\n            key: \"getNumber\",\n            value: function getNumber() {\n              var ch = this.currentChar;\n              var eNotation = false;\n              var divideBy = 0;\n              var sign = 0;\n              if (ch === 0x2d) {\n                sign = -1;\n                ch = this.nextChar();\n                if (ch === 0x2d) {\n                  ch = this.nextChar();\n                }\n              } else if (ch === 0x2b) {\n                sign = 1;\n                ch = this.nextChar();\n              }\n              if (ch === 0x0a || ch === 0x0d) {\n                do {\n                  ch = this.nextChar();\n                } while (ch === 0x0a || ch === 0x0d);\n              }\n              if (ch === 0x2e) {\n                divideBy = 10;\n                ch = this.nextChar();\n              }\n              if (ch < 0x30 || ch > 0x39) {\n                if ((0, _core_utils.isWhiteSpace)(ch) || ch === -1) {\n                  if (divideBy === 10 && sign === 0) {\n                    (0, _util.warn)(\"Lexer.getNumber - treating a single decimal point as zero.\");\n                    return 0;\n                  }\n                  if (divideBy === 0 && sign === -1) {\n                    (0, _util.warn)(\"Lexer.getNumber - treating a single minus sign as zero.\");\n                    return 0;\n                  }\n                }\n                throw new _util.FormatError(\"Invalid number: \".concat(String.fromCharCode(ch), \" (charCode \").concat(ch, \")\"));\n              }\n              sign = sign || 1;\n              var baseValue = ch - 0x30;\n              var powerValue = 0;\n              var powerValueSign = 1;\n              while ((ch = this.nextChar()) >= 0) {\n                if (ch >= 0x30 && ch <= 0x39) {\n                  var currentDigit = ch - 0x30;\n                  if (eNotation) {\n                    powerValue = powerValue * 10 + currentDigit;\n                  } else {\n                    if (divideBy !== 0) {\n                      divideBy *= 10;\n                    }\n                    baseValue = baseValue * 10 + currentDigit;\n                  }\n                } else if (ch === 0x2e) {\n                  if (divideBy === 0) {\n                    divideBy = 1;\n                  } else {\n                    break;\n                  }\n                } else if (ch === 0x2d) {\n                  (0, _util.warn)(\"Badly formatted number: minus sign in the middle\");\n                } else if (ch === 0x45 || ch === 0x65) {\n                  ch = this.peekChar();\n                  if (ch === 0x2b || ch === 0x2d) {\n                    powerValueSign = ch === 0x2d ? -1 : 1;\n                    this.nextChar();\n                  } else if (ch < 0x30 || ch > 0x39) {\n                    break;\n                  }\n                  eNotation = true;\n                } else {\n                  break;\n                }\n              }\n              if (divideBy !== 0) {\n                baseValue /= divideBy;\n              }\n              if (eNotation) {\n                baseValue *= Math.pow(10, powerValueSign * powerValue);\n              }\n              return sign * baseValue;\n            }\n          }, {\n            key: \"getString\",\n            value: function getString() {\n              var numParen = 1;\n              var done = false;\n              var strBuf = this.strBuf;\n              strBuf.length = 0;\n              var ch = this.nextChar();\n              while (true) {\n                var charBuffered = false;\n                switch (ch | 0) {\n                  case -1:\n                    (0, _util.warn)(\"Unterminated string\");\n                    done = true;\n                    break;\n                  case 0x28:\n                    ++numParen;\n                    strBuf.push(\"(\");\n                    break;\n                  case 0x29:\n                    if (--numParen === 0) {\n                      this.nextChar();\n                      done = true;\n                    } else {\n                      strBuf.push(\")\");\n                    }\n                    break;\n                  case 0x5c:\n                    ch = this.nextChar();\n                    switch (ch) {\n                      case -1:\n                        (0, _util.warn)(\"Unterminated string\");\n                        done = true;\n                        break;\n                      case 0x6e:\n                        strBuf.push(\"\\n\");\n                        break;\n                      case 0x72:\n                        strBuf.push(\"\\r\");\n                        break;\n                      case 0x74:\n                        strBuf.push(\"\\t\");\n                        break;\n                      case 0x62:\n                        strBuf.push(\"\\b\");\n                        break;\n                      case 0x66:\n                        strBuf.push(\"\\f\");\n                        break;\n                      case 0x5c:\n                      case 0x28:\n                      case 0x29:\n                        strBuf.push(String.fromCharCode(ch));\n                        break;\n                      case 0x30:\n                      case 0x31:\n                      case 0x32:\n                      case 0x33:\n                      case 0x34:\n                      case 0x35:\n                      case 0x36:\n                      case 0x37:\n                        var x = ch & 0x0f;\n                        ch = this.nextChar();\n                        charBuffered = true;\n                        if (ch >= 0x30 && ch <= 0x37) {\n                          x = (x << 3) + (ch & 0x0f);\n                          ch = this.nextChar();\n                          if (ch >= 0x30 && ch <= 0x37) {\n                            charBuffered = false;\n                            x = (x << 3) + (ch & 0x0f);\n                          }\n                        }\n                        strBuf.push(String.fromCharCode(x));\n                        break;\n                      case 0x0d:\n                        if (this.peekChar() === 0x0a) {\n                          this.nextChar();\n                        }\n                        break;\n                      case 0x0a:\n                        break;\n                      default:\n                        strBuf.push(String.fromCharCode(ch));\n                        break;\n                    }\n                    break;\n                  default:\n                    strBuf.push(String.fromCharCode(ch));\n                    break;\n                }\n                if (done) {\n                  break;\n                }\n                if (!charBuffered) {\n                  ch = this.nextChar();\n                }\n              }\n              return strBuf.join(\"\");\n            }\n          }, {\n            key: \"getName\",\n            value: function getName() {\n              var ch, previousCh;\n              var strBuf = this.strBuf;\n              strBuf.length = 0;\n              while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n                if (ch === 0x23) {\n                  ch = this.nextChar();\n                  if (specialChars[ch]) {\n                    (0, _util.warn)(\"Lexer_getName: \" + \"NUMBER SIGN (#) should be followed by a hexadecimal number.\");\n                    strBuf.push(\"#\");\n                    break;\n                  }\n                  var x = toHexDigit(ch);\n                  if (x !== -1) {\n                    previousCh = ch;\n                    ch = this.nextChar();\n                    var x2 = toHexDigit(ch);\n                    if (x2 === -1) {\n                      (0, _util.warn)(\"Lexer_getName: Illegal digit (\".concat(String.fromCharCode(ch), \") \") + \"in hexadecimal number.\");\n                      strBuf.push(\"#\", String.fromCharCode(previousCh));\n                      if (specialChars[ch]) {\n                        break;\n                      }\n                      strBuf.push(String.fromCharCode(ch));\n                      continue;\n                    }\n                    strBuf.push(String.fromCharCode(x << 4 | x2));\n                  } else {\n                    strBuf.push(\"#\", String.fromCharCode(ch));\n                  }\n                } else {\n                  strBuf.push(String.fromCharCode(ch));\n                }\n              }\n              if (strBuf.length > 127) {\n                (0, _util.warn)(\"Name token is longer than allowed by the spec: \".concat(strBuf.length));\n              }\n              return _primitives.Name.get(strBuf.join(\"\"));\n            }\n          }, {\n            key: \"_hexStringWarn\",\n            value: function _hexStringWarn(ch) {\n              var MAX_HEX_STRING_NUM_WARN = 5;\n              if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n                (0, _util.warn)(\"getHexString - ignoring additional invalid characters.\");\n                return;\n              }\n              if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n                return;\n              }\n              (0, _util.warn)(\"getHexString - ignoring invalid character: \".concat(ch));\n            }\n          }, {\n            key: \"getHexString\",\n            value: function getHexString() {\n              var strBuf = this.strBuf;\n              strBuf.length = 0;\n              var ch = this.currentChar;\n              var isFirstHex = true;\n              var firstDigit, secondDigit;\n              this._hexStringNumWarn = 0;\n              while (true) {\n                if (ch < 0) {\n                  (0, _util.warn)(\"Unterminated hex string\");\n                  break;\n                } else if (ch === 0x3e) {\n                  this.nextChar();\n                  break;\n                } else if (specialChars[ch] === 1) {\n                  ch = this.nextChar();\n                  continue;\n                } else {\n                  if (isFirstHex) {\n                    firstDigit = toHexDigit(ch);\n                    if (firstDigit === -1) {\n                      this._hexStringWarn(ch);\n                      ch = this.nextChar();\n                      continue;\n                    }\n                  } else {\n                    secondDigit = toHexDigit(ch);\n                    if (secondDigit === -1) {\n                      this._hexStringWarn(ch);\n                      ch = this.nextChar();\n                      continue;\n                    }\n                    strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));\n                  }\n                  isFirstHex = !isFirstHex;\n                  ch = this.nextChar();\n                }\n              }\n              return strBuf.join(\"\");\n            }\n          }, {\n            key: \"getObj\",\n            value: function getObj() {\n              var comment = false;\n              var ch = this.currentChar;\n              while (true) {\n                if (ch < 0) {\n                  return _primitives.EOF;\n                }\n                if (comment) {\n                  if (ch === 0x0a || ch === 0x0d) {\n                    comment = false;\n                  }\n                } else if (ch === 0x25) {\n                  comment = true;\n                } else if (specialChars[ch] !== 1) {\n                  break;\n                }\n                ch = this.nextChar();\n              }\n              switch (ch | 0) {\n                case 0x30:\n                case 0x31:\n                case 0x32:\n                case 0x33:\n                case 0x34:\n                case 0x35:\n                case 0x36:\n                case 0x37:\n                case 0x38:\n                case 0x39:\n                case 0x2b:\n                case 0x2d:\n                case 0x2e:\n                  return this.getNumber();\n                case 0x28:\n                  return this.getString();\n                case 0x2f:\n                  return this.getName();\n                case 0x5b:\n                  this.nextChar();\n                  return _primitives.Cmd.get(\"[\");\n                case 0x5d:\n                  this.nextChar();\n                  return _primitives.Cmd.get(\"]\");\n                case 0x3c:\n                  ch = this.nextChar();\n                  if (ch === 0x3c) {\n                    this.nextChar();\n                    return _primitives.Cmd.get(\"<<\");\n                  }\n                  return this.getHexString();\n                case 0x3e:\n                  ch = this.nextChar();\n                  if (ch === 0x3e) {\n                    this.nextChar();\n                    return _primitives.Cmd.get(\">>\");\n                  }\n                  return _primitives.Cmd.get(\">\");\n                case 0x7b:\n                  this.nextChar();\n                  return _primitives.Cmd.get(\"{\");\n                case 0x7d:\n                  this.nextChar();\n                  return _primitives.Cmd.get(\"}\");\n                case 0x29:\n                  this.nextChar();\n                  throw new _util.FormatError(\"Illegal character: \".concat(ch));\n              }\n              var str = String.fromCharCode(ch);\n              if (ch < 0x20 || ch > 0x7f) {\n                var nextCh = this.peekChar();\n                if (nextCh >= 0x20 && nextCh <= 0x7f) {\n                  this.nextChar();\n                  return _primitives.Cmd.get(str);\n                }\n              }\n              var knownCommands = this.knownCommands;\n              var knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n              while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n                var possibleCommand = str + String.fromCharCode(ch);\n                if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n                  break;\n                }\n                if (str.length === 128) {\n                  throw new _util.FormatError(\"Command token too long: \".concat(str.length));\n                }\n                str = possibleCommand;\n                knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n              }\n              if (str === \"true\") {\n                return true;\n              }\n              if (str === \"false\") {\n                return false;\n              }\n              if (str === \"null\") {\n                return null;\n              }\n              if (str === \"BI\") {\n                this.beginInlineImagePos = this.stream.pos;\n              }\n              return _primitives.Cmd.get(str);\n            }\n          }, {\n            key: \"peekObj\",\n            value: function peekObj() {\n              var streamPos = this.stream.pos,\n                currentChar = this.currentChar,\n                beginInlineImagePos = this.beginInlineImagePos;\n              var nextObj;\n              try {\n                nextObj = this.getObj();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"peekObj: \".concat(ex));\n              }\n              this.stream.pos = streamPos;\n              this.currentChar = currentChar;\n              this.beginInlineImagePos = beginInlineImagePos;\n              return nextObj;\n            }\n          }, {\n            key: \"skipToNextLine\",\n            value: function skipToNextLine() {\n              var ch = this.currentChar;\n              while (ch >= 0) {\n                if (ch === 0x0d) {\n                  ch = this.nextChar();\n                  if (ch === 0x0a) {\n                    this.nextChar();\n                  }\n                  break;\n                } else if (ch === 0x0a) {\n                  this.nextChar();\n                  break;\n                }\n                ch = this.nextChar();\n              }\n            }\n          }]);\n          return Lexer;\n        }();\n        exports.Lexer = Lexer;\n        var Linearization = /*#__PURE__*/function () {\n          function Linearization() {\n            _classCallCheck(this, Linearization);\n          }\n          _createClass(Linearization, null, [{\n            key: \"create\",\n            value: function create(stream) {\n              function getInt(linDict, name) {\n                var allowZeroValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var obj = linDict.get(name);\n                if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n                  return obj;\n                }\n                throw new Error(\"The \\\"\".concat(name, \"\\\" parameter in the linearization \") + \"dictionary is invalid.\");\n              }\n              function getHints(linDict) {\n                var hints = linDict.get(\"H\");\n                var hintsLength;\n                if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {\n                  for (var index = 0; index < hintsLength; index++) {\n                    var hint = hints[index];\n                    if (!(Number.isInteger(hint) && hint > 0)) {\n                      throw new Error(\"Hint (\".concat(index, \") in the linearization dictionary is invalid.\"));\n                    }\n                  }\n                  return hints;\n                }\n                throw new Error(\"Hint array in the linearization dictionary is invalid.\");\n              }\n              var parser = new Parser({\n                lexer: new Lexer(stream),\n                xref: null\n              });\n              var obj1 = parser.getObj();\n              var obj2 = parser.getObj();\n              var obj3 = parser.getObj();\n              var linDict = parser.getObj();\n              var obj, length;\n              if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, \"obj\") && linDict instanceof _primitives.Dict && typeof (obj = linDict.get(\"Linearized\")) === \"number\" && obj > 0)) {\n                return null;\n              } else if ((length = getInt(linDict, \"L\")) !== stream.length) {\n                throw new Error('The \"L\" parameter in the linearization dictionary ' + \"does not equal the stream length.\");\n              }\n              return {\n                length: length,\n                hints: getHints(linDict),\n                objectNumberFirst: getInt(linDict, \"O\"),\n                endFirst: getInt(linDict, \"E\"),\n                numPages: getInt(linDict, \"N\"),\n                mainXRefEntriesOffset: getInt(linDict, \"T\"),\n                pageFirst: linDict.has(\"P\") ? getInt(linDict, \"P\", true) : 0\n              };\n            }\n          }]);\n          return Linearization;\n        }();\n        exports.Linearization = Linearization;\n\n        /***/\n      }, /* 18 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Ascii85Stream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _core_utils = __w_pdfjs_require__(6);\n        var Ascii85Stream = /*#__PURE__*/function (_decode_stream$Decode) {\n          _inherits(Ascii85Stream, _decode_stream$Decode);\n          function Ascii85Stream(str, maybeLength) {\n            var _this63;\n            _classCallCheck(this, Ascii85Stream);\n            if (maybeLength) {\n              maybeLength *= 0.8;\n            }\n            _this63 = _possibleConstructorReturn(this, _getPrototypeOf(Ascii85Stream).call(this, maybeLength));\n            _this63.str = str;\n            _this63.dict = str.dict;\n            _this63.input = new Uint8Array(5);\n            return _this63;\n          }\n          _createClass(Ascii85Stream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              var TILDA_CHAR = 0x7e;\n              var Z_LOWER_CHAR = 0x7a;\n              var EOF = -1;\n              var str = this.str;\n              var c = str.getByte();\n              while ((0, _core_utils.isWhiteSpace)(c)) {\n                c = str.getByte();\n              }\n              if (c === EOF || c === TILDA_CHAR) {\n                this.eof = true;\n                return;\n              }\n              var bufferLength = this.bufferLength;\n              var buffer, i;\n              if (c === Z_LOWER_CHAR) {\n                buffer = this.ensureBuffer(bufferLength + 4);\n                for (i = 0; i < 4; ++i) {\n                  buffer[bufferLength + i] = 0;\n                }\n                this.bufferLength += 4;\n              } else {\n                var input = this.input;\n                input[0] = c;\n                for (i = 1; i < 5; ++i) {\n                  c = str.getByte();\n                  while ((0, _core_utils.isWhiteSpace)(c)) {\n                    c = str.getByte();\n                  }\n                  input[i] = c;\n                  if (c === EOF || c === TILDA_CHAR) {\n                    break;\n                  }\n                }\n                buffer = this.ensureBuffer(bufferLength + i - 1);\n                this.bufferLength += i - 1;\n                if (i < 5) {\n                  for (; i < 5; ++i) {\n                    input[i] = 0x21 + 84;\n                  }\n                  this.eof = true;\n                }\n                var t = 0;\n                for (i = 0; i < 5; ++i) {\n                  t = t * 85 + (input[i] - 0x21);\n                }\n                for (i = 3; i >= 0; --i) {\n                  buffer[bufferLength + i] = t & 0xff;\n                  t >>= 8;\n                }\n              }\n            }\n          }]);\n          return Ascii85Stream;\n        }(_decode_stream.DecodeStream);\n        exports.Ascii85Stream = Ascii85Stream;\n\n        /***/\n      }, /* 19 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StreamsSequenceStream = exports.DecodeStream = void 0;\n        var _base_stream = __w_pdfjs_require__(7);\n        var _stream = __w_pdfjs_require__(10);\n        var emptyBuffer = new Uint8Array(0);\n        var DecodeStream = /*#__PURE__*/function (_base_stream$BaseStre2) {\n          _inherits(DecodeStream, _base_stream$BaseStre2);\n          function DecodeStream(maybeMinBufferLength) {\n            var _this64;\n            _classCallCheck(this, DecodeStream);\n            _this64 = _possibleConstructorReturn(this, _getPrototypeOf(DecodeStream).call(this));\n            _this64._rawMinBufferLength = maybeMinBufferLength || 0;\n            _this64.pos = 0;\n            _this64.bufferLength = 0;\n            _this64.eof = false;\n            _this64.buffer = emptyBuffer;\n            _this64.minBufferLength = 512;\n            if (maybeMinBufferLength) {\n              while (_this64.minBufferLength < maybeMinBufferLength) {\n                _this64.minBufferLength *= 2;\n              }\n            }\n            return _this64;\n          }\n          _createClass(DecodeStream, [{\n            key: \"ensureBuffer\",\n            value: function ensureBuffer(requested) {\n              var buffer = this.buffer;\n              if (requested <= buffer.byteLength) {\n                return buffer;\n              }\n              var size = this.minBufferLength;\n              while (size < requested) {\n                size *= 2;\n              }\n              var buffer2 = new Uint8Array(size);\n              buffer2.set(buffer);\n              return this.buffer = buffer2;\n            }\n          }, {\n            key: \"getByte\",\n            value: function getByte() {\n              var pos = this.pos;\n              while (this.bufferLength <= pos) {\n                if (this.eof) {\n                  return -1;\n                }\n                this.readBlock();\n              }\n              return this.buffer[this.pos++];\n            }\n          }, {\n            key: \"getBytes\",\n            value: function getBytes(length) {\n              var pos = this.pos;\n              var end;\n              if (length) {\n                this.ensureBuffer(pos + length);\n                end = pos + length;\n                while (!this.eof && this.bufferLength < end) {\n                  this.readBlock();\n                }\n                var bufEnd = this.bufferLength;\n                if (end > bufEnd) {\n                  end = bufEnd;\n                }\n              } else {\n                while (!this.eof) {\n                  this.readBlock();\n                }\n                end = this.bufferLength;\n              }\n              this.pos = end;\n              return this.buffer.subarray(pos, end);\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              this.pos = 0;\n            }\n          }, {\n            key: \"makeSubStream\",\n            value: function makeSubStream(start, length) {\n              var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              if (length === undefined) {\n                while (!this.eof) {\n                  this.readBlock();\n                }\n              } else {\n                var end = start + length;\n                while (this.bufferLength <= end && !this.eof) {\n                  this.readBlock();\n                }\n              }\n              return new _stream.Stream(this.buffer, start, length, dict);\n            }\n          }, {\n            key: \"getBaseStreams\",\n            value: function getBaseStreams() {\n              return this.str ? this.str.getBaseStreams() : null;\n            }\n          }, {\n            key: \"isEmpty\",\n            get: function get() {\n              while (!this.eof && this.bufferLength === 0) {\n                this.readBlock();\n              }\n              return this.bufferLength === 0;\n            }\n          }]);\n          return DecodeStream;\n        }(_base_stream.BaseStream);\n        exports.DecodeStream = DecodeStream;\n        var StreamsSequenceStream = /*#__PURE__*/function (_DecodeStream) {\n          _inherits(StreamsSequenceStream, _DecodeStream);\n          function StreamsSequenceStream(streams) {\n            var _this65;\n            var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            _classCallCheck(this, StreamsSequenceStream);\n            var maybeLength = 0;\n            var _iterator72 = _createForOfIteratorHelper(streams),\n              _step72;\n            try {\n              for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {\n                var stream = _step72.value;\n                maybeLength += stream instanceof DecodeStream ? stream._rawMinBufferLength : stream.length;\n              }\n            } catch (err) {\n              _iterator72.e(err);\n            } finally {\n              _iterator72.f();\n            }\n            _this65 = _possibleConstructorReturn(this, _getPrototypeOf(StreamsSequenceStream).call(this, maybeLength));\n            _this65.streams = streams;\n            _this65._onError = onError;\n            return _this65;\n          }\n          _createClass(StreamsSequenceStream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              var streams = this.streams;\n              if (streams.length === 0) {\n                this.eof = true;\n                return;\n              }\n              var stream = streams.shift();\n              var chunk;\n              try {\n                chunk = stream.getBytes();\n              } catch (reason) {\n                if (this._onError) {\n                  this._onError(reason, stream.dict && stream.dict.objId);\n                  return;\n                }\n                throw reason;\n              }\n              var bufferLength = this.bufferLength;\n              var newLength = bufferLength + chunk.length;\n              var buffer = this.ensureBuffer(newLength);\n              buffer.set(chunk, bufferLength);\n              this.bufferLength = newLength;\n            }\n          }, {\n            key: \"getBaseStreams\",\n            value: function getBaseStreams() {\n              var baseStreamsBuf = [];\n              var _iterator73 = _createForOfIteratorHelper(this.streams),\n                _step73;\n              try {\n                for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {\n                  var stream = _step73.value;\n                  var baseStreams = stream.getBaseStreams();\n                  if (baseStreams) {\n                    baseStreamsBuf.push.apply(baseStreamsBuf, _toConsumableArray(baseStreams));\n                  }\n                }\n              } catch (err) {\n                _iterator73.e(err);\n              } finally {\n                _iterator73.f();\n              }\n              return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;\n            }\n          }]);\n          return StreamsSequenceStream;\n        }(DecodeStream);\n        exports.StreamsSequenceStream = StreamsSequenceStream;\n\n        /***/\n      }, /* 20 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AsciiHexStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var AsciiHexStream = /*#__PURE__*/function (_decode_stream$Decode2) {\n          _inherits(AsciiHexStream, _decode_stream$Decode2);\n          function AsciiHexStream(str, maybeLength) {\n            var _this66;\n            _classCallCheck(this, AsciiHexStream);\n            if (maybeLength) {\n              maybeLength *= 0.5;\n            }\n            _this66 = _possibleConstructorReturn(this, _getPrototypeOf(AsciiHexStream).call(this, maybeLength));\n            _this66.str = str;\n            _this66.dict = str.dict;\n            _this66.firstDigit = -1;\n            return _this66;\n          }\n          _createClass(AsciiHexStream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              var UPSTREAM_BLOCK_SIZE = 8000;\n              var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n              if (!bytes.length) {\n                this.eof = true;\n                return;\n              }\n              var maxDecodeLength = bytes.length + 1 >> 1;\n              var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n              var bufferLength = this.bufferLength;\n              var firstDigit = this.firstDigit;\n              var _iterator74 = _createForOfIteratorHelper(bytes),\n                _step74;\n              try {\n                for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {\n                  var ch = _step74.value;\n                  var digit = void 0;\n                  if (ch >= 0x30 && ch <= 0x39) {\n                    digit = ch & 0x0f;\n                  } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n                    digit = (ch & 0x0f) + 9;\n                  } else if (ch === 0x3e) {\n                    this.eof = true;\n                    break;\n                  } else {\n                    continue;\n                  }\n                  if (firstDigit < 0) {\n                    firstDigit = digit;\n                  } else {\n                    buffer[bufferLength++] = firstDigit << 4 | digit;\n                    firstDigit = -1;\n                  }\n                }\n              } catch (err) {\n                _iterator74.e(err);\n              } finally {\n                _iterator74.f();\n              }\n              if (firstDigit >= 0 && this.eof) {\n                buffer[bufferLength++] = firstDigit << 4;\n                firstDigit = -1;\n              }\n              this.firstDigit = firstDigit;\n              this.bufferLength = bufferLength;\n            }\n          }]);\n          return AsciiHexStream;\n        }(_decode_stream.DecodeStream);\n        exports.AsciiHexStream = AsciiHexStream;\n\n        /***/\n      }, /* 21 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CCITTFaxStream = void 0;\n        var _ccitt = __w_pdfjs_require__(22);\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _primitives = __w_pdfjs_require__(5);\n        var CCITTFaxStream = /*#__PURE__*/function (_decode_stream$Decode3) {\n          _inherits(CCITTFaxStream, _decode_stream$Decode3);\n          function CCITTFaxStream(str, maybeLength, params) {\n            var _this67;\n            _classCallCheck(this, CCITTFaxStream);\n            _this67 = _possibleConstructorReturn(this, _getPrototypeOf(CCITTFaxStream).call(this, maybeLength));\n            _this67.str = str;\n            _this67.dict = str.dict;\n            if (!(params instanceof _primitives.Dict)) {\n              params = _primitives.Dict.empty;\n            }\n            var source = {\n              next: function next() {\n                return str.getByte();\n              }\n            };\n            _this67.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {\n              K: params.get(\"K\"),\n              EndOfLine: params.get(\"EndOfLine\"),\n              EncodedByteAlign: params.get(\"EncodedByteAlign\"),\n              Columns: params.get(\"Columns\"),\n              Rows: params.get(\"Rows\"),\n              EndOfBlock: params.get(\"EndOfBlock\"),\n              BlackIs1: params.get(\"BlackIs1\")\n            });\n            return _this67;\n          }\n          _createClass(CCITTFaxStream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              while (!this.eof) {\n                var c = this.ccittFaxDecoder.readNextChar();\n                if (c === -1) {\n                  this.eof = true;\n                  return;\n                }\n                this.ensureBuffer(this.bufferLength + 1);\n                this.buffer[this.bufferLength++] = c;\n              }\n            }\n          }]);\n          return CCITTFaxStream;\n        }(_decode_stream.DecodeStream);\n        exports.CCITTFaxStream = CCITTFaxStream;\n\n        /***/\n      }, /* 22 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CCITTFaxDecoder = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var ccittEOL = -2;\n        var ccittEOF = -1;\n        var twoDimPass = 0;\n        var twoDimHoriz = 1;\n        var twoDimVert0 = 2;\n        var twoDimVertR1 = 3;\n        var twoDimVertL1 = 4;\n        var twoDimVertR2 = 5;\n        var twoDimVertL2 = 6;\n        var twoDimVertR3 = 7;\n        var twoDimVertL3 = 8;\n        var twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];\n        var whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];\n        var whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];\n        var blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];\n        var blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];\n        var blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];\n        var CCITTFaxDecoder = /*#__PURE__*/function () {\n          function CCITTFaxDecoder(source) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            _classCallCheck(this, CCITTFaxDecoder);\n            if (!source || typeof source.next !== \"function\") {\n              throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n            }\n            this.source = source;\n            this.eof = false;\n            this.encoding = options.K || 0;\n            this.eoline = options.EndOfLine || false;\n            this.byteAlign = options.EncodedByteAlign || false;\n            this.columns = options.Columns || 1728;\n            this.rows = options.Rows || 0;\n            var eoblock = options.EndOfBlock;\n            if (eoblock === null || eoblock === undefined) {\n              eoblock = true;\n            }\n            this.eoblock = eoblock;\n            this.black = options.BlackIs1 || false;\n            this.codingLine = new Uint32Array(this.columns + 1);\n            this.refLine = new Uint32Array(this.columns + 2);\n            this.codingLine[0] = this.columns;\n            this.codingPos = 0;\n            this.row = 0;\n            this.nextLine2D = this.encoding < 0;\n            this.inputBits = 0;\n            this.inputBuf = 0;\n            this.outputBits = 0;\n            this.rowsDone = false;\n            var code1;\n            while ((code1 = this._lookBits(12)) === 0) {\n              this._eatBits(1);\n            }\n            if (code1 === 1) {\n              this._eatBits(12);\n            }\n            if (this.encoding > 0) {\n              this.nextLine2D = !this._lookBits(1);\n              this._eatBits(1);\n            }\n          }\n          _createClass(CCITTFaxDecoder, [{\n            key: \"readNextChar\",\n            value: function readNextChar() {\n              if (this.eof) {\n                return -1;\n              }\n              var refLine = this.refLine;\n              var codingLine = this.codingLine;\n              var columns = this.columns;\n              var refPos, blackPixels, bits, i;\n              if (this.outputBits === 0) {\n                if (this.rowsDone) {\n                  this.eof = true;\n                }\n                if (this.eof) {\n                  return -1;\n                }\n                this.err = false;\n                var code1, code2, code3;\n                if (this.nextLine2D) {\n                  for (i = 0; codingLine[i] < columns; ++i) {\n                    refLine[i] = codingLine[i];\n                  }\n                  refLine[i++] = columns;\n                  refLine[i] = columns;\n                  codingLine[0] = 0;\n                  this.codingPos = 0;\n                  refPos = 0;\n                  blackPixels = 0;\n                  while (codingLine[this.codingPos] < columns) {\n                    code1 = this._getTwoDimCode();\n                    switch (code1) {\n                      case twoDimPass:\n                        this._addPixels(refLine[refPos + 1], blackPixels);\n                        if (refLine[refPos + 1] < columns) {\n                          refPos += 2;\n                        }\n                        break;\n                      case twoDimHoriz:\n                        code1 = code2 = 0;\n                        if (blackPixels) {\n                          do {\n                            code1 += code3 = this._getBlackCode();\n                          } while (code3 >= 64);\n                          do {\n                            code2 += code3 = this._getWhiteCode();\n                          } while (code3 >= 64);\n                        } else {\n                          do {\n                            code1 += code3 = this._getWhiteCode();\n                          } while (code3 >= 64);\n                          do {\n                            code2 += code3 = this._getBlackCode();\n                          } while (code3 >= 64);\n                        }\n                        this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n                        if (codingLine[this.codingPos] < columns) {\n                          this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);\n                        }\n                        while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                          refPos += 2;\n                        }\n                        break;\n                      case twoDimVertR3:\n                        this._addPixels(refLine[refPos] + 3, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          ++refPos;\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVertR2:\n                        this._addPixels(refLine[refPos] + 2, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          ++refPos;\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVertR1:\n                        this._addPixels(refLine[refPos] + 1, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          ++refPos;\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVert0:\n                        this._addPixels(refLine[refPos], blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          ++refPos;\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVertL3:\n                        this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          if (refPos > 0) {\n                            --refPos;\n                          } else {\n                            ++refPos;\n                          }\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVertL2:\n                        this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          if (refPos > 0) {\n                            --refPos;\n                          } else {\n                            ++refPos;\n                          }\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case twoDimVertL1:\n                        this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n                        blackPixels ^= 1;\n                        if (codingLine[this.codingPos] < columns) {\n                          if (refPos > 0) {\n                            --refPos;\n                          } else {\n                            ++refPos;\n                          }\n                          while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                            refPos += 2;\n                          }\n                        }\n                        break;\n                      case ccittEOF:\n                        this._addPixels(columns, 0);\n                        this.eof = true;\n                        break;\n                      default:\n                        (0, _util.info)(\"bad 2d code\");\n                        this._addPixels(columns, 0);\n                        this.err = true;\n                    }\n                  }\n                } else {\n                  codingLine[0] = 0;\n                  this.codingPos = 0;\n                  blackPixels = 0;\n                  while (codingLine[this.codingPos] < columns) {\n                    code1 = 0;\n                    if (blackPixels) {\n                      do {\n                        code1 += code3 = this._getBlackCode();\n                      } while (code3 >= 64);\n                    } else {\n                      do {\n                        code1 += code3 = this._getWhiteCode();\n                      } while (code3 >= 64);\n                    }\n                    this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n                    blackPixels ^= 1;\n                  }\n                }\n                var gotEOL = false;\n                if (this.byteAlign) {\n                  this.inputBits &= ~7;\n                }\n                if (!this.eoblock && this.row === this.rows - 1) {\n                  this.rowsDone = true;\n                } else {\n                  code1 = this._lookBits(12);\n                  if (this.eoline) {\n                    while (code1 !== ccittEOF && code1 !== 1) {\n                      this._eatBits(1);\n                      code1 = this._lookBits(12);\n                    }\n                  } else {\n                    while (code1 === 0) {\n                      this._eatBits(1);\n                      code1 = this._lookBits(12);\n                    }\n                  }\n                  if (code1 === 1) {\n                    this._eatBits(12);\n                    gotEOL = true;\n                  } else if (code1 === ccittEOF) {\n                    this.eof = true;\n                  }\n                }\n                if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n                  this.nextLine2D = !this._lookBits(1);\n                  this._eatBits(1);\n                }\n                if (this.eoblock && gotEOL && this.byteAlign) {\n                  code1 = this._lookBits(12);\n                  if (code1 === 1) {\n                    this._eatBits(12);\n                    if (this.encoding > 0) {\n                      this._lookBits(1);\n                      this._eatBits(1);\n                    }\n                    if (this.encoding >= 0) {\n                      for (i = 0; i < 4; ++i) {\n                        code1 = this._lookBits(12);\n                        if (code1 !== 1) {\n                          (0, _util.info)(\"bad rtc code: \" + code1);\n                        }\n                        this._eatBits(12);\n                        if (this.encoding > 0) {\n                          this._lookBits(1);\n                          this._eatBits(1);\n                        }\n                      }\n                    }\n                    this.eof = true;\n                  }\n                } else if (this.err && this.eoline) {\n                  while (true) {\n                    code1 = this._lookBits(13);\n                    if (code1 === ccittEOF) {\n                      this.eof = true;\n                      return -1;\n                    }\n                    if (code1 >> 1 === 1) {\n                      break;\n                    }\n                    this._eatBits(1);\n                  }\n                  this._eatBits(12);\n                  if (this.encoding > 0) {\n                    this._eatBits(1);\n                    this.nextLine2D = !(code1 & 1);\n                  }\n                }\n                if (codingLine[0] > 0) {\n                  this.outputBits = codingLine[this.codingPos = 0];\n                } else {\n                  this.outputBits = codingLine[this.codingPos = 1];\n                }\n                this.row++;\n              }\n              var c;\n              if (this.outputBits >= 8) {\n                c = this.codingPos & 1 ? 0 : 0xff;\n                this.outputBits -= 8;\n                if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n                  this.codingPos++;\n                  this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n                }\n              } else {\n                bits = 8;\n                c = 0;\n                do {\n                  if (typeof this.outputBits !== \"number\") {\n                    throw new _util.FormatError('Invalid /CCITTFaxDecode data, \"outputBits\" must be a number.');\n                  }\n                  if (this.outputBits > bits) {\n                    c <<= bits;\n                    if (!(this.codingPos & 1)) {\n                      c |= 0xff >> 8 - bits;\n                    }\n                    this.outputBits -= bits;\n                    bits = 0;\n                  } else {\n                    c <<= this.outputBits;\n                    if (!(this.codingPos & 1)) {\n                      c |= 0xff >> 8 - this.outputBits;\n                    }\n                    bits -= this.outputBits;\n                    this.outputBits = 0;\n                    if (codingLine[this.codingPos] < columns) {\n                      this.codingPos++;\n                      this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n                    } else if (bits > 0) {\n                      c <<= bits;\n                      bits = 0;\n                    }\n                  }\n                } while (bits);\n              }\n              if (this.black) {\n                c ^= 0xff;\n              }\n              return c;\n            }\n          }, {\n            key: \"_addPixels\",\n            value: function _addPixels(a1, blackPixels) {\n              var codingLine = this.codingLine;\n              var codingPos = this.codingPos;\n              if (a1 > codingLine[codingPos]) {\n                if (a1 > this.columns) {\n                  (0, _util.info)(\"row is wrong length\");\n                  this.err = true;\n                  a1 = this.columns;\n                }\n                if (codingPos & 1 ^ blackPixels) {\n                  ++codingPos;\n                }\n                codingLine[codingPos] = a1;\n              }\n              this.codingPos = codingPos;\n            }\n          }, {\n            key: \"_addPixelsNeg\",\n            value: function _addPixelsNeg(a1, blackPixels) {\n              var codingLine = this.codingLine;\n              var codingPos = this.codingPos;\n              if (a1 > codingLine[codingPos]) {\n                if (a1 > this.columns) {\n                  (0, _util.info)(\"row is wrong length\");\n                  this.err = true;\n                  a1 = this.columns;\n                }\n                if (codingPos & 1 ^ blackPixels) {\n                  ++codingPos;\n                }\n                codingLine[codingPos] = a1;\n              } else if (a1 < codingLine[codingPos]) {\n                if (a1 < 0) {\n                  (0, _util.info)(\"invalid code\");\n                  this.err = true;\n                  a1 = 0;\n                }\n                while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n                  --codingPos;\n                }\n                codingLine[codingPos] = a1;\n              }\n              this.codingPos = codingPos;\n            }\n          }, {\n            key: \"_findTableCode\",\n            value: function _findTableCode(start, end, table, limit) {\n              var limitValue = limit || 0;\n              for (var i = start; i <= end; ++i) {\n                var code = this._lookBits(i);\n                if (code === ccittEOF) {\n                  return [true, 1, false];\n                }\n                if (i < end) {\n                  code <<= end - i;\n                }\n                if (!limitValue || code >= limitValue) {\n                  var p = table[code - limitValue];\n                  if (p[0] === i) {\n                    this._eatBits(i);\n                    return [true, p[1], true];\n                  }\n                }\n              }\n              return [false, 0, false];\n            }\n          }, {\n            key: \"_getTwoDimCode\",\n            value: function _getTwoDimCode() {\n              var code = 0;\n              var p;\n              if (this.eoblock) {\n                code = this._lookBits(7);\n                p = twoDimTable[code];\n                if (p && p[0] > 0) {\n                  this._eatBits(p[0]);\n                  return p[1];\n                }\n              } else {\n                var result = this._findTableCode(1, 7, twoDimTable);\n                if (result[0] && result[2]) {\n                  return result[1];\n                }\n              }\n              (0, _util.info)(\"Bad two dim code\");\n              return ccittEOF;\n            }\n          }, {\n            key: \"_getWhiteCode\",\n            value: function _getWhiteCode() {\n              var code = 0;\n              var p;\n              if (this.eoblock) {\n                code = this._lookBits(12);\n                if (code === ccittEOF) {\n                  return 1;\n                }\n                if (code >> 5 === 0) {\n                  p = whiteTable1[code];\n                } else {\n                  p = whiteTable2[code >> 3];\n                }\n                if (p[0] > 0) {\n                  this._eatBits(p[0]);\n                  return p[1];\n                }\n              } else {\n                var result = this._findTableCode(1, 9, whiteTable2);\n                if (result[0]) {\n                  return result[1];\n                }\n                result = this._findTableCode(11, 12, whiteTable1);\n                if (result[0]) {\n                  return result[1];\n                }\n              }\n              (0, _util.info)(\"bad white code\");\n              this._eatBits(1);\n              return 1;\n            }\n          }, {\n            key: \"_getBlackCode\",\n            value: function _getBlackCode() {\n              var code, p;\n              if (this.eoblock) {\n                code = this._lookBits(13);\n                if (code === ccittEOF) {\n                  return 1;\n                }\n                if (code >> 7 === 0) {\n                  p = blackTable1[code];\n                } else if (code >> 9 === 0 && code >> 7 !== 0) {\n                  p = blackTable2[(code >> 1) - 64];\n                } else {\n                  p = blackTable3[code >> 7];\n                }\n                if (p[0] > 0) {\n                  this._eatBits(p[0]);\n                  return p[1];\n                }\n              } else {\n                var result = this._findTableCode(2, 6, blackTable3);\n                if (result[0]) {\n                  return result[1];\n                }\n                result = this._findTableCode(7, 12, blackTable2, 64);\n                if (result[0]) {\n                  return result[1];\n                }\n                result = this._findTableCode(10, 13, blackTable1);\n                if (result[0]) {\n                  return result[1];\n                }\n              }\n              (0, _util.info)(\"bad black code\");\n              this._eatBits(1);\n              return 1;\n            }\n          }, {\n            key: \"_lookBits\",\n            value: function _lookBits(n) {\n              var c;\n              while (this.inputBits < n) {\n                if ((c = this.source.next()) === -1) {\n                  if (this.inputBits === 0) {\n                    return ccittEOF;\n                  }\n                  return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;\n                }\n                this.inputBuf = this.inputBuf << 8 | c;\n                this.inputBits += 8;\n              }\n              return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;\n            }\n          }, {\n            key: \"_eatBits\",\n            value: function _eatBits(n) {\n              if ((this.inputBits -= n) < 0) {\n                this.inputBits = 0;\n              }\n            }\n          }]);\n          return CCITTFaxDecoder;\n        }();\n        exports.CCITTFaxDecoder = CCITTFaxDecoder;\n\n        /***/\n      }, /* 23 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FlateStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _util = __w_pdfjs_require__(2);\n        var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n        var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n        var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n        var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n        var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n        var FlateStream = /*#__PURE__*/function (_decode_stream$Decode4) {\n          _inherits(FlateStream, _decode_stream$Decode4);\n          function FlateStream(str, maybeLength) {\n            var _this68;\n            _classCallCheck(this, FlateStream);\n            _this68 = _possibleConstructorReturn(this, _getPrototypeOf(FlateStream).call(this, maybeLength));\n            _this68.str = str;\n            _this68.dict = str.dict;\n            var cmf = str.getByte();\n            var flg = str.getByte();\n            if (cmf === -1 || flg === -1) {\n              throw new _util.FormatError(\"Invalid header in flate stream: \".concat(cmf, \", \").concat(flg));\n            }\n            if ((cmf & 0x0f) !== 0x08) {\n              throw new _util.FormatError(\"Unknown compression method in flate stream: \".concat(cmf, \", \").concat(flg));\n            }\n            if (((cmf << 8) + flg) % 31 !== 0) {\n              throw new _util.FormatError(\"Bad FCHECK in flate stream: \".concat(cmf, \", \").concat(flg));\n            }\n            if (flg & 0x20) {\n              throw new _util.FormatError(\"FDICT bit set in flate stream: \".concat(cmf, \", \").concat(flg));\n            }\n            _this68.codeSize = 0;\n            _this68.codeBuf = 0;\n            return _this68;\n          }\n          _createClass(FlateStream, [{\n            key: \"getBits\",\n            value: function getBits(bits) {\n              var str = this.str;\n              var codeSize = this.codeSize;\n              var codeBuf = this.codeBuf;\n              var b;\n              while (codeSize < bits) {\n                if ((b = str.getByte()) === -1) {\n                  throw new _util.FormatError(\"Bad encoding in flate stream\");\n                }\n                codeBuf |= b << codeSize;\n                codeSize += 8;\n              }\n              b = codeBuf & (1 << bits) - 1;\n              this.codeBuf = codeBuf >> bits;\n              this.codeSize = codeSize -= bits;\n              return b;\n            }\n          }, {\n            key: \"getCode\",\n            value: function getCode(table) {\n              var str = this.str;\n              var codes = table[0];\n              var maxLen = table[1];\n              var codeSize = this.codeSize;\n              var codeBuf = this.codeBuf;\n              var b;\n              while (codeSize < maxLen) {\n                if ((b = str.getByte()) === -1) {\n                  break;\n                }\n                codeBuf |= b << codeSize;\n                codeSize += 8;\n              }\n              var code = codes[codeBuf & (1 << maxLen) - 1];\n              var codeLen = code >> 16;\n              var codeVal = code & 0xffff;\n              if (codeLen < 1 || codeSize < codeLen) {\n                throw new _util.FormatError(\"Bad encoding in flate stream\");\n              }\n              this.codeBuf = codeBuf >> codeLen;\n              this.codeSize = codeSize - codeLen;\n              return codeVal;\n            }\n          }, {\n            key: \"generateHuffmanTable\",\n            value: function generateHuffmanTable(lengths) {\n              var n = lengths.length;\n              var maxLen = 0;\n              var i;\n              for (i = 0; i < n; ++i) {\n                if (lengths[i] > maxLen) {\n                  maxLen = lengths[i];\n                }\n              }\n              var size = 1 << maxLen;\n              var codes = new Int32Array(size);\n              for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n                for (var val = 0; val < n; ++val) {\n                  if (lengths[val] === len) {\n                    var code2 = 0;\n                    var t = code;\n                    for (i = 0; i < len; ++i) {\n                      code2 = code2 << 1 | t & 1;\n                      t >>= 1;\n                    }\n                    for (i = code2; i < size; i += skip) {\n                      codes[i] = len << 16 | val;\n                    }\n                    ++code;\n                  }\n                }\n              }\n              return [codes, maxLen];\n            }\n          }, {\n            key: \"readBlock\",\n            value: function readBlock() {\n              var buffer, len;\n              var str = this.str;\n              var hdr = this.getBits(3);\n              if (hdr & 1) {\n                this.eof = true;\n              }\n              hdr >>= 1;\n              if (hdr === 0) {\n                var b;\n                if ((b = str.getByte()) === -1) {\n                  throw new _util.FormatError(\"Bad block header in flate stream\");\n                }\n                var blockLen = b;\n                if ((b = str.getByte()) === -1) {\n                  throw new _util.FormatError(\"Bad block header in flate stream\");\n                }\n                blockLen |= b << 8;\n                if ((b = str.getByte()) === -1) {\n                  throw new _util.FormatError(\"Bad block header in flate stream\");\n                }\n                var check = b;\n                if ((b = str.getByte()) === -1) {\n                  throw new _util.FormatError(\"Bad block header in flate stream\");\n                }\n                check |= b << 8;\n                if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n                  throw new _util.FormatError(\"Bad uncompressed block length in flate stream\");\n                }\n                this.codeBuf = 0;\n                this.codeSize = 0;\n                var bufferLength = this.bufferLength,\n                  end = bufferLength + blockLen;\n                buffer = this.ensureBuffer(end);\n                this.bufferLength = end;\n                if (blockLen === 0) {\n                  if (str.peekByte() === -1) {\n                    this.eof = true;\n                  }\n                } else {\n                  var block = str.getBytes(blockLen);\n                  buffer.set(block, bufferLength);\n                  if (block.length < blockLen) {\n                    this.eof = true;\n                  }\n                }\n                return;\n              }\n              var litCodeTable;\n              var distCodeTable;\n              if (hdr === 1) {\n                litCodeTable = fixedLitCodeTab;\n                distCodeTable = fixedDistCodeTab;\n              } else if (hdr === 2) {\n                var numLitCodes = this.getBits(5) + 257;\n                var numDistCodes = this.getBits(5) + 1;\n                var numCodeLenCodes = this.getBits(4) + 4;\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n                var i;\n                for (i = 0; i < numCodeLenCodes; ++i) {\n                  codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n                }\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n                len = 0;\n                i = 0;\n                var codes = numLitCodes + numDistCodes;\n                var codeLengths = new Uint8Array(codes);\n                var bitsLength, bitsOffset, what;\n                while (i < codes) {\n                  var code = this.getCode(codeLenCodeTab);\n                  if (code === 16) {\n                    bitsLength = 2;\n                    bitsOffset = 3;\n                    what = len;\n                  } else if (code === 17) {\n                    bitsLength = 3;\n                    bitsOffset = 3;\n                    what = len = 0;\n                  } else if (code === 18) {\n                    bitsLength = 7;\n                    bitsOffset = 11;\n                    what = len = 0;\n                  } else {\n                    codeLengths[i++] = len = code;\n                    continue;\n                  }\n                  var repeatLength = this.getBits(bitsLength) + bitsOffset;\n                  while (repeatLength-- > 0) {\n                    codeLengths[i++] = what;\n                  }\n                }\n                litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n                distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n              } else {\n                throw new _util.FormatError(\"Unknown block type in flate stream\");\n              }\n              buffer = this.buffer;\n              var limit = buffer ? buffer.length : 0;\n              var pos = this.bufferLength;\n              while (true) {\n                var code1 = this.getCode(litCodeTable);\n                if (code1 < 256) {\n                  if (pos + 1 >= limit) {\n                    buffer = this.ensureBuffer(pos + 1);\n                    limit = buffer.length;\n                  }\n                  buffer[pos++] = code1;\n                  continue;\n                }\n                if (code1 === 256) {\n                  this.bufferLength = pos;\n                  return;\n                }\n                code1 -= 257;\n                code1 = lengthDecode[code1];\n                var code2 = code1 >> 16;\n                if (code2 > 0) {\n                  code2 = this.getBits(code2);\n                }\n                len = (code1 & 0xffff) + code2;\n                code1 = this.getCode(distCodeTable);\n                code1 = distDecode[code1];\n                code2 = code1 >> 16;\n                if (code2 > 0) {\n                  code2 = this.getBits(code2);\n                }\n                var dist = (code1 & 0xffff) + code2;\n                if (pos + len >= limit) {\n                  buffer = this.ensureBuffer(pos + len);\n                  limit = buffer.length;\n                }\n                for (var k = 0; k < len; ++k, ++pos) {\n                  buffer[pos] = buffer[pos - dist];\n                }\n              }\n            }\n          }]);\n          return FlateStream;\n        }(_decode_stream.DecodeStream);\n        exports.FlateStream = FlateStream;\n\n        /***/\n      }, /* 24 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Jbig2Stream = void 0;\n        var _base_stream = __w_pdfjs_require__(7);\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _primitives = __w_pdfjs_require__(5);\n        var _jbig = __w_pdfjs_require__(25);\n        var _util = __w_pdfjs_require__(2);\n        var Jbig2Stream = /*#__PURE__*/function (_decode_stream$Decode5) {\n          _inherits(Jbig2Stream, _decode_stream$Decode5);\n          function Jbig2Stream(stream, maybeLength, params) {\n            var _this69;\n            _classCallCheck(this, Jbig2Stream);\n            _this69 = _possibleConstructorReturn(this, _getPrototypeOf(Jbig2Stream).call(this, maybeLength));\n            _this69.stream = stream;\n            _this69.dict = stream.dict;\n            _this69.maybeLength = maybeLength;\n            _this69.params = params;\n            return _this69;\n          }\n          _createClass(Jbig2Stream, [{\n            key: \"ensureBuffer\",\n            value: function ensureBuffer(requested) {}\n          }, {\n            key: \"readBlock\",\n            value: function readBlock() {\n              if (this.eof) {\n                return;\n              }\n              var jbig2Image = new _jbig.Jbig2Image();\n              var chunks = [];\n              if (this.params instanceof _primitives.Dict) {\n                var globalsStream = this.params.get(\"JBIG2Globals\");\n                if (globalsStream instanceof _base_stream.BaseStream) {\n                  var globals = globalsStream.getBytes();\n                  chunks.push({\n                    data: globals,\n                    start: 0,\n                    end: globals.length\n                  });\n                }\n              }\n              chunks.push({\n                data: this.bytes,\n                start: 0,\n                end: this.bytes.length\n              });\n              var data = jbig2Image.parseChunks(chunks);\n              var dataLength = data.length;\n              for (var i = 0; i < dataLength; i++) {\n                data[i] ^= 0xff;\n              }\n              this.buffer = data;\n              this.bufferLength = dataLength;\n              this.eof = true;\n            }\n          }, {\n            key: \"bytes\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n            }\n          }]);\n          return Jbig2Stream;\n        }(_decode_stream.DecodeStream);\n        exports.Jbig2Stream = Jbig2Stream;\n\n        /***/\n      }, /* 25 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Jbig2Image = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _arithmetic_decoder = __w_pdfjs_require__(26);\n        var _ccitt = __w_pdfjs_require__(22);\n        var Jbig2Error = /*#__PURE__*/function (_util$BaseException5) {\n          _inherits(Jbig2Error, _util$BaseException5);\n          function Jbig2Error(msg) {\n            _classCallCheck(this, Jbig2Error);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Jbig2Error).call(this, \"JBIG2 error: \".concat(msg), \"Jbig2Error\"));\n          }\n          return Jbig2Error;\n        }(_util.BaseException);\n        var ContextCache = /*#__PURE__*/function () {\n          function ContextCache() {\n            _classCallCheck(this, ContextCache);\n          }\n          _createClass(ContextCache, [{\n            key: \"getContexts\",\n            value: function getContexts(id) {\n              if (id in this) {\n                return this[id];\n              }\n              return this[id] = new Int8Array(1 << 16);\n            }\n          }]);\n          return ContextCache;\n        }();\n        var DecodingContext = /*#__PURE__*/function () {\n          function DecodingContext(data, start, end) {\n            _classCallCheck(this, DecodingContext);\n            this.data = data;\n            this.start = start;\n            this.end = end;\n          }\n          _createClass(DecodingContext, [{\n            key: \"decoder\",\n            get: function get() {\n              var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);\n              return (0, _util.shadow)(this, \"decoder\", decoder);\n            }\n          }, {\n            key: \"contextCache\",\n            get: function get() {\n              var cache = new ContextCache();\n              return (0, _util.shadow)(this, \"contextCache\", cache);\n            }\n          }]);\n          return DecodingContext;\n        }();\n        function decodeInteger(contextCache, procedure, decoder) {\n          var contexts = contextCache.getContexts(procedure);\n          var prev = 1;\n          function readBits(length) {\n            var v = 0;\n            for (var i = 0; i < length; i++) {\n              var bit = decoder.readBit(contexts, prev);\n              prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n              v = v << 1 | bit;\n            }\n            return v >>> 0;\n          }\n          var sign = readBits(1);\n          var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n          if (sign === 0) {\n            return value;\n          } else if (value > 0) {\n            return -value;\n          }\n          return null;\n        }\n        function decodeIAID(contextCache, decoder, codeLength) {\n          var contexts = contextCache.getContexts(\"IAID\");\n          var prev = 1;\n          for (var i = 0; i < codeLength; i++) {\n            var bit = decoder.readBit(contexts, prev);\n            prev = prev << 1 | bit;\n          }\n          if (codeLength < 31) {\n            return prev & (1 << codeLength) - 1;\n          }\n          return prev & 0x7fffffff;\n        }\n        var SegmentTypes = [\"SymbolDictionary\", null, null, null, \"IntermediateTextRegion\", null, \"ImmediateTextRegion\", \"ImmediateLosslessTextRegion\", null, null, null, null, null, null, null, null, \"PatternDictionary\", null, null, null, \"IntermediateHalftoneRegion\", null, \"ImmediateHalftoneRegion\", \"ImmediateLosslessHalftoneRegion\", null, null, null, null, null, null, null, null, null, null, null, null, \"IntermediateGenericRegion\", null, \"ImmediateGenericRegion\", \"ImmediateLosslessGenericRegion\", \"IntermediateGenericRefinementRegion\", null, \"ImmediateGenericRefinementRegion\", \"ImmediateLosslessGenericRefinementRegion\", null, null, null, null, \"PageInformation\", \"EndOfPage\", \"EndOfStripe\", \"EndOfFile\", \"Profiles\", \"Tables\", null, null, null, null, null, null, null, null, \"Extension\"];\n        var CodingTemplates = [[{\n          x: -1,\n          y: -2\n        }, {\n          x: 0,\n          y: -2\n        }, {\n          x: 1,\n          y: -2\n        }, {\n          x: -2,\n          y: -1\n        }, {\n          x: -1,\n          y: -1\n        }, {\n          x: 0,\n          y: -1\n        }, {\n          x: 1,\n          y: -1\n        }, {\n          x: 2,\n          y: -1\n        }, {\n          x: -4,\n          y: 0\n        }, {\n          x: -3,\n          y: 0\n        }, {\n          x: -2,\n          y: 0\n        }, {\n          x: -1,\n          y: 0\n        }], [{\n          x: -1,\n          y: -2\n        }, {\n          x: 0,\n          y: -2\n        }, {\n          x: 1,\n          y: -2\n        }, {\n          x: 2,\n          y: -2\n        }, {\n          x: -2,\n          y: -1\n        }, {\n          x: -1,\n          y: -1\n        }, {\n          x: 0,\n          y: -1\n        }, {\n          x: 1,\n          y: -1\n        }, {\n          x: 2,\n          y: -1\n        }, {\n          x: -3,\n          y: 0\n        }, {\n          x: -2,\n          y: 0\n        }, {\n          x: -1,\n          y: 0\n        }], [{\n          x: -1,\n          y: -2\n        }, {\n          x: 0,\n          y: -2\n        }, {\n          x: 1,\n          y: -2\n        }, {\n          x: -2,\n          y: -1\n        }, {\n          x: -1,\n          y: -1\n        }, {\n          x: 0,\n          y: -1\n        }, {\n          x: 1,\n          y: -1\n        }, {\n          x: -2,\n          y: 0\n        }, {\n          x: -1,\n          y: 0\n        }], [{\n          x: -3,\n          y: -1\n        }, {\n          x: -2,\n          y: -1\n        }, {\n          x: -1,\n          y: -1\n        }, {\n          x: 0,\n          y: -1\n        }, {\n          x: 1,\n          y: -1\n        }, {\n          x: -4,\n          y: 0\n        }, {\n          x: -3,\n          y: 0\n        }, {\n          x: -2,\n          y: 0\n        }, {\n          x: -1,\n          y: 0\n        }]];\n        var RefinementTemplates = [{\n          coding: [{\n            x: 0,\n            y: -1\n          }, {\n            x: 1,\n            y: -1\n          }, {\n            x: -1,\n            y: 0\n          }],\n          reference: [{\n            x: 0,\n            y: -1\n          }, {\n            x: 1,\n            y: -1\n          }, {\n            x: -1,\n            y: 0\n          }, {\n            x: 0,\n            y: 0\n          }, {\n            x: 1,\n            y: 0\n          }, {\n            x: -1,\n            y: 1\n          }, {\n            x: 0,\n            y: 1\n          }, {\n            x: 1,\n            y: 1\n          }]\n        }, {\n          coding: [{\n            x: -1,\n            y: -1\n          }, {\n            x: 0,\n            y: -1\n          }, {\n            x: 1,\n            y: -1\n          }, {\n            x: -1,\n            y: 0\n          }],\n          reference: [{\n            x: 0,\n            y: -1\n          }, {\n            x: -1,\n            y: 0\n          }, {\n            x: 0,\n            y: 0\n          }, {\n            x: 1,\n            y: 0\n          }, {\n            x: 0,\n            y: 1\n          }, {\n            x: 1,\n            y: 1\n          }]\n        }];\n        var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];\n        var RefinementReusedContexts = [0x0020, 0x0008];\n        function decodeBitmapTemplate0(width, height, decodingContext) {\n          var decoder = decodingContext.decoder;\n          var contexts = decodingContext.contextCache.getContexts(\"GB\");\n          var bitmap = [];\n          var contextLabel, i, j, pixel, row, row1, row2;\n          var OLD_PIXEL_MASK = 0x7bf7;\n          for (i = 0; i < height; i++) {\n            row = bitmap[i] = new Uint8Array(width);\n            row1 = i < 1 ? row : bitmap[i - 1];\n            row2 = i < 2 ? row : bitmap[i - 2];\n            contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n            for (j = 0; j < width; j++) {\n              row[j] = pixel = decoder.readBit(contexts, contextLabel);\n              contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n            }\n          }\n          return bitmap;\n        }\n        function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n          if (mmr) {\n            var input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n            return decodeMMRBitmap(input, width, height, false);\n          }\n          if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n            return decodeBitmapTemplate0(width, height, decodingContext);\n          }\n          var useskip = !!skip;\n          var template = CodingTemplates[templateIndex].concat(at);\n          template.sort(function (a, b) {\n            return a.y - b.y || a.x - b.x;\n          });\n          var templateLength = template.length;\n          var templateX = new Int8Array(templateLength);\n          var templateY = new Int8Array(templateLength);\n          var changingTemplateEntries = [];\n          var reuseMask = 0,\n            minX = 0,\n            maxX = 0,\n            minY = 0;\n          var c, k;\n          for (k = 0; k < templateLength; k++) {\n            templateX[k] = template[k].x;\n            templateY[k] = template[k].y;\n            minX = Math.min(minX, template[k].x);\n            maxX = Math.max(maxX, template[k].x);\n            minY = Math.min(minY, template[k].y);\n            if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n              reuseMask |= 1 << templateLength - 1 - k;\n            } else {\n              changingTemplateEntries.push(k);\n            }\n          }\n          var changingEntriesLength = changingTemplateEntries.length;\n          var changingTemplateX = new Int8Array(changingEntriesLength);\n          var changingTemplateY = new Int8Array(changingEntriesLength);\n          var changingTemplateBit = new Uint16Array(changingEntriesLength);\n          for (c = 0; c < changingEntriesLength; c++) {\n            k = changingTemplateEntries[c];\n            changingTemplateX[c] = template[k].x;\n            changingTemplateY[c] = template[k].y;\n            changingTemplateBit[c] = 1 << templateLength - 1 - k;\n          }\n          var sbb_left = -minX;\n          var sbb_top = -minY;\n          var sbb_right = width - maxX;\n          var pseudoPixelContext = ReusedContexts[templateIndex];\n          var row = new Uint8Array(width);\n          var bitmap = [];\n          var decoder = decodingContext.decoder;\n          var contexts = decodingContext.contextCache.getContexts(\"GB\");\n          var ltp = 0,\n            j,\n            i0,\n            j0,\n            contextLabel = 0,\n            bit,\n            shift;\n          for (var i = 0; i < height; i++) {\n            if (prediction) {\n              var sltp = decoder.readBit(contexts, pseudoPixelContext);\n              ltp ^= sltp;\n              if (ltp) {\n                bitmap.push(row);\n                continue;\n              }\n            }\n            row = new Uint8Array(row);\n            bitmap.push(row);\n            for (j = 0; j < width; j++) {\n              if (useskip && skip[i][j]) {\n                row[j] = 0;\n                continue;\n              }\n              if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n                contextLabel = contextLabel << 1 & reuseMask;\n                for (k = 0; k < changingEntriesLength; k++) {\n                  i0 = i + changingTemplateY[k];\n                  j0 = j + changingTemplateX[k];\n                  bit = bitmap[i0][j0];\n                  if (bit) {\n                    bit = changingTemplateBit[k];\n                    contextLabel |= bit;\n                  }\n                }\n              } else {\n                contextLabel = 0;\n                shift = templateLength - 1;\n                for (k = 0; k < templateLength; k++, shift--) {\n                  j0 = j + templateX[k];\n                  if (j0 >= 0 && j0 < width) {\n                    i0 = i + templateY[k];\n                    if (i0 >= 0) {\n                      bit = bitmap[i0][j0];\n                      if (bit) {\n                        contextLabel |= bit << shift;\n                      }\n                    }\n                  }\n                }\n              }\n              var pixel = decoder.readBit(contexts, contextLabel);\n              row[j] = pixel;\n            }\n          }\n          return bitmap;\n        }\n        function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n          var codingTemplate = RefinementTemplates[templateIndex].coding;\n          if (templateIndex === 0) {\n            codingTemplate = codingTemplate.concat([at[0]]);\n          }\n          var codingTemplateLength = codingTemplate.length;\n          var codingTemplateX = new Int32Array(codingTemplateLength);\n          var codingTemplateY = new Int32Array(codingTemplateLength);\n          var k;\n          for (k = 0; k < codingTemplateLength; k++) {\n            codingTemplateX[k] = codingTemplate[k].x;\n            codingTemplateY[k] = codingTemplate[k].y;\n          }\n          var referenceTemplate = RefinementTemplates[templateIndex].reference;\n          if (templateIndex === 0) {\n            referenceTemplate = referenceTemplate.concat([at[1]]);\n          }\n          var referenceTemplateLength = referenceTemplate.length;\n          var referenceTemplateX = new Int32Array(referenceTemplateLength);\n          var referenceTemplateY = new Int32Array(referenceTemplateLength);\n          for (k = 0; k < referenceTemplateLength; k++) {\n            referenceTemplateX[k] = referenceTemplate[k].x;\n            referenceTemplateY[k] = referenceTemplate[k].y;\n          }\n          var referenceWidth = referenceBitmap[0].length;\n          var referenceHeight = referenceBitmap.length;\n          var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n          var bitmap = [];\n          var decoder = decodingContext.decoder;\n          var contexts = decodingContext.contextCache.getContexts(\"GR\");\n          var ltp = 0;\n          for (var i = 0; i < height; i++) {\n            if (prediction) {\n              var sltp = decoder.readBit(contexts, pseudoPixelContext);\n              ltp ^= sltp;\n              if (ltp) {\n                throw new Jbig2Error(\"prediction is not supported\");\n              }\n            }\n            var row = new Uint8Array(width);\n            bitmap.push(row);\n            for (var j = 0; j < width; j++) {\n              var i0 = void 0,\n                j0 = void 0;\n              var contextLabel = 0;\n              for (k = 0; k < codingTemplateLength; k++) {\n                i0 = i + codingTemplateY[k];\n                j0 = j + codingTemplateX[k];\n                if (i0 < 0 || j0 < 0 || j0 >= width) {\n                  contextLabel <<= 1;\n                } else {\n                  contextLabel = contextLabel << 1 | bitmap[i0][j0];\n                }\n              }\n              for (k = 0; k < referenceTemplateLength; k++) {\n                i0 = i + referenceTemplateY[k] - offsetY;\n                j0 = j + referenceTemplateX[k] - offsetX;\n                if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n                  contextLabel <<= 1;\n                } else {\n                  contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n                }\n              }\n              var pixel = decoder.readBit(contexts, contextLabel);\n              row[j] = pixel;\n            }\n          }\n          return bitmap;\n        }\n        function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {\n          if (huffman && refinement) {\n            throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n          }\n          var newSymbols = [];\n          var currentHeight = 0;\n          var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);\n          var decoder = decodingContext.decoder;\n          var contextCache = decodingContext.contextCache;\n          var tableB1, symbolWidths;\n          if (huffman) {\n            tableB1 = getStandardTable(1);\n            symbolWidths = [];\n            symbolCodeLength = Math.max(symbolCodeLength, 1);\n          }\n          while (newSymbols.length < numberOfNewSymbols) {\n            var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, \"IADH\", decoder);\n            currentHeight += deltaHeight;\n            var currentWidth = 0,\n              totalWidth = 0;\n            var firstSymbol = huffman ? symbolWidths.length : 0;\n            while (true) {\n              var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, \"IADW\", decoder);\n              if (deltaWidth === null) {\n                break;\n              }\n              currentWidth += deltaWidth;\n              totalWidth += currentWidth;\n              var bitmap = void 0;\n              if (refinement) {\n                var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n                if (numberOfInstances > 1) {\n                  bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);\n                } else {\n                  var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n                  var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n                  var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n                  var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n                  bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n                }\n                newSymbols.push(bitmap);\n              } else if (huffman) {\n                symbolWidths.push(currentWidth);\n              } else {\n                bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n                newSymbols.push(bitmap);\n              }\n            }\n            if (huffman && !refinement) {\n              var bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n              huffmanInput.byteAlign();\n              var collectiveBitmap = void 0;\n              if (bitmapSize === 0) {\n                collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);\n              } else {\n                var originalEnd = huffmanInput.end;\n                var bitmapEnd = huffmanInput.position + bitmapSize;\n                huffmanInput.end = bitmapEnd;\n                collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);\n                huffmanInput.end = originalEnd;\n                huffmanInput.position = bitmapEnd;\n              }\n              var numberOfSymbolsDecoded = symbolWidths.length;\n              if (firstSymbol === numberOfSymbolsDecoded - 1) {\n                newSymbols.push(collectiveBitmap);\n              } else {\n                var _i23 = void 0,\n                  y = void 0,\n                  xMin = 0,\n                  xMax = void 0,\n                  bitmapWidth = void 0,\n                  symbolBitmap = void 0;\n                for (_i23 = firstSymbol; _i23 < numberOfSymbolsDecoded; _i23++) {\n                  bitmapWidth = symbolWidths[_i23];\n                  xMax = xMin + bitmapWidth;\n                  symbolBitmap = [];\n                  for (y = 0; y < currentHeight; y++) {\n                    symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n                  }\n                  newSymbols.push(symbolBitmap);\n                  xMin = xMax;\n                }\n              }\n            }\n          }\n          var exportedSymbols = [],\n            flags = [];\n          var currentFlag = false,\n            i,\n            ii;\n          var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n          while (flags.length < totalSymbolsLength) {\n            var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, \"IAEX\", decoder);\n            while (runLength--) {\n              flags.push(currentFlag);\n            }\n            currentFlag = !currentFlag;\n          }\n          for (i = 0, ii = symbols.length; i < ii; i++) {\n            if (flags[i]) {\n              exportedSymbols.push(symbols[i]);\n            }\n          }\n          for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n            if (flags[i]) {\n              exportedSymbols.push(newSymbols[j]);\n            }\n          }\n          return exportedSymbols;\n        }\n        function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {\n          if (huffman && refinement) {\n            throw new Jbig2Error(\"refinement with Huffman is not supported\");\n          }\n          var bitmap = [];\n          var i, row;\n          for (i = 0; i < height; i++) {\n            row = new Uint8Array(width);\n            if (defaultPixelValue) {\n              for (var j = 0; j < width; j++) {\n                row[j] = defaultPixelValue;\n              }\n            }\n            bitmap.push(row);\n          }\n          var decoder = decodingContext.decoder;\n          var contextCache = decodingContext.contextCache;\n          var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, \"IADT\", decoder);\n          var firstS = 0;\n          i = 0;\n          while (i < numberOfSymbolInstances) {\n            var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, \"IADT\", decoder);\n            stripT += deltaT;\n            var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, \"IAFS\", decoder);\n            firstS += deltaFirstS;\n            var currentS = firstS;\n            do {\n              var currentT = 0;\n              if (stripSize > 1) {\n                currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, \"IAIT\", decoder);\n              }\n              var t = stripSize * stripT + currentT;\n              var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);\n              var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, \"IARI\", decoder));\n              var symbolBitmap = inputSymbols[symbolId];\n              var symbolWidth = symbolBitmap[0].length;\n              var symbolHeight = symbolBitmap.length;\n              if (applyRefinement) {\n                var rdw = decodeInteger(contextCache, \"IARDW\", decoder);\n                var rdh = decodeInteger(contextCache, \"IARDH\", decoder);\n                var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n                var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n                symbolWidth += rdw;\n                symbolHeight += rdh;\n                symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n              }\n              var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n              var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n              var s2 = void 0,\n                t2 = void 0,\n                symbolRow = void 0;\n              if (transposed) {\n                for (s2 = 0; s2 < symbolHeight; s2++) {\n                  row = bitmap[offsetS + s2];\n                  if (!row) {\n                    continue;\n                  }\n                  symbolRow = symbolBitmap[s2];\n                  var maxWidth = Math.min(width - offsetT, symbolWidth);\n                  switch (combinationOperator) {\n                    case 0:\n                      for (t2 = 0; t2 < maxWidth; t2++) {\n                        row[offsetT + t2] |= symbolRow[t2];\n                      }\n                      break;\n                    case 2:\n                      for (t2 = 0; t2 < maxWidth; t2++) {\n                        row[offsetT + t2] ^= symbolRow[t2];\n                      }\n                      break;\n                    default:\n                      throw new Jbig2Error(\"operator \".concat(combinationOperator, \" is not supported\"));\n                  }\n                }\n                currentS += symbolHeight - 1;\n              } else {\n                for (t2 = 0; t2 < symbolHeight; t2++) {\n                  row = bitmap[offsetT + t2];\n                  if (!row) {\n                    continue;\n                  }\n                  symbolRow = symbolBitmap[t2];\n                  switch (combinationOperator) {\n                    case 0:\n                      for (s2 = 0; s2 < symbolWidth; s2++) {\n                        row[offsetS + s2] |= symbolRow[s2];\n                      }\n                      break;\n                    case 2:\n                      for (s2 = 0; s2 < symbolWidth; s2++) {\n                        row[offsetS + s2] ^= symbolRow[s2];\n                      }\n                      break;\n                    default:\n                      throw new Jbig2Error(\"operator \".concat(combinationOperator, \" is not supported\"));\n                  }\n                }\n                currentS += symbolWidth - 1;\n              }\n              i++;\n              var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, \"IADS\", decoder);\n              if (deltaS === null) {\n                break;\n              }\n              currentS += deltaS + dsOffset;\n            } while (true);\n          }\n          return bitmap;\n        }\n        function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {\n          var at = [];\n          if (!mmr) {\n            at.push({\n              x: -patternWidth,\n              y: 0\n            });\n            if (template === 0) {\n              at.push({\n                x: -3,\n                y: -1\n              }, {\n                x: 2,\n                y: -2\n              }, {\n                x: -2,\n                y: -2\n              });\n            }\n          }\n          var collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n          var collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);\n          var patterns = [];\n          for (var i = 0; i <= maxPatternIndex; i++) {\n            var patternBitmap = [];\n            var xMin = patternWidth * i;\n            var xMax = xMin + patternWidth;\n            for (var y = 0; y < patternHeight; y++) {\n              patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n            patterns.push(patternBitmap);\n          }\n          return patterns;\n        }\n        function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {\n          var skip = null;\n          if (enableSkip) {\n            throw new Jbig2Error(\"skip is not supported\");\n          }\n          if (combinationOperator !== 0) {\n            throw new Jbig2Error(\"operator \\\"\".concat(combinationOperator, \"\\\" is not supported in halftone region\"));\n          }\n          var regionBitmap = [];\n          var i, j, row;\n          for (i = 0; i < regionHeight; i++) {\n            row = new Uint8Array(regionWidth);\n            if (defaultPixelValue) {\n              for (j = 0; j < regionWidth; j++) {\n                row[j] = defaultPixelValue;\n              }\n            }\n            regionBitmap.push(row);\n          }\n          var numberOfPatterns = patterns.length;\n          var pattern0 = patterns[0];\n          var patternWidth = pattern0[0].length,\n            patternHeight = pattern0.length;\n          var bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);\n          var at = [];\n          if (!mmr) {\n            at.push({\n              x: template <= 1 ? 3 : 2,\n              y: -1\n            });\n            if (template === 0) {\n              at.push({\n                x: -3,\n                y: -1\n              }, {\n                x: 2,\n                y: -2\n              }, {\n                x: -2,\n                y: -2\n              });\n            }\n          }\n          var grayScaleBitPlanes = [];\n          var mmrInput, bitmap;\n          if (mmr) {\n            mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n          }\n          for (i = bitsPerValue - 1; i >= 0; i--) {\n            if (mmr) {\n              bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n            } else {\n              bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);\n            }\n            grayScaleBitPlanes[i] = bitmap;\n          }\n          var mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n          for (mg = 0; mg < gridHeight; mg++) {\n            for (ng = 0; ng < gridWidth; ng++) {\n              bit = 0;\n              patternIndex = 0;\n              for (j = bitsPerValue - 1; j >= 0; j--) {\n                bit ^= grayScaleBitPlanes[j][mg][ng];\n                patternIndex |= bit << j;\n              }\n              patternBitmap = patterns[patternIndex];\n              x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;\n              y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;\n              if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {\n                for (i = 0; i < patternHeight; i++) {\n                  regionRow = regionBitmap[y + i];\n                  patternRow = patternBitmap[i];\n                  for (j = 0; j < patternWidth; j++) {\n                    regionRow[x + j] |= patternRow[j];\n                  }\n                }\n              } else {\n                var regionX = void 0,\n                  regionY = void 0;\n                for (i = 0; i < patternHeight; i++) {\n                  regionY = y + i;\n                  if (regionY < 0 || regionY >= regionHeight) {\n                    continue;\n                  }\n                  regionRow = regionBitmap[regionY];\n                  patternRow = patternBitmap[i];\n                  for (j = 0; j < patternWidth; j++) {\n                    regionX = x + j;\n                    if (regionX >= 0 && regionX < regionWidth) {\n                      regionRow[regionX] |= patternRow[j];\n                    }\n                  }\n                }\n              }\n            }\n          }\n          return regionBitmap;\n        }\n        function readSegmentHeader(data, start) {\n          var segmentHeader = {};\n          segmentHeader.number = (0, _core_utils.readUint32)(data, start);\n          var flags = data[start + 4];\n          var segmentType = flags & 0x3f;\n          if (!SegmentTypes[segmentType]) {\n            throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n          }\n          segmentHeader.type = segmentType;\n          segmentHeader.typeName = SegmentTypes[segmentType];\n          segmentHeader.deferredNonRetain = !!(flags & 0x80);\n          var pageAssociationFieldSize = !!(flags & 0x40);\n          var referredFlags = data[start + 5];\n          var referredToCount = referredFlags >> 5 & 7;\n          var retainBits = [referredFlags & 31];\n          var position = start + 6;\n          if (referredFlags === 7) {\n            referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;\n            position += 3;\n            var bytes = referredToCount + 7 >> 3;\n            retainBits[0] = data[position++];\n            while (--bytes > 0) {\n              retainBits.push(data[position++]);\n            }\n          } else if (referredFlags === 5 || referredFlags === 6) {\n            throw new Jbig2Error(\"invalid referred-to flags\");\n          }\n          segmentHeader.retainBits = retainBits;\n          var referredToSegmentNumberSize = 4;\n          if (segmentHeader.number <= 256) {\n            referredToSegmentNumberSize = 1;\n          } else if (segmentHeader.number <= 65536) {\n            referredToSegmentNumberSize = 2;\n          }\n          var referredTo = [];\n          var i, ii;\n          for (i = 0; i < referredToCount; i++) {\n            var number = void 0;\n            if (referredToSegmentNumberSize === 1) {\n              number = data[position];\n            } else if (referredToSegmentNumberSize === 2) {\n              number = (0, _core_utils.readUint16)(data, position);\n            } else {\n              number = (0, _core_utils.readUint32)(data, position);\n            }\n            referredTo.push(number);\n            position += referredToSegmentNumberSize;\n          }\n          segmentHeader.referredTo = referredTo;\n          if (!pageAssociationFieldSize) {\n            segmentHeader.pageAssociation = data[position++];\n          } else {\n            segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);\n            position += 4;\n          }\n          segmentHeader.length = (0, _core_utils.readUint32)(data, position);\n          position += 4;\n          if (segmentHeader.length === 0xffffffff) {\n            if (segmentType === 38) {\n              var genericRegionInfo = readRegionSegmentInformation(data, position);\n              var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n              var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n              var searchPatternLength = 6;\n              var searchPattern = new Uint8Array(searchPatternLength);\n              if (!genericRegionMmr) {\n                searchPattern[0] = 0xff;\n                searchPattern[1] = 0xac;\n              }\n              searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;\n              searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;\n              searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;\n              searchPattern[5] = genericRegionInfo.height & 0xff;\n              for (i = position, ii = data.length; i < ii; i++) {\n                var j = 0;\n                while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n                  j++;\n                }\n                if (j === searchPatternLength) {\n                  segmentHeader.length = i + searchPatternLength;\n                  break;\n                }\n              }\n              if (segmentHeader.length === 0xffffffff) {\n                throw new Jbig2Error(\"segment end was not found\");\n              }\n            } else {\n              throw new Jbig2Error(\"invalid unknown segment length\");\n            }\n          }\n          segmentHeader.headerEnd = position;\n          return segmentHeader;\n        }\n        function readSegments(header, data, start, end) {\n          var segments = [];\n          var position = start;\n          while (position < end) {\n            var segmentHeader = readSegmentHeader(data, position);\n            position = segmentHeader.headerEnd;\n            var segment = {\n              header: segmentHeader,\n              data: data\n            };\n            if (!header.randomAccess) {\n              segment.start = position;\n              position += segmentHeader.length;\n              segment.end = position;\n            }\n            segments.push(segment);\n            if (segmentHeader.type === 51) {\n              break;\n            }\n          }\n          if (header.randomAccess) {\n            for (var i = 0, ii = segments.length; i < ii; i++) {\n              segments[i].start = position;\n              position += segments[i].header.length;\n              segments[i].end = position;\n            }\n          }\n          return segments;\n        }\n        function readRegionSegmentInformation(data, start) {\n          return {\n            width: (0, _core_utils.readUint32)(data, start),\n            height: (0, _core_utils.readUint32)(data, start + 4),\n            x: (0, _core_utils.readUint32)(data, start + 8),\n            y: (0, _core_utils.readUint32)(data, start + 12),\n            combinationOperator: data[start + 16] & 7\n          };\n        }\n        var RegionSegmentInformationFieldLength = 17;\n        function processSegment(segment, visitor) {\n          var header = segment.header;\n          var data = segment.data,\n            end = segment.end;\n          var position = segment.start;\n          var args, at, i, atLength;\n          switch (header.type) {\n            case 0:\n              var dictionary = {};\n              var dictionaryFlags = (0, _core_utils.readUint16)(data, position);\n              dictionary.huffman = !!(dictionaryFlags & 1);\n              dictionary.refinement = !!(dictionaryFlags & 2);\n              dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n              dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n              dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n              dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n              dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n              dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n              dictionary.template = dictionaryFlags >> 10 & 3;\n              dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n              position += 2;\n              if (!dictionary.huffman) {\n                atLength = dictionary.template === 0 ? 4 : 1;\n                at = [];\n                for (i = 0; i < atLength; i++) {\n                  at.push({\n                    x: (0, _core_utils.readInt8)(data, position),\n                    y: (0, _core_utils.readInt8)(data, position + 1)\n                  });\n                  position += 2;\n                }\n                dictionary.at = at;\n              }\n              if (dictionary.refinement && !dictionary.refinementTemplate) {\n                at = [];\n                for (i = 0; i < 2; i++) {\n                  at.push({\n                    x: (0, _core_utils.readInt8)(data, position),\n                    y: (0, _core_utils.readInt8)(data, position + 1)\n                  });\n                  position += 2;\n                }\n                dictionary.refinementAt = at;\n              }\n              dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              args = [dictionary, header.number, header.referredTo, data, position, end];\n              break;\n            case 6:\n            case 7:\n              var textRegion = {};\n              textRegion.info = readRegionSegmentInformation(data, position);\n              position += RegionSegmentInformationFieldLength;\n              var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);\n              position += 2;\n              textRegion.huffman = !!(textRegionSegmentFlags & 1);\n              textRegion.refinement = !!(textRegionSegmentFlags & 2);\n              textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;\n              textRegion.stripSize = 1 << textRegion.logStripSize;\n              textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n              textRegion.transposed = !!(textRegionSegmentFlags & 64);\n              textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n              textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n              textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n              textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n              if (textRegion.huffman) {\n                var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);\n                position += 2;\n                textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n                textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n                textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n                textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n                textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n                textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n                textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n                textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);\n              }\n              if (textRegion.refinement && !textRegion.refinementTemplate) {\n                at = [];\n                for (i = 0; i < 2; i++) {\n                  at.push({\n                    x: (0, _core_utils.readInt8)(data, position),\n                    y: (0, _core_utils.readInt8)(data, position + 1)\n                  });\n                  position += 2;\n                }\n                textRegion.refinementAt = at;\n              }\n              textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              args = [textRegion, header.referredTo, data, position, end];\n              break;\n            case 16:\n              var patternDictionary = {};\n              var patternDictionaryFlags = data[position++];\n              patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n              patternDictionary.template = patternDictionaryFlags >> 1 & 3;\n              patternDictionary.patternWidth = data[position++];\n              patternDictionary.patternHeight = data[position++];\n              patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              args = [patternDictionary, header.number, data, position, end];\n              break;\n            case 22:\n            case 23:\n              var halftoneRegion = {};\n              halftoneRegion.info = readRegionSegmentInformation(data, position);\n              position += RegionSegmentInformationFieldLength;\n              var halftoneRegionFlags = data[position++];\n              halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n              halftoneRegion.template = halftoneRegionFlags >> 1 & 3;\n              halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n              halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;\n              halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;\n              halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);\n              position += 4;\n              halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n              position += 4;\n              halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n              position += 4;\n              halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);\n              position += 2;\n              halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);\n              position += 2;\n              args = [halftoneRegion, header.referredTo, data, position, end];\n              break;\n            case 38:\n            case 39:\n              var genericRegion = {};\n              genericRegion.info = readRegionSegmentInformation(data, position);\n              position += RegionSegmentInformationFieldLength;\n              var genericRegionSegmentFlags = data[position++];\n              genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n              genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n              genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n              if (!genericRegion.mmr) {\n                atLength = genericRegion.template === 0 ? 4 : 1;\n                at = [];\n                for (i = 0; i < atLength; i++) {\n                  at.push({\n                    x: (0, _core_utils.readInt8)(data, position),\n                    y: (0, _core_utils.readInt8)(data, position + 1)\n                  });\n                  position += 2;\n                }\n                genericRegion.at = at;\n              }\n              args = [genericRegion, data, position, end];\n              break;\n            case 48:\n              var pageInfo = {\n                width: (0, _core_utils.readUint32)(data, position),\n                height: (0, _core_utils.readUint32)(data, position + 4),\n                resolutionX: (0, _core_utils.readUint32)(data, position + 8),\n                resolutionY: (0, _core_utils.readUint32)(data, position + 12)\n              };\n              if (pageInfo.height === 0xffffffff) {\n                delete pageInfo.height;\n              }\n              var pageSegmentFlags = data[position + 16];\n              (0, _core_utils.readUint16)(data, position + 17);\n              pageInfo.lossless = !!(pageSegmentFlags & 1);\n              pageInfo.refinement = !!(pageSegmentFlags & 2);\n              pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n              pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n              pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n              pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n              args = [pageInfo];\n              break;\n            case 49:\n              break;\n            case 50:\n              break;\n            case 51:\n              break;\n            case 53:\n              args = [header.number, data, position, end];\n              break;\n            case 62:\n              break;\n            default:\n              throw new Jbig2Error(\"segment type \".concat(header.typeName, \"(\").concat(header.type, \") is not implemented\"));\n          }\n          var callbackName = \"on\" + header.typeName;\n          if (callbackName in visitor) {\n            visitor[callbackName].apply(visitor, args);\n          }\n        }\n        function processSegments(segments, visitor) {\n          for (var i = 0, ii = segments.length; i < ii; i++) {\n            processSegment(segments[i], visitor);\n          }\n        }\n        function parseJbig2Chunks(chunks) {\n          var visitor = new SimpleSegmentVisitor();\n          for (var i = 0, ii = chunks.length; i < ii; i++) {\n            var chunk = chunks[i];\n            var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n            processSegments(segments, visitor);\n          }\n          return visitor.buffer;\n        }\n        function parseJbig2(data) {\n          throw new Error(\"Not implemented: parseJbig2\");\n        }\n        var SimpleSegmentVisitor = /*#__PURE__*/function () {\n          function SimpleSegmentVisitor() {\n            _classCallCheck(this, SimpleSegmentVisitor);\n          }\n          _createClass(SimpleSegmentVisitor, [{\n            key: \"onPageInformation\",\n            value: function onPageInformation(info) {\n              this.currentPageInfo = info;\n              var rowSize = info.width + 7 >> 3;\n              var buffer = new Uint8ClampedArray(rowSize * info.height);\n              if (info.defaultPixelValue) {\n                buffer.fill(0xff);\n              }\n              this.buffer = buffer;\n            }\n          }, {\n            key: \"drawBitmap\",\n            value: function drawBitmap(regionInfo, bitmap) {\n              var pageInfo = this.currentPageInfo;\n              var width = regionInfo.width,\n                height = regionInfo.height;\n              var rowSize = pageInfo.width + 7 >> 3;\n              var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n              var buffer = this.buffer;\n              var mask0 = 128 >> (regionInfo.x & 7);\n              var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n              var i, j, mask, offset;\n              switch (combinationOperator) {\n                case 0:\n                  for (i = 0; i < height; i++) {\n                    mask = mask0;\n                    offset = offset0;\n                    for (j = 0; j < width; j++) {\n                      if (bitmap[i][j]) {\n                        buffer[offset] |= mask;\n                      }\n                      mask >>= 1;\n                      if (!mask) {\n                        mask = 128;\n                        offset++;\n                      }\n                    }\n                    offset0 += rowSize;\n                  }\n                  break;\n                case 2:\n                  for (i = 0; i < height; i++) {\n                    mask = mask0;\n                    offset = offset0;\n                    for (j = 0; j < width; j++) {\n                      if (bitmap[i][j]) {\n                        buffer[offset] ^= mask;\n                      }\n                      mask >>= 1;\n                      if (!mask) {\n                        mask = 128;\n                        offset++;\n                      }\n                    }\n                    offset0 += rowSize;\n                  }\n                  break;\n                default:\n                  throw new Jbig2Error(\"operator \".concat(combinationOperator, \" is not supported\"));\n              }\n            }\n          }, {\n            key: \"onImmediateGenericRegion\",\n            value: function onImmediateGenericRegion(region, data, start, end) {\n              var regionInfo = region.info;\n              var decodingContext = new DecodingContext(data, start, end);\n              var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n              this.drawBitmap(regionInfo, bitmap);\n            }\n          }, {\n            key: \"onImmediateLosslessGenericRegion\",\n            value: function onImmediateLosslessGenericRegion() {\n              this.onImmediateGenericRegion.apply(this, arguments);\n            }\n          }, {\n            key: \"onSymbolDictionary\",\n            value: function onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n              var huffmanTables, huffmanInput;\n              if (dictionary.huffman) {\n                huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);\n                huffmanInput = new Reader(data, start, end);\n              }\n              var symbols = this.symbols;\n              if (!symbols) {\n                this.symbols = symbols = {};\n              }\n              var inputSymbols = [];\n              var _iterator75 = _createForOfIteratorHelper(referredSegments),\n                _step75;\n              try {\n                for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {\n                  var referredSegment = _step75.value;\n                  var referredSymbols = symbols[referredSegment];\n                  if (referredSymbols) {\n                    inputSymbols.push.apply(inputSymbols, _toConsumableArray(referredSymbols));\n                  }\n                }\n              } catch (err) {\n                _iterator75.e(err);\n              } finally {\n                _iterator75.f();\n              }\n              var decodingContext = new DecodingContext(data, start, end);\n              symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);\n            }\n          }, {\n            key: \"onImmediateTextRegion\",\n            value: function onImmediateTextRegion(region, referredSegments, data, start, end) {\n              var regionInfo = region.info;\n              var huffmanTables, huffmanInput;\n              var symbols = this.symbols;\n              var inputSymbols = [];\n              var _iterator76 = _createForOfIteratorHelper(referredSegments),\n                _step76;\n              try {\n                for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {\n                  var referredSegment = _step76.value;\n                  var referredSymbols = symbols[referredSegment];\n                  if (referredSymbols) {\n                    inputSymbols.push.apply(inputSymbols, _toConsumableArray(referredSymbols));\n                  }\n                }\n              } catch (err) {\n                _iterator76.e(err);\n              } finally {\n                _iterator76.f();\n              }\n              var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);\n              if (region.huffman) {\n                huffmanInput = new Reader(data, start, end);\n                huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);\n              }\n              var decodingContext = new DecodingContext(data, start, end);\n              var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);\n              this.drawBitmap(regionInfo, bitmap);\n            }\n          }, {\n            key: \"onImmediateLosslessTextRegion\",\n            value: function onImmediateLosslessTextRegion() {\n              this.onImmediateTextRegion.apply(this, arguments);\n            }\n          }, {\n            key: \"onPatternDictionary\",\n            value: function onPatternDictionary(dictionary, currentSegment, data, start, end) {\n              var patterns = this.patterns;\n              if (!patterns) {\n                this.patterns = patterns = {};\n              }\n              var decodingContext = new DecodingContext(data, start, end);\n              patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);\n            }\n          }, {\n            key: \"onImmediateHalftoneRegion\",\n            value: function onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n              var patterns = this.patterns[referredSegments[0]];\n              var regionInfo = region.info;\n              var decodingContext = new DecodingContext(data, start, end);\n              var bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);\n              this.drawBitmap(regionInfo, bitmap);\n            }\n          }, {\n            key: \"onImmediateLosslessHalftoneRegion\",\n            value: function onImmediateLosslessHalftoneRegion() {\n              this.onImmediateHalftoneRegion.apply(this, arguments);\n            }\n          }, {\n            key: \"onTables\",\n            value: function onTables(currentSegment, data, start, end) {\n              var customTables = this.customTables;\n              if (!customTables) {\n                this.customTables = customTables = {};\n              }\n              customTables[currentSegment] = decodeTablesSegment(data, start, end);\n            }\n          }]);\n          return SimpleSegmentVisitor;\n        }();\n        var HuffmanLine = function HuffmanLine(lineData) {\n          _classCallCheck(this, HuffmanLine);\n          if (lineData.length === 2) {\n            this.isOOB = true;\n            this.rangeLow = 0;\n            this.prefixLength = lineData[0];\n            this.rangeLength = 0;\n            this.prefixCode = lineData[1];\n            this.isLowerRange = false;\n          } else {\n            this.isOOB = false;\n            this.rangeLow = lineData[0];\n            this.prefixLength = lineData[1];\n            this.rangeLength = lineData[2];\n            this.prefixCode = lineData[3];\n            this.isLowerRange = lineData[4] === \"lower\";\n          }\n        };\n        var HuffmanTreeNode = /*#__PURE__*/function () {\n          function HuffmanTreeNode(line) {\n            _classCallCheck(this, HuffmanTreeNode);\n            this.children = [];\n            if (line) {\n              this.isLeaf = true;\n              this.rangeLength = line.rangeLength;\n              this.rangeLow = line.rangeLow;\n              this.isLowerRange = line.isLowerRange;\n              this.isOOB = line.isOOB;\n            } else {\n              this.isLeaf = false;\n            }\n          }\n          _createClass(HuffmanTreeNode, [{\n            key: \"buildTree\",\n            value: function buildTree(line, shift) {\n              var bit = line.prefixCode >> shift & 1;\n              if (shift <= 0) {\n                this.children[bit] = new HuffmanTreeNode(line);\n              } else {\n                var node = this.children[bit];\n                if (!node) {\n                  this.children[bit] = node = new HuffmanTreeNode(null);\n                }\n                node.buildTree(line, shift - 1);\n              }\n            }\n          }, {\n            key: \"decodeNode\",\n            value: function decodeNode(reader) {\n              if (this.isLeaf) {\n                if (this.isOOB) {\n                  return null;\n                }\n                var htOffset = reader.readBits(this.rangeLength);\n                return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n              }\n              var node = this.children[reader.readBit()];\n              if (!node) {\n                throw new Jbig2Error(\"invalid Huffman data\");\n              }\n              return node.decodeNode(reader);\n            }\n          }]);\n          return HuffmanTreeNode;\n        }();\n        var HuffmanTable = /*#__PURE__*/function () {\n          function HuffmanTable(lines, prefixCodesDone) {\n            _classCallCheck(this, HuffmanTable);\n            if (!prefixCodesDone) {\n              this.assignPrefixCodes(lines);\n            }\n            this.rootNode = new HuffmanTreeNode(null);\n            for (var i = 0, ii = lines.length; i < ii; i++) {\n              var line = lines[i];\n              if (line.prefixLength > 0) {\n                this.rootNode.buildTree(line, line.prefixLength - 1);\n              }\n            }\n          }\n          _createClass(HuffmanTable, [{\n            key: \"decode\",\n            value: function decode(reader) {\n              return this.rootNode.decodeNode(reader);\n            }\n          }, {\n            key: \"assignPrefixCodes\",\n            value: function assignPrefixCodes(lines) {\n              var linesLength = lines.length;\n              var prefixLengthMax = 0;\n              for (var i = 0; i < linesLength; i++) {\n                prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n              }\n              var histogram = new Uint32Array(prefixLengthMax + 1);\n              for (var _i24 = 0; _i24 < linesLength; _i24++) {\n                histogram[lines[_i24].prefixLength]++;\n              }\n              var currentLength = 1,\n                firstCode = 0,\n                currentCode,\n                currentTemp,\n                line;\n              histogram[0] = 0;\n              while (currentLength <= prefixLengthMax) {\n                firstCode = firstCode + histogram[currentLength - 1] << 1;\n                currentCode = firstCode;\n                currentTemp = 0;\n                while (currentTemp < linesLength) {\n                  line = lines[currentTemp];\n                  if (line.prefixLength === currentLength) {\n                    line.prefixCode = currentCode;\n                    currentCode++;\n                  }\n                  currentTemp++;\n                }\n                currentLength++;\n              }\n            }\n          }]);\n          return HuffmanTable;\n        }();\n        function decodeTablesSegment(data, start, end) {\n          var flags = data[start];\n          var lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;\n          var highestValue = (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;\n          var reader = new Reader(data, start + 9, end);\n          var prefixSizeBits = (flags >> 1 & 7) + 1;\n          var rangeSizeBits = (flags >> 4 & 7) + 1;\n          var lines = [];\n          var prefixLength,\n            rangeLength,\n            currentRangeLow = lowestValue;\n          do {\n            prefixLength = reader.readBits(prefixSizeBits);\n            rangeLength = reader.readBits(rangeSizeBits);\n            lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));\n            currentRangeLow += 1 << rangeLength;\n          } while (currentRangeLow < highestValue);\n          prefixLength = reader.readBits(prefixSizeBits);\n          lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"]));\n          prefixLength = reader.readBits(prefixSizeBits);\n          lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n          if (flags & 1) {\n            prefixLength = reader.readBits(prefixSizeBits);\n            lines.push(new HuffmanLine([prefixLength, 0]));\n          }\n          return new HuffmanTable(lines, false);\n        }\n        var standardTablesCache = {};\n        function getStandardTable(number) {\n          var table = standardTablesCache[number];\n          if (table) {\n            return table;\n          }\n          var lines;\n          switch (number) {\n            case 1:\n              lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];\n              break;\n            case 2:\n              lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];\n              break;\n            case 3:\n              lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, \"lower\"], [75, 7, 32, 0x7e], [6, 0x3e]];\n              break;\n            case 4:\n              lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];\n              break;\n            case 5:\n              lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, \"lower\"], [76, 6, 32, 0x3e]];\n              break;\n            case 6:\n              lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, \"lower\"], [2048, 6, 32, 0x3f]];\n              break;\n            case 7:\n              lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, \"lower\"], [2048, 5, 32, 0x1f]];\n              break;\n            case 8:\n              lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, \"lower\"], [1670, 9, 32, 0x1ff], [2, 0x1]];\n              break;\n            case 9:\n              lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, \"lower\"], [3339, 9, 32, 0x1ff], [2, 0x0]];\n              break;\n            case 10:\n              lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, \"lower\"], [4166, 8, 32, 0xff], [2, 0x2]];\n              break;\n            case 11:\n              lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n              break;\n            case 12:\n              lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];\n              break;\n            case 13:\n              lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n              break;\n            case 14:\n              lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];\n              break;\n            case 15:\n              lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, \"lower\"], [25, 7, 32, 0x7f]];\n              break;\n            default:\n              throw new Jbig2Error(\"standard table B.\".concat(number, \" does not exist\"));\n          }\n          for (var i = 0, ii = lines.length; i < ii; i++) {\n            lines[i] = new HuffmanLine(lines[i]);\n          }\n          table = new HuffmanTable(lines, true);\n          standardTablesCache[number] = table;\n          return table;\n        }\n        var Reader = /*#__PURE__*/function () {\n          function Reader(data, start, end) {\n            _classCallCheck(this, Reader);\n            this.data = data;\n            this.start = start;\n            this.end = end;\n            this.position = start;\n            this.shift = -1;\n            this.currentByte = 0;\n          }\n          _createClass(Reader, [{\n            key: \"readBit\",\n            value: function readBit() {\n              if (this.shift < 0) {\n                if (this.position >= this.end) {\n                  throw new Jbig2Error(\"end of data while reading bit\");\n                }\n                this.currentByte = this.data[this.position++];\n                this.shift = 7;\n              }\n              var bit = this.currentByte >> this.shift & 1;\n              this.shift--;\n              return bit;\n            }\n          }, {\n            key: \"readBits\",\n            value: function readBits(numBits) {\n              var result = 0,\n                i;\n              for (i = numBits - 1; i >= 0; i--) {\n                result |= this.readBit() << i;\n              }\n              return result;\n            }\n          }, {\n            key: \"byteAlign\",\n            value: function byteAlign() {\n              this.shift = -1;\n            }\n          }, {\n            key: \"next\",\n            value: function next() {\n              if (this.position >= this.end) {\n                return -1;\n              }\n              return this.data[this.position++];\n            }\n          }]);\n          return Reader;\n        }();\n        function getCustomHuffmanTable(index, referredTo, customTables) {\n          var currentIndex = 0;\n          for (var i = 0, ii = referredTo.length; i < ii; i++) {\n            var table = customTables[referredTo[i]];\n            if (table) {\n              if (index === currentIndex) {\n                return table;\n              }\n              currentIndex++;\n            }\n          }\n          throw new Jbig2Error(\"can't find custom Huffman table\");\n        }\n        function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {\n          var codes = [];\n          for (var i = 0; i <= 34; i++) {\n            var codeLength = reader.readBits(4);\n            codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n          }\n          var runCodesTable = new HuffmanTable(codes, false);\n          codes.length = 0;\n          for (var _i25 = 0; _i25 < numberOfSymbols;) {\n            var _codeLength = runCodesTable.decode(reader);\n            if (_codeLength >= 32) {\n              var repeatedLength = void 0,\n                numberOfRepeats = void 0,\n                j = void 0;\n              switch (_codeLength) {\n                case 32:\n                  if (_i25 === 0) {\n                    throw new Jbig2Error(\"no previous value in symbol ID table\");\n                  }\n                  numberOfRepeats = reader.readBits(2) + 3;\n                  repeatedLength = codes[_i25 - 1].prefixLength;\n                  break;\n                case 33:\n                  numberOfRepeats = reader.readBits(3) + 3;\n                  repeatedLength = 0;\n                  break;\n                case 34:\n                  numberOfRepeats = reader.readBits(7) + 11;\n                  repeatedLength = 0;\n                  break;\n                default:\n                  throw new Jbig2Error(\"invalid code length in symbol ID table\");\n              }\n              for (j = 0; j < numberOfRepeats; j++) {\n                codes.push(new HuffmanLine([_i25, repeatedLength, 0, 0]));\n                _i25++;\n              }\n            } else {\n              codes.push(new HuffmanLine([_i25, _codeLength, 0, 0]));\n              _i25++;\n            }\n          }\n          reader.byteAlign();\n          var symbolIDTable = new HuffmanTable(codes, false);\n          var customIndex = 0,\n            tableFirstS,\n            tableDeltaS,\n            tableDeltaT;\n          switch (textRegion.huffmanFS) {\n            case 0:\n            case 1:\n              tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n              break;\n            case 3:\n              tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n              customIndex++;\n              break;\n            default:\n              throw new Jbig2Error(\"invalid Huffman FS selector\");\n          }\n          switch (textRegion.huffmanDS) {\n            case 0:\n            case 1:\n            case 2:\n              tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n              break;\n            case 3:\n              tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n              customIndex++;\n              break;\n            default:\n              throw new Jbig2Error(\"invalid Huffman DS selector\");\n          }\n          switch (textRegion.huffmanDT) {\n            case 0:\n            case 1:\n            case 2:\n              tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n              break;\n            case 3:\n              tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);\n              customIndex++;\n              break;\n            default:\n              throw new Jbig2Error(\"invalid Huffman DT selector\");\n          }\n          if (textRegion.refinement) {\n            throw new Jbig2Error(\"refinement with Huffman is not supported\");\n          }\n          return {\n            symbolIDTable: symbolIDTable,\n            tableFirstS: tableFirstS,\n            tableDeltaS: tableDeltaS,\n            tableDeltaT: tableDeltaT\n          };\n        }\n        function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {\n          var customIndex = 0,\n            tableDeltaHeight,\n            tableDeltaWidth;\n          switch (dictionary.huffmanDHSelector) {\n            case 0:\n            case 1:\n              tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n              break;\n            case 3:\n              tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);\n              customIndex++;\n              break;\n            default:\n              throw new Jbig2Error(\"invalid Huffman DH selector\");\n          }\n          switch (dictionary.huffmanDWSelector) {\n            case 0:\n            case 1:\n              tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n              break;\n            case 3:\n              tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);\n              customIndex++;\n              break;\n            default:\n              throw new Jbig2Error(\"invalid Huffman DW selector\");\n          }\n          var tableBitmapSize, tableAggregateInstances;\n          if (dictionary.bitmapSizeSelector) {\n            tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);\n            customIndex++;\n          } else {\n            tableBitmapSize = getStandardTable(1);\n          }\n          if (dictionary.aggregationInstancesSelector) {\n            tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);\n          } else {\n            tableAggregateInstances = getStandardTable(1);\n          }\n          return {\n            tableDeltaHeight: tableDeltaHeight,\n            tableDeltaWidth: tableDeltaWidth,\n            tableBitmapSize: tableBitmapSize,\n            tableAggregateInstances: tableAggregateInstances\n          };\n        }\n        function readUncompressedBitmap(reader, width, height) {\n          var bitmap = [];\n          for (var y = 0; y < height; y++) {\n            var row = new Uint8Array(width);\n            bitmap.push(row);\n            for (var x = 0; x < width; x++) {\n              row[x] = reader.readBit();\n            }\n            reader.byteAlign();\n          }\n          return bitmap;\n        }\n        function decodeMMRBitmap(input, width, height, endOfBlock) {\n          var params = {\n            K: -1,\n            Columns: width,\n            Rows: height,\n            BlackIs1: true,\n            EndOfBlock: endOfBlock\n          };\n          var decoder = new _ccitt.CCITTFaxDecoder(input, params);\n          var bitmap = [];\n          var currentByte,\n            eof = false;\n          for (var y = 0; y < height; y++) {\n            var row = new Uint8Array(width);\n            bitmap.push(row);\n            var shift = -1;\n            for (var x = 0; x < width; x++) {\n              if (shift < 0) {\n                currentByte = decoder.readNextChar();\n                if (currentByte === -1) {\n                  currentByte = 0;\n                  eof = true;\n                }\n                shift = 7;\n              }\n              row[x] = currentByte >> shift & 1;\n              shift--;\n            }\n          }\n          if (endOfBlock && !eof) {\n            var lookForEOFLimit = 5;\n            for (var i = 0; i < lookForEOFLimit; i++) {\n              if (decoder.readNextChar() === -1) {\n                break;\n              }\n            }\n          }\n          return bitmap;\n        }\n        var Jbig2Image = /*#__PURE__*/function () {\n          function Jbig2Image() {\n            _classCallCheck(this, Jbig2Image);\n          }\n          _createClass(Jbig2Image, [{\n            key: \"parseChunks\",\n            value: function parseChunks(chunks) {\n              return parseJbig2Chunks(chunks);\n            }\n          }, {\n            key: \"parse\",\n            value: function parse(data) {\n              throw new Error(\"Not implemented: Jbig2Image.parse\");\n            }\n          }]);\n          return Jbig2Image;\n        }();\n        exports.Jbig2Image = Jbig2Image;\n\n        /***/\n      }, /* 26 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ArithmeticDecoder = void 0;\n        var QeTable = [{\n          qe: 0x5601,\n          nmps: 1,\n          nlps: 1,\n          switchFlag: 1\n        }, {\n          qe: 0x3401,\n          nmps: 2,\n          nlps: 6,\n          switchFlag: 0\n        }, {\n          qe: 0x1801,\n          nmps: 3,\n          nlps: 9,\n          switchFlag: 0\n        }, {\n          qe: 0x0ac1,\n          nmps: 4,\n          nlps: 12,\n          switchFlag: 0\n        }, {\n          qe: 0x0521,\n          nmps: 5,\n          nlps: 29,\n          switchFlag: 0\n        }, {\n          qe: 0x0221,\n          nmps: 38,\n          nlps: 33,\n          switchFlag: 0\n        }, {\n          qe: 0x5601,\n          nmps: 7,\n          nlps: 6,\n          switchFlag: 1\n        }, {\n          qe: 0x5401,\n          nmps: 8,\n          nlps: 14,\n          switchFlag: 0\n        }, {\n          qe: 0x4801,\n          nmps: 9,\n          nlps: 14,\n          switchFlag: 0\n        }, {\n          qe: 0x3801,\n          nmps: 10,\n          nlps: 14,\n          switchFlag: 0\n        }, {\n          qe: 0x3001,\n          nmps: 11,\n          nlps: 17,\n          switchFlag: 0\n        }, {\n          qe: 0x2401,\n          nmps: 12,\n          nlps: 18,\n          switchFlag: 0\n        }, {\n          qe: 0x1c01,\n          nmps: 13,\n          nlps: 20,\n          switchFlag: 0\n        }, {\n          qe: 0x1601,\n          nmps: 29,\n          nlps: 21,\n          switchFlag: 0\n        }, {\n          qe: 0x5601,\n          nmps: 15,\n          nlps: 14,\n          switchFlag: 1\n        }, {\n          qe: 0x5401,\n          nmps: 16,\n          nlps: 14,\n          switchFlag: 0\n        }, {\n          qe: 0x5101,\n          nmps: 17,\n          nlps: 15,\n          switchFlag: 0\n        }, {\n          qe: 0x4801,\n          nmps: 18,\n          nlps: 16,\n          switchFlag: 0\n        }, {\n          qe: 0x3801,\n          nmps: 19,\n          nlps: 17,\n          switchFlag: 0\n        }, {\n          qe: 0x3401,\n          nmps: 20,\n          nlps: 18,\n          switchFlag: 0\n        }, {\n          qe: 0x3001,\n          nmps: 21,\n          nlps: 19,\n          switchFlag: 0\n        }, {\n          qe: 0x2801,\n          nmps: 22,\n          nlps: 19,\n          switchFlag: 0\n        }, {\n          qe: 0x2401,\n          nmps: 23,\n          nlps: 20,\n          switchFlag: 0\n        }, {\n          qe: 0x2201,\n          nmps: 24,\n          nlps: 21,\n          switchFlag: 0\n        }, {\n          qe: 0x1c01,\n          nmps: 25,\n          nlps: 22,\n          switchFlag: 0\n        }, {\n          qe: 0x1801,\n          nmps: 26,\n          nlps: 23,\n          switchFlag: 0\n        }, {\n          qe: 0x1601,\n          nmps: 27,\n          nlps: 24,\n          switchFlag: 0\n        }, {\n          qe: 0x1401,\n          nmps: 28,\n          nlps: 25,\n          switchFlag: 0\n        }, {\n          qe: 0x1201,\n          nmps: 29,\n          nlps: 26,\n          switchFlag: 0\n        }, {\n          qe: 0x1101,\n          nmps: 30,\n          nlps: 27,\n          switchFlag: 0\n        }, {\n          qe: 0x0ac1,\n          nmps: 31,\n          nlps: 28,\n          switchFlag: 0\n        }, {\n          qe: 0x09c1,\n          nmps: 32,\n          nlps: 29,\n          switchFlag: 0\n        }, {\n          qe: 0x08a1,\n          nmps: 33,\n          nlps: 30,\n          switchFlag: 0\n        }, {\n          qe: 0x0521,\n          nmps: 34,\n          nlps: 31,\n          switchFlag: 0\n        }, {\n          qe: 0x0441,\n          nmps: 35,\n          nlps: 32,\n          switchFlag: 0\n        }, {\n          qe: 0x02a1,\n          nmps: 36,\n          nlps: 33,\n          switchFlag: 0\n        }, {\n          qe: 0x0221,\n          nmps: 37,\n          nlps: 34,\n          switchFlag: 0\n        }, {\n          qe: 0x0141,\n          nmps: 38,\n          nlps: 35,\n          switchFlag: 0\n        }, {\n          qe: 0x0111,\n          nmps: 39,\n          nlps: 36,\n          switchFlag: 0\n        }, {\n          qe: 0x0085,\n          nmps: 40,\n          nlps: 37,\n          switchFlag: 0\n        }, {\n          qe: 0x0049,\n          nmps: 41,\n          nlps: 38,\n          switchFlag: 0\n        }, {\n          qe: 0x0025,\n          nmps: 42,\n          nlps: 39,\n          switchFlag: 0\n        }, {\n          qe: 0x0015,\n          nmps: 43,\n          nlps: 40,\n          switchFlag: 0\n        }, {\n          qe: 0x0009,\n          nmps: 44,\n          nlps: 41,\n          switchFlag: 0\n        }, {\n          qe: 0x0005,\n          nmps: 45,\n          nlps: 42,\n          switchFlag: 0\n        }, {\n          qe: 0x0001,\n          nmps: 45,\n          nlps: 43,\n          switchFlag: 0\n        }, {\n          qe: 0x5601,\n          nmps: 46,\n          nlps: 46,\n          switchFlag: 0\n        }];\n        var ArithmeticDecoder = /*#__PURE__*/function () {\n          function ArithmeticDecoder(data, start, end) {\n            _classCallCheck(this, ArithmeticDecoder);\n            this.data = data;\n            this.bp = start;\n            this.dataEnd = end;\n            this.chigh = data[start];\n            this.clow = 0;\n            this.byteIn();\n            this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;\n            this.clow = this.clow << 7 & 0xffff;\n            this.ct -= 7;\n            this.a = 0x8000;\n          }\n          _createClass(ArithmeticDecoder, [{\n            key: \"byteIn\",\n            value: function byteIn() {\n              var data = this.data;\n              var bp = this.bp;\n              if (data[bp] === 0xff) {\n                if (data[bp + 1] > 0x8f) {\n                  this.clow += 0xff00;\n                  this.ct = 8;\n                } else {\n                  bp++;\n                  this.clow += data[bp] << 9;\n                  this.ct = 7;\n                  this.bp = bp;\n                }\n              } else {\n                bp++;\n                this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n                this.ct = 8;\n                this.bp = bp;\n              }\n              if (this.clow > 0xffff) {\n                this.chigh += this.clow >> 16;\n                this.clow &= 0xffff;\n              }\n            }\n          }, {\n            key: \"readBit\",\n            value: function readBit(contexts, pos) {\n              var cx_index = contexts[pos] >> 1,\n                cx_mps = contexts[pos] & 1;\n              var qeTableIcx = QeTable[cx_index];\n              var qeIcx = qeTableIcx.qe;\n              var d;\n              var a = this.a - qeIcx;\n              if (this.chigh < qeIcx) {\n                if (a < qeIcx) {\n                  a = qeIcx;\n                  d = cx_mps;\n                  cx_index = qeTableIcx.nmps;\n                } else {\n                  a = qeIcx;\n                  d = 1 ^ cx_mps;\n                  if (qeTableIcx.switchFlag === 1) {\n                    cx_mps = d;\n                  }\n                  cx_index = qeTableIcx.nlps;\n                }\n              } else {\n                this.chigh -= qeIcx;\n                if ((a & 0x8000) !== 0) {\n                  this.a = a;\n                  return cx_mps;\n                }\n                if (a < qeIcx) {\n                  d = 1 ^ cx_mps;\n                  if (qeTableIcx.switchFlag === 1) {\n                    cx_mps = d;\n                  }\n                  cx_index = qeTableIcx.nlps;\n                } else {\n                  d = cx_mps;\n                  cx_index = qeTableIcx.nmps;\n                }\n              }\n              do {\n                if (this.ct === 0) {\n                  this.byteIn();\n                }\n                a <<= 1;\n                this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;\n                this.clow = this.clow << 1 & 0xffff;\n                this.ct--;\n              } while ((a & 0x8000) === 0);\n              this.a = a;\n              contexts[pos] = cx_index << 1 | cx_mps;\n              return d;\n            }\n          }]);\n          return ArithmeticDecoder;\n        }();\n        exports.ArithmeticDecoder = ArithmeticDecoder;\n\n        /***/\n      }, /* 27 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.JpegStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _primitives = __w_pdfjs_require__(5);\n        var _jpg = __w_pdfjs_require__(28);\n        var _util = __w_pdfjs_require__(2);\n        var JpegStream = /*#__PURE__*/function (_decode_stream$Decode6) {\n          _inherits(JpegStream, _decode_stream$Decode6);\n          function JpegStream(stream, maybeLength, params) {\n            var _this70;\n            _classCallCheck(this, JpegStream);\n            var ch;\n            while ((ch = stream.getByte()) !== -1) {\n              if (ch === 0xff) {\n                stream.skip(-1);\n                break;\n              }\n            }\n            _this70 = _possibleConstructorReturn(this, _getPrototypeOf(JpegStream).call(this, maybeLength));\n            _this70.stream = stream;\n            _this70.dict = stream.dict;\n            _this70.maybeLength = maybeLength;\n            _this70.params = params;\n            return _this70;\n          }\n          _createClass(JpegStream, [{\n            key: \"ensureBuffer\",\n            value: function ensureBuffer(requested) {}\n          }, {\n            key: \"readBlock\",\n            value: function readBlock() {\n              if (this.eof) {\n                return;\n              }\n              var jpegOptions = {\n                decodeTransform: undefined,\n                colorTransform: undefined\n              };\n              var decodeArr = this.dict.getArray(\"D\", \"Decode\");\n              if (this.forceRGB && Array.isArray(decodeArr)) {\n                var bitsPerComponent = this.dict.get(\"BPC\", \"BitsPerComponent\") || 8;\n                var decodeArrLength = decodeArr.length;\n                var transform = new Int32Array(decodeArrLength);\n                var transformNeeded = false;\n                var maxValue = (1 << bitsPerComponent) - 1;\n                for (var i = 0; i < decodeArrLength; i += 2) {\n                  transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\n                  transform[i + 1] = decodeArr[i] * maxValue | 0;\n                  if (transform[i] !== 256 || transform[i + 1] !== 0) {\n                    transformNeeded = true;\n                  }\n                }\n                if (transformNeeded) {\n                  jpegOptions.decodeTransform = transform;\n                }\n              }\n              if (this.params instanceof _primitives.Dict) {\n                var colorTransform = this.params.get(\"ColorTransform\");\n                if (Number.isInteger(colorTransform)) {\n                  jpegOptions.colorTransform = colorTransform;\n                }\n              }\n              var jpegImage = new _jpg.JpegImage(jpegOptions);\n              jpegImage.parse(this.bytes);\n              var data = jpegImage.getData({\n                width: this.drawWidth,\n                height: this.drawHeight,\n                forceRGB: this.forceRGB,\n                isSourcePDF: true\n              });\n              this.buffer = data;\n              this.bufferLength = data.length;\n              this.eof = true;\n            }\n          }, {\n            key: \"bytes\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n            }\n          }]);\n          return JpegStream;\n        }(_decode_stream.DecodeStream);\n        exports.JpegStream = JpegStream;\n\n        /***/\n      }, /* 28 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.JpegImage = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var JpegError = /*#__PURE__*/function (_util$BaseException6) {\n          _inherits(JpegError, _util$BaseException6);\n          function JpegError(msg) {\n            _classCallCheck(this, JpegError);\n            return _possibleConstructorReturn(this, _getPrototypeOf(JpegError).call(this, \"JPEG error: \".concat(msg), \"JpegError\"));\n          }\n          return JpegError;\n        }(_util.BaseException);\n        var DNLMarkerError = /*#__PURE__*/function (_util$BaseException7) {\n          _inherits(DNLMarkerError, _util$BaseException7);\n          function DNLMarkerError(message, scanLines) {\n            var _this71;\n            _classCallCheck(this, DNLMarkerError);\n            _this71 = _possibleConstructorReturn(this, _getPrototypeOf(DNLMarkerError).call(this, message, \"DNLMarkerError\"));\n            _this71.scanLines = scanLines;\n            return _this71;\n          }\n          return DNLMarkerError;\n        }(_util.BaseException);\n        var EOIMarkerError = /*#__PURE__*/function (_util$BaseException8) {\n          _inherits(EOIMarkerError, _util$BaseException8);\n          function EOIMarkerError(msg) {\n            _classCallCheck(this, EOIMarkerError);\n            return _possibleConstructorReturn(this, _getPrototypeOf(EOIMarkerError).call(this, msg, \"EOIMarkerError\"));\n          }\n          return EOIMarkerError;\n        }(_util.BaseException);\n        var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);\n        var dctCos1 = 4017;\n        var dctSin1 = 799;\n        var dctCos3 = 3406;\n        var dctSin3 = 2276;\n        var dctCos6 = 1567;\n        var dctSin6 = 3784;\n        var dctSqrt2 = 5793;\n        var dctSqrt1d2 = 2896;\n        function buildHuffmanTable(codeLengths, values) {\n          var k = 0,\n            i,\n            j,\n            length = 16;\n          while (length > 0 && !codeLengths[length - 1]) {\n            length--;\n          }\n          var code = [{\n            children: [],\n            index: 0\n          }];\n          var p = code[0],\n            q;\n          for (i = 0; i < length; i++) {\n            for (j = 0; j < codeLengths[i]; j++) {\n              p = code.pop();\n              p.children[p.index] = values[k];\n              while (p.index > 0) {\n                p = code.pop();\n              }\n              p.index++;\n              code.push(p);\n              while (code.length <= i) {\n                code.push(q = {\n                  children: [],\n                  index: 0\n                });\n                p.children[p.index] = q.children;\n                p = q;\n              }\n              k++;\n            }\n            if (i + 1 < length) {\n              code.push(q = {\n                children: [],\n                index: 0\n              });\n              p.children[p.index] = q.children;\n              p = q;\n            }\n          }\n          return code[0].children;\n        }\n        function getBlockBufferOffset(component, row, col) {\n          return 64 * ((component.blocksPerLine + 1) * row + col);\n        }\n        function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {\n          var parseDNLMarker = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n          var mcusPerLine = frame.mcusPerLine;\n          var progressive = frame.progressive;\n          var startOffset = offset;\n          var bitsData = 0,\n            bitsCount = 0;\n          function readBit() {\n            if (bitsCount > 0) {\n              bitsCount--;\n              return bitsData >> bitsCount & 1;\n            }\n            bitsData = data[offset++];\n            if (bitsData === 0xff) {\n              var nextByte = data[offset++];\n              if (nextByte) {\n                if (nextByte === 0xdc && parseDNLMarker) {\n                  offset += 2;\n                  var scanLines = (0, _core_utils.readUint16)(data, offset);\n                  offset += 2;\n                  if (scanLines > 0 && scanLines !== frame.scanLines) {\n                    throw new DNLMarkerError(\"Found DNL marker (0xFFDC) while parsing scan data\", scanLines);\n                  }\n                } else if (nextByte === 0xd9) {\n                  if (parseDNLMarker) {\n                    var maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);\n                    if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 10) {\n                      throw new DNLMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data, \" + \"possibly caused by incorrect `scanLines` parameter\", maybeScanLines);\n                    }\n                  }\n                  throw new EOIMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data\");\n                }\n                throw new JpegError(\"unexpected marker \".concat((bitsData << 8 | nextByte).toString(16)));\n              }\n            }\n            bitsCount = 7;\n            return bitsData >>> 7;\n          }\n          function decodeHuffman(tree) {\n            var node = tree;\n            while (true) {\n              node = node[readBit()];\n              switch (typeof node) {\n                case \"number\":\n                  return node;\n                case \"object\":\n                  continue;\n              }\n              throw new JpegError(\"invalid huffman sequence\");\n            }\n          }\n          function receive(length) {\n            var n = 0;\n            while (length > 0) {\n              n = n << 1 | readBit();\n              length--;\n            }\n            return n;\n          }\n          function receiveAndExtend(length) {\n            if (length === 1) {\n              return readBit() === 1 ? 1 : -1;\n            }\n            var n = receive(length);\n            if (n >= 1 << length - 1) {\n              return n;\n            }\n            return n + (-1 << length) + 1;\n          }\n          function decodeBaseline(component, blockOffset) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : receiveAndExtend(t);\n            component.blockData[blockOffset] = component.pred += diff;\n            var k = 1;\n            while (k < 64) {\n              var rs = decodeHuffman(component.huffmanTableAC);\n              var s = rs & 15,\n                r = rs >> 4;\n              if (s === 0) {\n                if (r < 15) {\n                  break;\n                }\n                k += 16;\n                continue;\n              }\n              k += r;\n              var z = dctZigZag[k];\n              component.blockData[blockOffset + z] = receiveAndExtend(s);\n              k++;\n            }\n          }\n          function decodeDCFirst(component, blockOffset) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n            component.blockData[blockOffset] = component.pred += diff;\n          }\n          function decodeDCSuccessive(component, blockOffset) {\n            component.blockData[blockOffset] |= readBit() << successive;\n          }\n          var eobrun = 0;\n          function decodeACFirst(component, blockOffset) {\n            if (eobrun > 0) {\n              eobrun--;\n              return;\n            }\n            var k = spectralStart;\n            var e = spectralEnd;\n            while (k <= e) {\n              var rs = decodeHuffman(component.huffmanTableAC);\n              var s = rs & 15,\n                r = rs >> 4;\n              if (s === 0) {\n                if (r < 15) {\n                  eobrun = receive(r) + (1 << r) - 1;\n                  break;\n                }\n                k += 16;\n                continue;\n              }\n              k += r;\n              var z = dctZigZag[k];\n              component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);\n              k++;\n            }\n          }\n          var successiveACState = 0,\n            successiveACNextValue;\n          function decodeACSuccessive(component, blockOffset) {\n            var k = spectralStart;\n            var e = spectralEnd;\n            var r = 0;\n            var s;\n            var rs;\n            while (k <= e) {\n              var offsetZ = blockOffset + dctZigZag[k];\n              var sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n              switch (successiveACState) {\n                case 0:\n                  rs = decodeHuffman(component.huffmanTableAC);\n                  s = rs & 15;\n                  r = rs >> 4;\n                  if (s === 0) {\n                    if (r < 15) {\n                      eobrun = receive(r) + (1 << r);\n                      successiveACState = 4;\n                    } else {\n                      r = 16;\n                      successiveACState = 1;\n                    }\n                  } else {\n                    if (s !== 1) {\n                      throw new JpegError(\"invalid ACn encoding\");\n                    }\n                    successiveACNextValue = receiveAndExtend(s);\n                    successiveACState = r ? 2 : 3;\n                  }\n                  continue;\n                case 1:\n                case 2:\n                  if (component.blockData[offsetZ]) {\n                    component.blockData[offsetZ] += sign * (readBit() << successive);\n                  } else {\n                    r--;\n                    if (r === 0) {\n                      successiveACState = successiveACState === 2 ? 3 : 0;\n                    }\n                  }\n                  break;\n                case 3:\n                  if (component.blockData[offsetZ]) {\n                    component.blockData[offsetZ] += sign * (readBit() << successive);\n                  } else {\n                    component.blockData[offsetZ] = successiveACNextValue << successive;\n                    successiveACState = 0;\n                  }\n                  break;\n                case 4:\n                  if (component.blockData[offsetZ]) {\n                    component.blockData[offsetZ] += sign * (readBit() << successive);\n                  }\n                  break;\n              }\n              k++;\n            }\n            if (successiveACState === 4) {\n              eobrun--;\n              if (eobrun === 0) {\n                successiveACState = 0;\n              }\n            }\n          }\n          var blockRow = 0;\n          function decodeMcu(component, decode, mcu, row, col) {\n            var mcuRow = mcu / mcusPerLine | 0;\n            var mcuCol = mcu % mcusPerLine;\n            blockRow = mcuRow * component.v + row;\n            var blockCol = mcuCol * component.h + col;\n            var blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n            decode(component, blockOffset);\n          }\n          function decodeBlock(component, decode, mcu) {\n            blockRow = mcu / component.blocksPerLine | 0;\n            var blockCol = mcu % component.blocksPerLine;\n            var blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n            decode(component, blockOffset);\n          }\n          var componentsLength = components.length;\n          var component, i, j, k, n;\n          var decodeFn;\n          if (progressive) {\n            if (spectralStart === 0) {\n              decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n            } else {\n              decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n            }\n          } else {\n            decodeFn = decodeBaseline;\n          }\n          var mcu = 0,\n            fileMarker;\n          var mcuExpected;\n          if (componentsLength === 1) {\n            mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n          } else {\n            mcuExpected = mcusPerLine * frame.mcusPerColumn;\n          }\n          var h, v;\n          while (mcu <= mcuExpected) {\n            var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\n            if (mcuToRead > 0) {\n              for (i = 0; i < componentsLength; i++) {\n                components[i].pred = 0;\n              }\n              eobrun = 0;\n              if (componentsLength === 1) {\n                component = components[0];\n                for (n = 0; n < mcuToRead; n++) {\n                  decodeBlock(component, decodeFn, mcu);\n                  mcu++;\n                }\n              } else {\n                for (n = 0; n < mcuToRead; n++) {\n                  for (i = 0; i < componentsLength; i++) {\n                    component = components[i];\n                    h = component.h;\n                    v = component.v;\n                    for (j = 0; j < v; j++) {\n                      for (k = 0; k < h; k++) {\n                        decodeMcu(component, decodeFn, mcu, j, k);\n                      }\n                    }\n                  }\n                  mcu++;\n                }\n              }\n            }\n            bitsCount = 0;\n            fileMarker = findNextFileMarker(data, offset);\n            if (!fileMarker) {\n              break;\n            }\n            if (fileMarker.invalid) {\n              var partialMsg = mcuToRead > 0 ? \"unexpected\" : \"excessive\";\n              (0, _util.warn)(\"decodeScan - \".concat(partialMsg, \" MCU data, current marker is: \").concat(fileMarker.invalid));\n              offset = fileMarker.offset;\n            }\n            if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n              offset += 2;\n            } else {\n              break;\n            }\n          }\n          return offset - startOffset;\n        }\n        function quantizeAndInverse(component, blockBufferOffset, p) {\n          var qt = component.quantizationTable,\n            blockData = component.blockData;\n          var v0, v1, v2, v3, v4, v5, v6, v7;\n          var p0, p1, p2, p3, p4, p5, p6, p7;\n          var t;\n          if (!qt) {\n            throw new JpegError(\"missing required Quantization Table.\");\n          }\n          for (var row = 0; row < 64; row += 8) {\n            p0 = blockData[blockBufferOffset + row];\n            p1 = blockData[blockBufferOffset + row + 1];\n            p2 = blockData[blockBufferOffset + row + 2];\n            p3 = blockData[blockBufferOffset + row + 3];\n            p4 = blockData[blockBufferOffset + row + 4];\n            p5 = blockData[blockBufferOffset + row + 5];\n            p6 = blockData[blockBufferOffset + row + 6];\n            p7 = blockData[blockBufferOffset + row + 7];\n            p0 *= qt[row];\n            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n              t = dctSqrt2 * p0 + 512 >> 10;\n              p[row] = t;\n              p[row + 1] = t;\n              p[row + 2] = t;\n              p[row + 3] = t;\n              p[row + 4] = t;\n              p[row + 5] = t;\n              p[row + 6] = t;\n              p[row + 7] = t;\n              continue;\n            }\n            p1 *= qt[row + 1];\n            p2 *= qt[row + 2];\n            p3 *= qt[row + 3];\n            p4 *= qt[row + 4];\n            p5 *= qt[row + 5];\n            p6 *= qt[row + 6];\n            p7 *= qt[row + 7];\n            v0 = dctSqrt2 * p0 + 128 >> 8;\n            v1 = dctSqrt2 * p4 + 128 >> 8;\n            v2 = p2;\n            v3 = p6;\n            v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n            v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n            v5 = p3 << 4;\n            v6 = p5 << 4;\n            v0 = v0 + v1 + 1 >> 1;\n            v1 = v0 - v1;\n            t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n            v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n            v3 = t;\n            v4 = v4 + v6 + 1 >> 1;\n            v6 = v4 - v6;\n            v7 = v7 + v5 + 1 >> 1;\n            v5 = v7 - v5;\n            v0 = v0 + v3 + 1 >> 1;\n            v3 = v0 - v3;\n            v1 = v1 + v2 + 1 >> 1;\n            v2 = v1 - v2;\n            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n            v7 = t;\n            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n            v6 = t;\n            p[row] = v0 + v7;\n            p[row + 7] = v0 - v7;\n            p[row + 1] = v1 + v6;\n            p[row + 6] = v1 - v6;\n            p[row + 2] = v2 + v5;\n            p[row + 5] = v2 - v5;\n            p[row + 3] = v3 + v4;\n            p[row + 4] = v3 - v4;\n          }\n          for (var col = 0; col < 8; ++col) {\n            p0 = p[col];\n            p1 = p[col + 8];\n            p2 = p[col + 16];\n            p3 = p[col + 24];\n            p4 = p[col + 32];\n            p5 = p[col + 40];\n            p6 = p[col + 48];\n            p7 = p[col + 56];\n            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n              t = dctSqrt2 * p0 + 8192 >> 14;\n              if (t < -2040) {\n                t = 0;\n              } else if (t >= 2024) {\n                t = 255;\n              } else {\n                t = t + 2056 >> 4;\n              }\n              blockData[blockBufferOffset + col] = t;\n              blockData[blockBufferOffset + col + 8] = t;\n              blockData[blockBufferOffset + col + 16] = t;\n              blockData[blockBufferOffset + col + 24] = t;\n              blockData[blockBufferOffset + col + 32] = t;\n              blockData[blockBufferOffset + col + 40] = t;\n              blockData[blockBufferOffset + col + 48] = t;\n              blockData[blockBufferOffset + col + 56] = t;\n              continue;\n            }\n            v0 = dctSqrt2 * p0 + 2048 >> 12;\n            v1 = dctSqrt2 * p4 + 2048 >> 12;\n            v2 = p2;\n            v3 = p6;\n            v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n            v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n            v5 = p3;\n            v6 = p5;\n            v0 = (v0 + v1 + 1 >> 1) + 4112;\n            v1 = v0 - v1;\n            t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n            v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n            v3 = t;\n            v4 = v4 + v6 + 1 >> 1;\n            v6 = v4 - v6;\n            v7 = v7 + v5 + 1 >> 1;\n            v5 = v7 - v5;\n            v0 = v0 + v3 + 1 >> 1;\n            v3 = v0 - v3;\n            v1 = v1 + v2 + 1 >> 1;\n            v2 = v1 - v2;\n            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n            v7 = t;\n            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n            v6 = t;\n            p0 = v0 + v7;\n            p7 = v0 - v7;\n            p1 = v1 + v6;\n            p6 = v1 - v6;\n            p2 = v2 + v5;\n            p5 = v2 - v5;\n            p3 = v3 + v4;\n            p4 = v3 - v4;\n            if (p0 < 16) {\n              p0 = 0;\n            } else if (p0 >= 4080) {\n              p0 = 255;\n            } else {\n              p0 >>= 4;\n            }\n            if (p1 < 16) {\n              p1 = 0;\n            } else if (p1 >= 4080) {\n              p1 = 255;\n            } else {\n              p1 >>= 4;\n            }\n            if (p2 < 16) {\n              p2 = 0;\n            } else if (p2 >= 4080) {\n              p2 = 255;\n            } else {\n              p2 >>= 4;\n            }\n            if (p3 < 16) {\n              p3 = 0;\n            } else if (p3 >= 4080) {\n              p3 = 255;\n            } else {\n              p3 >>= 4;\n            }\n            if (p4 < 16) {\n              p4 = 0;\n            } else if (p4 >= 4080) {\n              p4 = 255;\n            } else {\n              p4 >>= 4;\n            }\n            if (p5 < 16) {\n              p5 = 0;\n            } else if (p5 >= 4080) {\n              p5 = 255;\n            } else {\n              p5 >>= 4;\n            }\n            if (p6 < 16) {\n              p6 = 0;\n            } else if (p6 >= 4080) {\n              p6 = 255;\n            } else {\n              p6 >>= 4;\n            }\n            if (p7 < 16) {\n              p7 = 0;\n            } else if (p7 >= 4080) {\n              p7 = 255;\n            } else {\n              p7 >>= 4;\n            }\n            blockData[blockBufferOffset + col] = p0;\n            blockData[blockBufferOffset + col + 8] = p1;\n            blockData[blockBufferOffset + col + 16] = p2;\n            blockData[blockBufferOffset + col + 24] = p3;\n            blockData[blockBufferOffset + col + 32] = p4;\n            blockData[blockBufferOffset + col + 40] = p5;\n            blockData[blockBufferOffset + col + 48] = p6;\n            blockData[blockBufferOffset + col + 56] = p7;\n          }\n        }\n        function buildComponentData(frame, component) {\n          var blocksPerLine = component.blocksPerLine;\n          var blocksPerColumn = component.blocksPerColumn;\n          var computationBuffer = new Int16Array(64);\n          for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n            for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n              var offset = getBlockBufferOffset(component, blockRow, blockCol);\n              quantizeAndInverse(component, offset, computationBuffer);\n            }\n          }\n          return component.blockData;\n        }\n        function findNextFileMarker(data, currentPos) {\n          var startPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentPos;\n          var maxPos = data.length - 1;\n          var newPos = startPos < currentPos ? startPos : currentPos;\n          if (currentPos >= maxPos) {\n            return null;\n          }\n          var currentMarker = (0, _core_utils.readUint16)(data, currentPos);\n          if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n            return {\n              invalid: null,\n              marker: currentMarker,\n              offset: currentPos\n            };\n          }\n          var newMarker = (0, _core_utils.readUint16)(data, newPos);\n          while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n            if (++newPos >= maxPos) {\n              return null;\n            }\n            newMarker = (0, _core_utils.readUint16)(data, newPos);\n          }\n          return {\n            invalid: currentMarker.toString(16),\n            marker: newMarker,\n            offset: newPos\n          };\n        }\n        var JpegImage = /*#__PURE__*/function () {\n          function JpegImage() {\n            var _ref54 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n              _ref54$decodeTransfor = _ref54.decodeTransform,\n              decodeTransform = _ref54$decodeTransfor === void 0 ? null : _ref54$decodeTransfor,\n              _ref54$colorTransform = _ref54.colorTransform,\n              colorTransform = _ref54$colorTransform === void 0 ? -1 : _ref54$colorTransform;\n            _classCallCheck(this, JpegImage);\n            this._decodeTransform = decodeTransform;\n            this._colorTransform = colorTransform;\n          }\n          _createClass(JpegImage, [{\n            key: \"parse\",\n            value: function parse(data) {\n              var _ref55 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref55$dnlScanLines = _ref55.dnlScanLines,\n                dnlScanLines = _ref55$dnlScanLines === void 0 ? null : _ref55$dnlScanLines;\n              function readDataBlock() {\n                var length = (0, _core_utils.readUint16)(data, offset);\n                offset += 2;\n                var endOffset = offset + length - 2;\n                var fileMarker = findNextFileMarker(data, endOffset, offset);\n                if (fileMarker && fileMarker.invalid) {\n                  (0, _util.warn)(\"readDataBlock - incorrect length, current marker is: \" + fileMarker.invalid);\n                  endOffset = fileMarker.offset;\n                }\n                var array = data.subarray(offset, endOffset);\n                offset += array.length;\n                return array;\n              }\n              function prepareComponents(frame) {\n                var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n                var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n                for (var i = 0, ii = frame.components.length; i < ii; i++) {\n                  var component = frame.components[i];\n                  var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n                  var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n                  var blocksPerLineForMcu = mcusPerLine * component.h;\n                  var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                  var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n                  component.blockData = new Int16Array(blocksBufferSize);\n                  component.blocksPerLine = blocksPerLine;\n                  component.blocksPerColumn = blocksPerColumn;\n                }\n                frame.mcusPerLine = mcusPerLine;\n                frame.mcusPerColumn = mcusPerColumn;\n              }\n              var offset = 0;\n              var jfif = null;\n              var adobe = null;\n              var frame, resetInterval;\n              var numSOSMarkers = 0;\n              var quantizationTables = [];\n              var huffmanTablesAC = [],\n                huffmanTablesDC = [];\n              var fileMarker = (0, _core_utils.readUint16)(data, offset);\n              offset += 2;\n              if (fileMarker !== 0xffd8) {\n                throw new JpegError(\"SOI not found\");\n              }\n              fileMarker = (0, _core_utils.readUint16)(data, offset);\n              offset += 2;\n              markerLoop: while (fileMarker !== 0xffd9) {\n                var i = void 0,\n                  j = void 0,\n                  l = void 0;\n                switch (fileMarker) {\n                  case 0xffe0:\n                  case 0xffe1:\n                  case 0xffe2:\n                  case 0xffe3:\n                  case 0xffe4:\n                  case 0xffe5:\n                  case 0xffe6:\n                  case 0xffe7:\n                  case 0xffe8:\n                  case 0xffe9:\n                  case 0xffea:\n                  case 0xffeb:\n                  case 0xffec:\n                  case 0xffed:\n                  case 0xffee:\n                  case 0xffef:\n                  case 0xfffe:\n                    var appData = readDataBlock();\n                    if (fileMarker === 0xffe0) {\n                      if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                        jfif = {\n                          version: {\n                            major: appData[5],\n                            minor: appData[6]\n                          },\n                          densityUnits: appData[7],\n                          xDensity: appData[8] << 8 | appData[9],\n                          yDensity: appData[10] << 8 | appData[11],\n                          thumbWidth: appData[12],\n                          thumbHeight: appData[13],\n                          thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                        };\n                      }\n                    }\n                    if (fileMarker === 0xffee) {\n                      if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {\n                        adobe = {\n                          version: appData[5] << 8 | appData[6],\n                          flags0: appData[7] << 8 | appData[8],\n                          flags1: appData[9] << 8 | appData[10],\n                          transformCode: appData[11]\n                        };\n                      }\n                    }\n                    break;\n                  case 0xffdb:\n                    var quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);\n                    offset += 2;\n                    var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                    var z = void 0;\n                    while (offset < quantizationTablesEnd) {\n                      var quantizationTableSpec = data[offset++];\n                      var tableData = new Uint16Array(64);\n                      if (quantizationTableSpec >> 4 === 0) {\n                        for (j = 0; j < 64; j++) {\n                          z = dctZigZag[j];\n                          tableData[z] = data[offset++];\n                        }\n                      } else if (quantizationTableSpec >> 4 === 1) {\n                        for (j = 0; j < 64; j++) {\n                          z = dctZigZag[j];\n                          tableData[z] = (0, _core_utils.readUint16)(data, offset);\n                          offset += 2;\n                        }\n                      } else {\n                        throw new JpegError(\"DQT - invalid table spec\");\n                      }\n                      quantizationTables[quantizationTableSpec & 15] = tableData;\n                    }\n                    break;\n                  case 0xffc0:\n                  case 0xffc1:\n                  case 0xffc2:\n                    if (frame) {\n                      throw new JpegError(\"Only single frame JPEGs supported\");\n                    }\n                    offset += 2;\n                    frame = {};\n                    frame.extended = fileMarker === 0xffc1;\n                    frame.progressive = fileMarker === 0xffc2;\n                    frame.precision = data[offset++];\n                    var sofScanLines = (0, _core_utils.readUint16)(data, offset);\n                    offset += 2;\n                    frame.scanLines = dnlScanLines || sofScanLines;\n                    frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);\n                    offset += 2;\n                    frame.components = [];\n                    frame.componentIds = {};\n                    var componentsCount = data[offset++];\n                    var maxH = 0,\n                      maxV = 0;\n                    for (i = 0; i < componentsCount; i++) {\n                      var componentId = data[offset];\n                      var h = data[offset + 1] >> 4;\n                      var v = data[offset + 1] & 15;\n                      if (maxH < h) {\n                        maxH = h;\n                      }\n                      if (maxV < v) {\n                        maxV = v;\n                      }\n                      var qId = data[offset + 2];\n                      l = frame.components.push({\n                        h: h,\n                        v: v,\n                        quantizationId: qId,\n                        quantizationTable: null\n                      });\n                      frame.componentIds[componentId] = l - 1;\n                      offset += 3;\n                    }\n                    frame.maxH = maxH;\n                    frame.maxV = maxV;\n                    prepareComponents(frame);\n                    break;\n                  case 0xffc4:\n                    var huffmanLength = (0, _core_utils.readUint16)(data, offset);\n                    offset += 2;\n                    for (i = 2; i < huffmanLength;) {\n                      var huffmanTableSpec = data[offset++];\n                      var codeLengths = new Uint8Array(16);\n                      var codeLengthSum = 0;\n                      for (j = 0; j < 16; j++, offset++) {\n                        codeLengthSum += codeLengths[j] = data[offset];\n                      }\n                      var huffmanValues = new Uint8Array(codeLengthSum);\n                      for (j = 0; j < codeLengthSum; j++, offset++) {\n                        huffmanValues[j] = data[offset];\n                      }\n                      i += 17 + codeLengthSum;\n                      (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                    }\n                    break;\n                  case 0xffdd:\n                    offset += 2;\n                    resetInterval = (0, _core_utils.readUint16)(data, offset);\n                    offset += 2;\n                    break;\n                  case 0xffda:\n                    var parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n                    offset += 2;\n                    var selectorsCount = data[offset++],\n                      components = [];\n                    for (i = 0; i < selectorsCount; i++) {\n                      var index = data[offset++];\n                      var componentIndex = frame.componentIds[index];\n                      var component = frame.components[componentIndex];\n                      component.index = index;\n                      var tableSpec = data[offset++];\n                      component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                      component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                      components.push(component);\n                    }\n                    var spectralStart = data[offset++],\n                      spectralEnd = data[offset++],\n                      successiveApproximation = data[offset++];\n                    try {\n                      var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\n                      offset += processed;\n                    } catch (ex) {\n                      if (ex instanceof DNLMarkerError) {\n                        (0, _util.warn)(\"\".concat(ex.message, \" -- attempting to re-parse the JPEG image.\"));\n                        return this.parse(data, {\n                          dnlScanLines: ex.scanLines\n                        });\n                      } else if (ex instanceof EOIMarkerError) {\n                        (0, _util.warn)(\"\".concat(ex.message, \" -- ignoring the rest of the image data.\"));\n                        break markerLoop;\n                      }\n                      throw ex;\n                    }\n                    break;\n                  case 0xffdc:\n                    offset += 4;\n                    break;\n                  case 0xffff:\n                    if (data[offset] !== 0xff) {\n                      offset--;\n                    }\n                    break;\n                  default:\n                    var nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\n                    if (nextFileMarker && nextFileMarker.invalid) {\n                      (0, _util.warn)(\"JpegImage.parse - unexpected data, current marker is: \" + nextFileMarker.invalid);\n                      offset = nextFileMarker.offset;\n                      break;\n                    }\n                    if (!nextFileMarker || offset >= data.length - 1) {\n                      (0, _util.warn)(\"JpegImage.parse - reached the end of the image data \" + \"without finding an EOI marker (0xFFD9).\");\n                      break markerLoop;\n                    }\n                    throw new JpegError(\"JpegImage.parse - unknown marker: \" + fileMarker.toString(16));\n                }\n                fileMarker = (0, _core_utils.readUint16)(data, offset);\n                offset += 2;\n              }\n              this.width = frame.samplesPerLine;\n              this.height = frame.scanLines;\n              this.jfif = jfif;\n              this.adobe = adobe;\n              this.components = [];\n              for (var _i26 = 0, ii = frame.components.length; _i26 < ii; _i26++) {\n                var _component = frame.components[_i26];\n                var quantizationTable = quantizationTables[_component.quantizationId];\n                if (quantizationTable) {\n                  _component.quantizationTable = quantizationTable;\n                }\n                this.components.push({\n                  index: _component.index,\n                  output: buildComponentData(frame, _component),\n                  scaleX: _component.h / frame.maxH,\n                  scaleY: _component.v / frame.maxV,\n                  blocksPerLine: _component.blocksPerLine,\n                  blocksPerColumn: _component.blocksPerColumn\n                });\n              }\n              this.numComponents = this.components.length;\n              return undefined;\n            }\n          }, {\n            key: \"_getLinearizedBlockData\",\n            value: function _getLinearizedBlockData(width, height) {\n              var isSourcePDF = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              var scaleX = this.width / width,\n                scaleY = this.height / height;\n              var component, componentScaleX, componentScaleY, blocksPerScanline;\n              var x, y, i, j, k;\n              var index;\n              var offset = 0;\n              var output;\n              var numComponents = this.components.length;\n              var dataLength = width * height * numComponents;\n              var data = new Uint8ClampedArray(dataLength);\n              var xScaleBlockOffset = new Uint32Array(width);\n              var mask3LSB = 0xfffffff8;\n              var lastComponentScaleX;\n              for (i = 0; i < numComponents; i++) {\n                component = this.components[i];\n                componentScaleX = component.scaleX * scaleX;\n                componentScaleY = component.scaleY * scaleY;\n                offset = i;\n                output = component.output;\n                blocksPerScanline = component.blocksPerLine + 1 << 3;\n                if (componentScaleX !== lastComponentScaleX) {\n                  for (x = 0; x < width; x++) {\n                    j = 0 | x * componentScaleX;\n                    xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n                  }\n                  lastComponentScaleX = componentScaleX;\n                }\n                for (y = 0; y < height; y++) {\n                  j = 0 | y * componentScaleY;\n                  index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n                  for (x = 0; x < width; x++) {\n                    data[offset] = output[index + xScaleBlockOffset[x]];\n                    offset += numComponents;\n                  }\n                }\n              }\n              var transform = this._decodeTransform;\n              if (!isSourcePDF && numComponents === 4 && !transform) {\n                transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n              }\n              if (transform) {\n                for (i = 0; i < dataLength;) {\n                  for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n                    data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n                  }\n                }\n              }\n              return data;\n            }\n          }, {\n            key: \"_convertYccToRgb\",\n            value: function _convertYccToRgb(data) {\n              var Y, Cb, Cr;\n              for (var i = 0, length = data.length; i < length; i += 3) {\n                Y = data[i];\n                Cb = data[i + 1];\n                Cr = data[i + 2];\n                data[i] = Y - 179.456 + 1.402 * Cr;\n                data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n                data[i + 2] = Y - 226.816 + 1.772 * Cb;\n              }\n              return data;\n            }\n          }, {\n            key: \"_convertYcckToRgb\",\n            value: function _convertYcckToRgb(data) {\n              var Y, Cb, Cr, k;\n              var offset = 0;\n              for (var i = 0, length = data.length; i < length; i += 4) {\n                Y = data[i];\n                Cb = data[i + 1];\n                Cr = data[i + 2];\n                k = data[i + 3];\n                data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\n                data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\n                data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\n              }\n              return data.subarray(0, offset);\n            }\n          }, {\n            key: \"_convertYcckToCmyk\",\n            value: function _convertYcckToCmyk(data) {\n              var Y, Cb, Cr;\n              for (var i = 0, length = data.length; i < length; i += 4) {\n                Y = data[i];\n                Cb = data[i + 1];\n                Cr = data[i + 2];\n                data[i] = 434.456 - Y - 1.402 * Cr;\n                data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n                data[i + 2] = 481.816 - Y - 1.772 * Cb;\n              }\n              return data;\n            }\n          }, {\n            key: \"_convertCmykToRgb\",\n            value: function _convertCmykToRgb(data) {\n              var c, m, y, k;\n              var offset = 0;\n              for (var i = 0, length = data.length; i < length; i += 4) {\n                c = data[i];\n                m = data[i + 1];\n                y = data[i + 2];\n                k = data[i + 3];\n                data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\n                data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.0003189131175883281 * k + 0.7364883807733168);\n                data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\n              }\n              return data.subarray(0, offset);\n            }\n          }, {\n            key: \"getData\",\n            value: function getData(_ref56) {\n              var width = _ref56.width,\n                height = _ref56.height,\n                _ref56$forceRGB = _ref56.forceRGB,\n                forceRGB = _ref56$forceRGB === void 0 ? false : _ref56$forceRGB,\n                _ref56$isSourcePDF = _ref56.isSourcePDF,\n                isSourcePDF = _ref56$isSourcePDF === void 0 ? false : _ref56$isSourcePDF;\n              if (this.numComponents > 4) {\n                throw new JpegError(\"Unsupported color mode\");\n              }\n              var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n              if (this.numComponents === 1 && forceRGB) {\n                var dataLength = data.length;\n                var rgbData = new Uint8ClampedArray(dataLength * 3);\n                var offset = 0;\n                for (var i = 0; i < dataLength; i++) {\n                  var grayColor = data[i];\n                  rgbData[offset++] = grayColor;\n                  rgbData[offset++] = grayColor;\n                  rgbData[offset++] = grayColor;\n                }\n                return rgbData;\n              } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n                return this._convertYccToRgb(data);\n              } else if (this.numComponents === 4) {\n                if (this._isColorConversionNeeded) {\n                  if (forceRGB) {\n                    return this._convertYcckToRgb(data);\n                  }\n                  return this._convertYcckToCmyk(data);\n                } else if (forceRGB) {\n                  return this._convertCmykToRgb(data);\n                }\n              }\n              return data;\n            }\n          }, {\n            key: \"_isColorConversionNeeded\",\n            get: function get() {\n              if (this.adobe) {\n                return !!this.adobe.transformCode;\n              }\n              if (this.numComponents === 3) {\n                if (this._colorTransform === 0) {\n                  return false;\n                } else if (this.components[0].index === 0x52 && this.components[1].index === 0x47 && this.components[2].index === 0x42) {\n                  return false;\n                }\n                return true;\n              }\n              if (this._colorTransform === 1) {\n                return true;\n              }\n              return false;\n            }\n          }]);\n          return JpegImage;\n        }();\n        exports.JpegImage = JpegImage;\n\n        /***/\n      }, /* 29 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.JpxStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _jpx = __w_pdfjs_require__(30);\n        var _util = __w_pdfjs_require__(2);\n        var JpxStream = /*#__PURE__*/function (_decode_stream$Decode7) {\n          _inherits(JpxStream, _decode_stream$Decode7);\n          function JpxStream(stream, maybeLength, params) {\n            var _this72;\n            _classCallCheck(this, JpxStream);\n            _this72 = _possibleConstructorReturn(this, _getPrototypeOf(JpxStream).call(this, maybeLength));\n            _this72.stream = stream;\n            _this72.dict = stream.dict;\n            _this72.maybeLength = maybeLength;\n            _this72.params = params;\n            return _this72;\n          }\n          _createClass(JpxStream, [{\n            key: \"ensureBuffer\",\n            value: function ensureBuffer(requested) {}\n          }, {\n            key: \"readBlock\",\n            value: function readBlock() {\n              if (this.eof) {\n                return;\n              }\n              var jpxImage = new _jpx.JpxImage();\n              jpxImage.parse(this.bytes);\n              var width = jpxImage.width;\n              var height = jpxImage.height;\n              var componentsCount = jpxImage.componentsCount;\n              var tileCount = jpxImage.tiles.length;\n              if (tileCount === 1) {\n                this.buffer = jpxImage.tiles[0].items;\n              } else {\n                var data = new Uint8ClampedArray(width * height * componentsCount);\n                for (var k = 0; k < tileCount; k++) {\n                  var tileComponents = jpxImage.tiles[k];\n                  var tileWidth = tileComponents.width;\n                  var tileHeight = tileComponents.height;\n                  var tileLeft = tileComponents.left;\n                  var tileTop = tileComponents.top;\n                  var src = tileComponents.items;\n                  var srcPosition = 0;\n                  var dataPosition = (width * tileTop + tileLeft) * componentsCount;\n                  var imgRowSize = width * componentsCount;\n                  var tileRowSize = tileWidth * componentsCount;\n                  for (var j = 0; j < tileHeight; j++) {\n                    var rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n                    data.set(rowBytes, dataPosition);\n                    srcPosition += tileRowSize;\n                    dataPosition += imgRowSize;\n                  }\n                }\n                this.buffer = data;\n              }\n              this.bufferLength = this.buffer.length;\n              this.eof = true;\n            }\n          }, {\n            key: \"bytes\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n            }\n          }]);\n          return JpxStream;\n        }(_decode_stream.DecodeStream);\n        exports.JpxStream = JpxStream;\n\n        /***/\n      }, /* 30 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.JpxImage = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _arithmetic_decoder = __w_pdfjs_require__(26);\n        var JpxError = /*#__PURE__*/function (_util$BaseException9) {\n          _inherits(JpxError, _util$BaseException9);\n          function JpxError(msg) {\n            _classCallCheck(this, JpxError);\n            return _possibleConstructorReturn(this, _getPrototypeOf(JpxError).call(this, \"JPX error: \".concat(msg), \"JpxError\"));\n          }\n          return JpxError;\n        }(_util.BaseException);\n        var SubbandsGainLog2 = {\n          LL: 0,\n          LH: 1,\n          HL: 1,\n          HH: 2\n        };\n        var JpxImage = /*#__PURE__*/function () {\n          function JpxImage() {\n            _classCallCheck(this, JpxImage);\n            this.failOnCorruptedImage = false;\n          }\n          _createClass(JpxImage, [{\n            key: \"parse\",\n            value: function parse(data) {\n              var head = (0, _core_utils.readUint16)(data, 0);\n              if (head === 0xff4f) {\n                this.parseCodestream(data, 0, data.length);\n                return;\n              }\n              var length = data.length;\n              var position = 0;\n              while (position < length) {\n                var headerSize = 8;\n                var lbox = (0, _core_utils.readUint32)(data, position);\n                var tbox = (0, _core_utils.readUint32)(data, position + 4);\n                position += headerSize;\n                if (lbox === 1) {\n                  lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);\n                  position += 8;\n                  headerSize += 8;\n                }\n                if (lbox === 0) {\n                  lbox = length - position + headerSize;\n                }\n                if (lbox < headerSize) {\n                  throw new JpxError(\"Invalid box field size\");\n                }\n                var dataLength = lbox - headerSize;\n                var jumpDataLength = true;\n                switch (tbox) {\n                  case 0x6a703268:\n                    jumpDataLength = false;\n                    break;\n                  case 0x636f6c72:\n                    var method = data[position];\n                    if (method === 1) {\n                      var colorspace = (0, _core_utils.readUint32)(data, position + 3);\n                      switch (colorspace) {\n                        case 16:\n                        case 17:\n                        case 18:\n                          break;\n                        default:\n                          (0, _util.warn)(\"Unknown colorspace \" + colorspace);\n                          break;\n                      }\n                    } else if (method === 2) {\n                      (0, _util.info)(\"ICC profile not supported\");\n                    }\n                    break;\n                  case 0x6a703263:\n                    this.parseCodestream(data, position, position + dataLength);\n                    break;\n                  case 0x6a502020:\n                    if ((0, _core_utils.readUint32)(data, position) !== 0x0d0a870a) {\n                      (0, _util.warn)(\"Invalid JP2 signature\");\n                    }\n                    break;\n                  case 0x6a501a1a:\n                  case 0x66747970:\n                  case 0x72726571:\n                  case 0x72657320:\n                  case 0x69686472:\n                    break;\n                  default:\n                    var headerType = String.fromCharCode(tbox >> 24 & 0xff, tbox >> 16 & 0xff, tbox >> 8 & 0xff, tbox & 0xff);\n                    (0, _util.warn)(\"Unsupported header type \".concat(tbox, \" (\").concat(headerType, \").\"));\n                    break;\n                }\n                if (jumpDataLength) {\n                  position += dataLength;\n                }\n              }\n            }\n          }, {\n            key: \"parseImageProperties\",\n            value: function parseImageProperties(stream) {\n              var newByte = stream.getByte();\n              while (newByte >= 0) {\n                var oldByte = newByte;\n                newByte = stream.getByte();\n                var code = oldByte << 8 | newByte;\n                if (code === 0xff51) {\n                  stream.skip(4);\n                  var Xsiz = stream.getInt32() >>> 0;\n                  var Ysiz = stream.getInt32() >>> 0;\n                  var XOsiz = stream.getInt32() >>> 0;\n                  var YOsiz = stream.getInt32() >>> 0;\n                  stream.skip(16);\n                  var Csiz = stream.getUint16();\n                  this.width = Xsiz - XOsiz;\n                  this.height = Ysiz - YOsiz;\n                  this.componentsCount = Csiz;\n                  this.bitsPerComponent = 8;\n                  return;\n                }\n              }\n              throw new JpxError(\"No size marker found in JPX stream\");\n            }\n          }, {\n            key: \"parseCodestream\",\n            value: function parseCodestream(data, start, end) {\n              var context = {};\n              var doNotRecover = false;\n              try {\n                var position = start;\n                while (position + 1 < end) {\n                  var code = (0, _core_utils.readUint16)(data, position);\n                  position += 2;\n                  var length = 0,\n                    j = void 0,\n                    sqcd = void 0,\n                    spqcds = void 0,\n                    spqcdSize = void 0,\n                    scalarExpounded = void 0,\n                    tile = void 0;\n                  switch (code) {\n                    case 0xff4f:\n                      context.mainHeader = true;\n                      break;\n                    case 0xffd9:\n                      break;\n                    case 0xff51:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      var siz = {};\n                      siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);\n                      siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);\n                      siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);\n                      siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);\n                      siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);\n                      siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);\n                      siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);\n                      siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);\n                      var componentsCount = (0, _core_utils.readUint16)(data, position + 36);\n                      siz.Csiz = componentsCount;\n                      var components = [];\n                      j = position + 38;\n                      for (var i = 0; i < componentsCount; i++) {\n                        var component = {\n                          precision: (data[j] & 0x7f) + 1,\n                          isSigned: !!(data[j] & 0x80),\n                          XRsiz: data[j + 1],\n                          YRsiz: data[j + 2]\n                        };\n                        j += 3;\n                        calculateComponentDimensions(component, siz);\n                        components.push(component);\n                      }\n                      context.SIZ = siz;\n                      context.components = components;\n                      calculateTileGrids(context, components);\n                      context.QCC = [];\n                      context.COC = [];\n                      break;\n                    case 0xff5c:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      var qcd = {};\n                      j = position + 2;\n                      sqcd = data[j++];\n                      switch (sqcd & 0x1f) {\n                        case 0:\n                          spqcdSize = 8;\n                          scalarExpounded = true;\n                          break;\n                        case 1:\n                          spqcdSize = 16;\n                          scalarExpounded = false;\n                          break;\n                        case 2:\n                          spqcdSize = 16;\n                          scalarExpounded = true;\n                          break;\n                        default:\n                          throw new Error(\"Invalid SQcd value \" + sqcd);\n                      }\n                      qcd.noQuantization = spqcdSize === 8;\n                      qcd.scalarExpounded = scalarExpounded;\n                      qcd.guardBits = sqcd >> 5;\n                      spqcds = [];\n                      while (j < length + position) {\n                        var spqcd = {};\n                        if (spqcdSize === 8) {\n                          spqcd.epsilon = data[j++] >> 3;\n                          spqcd.mu = 0;\n                        } else {\n                          spqcd.epsilon = data[j] >> 3;\n                          spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                          j += 2;\n                        }\n                        spqcds.push(spqcd);\n                      }\n                      qcd.SPqcds = spqcds;\n                      if (context.mainHeader) {\n                        context.QCD = qcd;\n                      } else {\n                        context.currentTile.QCD = qcd;\n                        context.currentTile.QCC = [];\n                      }\n                      break;\n                    case 0xff5d:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      var qcc = {};\n                      j = position + 2;\n                      var cqcc = void 0;\n                      if (context.SIZ.Csiz < 257) {\n                        cqcc = data[j++];\n                      } else {\n                        cqcc = (0, _core_utils.readUint16)(data, j);\n                        j += 2;\n                      }\n                      sqcd = data[j++];\n                      switch (sqcd & 0x1f) {\n                        case 0:\n                          spqcdSize = 8;\n                          scalarExpounded = true;\n                          break;\n                        case 1:\n                          spqcdSize = 16;\n                          scalarExpounded = false;\n                          break;\n                        case 2:\n                          spqcdSize = 16;\n                          scalarExpounded = true;\n                          break;\n                        default:\n                          throw new Error(\"Invalid SQcd value \" + sqcd);\n                      }\n                      qcc.noQuantization = spqcdSize === 8;\n                      qcc.scalarExpounded = scalarExpounded;\n                      qcc.guardBits = sqcd >> 5;\n                      spqcds = [];\n                      while (j < length + position) {\n                        var _spqcd = {};\n                        if (spqcdSize === 8) {\n                          _spqcd.epsilon = data[j++] >> 3;\n                          _spqcd.mu = 0;\n                        } else {\n                          _spqcd.epsilon = data[j] >> 3;\n                          _spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                          j += 2;\n                        }\n                        spqcds.push(_spqcd);\n                      }\n                      qcc.SPqcds = spqcds;\n                      if (context.mainHeader) {\n                        context.QCC[cqcc] = qcc;\n                      } else {\n                        context.currentTile.QCC[cqcc] = qcc;\n                      }\n                      break;\n                    case 0xff52:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      var cod = {};\n                      j = position + 2;\n                      var scod = data[j++];\n                      cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n                      cod.sopMarkerUsed = !!(scod & 2);\n                      cod.ephMarkerUsed = !!(scod & 4);\n                      cod.progressionOrder = data[j++];\n                      cod.layersCount = (0, _core_utils.readUint16)(data, j);\n                      j += 2;\n                      cod.multipleComponentTransform = data[j++];\n                      cod.decompositionLevelsCount = data[j++];\n                      cod.xcb = (data[j++] & 0xf) + 2;\n                      cod.ycb = (data[j++] & 0xf) + 2;\n                      var blockStyle = data[j++];\n                      cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n                      cod.resetContextProbabilities = !!(blockStyle & 2);\n                      cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n                      cod.verticallyStripe = !!(blockStyle & 8);\n                      cod.predictableTermination = !!(blockStyle & 16);\n                      cod.segmentationSymbolUsed = !!(blockStyle & 32);\n                      cod.reversibleTransformation = data[j++];\n                      if (cod.entropyCoderWithCustomPrecincts) {\n                        var precinctsSizes = [];\n                        while (j < length + position) {\n                          var precinctsSize = data[j++];\n                          precinctsSizes.push({\n                            PPx: precinctsSize & 0xf,\n                            PPy: precinctsSize >> 4\n                          });\n                        }\n                        cod.precinctsSizes = precinctsSizes;\n                      }\n                      var unsupported = [];\n                      if (cod.selectiveArithmeticCodingBypass) {\n                        unsupported.push(\"selectiveArithmeticCodingBypass\");\n                      }\n                      if (cod.terminationOnEachCodingPass) {\n                        unsupported.push(\"terminationOnEachCodingPass\");\n                      }\n                      if (cod.verticallyStripe) {\n                        unsupported.push(\"verticallyStripe\");\n                      }\n                      if (cod.predictableTermination) {\n                        unsupported.push(\"predictableTermination\");\n                      }\n                      if (unsupported.length > 0) {\n                        doNotRecover = true;\n                        (0, _util.warn)(\"JPX: Unsupported COD options (\".concat(unsupported.join(\", \"), \").\"));\n                      }\n                      if (context.mainHeader) {\n                        context.COD = cod;\n                      } else {\n                        context.currentTile.COD = cod;\n                        context.currentTile.COC = [];\n                      }\n                      break;\n                    case 0xff90:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      tile = {};\n                      tile.index = (0, _core_utils.readUint16)(data, position + 2);\n                      tile.length = (0, _core_utils.readUint32)(data, position + 4);\n                      tile.dataEnd = tile.length + position - 2;\n                      tile.partIndex = data[position + 8];\n                      tile.partsCount = data[position + 9];\n                      context.mainHeader = false;\n                      if (tile.partIndex === 0) {\n                        tile.COD = context.COD;\n                        tile.COC = context.COC.slice(0);\n                        tile.QCD = context.QCD;\n                        tile.QCC = context.QCC.slice(0);\n                      }\n                      context.currentTile = tile;\n                      break;\n                    case 0xff93:\n                      tile = context.currentTile;\n                      if (tile.partIndex === 0) {\n                        initializeTile(context, tile.index);\n                        buildPackets(context);\n                      }\n                      length = tile.dataEnd - position;\n                      parseTilePackets(context, data, position, length);\n                      break;\n                    case 0xff53:\n                      (0, _util.warn)(\"JPX: Codestream code 0xFF53 (COC) is not implemented.\");\n                    case 0xff55:\n                    case 0xff57:\n                    case 0xff58:\n                    case 0xff64:\n                      length = (0, _core_utils.readUint16)(data, position);\n                      break;\n                    default:\n                      throw new Error(\"Unknown codestream code: \" + code.toString(16));\n                  }\n                  position += length;\n                }\n              } catch (e) {\n                if (doNotRecover || this.failOnCorruptedImage) {\n                  throw new JpxError(e.message);\n                } else {\n                  (0, _util.warn)(\"JPX: Trying to recover from: \\\"\".concat(e.message, \"\\\".\"));\n                }\n              }\n              this.tiles = transformComponents(context);\n              this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n              this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n              this.componentsCount = context.SIZ.Csiz;\n            }\n          }]);\n          return JpxImage;\n        }();\n        exports.JpxImage = JpxImage;\n        function calculateComponentDimensions(component, siz) {\n          component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n          component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n          component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n          component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n          component.width = component.x1 - component.x0;\n          component.height = component.y1 - component.y0;\n        }\n        function calculateTileGrids(context, components) {\n          var siz = context.SIZ;\n          var tiles = [];\n          var tile;\n          var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n          var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n          for (var q = 0; q < numYtiles; q++) {\n            for (var p = 0; p < numXtiles; p++) {\n              tile = {};\n              tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n              tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n              tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n              tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n              tile.width = tile.tx1 - tile.tx0;\n              tile.height = tile.ty1 - tile.ty0;\n              tile.components = [];\n              tiles.push(tile);\n            }\n          }\n          context.tiles = tiles;\n          var componentsCount = siz.Csiz;\n          for (var i = 0, ii = componentsCount; i < ii; i++) {\n            var component = components[i];\n            for (var j = 0, jj = tiles.length; j < jj; j++) {\n              var tileComponent = {};\n              tile = tiles[j];\n              tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n              tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n              tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n              tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n              tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n              tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n              tile.components[i] = tileComponent;\n            }\n          }\n        }\n        function getBlocksDimensions(context, component, r) {\n          var codOrCoc = component.codingStyleParameters;\n          var result = {};\n          if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n            result.PPx = 15;\n            result.PPy = 15;\n          } else {\n            result.PPx = codOrCoc.precinctsSizes[r].PPx;\n            result.PPy = codOrCoc.precinctsSizes[r].PPy;\n          }\n          result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n          result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n          return result;\n        }\n        function buildPrecincts(context, resolution, dimensions) {\n          var precinctWidth = 1 << dimensions.PPx;\n          var precinctHeight = 1 << dimensions.PPy;\n          var isZeroRes = resolution.resLevel === 0;\n          var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n          var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n          var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n          var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n          var numprecincts = numprecinctswide * numprecinctshigh;\n          resolution.precinctParameters = {\n            precinctWidth: precinctWidth,\n            precinctHeight: precinctHeight,\n            numprecinctswide: numprecinctswide,\n            numprecinctshigh: numprecinctshigh,\n            numprecincts: numprecincts,\n            precinctWidthInSubband: precinctWidthInSubband,\n            precinctHeightInSubband: precinctHeightInSubband\n          };\n        }\n        function buildCodeblocks(context, subband, dimensions) {\n          var xcb_ = dimensions.xcb_;\n          var ycb_ = dimensions.ycb_;\n          var codeblockWidth = 1 << xcb_;\n          var codeblockHeight = 1 << ycb_;\n          var cbx0 = subband.tbx0 >> xcb_;\n          var cby0 = subband.tby0 >> ycb_;\n          var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n          var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n          var precinctParameters = subband.resolution.precinctParameters;\n          var codeblocks = [];\n          var precincts = [];\n          var i, j, codeblock, precinctNumber;\n          for (j = cby0; j < cby1; j++) {\n            for (i = cbx0; i < cbx1; i++) {\n              codeblock = {\n                cbx: i,\n                cby: j,\n                tbx0: codeblockWidth * i,\n                tby0: codeblockHeight * j,\n                tbx1: codeblockWidth * (i + 1),\n                tby1: codeblockHeight * (j + 1)\n              };\n              codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n              codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n              codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n              codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n              var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n              var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n              precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n              codeblock.precinctNumber = precinctNumber;\n              codeblock.subbandType = subband.type;\n              codeblock.Lblock = 3;\n              if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n                continue;\n              }\n              codeblocks.push(codeblock);\n              var precinct = precincts[precinctNumber];\n              if (precinct !== undefined) {\n                if (i < precinct.cbxMin) {\n                  precinct.cbxMin = i;\n                } else if (i > precinct.cbxMax) {\n                  precinct.cbxMax = i;\n                }\n                if (j < precinct.cbyMin) {\n                  precinct.cbxMin = j;\n                } else if (j > precinct.cbyMax) {\n                  precinct.cbyMax = j;\n                }\n              } else {\n                precincts[precinctNumber] = precinct = {\n                  cbxMin: i,\n                  cbyMin: j,\n                  cbxMax: i,\n                  cbyMax: j\n                };\n              }\n              codeblock.precinct = precinct;\n            }\n          }\n          subband.codeblockParameters = {\n            codeblockWidth: xcb_,\n            codeblockHeight: ycb_,\n            numcodeblockwide: cbx1 - cbx0 + 1,\n            numcodeblockhigh: cby1 - cby0 + 1\n          };\n          subband.codeblocks = codeblocks;\n          subband.precincts = precincts;\n        }\n        function createPacket(resolution, precinctNumber, layerNumber) {\n          var precinctCodeblocks = [];\n          var subbands = resolution.subbands;\n          for (var i = 0, ii = subbands.length; i < ii; i++) {\n            var subband = subbands[i];\n            var codeblocks = subband.codeblocks;\n            for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n              var codeblock = codeblocks[j];\n              if (codeblock.precinctNumber !== precinctNumber) {\n                continue;\n              }\n              precinctCodeblocks.push(codeblock);\n            }\n          }\n          return {\n            layerNumber: layerNumber,\n            codeblocks: precinctCodeblocks\n          };\n        }\n        function LayerResolutionComponentPositionIterator(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var layersCount = tile.codingStyleDefaultParameters.layersCount;\n          var componentsCount = siz.Csiz;\n          var maxDecompositionLevelsCount = 0;\n          for (var q = 0; q < componentsCount; q++) {\n            maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n          }\n          var l = 0,\n            r = 0,\n            i = 0,\n            k = 0;\n          this.nextPacket = function JpxImage_nextPacket() {\n            for (; l < layersCount; l++) {\n              for (; r <= maxDecompositionLevelsCount; r++) {\n                for (; i < componentsCount; i++) {\n                  var component = tile.components[i];\n                  if (r > component.codingStyleParameters.decompositionLevelsCount) {\n                    continue;\n                  }\n                  var resolution = component.resolutions[r];\n                  var numprecincts = resolution.precinctParameters.numprecincts;\n                  for (; k < numprecincts;) {\n                    var packet = createPacket(resolution, k, l);\n                    k++;\n                    return packet;\n                  }\n                  k = 0;\n                }\n                i = 0;\n              }\n              r = 0;\n            }\n            throw new JpxError(\"Out of packets\");\n          };\n        }\n        function ResolutionLayerComponentPositionIterator(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var layersCount = tile.codingStyleDefaultParameters.layersCount;\n          var componentsCount = siz.Csiz;\n          var maxDecompositionLevelsCount = 0;\n          for (var q = 0; q < componentsCount; q++) {\n            maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n          }\n          var r = 0,\n            l = 0,\n            i = 0,\n            k = 0;\n          this.nextPacket = function JpxImage_nextPacket() {\n            for (; r <= maxDecompositionLevelsCount; r++) {\n              for (; l < layersCount; l++) {\n                for (; i < componentsCount; i++) {\n                  var component = tile.components[i];\n                  if (r > component.codingStyleParameters.decompositionLevelsCount) {\n                    continue;\n                  }\n                  var resolution = component.resolutions[r];\n                  var numprecincts = resolution.precinctParameters.numprecincts;\n                  for (; k < numprecincts;) {\n                    var packet = createPacket(resolution, k, l);\n                    k++;\n                    return packet;\n                  }\n                  k = 0;\n                }\n                i = 0;\n              }\n              l = 0;\n            }\n            throw new JpxError(\"Out of packets\");\n          };\n        }\n        function ResolutionPositionComponentLayerIterator(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var layersCount = tile.codingStyleDefaultParameters.layersCount;\n          var componentsCount = siz.Csiz;\n          var l, r, c, p;\n          var maxDecompositionLevelsCount = 0;\n          for (c = 0; c < componentsCount; c++) {\n            var component = tile.components[c];\n            maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n          }\n          var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n          for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n            var maxNumPrecincts = 0;\n            for (c = 0; c < componentsCount; ++c) {\n              var resolutions = tile.components[c].resolutions;\n              if (r < resolutions.length) {\n                maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n              }\n            }\n            maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n          }\n          l = 0;\n          r = 0;\n          c = 0;\n          p = 0;\n          this.nextPacket = function JpxImage_nextPacket() {\n            for (; r <= maxDecompositionLevelsCount; r++) {\n              for (; p < maxNumPrecinctsInLevel[r]; p++) {\n                for (; c < componentsCount; c++) {\n                  var _component2 = tile.components[c];\n                  if (r > _component2.codingStyleParameters.decompositionLevelsCount) {\n                    continue;\n                  }\n                  var resolution = _component2.resolutions[r];\n                  var numprecincts = resolution.precinctParameters.numprecincts;\n                  if (p >= numprecincts) {\n                    continue;\n                  }\n                  for (; l < layersCount;) {\n                    var packet = createPacket(resolution, p, l);\n                    l++;\n                    return packet;\n                  }\n                  l = 0;\n                }\n                c = 0;\n              }\n              p = 0;\n            }\n            throw new JpxError(\"Out of packets\");\n          };\n        }\n        function PositionComponentResolutionLayerIterator(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var layersCount = tile.codingStyleDefaultParameters.layersCount;\n          var componentsCount = siz.Csiz;\n          var precinctsSizes = getPrecinctSizesInImageScale(tile);\n          var precinctsIterationSizes = precinctsSizes;\n          var l = 0,\n            r = 0,\n            c = 0,\n            px = 0,\n            py = 0;\n          this.nextPacket = function JpxImage_nextPacket() {\n            for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n              for (; px < precinctsIterationSizes.maxNumWide; px++) {\n                for (; c < componentsCount; c++) {\n                  var component = tile.components[c];\n                  var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n                  for (; r <= decompositionLevelsCount; r++) {\n                    var resolution = component.resolutions[r];\n                    var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n                    var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n                    if (k === null) {\n                      continue;\n                    }\n                    for (; l < layersCount;) {\n                      var packet = createPacket(resolution, k, l);\n                      l++;\n                      return packet;\n                    }\n                    l = 0;\n                  }\n                  r = 0;\n                }\n                c = 0;\n              }\n              px = 0;\n            }\n            throw new JpxError(\"Out of packets\");\n          };\n        }\n        function ComponentPositionResolutionLayerIterator(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var layersCount = tile.codingStyleDefaultParameters.layersCount;\n          var componentsCount = siz.Csiz;\n          var precinctsSizes = getPrecinctSizesInImageScale(tile);\n          var l = 0,\n            r = 0,\n            c = 0,\n            px = 0,\n            py = 0;\n          this.nextPacket = function JpxImage_nextPacket() {\n            for (; c < componentsCount; ++c) {\n              var component = tile.components[c];\n              var precinctsIterationSizes = precinctsSizes.components[c];\n              var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n              for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n                for (; px < precinctsIterationSizes.maxNumWide; px++) {\n                  for (; r <= decompositionLevelsCount; r++) {\n                    var resolution = component.resolutions[r];\n                    var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n                    var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n                    if (k === null) {\n                      continue;\n                    }\n                    for (; l < layersCount;) {\n                      var packet = createPacket(resolution, k, l);\n                      l++;\n                      return packet;\n                    }\n                    l = 0;\n                  }\n                  r = 0;\n                }\n                px = 0;\n              }\n              py = 0;\n            }\n            throw new JpxError(\"Out of packets\");\n          };\n        }\n        function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n          var posX = pxIndex * precinctIterationSizes.minWidth;\n          var posY = pyIndex * precinctIterationSizes.minHeight;\n          if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n            return null;\n          }\n          var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n          return posX / sizeInImageScale.height + startPrecinctRowIndex;\n        }\n        function getPrecinctSizesInImageScale(tile) {\n          var componentsCount = tile.components.length;\n          var minWidth = Number.MAX_VALUE;\n          var minHeight = Number.MAX_VALUE;\n          var maxNumWide = 0;\n          var maxNumHigh = 0;\n          var sizePerComponent = new Array(componentsCount);\n          for (var c = 0; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n            var sizePerResolution = new Array(decompositionLevelsCount + 1);\n            var minWidthCurrentComponent = Number.MAX_VALUE;\n            var minHeightCurrentComponent = Number.MAX_VALUE;\n            var maxNumWideCurrentComponent = 0;\n            var maxNumHighCurrentComponent = 0;\n            var scale = 1;\n            for (var r = decompositionLevelsCount; r >= 0; --r) {\n              var resolution = component.resolutions[r];\n              var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n              var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n              minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n              minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n              maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n              maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n              sizePerResolution[r] = {\n                width: widthCurrentResolution,\n                height: heightCurrentResolution\n              };\n              scale <<= 1;\n            }\n            minWidth = Math.min(minWidth, minWidthCurrentComponent);\n            minHeight = Math.min(minHeight, minHeightCurrentComponent);\n            maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n            maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n            sizePerComponent[c] = {\n              resolutions: sizePerResolution,\n              minWidth: minWidthCurrentComponent,\n              minHeight: minHeightCurrentComponent,\n              maxNumWide: maxNumWideCurrentComponent,\n              maxNumHigh: maxNumHighCurrentComponent\n            };\n          }\n          return {\n            components: sizePerComponent,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxNumWide: maxNumWide,\n            maxNumHigh: maxNumHigh\n          };\n        }\n        function buildPackets(context) {\n          var siz = context.SIZ;\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var componentsCount = siz.Csiz;\n          for (var c = 0; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n            var resolutions = [];\n            var subbands = [];\n            for (var r = 0; r <= decompositionLevelsCount; r++) {\n              var blocksDimensions = getBlocksDimensions(context, component, r);\n              var resolution = {};\n              var scale = 1 << decompositionLevelsCount - r;\n              resolution.trx0 = Math.ceil(component.tcx0 / scale);\n              resolution.try0 = Math.ceil(component.tcy0 / scale);\n              resolution.trx1 = Math.ceil(component.tcx1 / scale);\n              resolution.try1 = Math.ceil(component.tcy1 / scale);\n              resolution.resLevel = r;\n              buildPrecincts(context, resolution, blocksDimensions);\n              resolutions.push(resolution);\n              var subband = void 0;\n              if (r === 0) {\n                subband = {};\n                subband.type = \"LL\";\n                subband.tbx0 = Math.ceil(component.tcx0 / scale);\n                subband.tby0 = Math.ceil(component.tcy0 / scale);\n                subband.tbx1 = Math.ceil(component.tcx1 / scale);\n                subband.tby1 = Math.ceil(component.tcy1 / scale);\n                subband.resolution = resolution;\n                buildCodeblocks(context, subband, blocksDimensions);\n                subbands.push(subband);\n                resolution.subbands = [subband];\n              } else {\n                var bscale = 1 << decompositionLevelsCount - r + 1;\n                var resolutionSubbands = [];\n                subband = {};\n                subband.type = \"HL\";\n                subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n                subband.tby0 = Math.ceil(component.tcy0 / bscale);\n                subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n                subband.tby1 = Math.ceil(component.tcy1 / bscale);\n                subband.resolution = resolution;\n                buildCodeblocks(context, subband, blocksDimensions);\n                subbands.push(subband);\n                resolutionSubbands.push(subband);\n                subband = {};\n                subband.type = \"LH\";\n                subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n                subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n                subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n                subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n                subband.resolution = resolution;\n                buildCodeblocks(context, subband, blocksDimensions);\n                subbands.push(subband);\n                resolutionSubbands.push(subband);\n                subband = {};\n                subband.type = \"HH\";\n                subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n                subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n                subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n                subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n                subband.resolution = resolution;\n                buildCodeblocks(context, subband, blocksDimensions);\n                subbands.push(subband);\n                resolutionSubbands.push(subband);\n                resolution.subbands = resolutionSubbands;\n              }\n            }\n            component.resolutions = resolutions;\n            component.subbands = subbands;\n          }\n          var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n          switch (progressionOrder) {\n            case 0:\n              tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n              break;\n            case 1:\n              tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n              break;\n            case 2:\n              tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n              break;\n            case 3:\n              tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n              break;\n            case 4:\n              tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n              break;\n            default:\n              throw new JpxError(\"Unsupported progression order \".concat(progressionOrder));\n          }\n        }\n        function parseTilePackets(context, data, offset, dataLength) {\n          var position = 0;\n          var buffer,\n            bufferSize = 0,\n            skipNextBit = false;\n          function readBits(count) {\n            while (bufferSize < count) {\n              var b = data[offset + position];\n              position++;\n              if (skipNextBit) {\n                buffer = buffer << 7 | b;\n                bufferSize += 7;\n                skipNextBit = false;\n              } else {\n                buffer = buffer << 8 | b;\n                bufferSize += 8;\n              }\n              if (b === 0xff) {\n                skipNextBit = true;\n              }\n            }\n            bufferSize -= count;\n            return buffer >>> bufferSize & (1 << count) - 1;\n          }\n          function skipMarkerIfEqual(value) {\n            if (data[offset + position - 1] === 0xff && data[offset + position] === value) {\n              skipBytes(1);\n              return true;\n            } else if (data[offset + position] === 0xff && data[offset + position + 1] === value) {\n              skipBytes(2);\n              return true;\n            }\n            return false;\n          }\n          function skipBytes(count) {\n            position += count;\n          }\n          function alignToByte() {\n            bufferSize = 0;\n            if (skipNextBit) {\n              position++;\n              skipNextBit = false;\n            }\n          }\n          function readCodingpasses() {\n            if (readBits(1) === 0) {\n              return 1;\n            }\n            if (readBits(1) === 0) {\n              return 2;\n            }\n            var value = readBits(2);\n            if (value < 3) {\n              return value + 3;\n            }\n            value = readBits(5);\n            if (value < 31) {\n              return value + 6;\n            }\n            value = readBits(7);\n            return value + 37;\n          }\n          var tileIndex = context.currentTile.index;\n          var tile = context.tiles[tileIndex];\n          var sopMarkerUsed = context.COD.sopMarkerUsed;\n          var ephMarkerUsed = context.COD.ephMarkerUsed;\n          var packetsIterator = tile.packetsIterator;\n          while (position < dataLength) {\n            alignToByte();\n            if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n              skipBytes(4);\n            }\n            var packet = packetsIterator.nextPacket();\n            if (!readBits(1)) {\n              continue;\n            }\n            var layerNumber = packet.layerNumber,\n              queue = [];\n            var codeblock = void 0;\n            for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n              codeblock = packet.codeblocks[i];\n              var precinct = codeblock.precinct;\n              var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n              var codeblockRow = codeblock.cby - precinct.cbyMin;\n              var codeblockIncluded = false;\n              var firstTimeInclusion = false;\n              var valueReady = void 0,\n                zeroBitPlanesTree = void 0;\n              if (codeblock.included !== undefined) {\n                codeblockIncluded = !!readBits(1);\n              } else {\n                precinct = codeblock.precinct;\n                var inclusionTree = void 0;\n                if (precinct.inclusionTree !== undefined) {\n                  inclusionTree = precinct.inclusionTree;\n                } else {\n                  var width = precinct.cbxMax - precinct.cbxMin + 1;\n                  var height = precinct.cbyMax - precinct.cbyMin + 1;\n                  inclusionTree = new InclusionTree(width, height, layerNumber);\n                  zeroBitPlanesTree = new TagTree(width, height);\n                  precinct.inclusionTree = inclusionTree;\n                  precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n                  for (var l = 0; l < layerNumber; l++) {\n                    if (readBits(1) !== 0) {\n                      throw new JpxError(\"Invalid tag tree\");\n                    }\n                  }\n                }\n                if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n                  while (true) {\n                    if (readBits(1)) {\n                      valueReady = !inclusionTree.nextLevel();\n                      if (valueReady) {\n                        codeblock.included = true;\n                        codeblockIncluded = firstTimeInclusion = true;\n                        break;\n                      }\n                    } else {\n                      inclusionTree.incrementValue(layerNumber);\n                      break;\n                    }\n                  }\n                }\n              }\n              if (!codeblockIncluded) {\n                continue;\n              }\n              if (firstTimeInclusion) {\n                zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n                zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n                while (true) {\n                  if (readBits(1)) {\n                    valueReady = !zeroBitPlanesTree.nextLevel();\n                    if (valueReady) {\n                      break;\n                    }\n                  } else {\n                    zeroBitPlanesTree.incrementValue();\n                  }\n                }\n                codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n              }\n              var codingpasses = readCodingpasses();\n              while (readBits(1)) {\n                codeblock.Lblock++;\n              }\n              var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);\n              var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n              var codedDataLength = readBits(bits);\n              queue.push({\n                codeblock: codeblock,\n                codingpasses: codingpasses,\n                dataLength: codedDataLength\n              });\n            }\n            alignToByte();\n            if (ephMarkerUsed) {\n              skipMarkerIfEqual(0x92);\n            }\n            while (queue.length > 0) {\n              var packetItem = queue.shift();\n              codeblock = packetItem.codeblock;\n              if (codeblock.data === undefined) {\n                codeblock.data = [];\n              }\n              codeblock.data.push({\n                data: data,\n                start: offset + position,\n                end: offset + position + packetItem.dataLength,\n                codingpasses: packetItem.codingpasses\n              });\n              position += packetItem.dataLength;\n            }\n          }\n          return position;\n        }\n        function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed, resetContextProbabilities) {\n          var x0 = subband.tbx0;\n          var y0 = subband.tby0;\n          var width = subband.tbx1 - subband.tbx0;\n          var codeblocks = subband.codeblocks;\n          var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n          var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n          for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n            var codeblock = codeblocks[i];\n            var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n            var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n            if (blockWidth === 0 || blockHeight === 0) {\n              continue;\n            }\n            if (codeblock.data === undefined) {\n              continue;\n            }\n            var bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n            var currentCodingpassType = 2;\n            var data = codeblock.data;\n            var totalLength = 0,\n              codingpasses = 0;\n            var j = void 0,\n              jj = void 0,\n              dataItem = void 0;\n            for (j = 0, jj = data.length; j < jj; j++) {\n              dataItem = data[j];\n              totalLength += dataItem.end - dataItem.start;\n              codingpasses += dataItem.codingpasses;\n            }\n            var encodedData = new Uint8Array(totalLength);\n            var position = 0;\n            for (j = 0, jj = data.length; j < jj; j++) {\n              dataItem = data[j];\n              var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n              encodedData.set(chunk, position);\n              position += chunk.length;\n            }\n            var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);\n            bitModel.setDecoder(decoder);\n            for (j = 0; j < codingpasses; j++) {\n              switch (currentCodingpassType) {\n                case 0:\n                  bitModel.runSignificancePropagationPass();\n                  break;\n                case 1:\n                  bitModel.runMagnitudeRefinementPass();\n                  break;\n                case 2:\n                  bitModel.runCleanupPass();\n                  if (segmentationSymbolUsed) {\n                    bitModel.checkSegmentationSymbol();\n                  }\n                  break;\n              }\n              if (resetContextProbabilities) {\n                bitModel.reset();\n              }\n              currentCodingpassType = (currentCodingpassType + 1) % 3;\n            }\n            var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n            var sign = bitModel.coefficentsSign;\n            var magnitude = bitModel.coefficentsMagnitude;\n            var bitsDecoded = bitModel.bitsDecoded;\n            var magnitudeCorrection = reversible ? 0 : 0.5;\n            var k = void 0,\n              n = void 0,\n              nb = void 0;\n            position = 0;\n            var interleave = subband.type !== \"LL\";\n            for (j = 0; j < blockHeight; j++) {\n              var row = offset / width | 0;\n              var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n              for (k = 0; k < blockWidth; k++) {\n                n = magnitude[position];\n                if (n !== 0) {\n                  n = (n + magnitudeCorrection) * delta;\n                  if (sign[position] !== 0) {\n                    n = -n;\n                  }\n                  nb = bitsDecoded[position];\n                  var pos = interleave ? levelOffset + (offset << 1) : offset;\n                  if (reversible && nb >= mb) {\n                    coefficients[pos] = n;\n                  } else {\n                    coefficients[pos] = n * (1 << mb - nb);\n                  }\n                }\n                offset++;\n                position++;\n              }\n              offset += width - blockWidth;\n            }\n          }\n        }\n        function transformTile(context, tile, c) {\n          var component = tile.components[c];\n          var codingStyleParameters = component.codingStyleParameters;\n          var quantizationParameters = component.quantizationParameters;\n          var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n          var spqcds = quantizationParameters.SPqcds;\n          var scalarExpounded = quantizationParameters.scalarExpounded;\n          var guardBits = quantizationParameters.guardBits;\n          var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n          var resetContextProbabilities = codingStyleParameters.resetContextProbabilities;\n          var precision = context.components[c].precision;\n          var reversible = codingStyleParameters.reversibleTransformation;\n          var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n          var subbandCoefficients = [];\n          var b = 0;\n          for (var i = 0; i <= decompositionLevelsCount; i++) {\n            var resolution = component.resolutions[i];\n            var width = resolution.trx1 - resolution.trx0;\n            var height = resolution.try1 - resolution.try0;\n            var coefficients = new Float32Array(width * height);\n            for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n              var mu = void 0,\n                epsilon = void 0;\n              if (!scalarExpounded) {\n                mu = spqcds[0].mu;\n                epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n              } else {\n                mu = spqcds[b].mu;\n                epsilon = spqcds[b].epsilon;\n                b++;\n              }\n              var subband = resolution.subbands[j];\n              var gainLog2 = SubbandsGainLog2[subband.type];\n              var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);\n              var mb = guardBits + epsilon - 1;\n              copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed, resetContextProbabilities);\n            }\n            subbandCoefficients.push({\n              width: width,\n              height: height,\n              items: coefficients\n            });\n          }\n          var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n          return {\n            left: component.tcx0,\n            top: component.tcy0,\n            width: result.width,\n            height: result.height,\n            items: result.items\n          };\n        }\n        function transformComponents(context) {\n          var siz = context.SIZ;\n          var components = context.components;\n          var componentsCount = siz.Csiz;\n          var resultImages = [];\n          for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n            var tile = context.tiles[i];\n            var transformedTiles = [];\n            for (var c = 0; c < componentsCount; c++) {\n              transformedTiles[c] = transformTile(context, tile, c);\n            }\n            var tile0 = transformedTiles[0];\n            var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n            var result = {\n              left: tile0.left,\n              top: tile0.top,\n              width: tile0.width,\n              height: tile0.height,\n              items: out\n            };\n            var shift = void 0,\n              offset = void 0;\n            var pos = 0,\n              j = void 0,\n              jj = void 0,\n              y0 = void 0,\n              y1 = void 0,\n              y2 = void 0;\n            if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n              var fourComponents = componentsCount === 4;\n              var y0items = transformedTiles[0].items;\n              var y1items = transformedTiles[1].items;\n              var y2items = transformedTiles[2].items;\n              var y3items = fourComponents ? transformedTiles[3].items : null;\n              shift = components[0].precision - 8;\n              offset = (128 << shift) + 0.5;\n              var component0 = tile.components[0];\n              var alpha01 = componentsCount - 3;\n              jj = y0items.length;\n              if (!component0.codingStyleParameters.reversibleTransformation) {\n                for (j = 0; j < jj; j++, pos += alpha01) {\n                  y0 = y0items[j] + offset;\n                  y1 = y1items[j];\n                  y2 = y2items[j];\n                  out[pos++] = y0 + 1.402 * y2 >> shift;\n                  out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;\n                  out[pos++] = y0 + 1.772 * y1 >> shift;\n                }\n              } else {\n                for (j = 0; j < jj; j++, pos += alpha01) {\n                  y0 = y0items[j] + offset;\n                  y1 = y1items[j];\n                  y2 = y2items[j];\n                  var g = y0 - (y2 + y1 >> 2);\n                  out[pos++] = g + y2 >> shift;\n                  out[pos++] = g >> shift;\n                  out[pos++] = g + y1 >> shift;\n                }\n              }\n              if (fourComponents) {\n                for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n                  out[pos] = y3items[j] + offset >> shift;\n                }\n              }\n            } else {\n              for (var _c = 0; _c < componentsCount; _c++) {\n                var items = transformedTiles[_c].items;\n                shift = components[_c].precision - 8;\n                offset = (128 << shift) + 0.5;\n                for (pos = _c, j = 0, jj = items.length; j < jj; j++) {\n                  out[pos] = items[j] + offset >> shift;\n                  pos += componentsCount;\n                }\n              }\n            }\n            resultImages.push(result);\n          }\n          return resultImages;\n        }\n        function initializeTile(context, tileIndex) {\n          var siz = context.SIZ;\n          var componentsCount = siz.Csiz;\n          var tile = context.tiles[tileIndex];\n          for (var c = 0; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n            component.quantizationParameters = qcdOrQcc;\n            var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n            component.codingStyleParameters = codOrCoc;\n          }\n          tile.codingStyleDefaultParameters = context.currentTile.COD;\n        }\n        var TagTree = /*#__PURE__*/function () {\n          function TagTree(width, height) {\n            _classCallCheck(this, TagTree);\n            var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n            this.levels = [];\n            for (var i = 0; i < levelsLength; i++) {\n              var level = {\n                width: width,\n                height: height,\n                items: []\n              };\n              this.levels.push(level);\n              width = Math.ceil(width / 2);\n              height = Math.ceil(height / 2);\n            }\n          }\n          _createClass(TagTree, [{\n            key: \"reset\",\n            value: function reset(i, j) {\n              var currentLevel = 0,\n                value = 0,\n                level;\n              while (currentLevel < this.levels.length) {\n                level = this.levels[currentLevel];\n                var index = i + j * level.width;\n                if (level.items[index] !== undefined) {\n                  value = level.items[index];\n                  break;\n                }\n                level.index = index;\n                i >>= 1;\n                j >>= 1;\n                currentLevel++;\n              }\n              currentLevel--;\n              level = this.levels[currentLevel];\n              level.items[level.index] = value;\n              this.currentLevel = currentLevel;\n              delete this.value;\n            }\n          }, {\n            key: \"incrementValue\",\n            value: function incrementValue() {\n              var level = this.levels[this.currentLevel];\n              level.items[level.index]++;\n            }\n          }, {\n            key: \"nextLevel\",\n            value: function nextLevel() {\n              var currentLevel = this.currentLevel;\n              var level = this.levels[currentLevel];\n              var value = level.items[level.index];\n              currentLevel--;\n              if (currentLevel < 0) {\n                this.value = value;\n                return false;\n              }\n              this.currentLevel = currentLevel;\n              level = this.levels[currentLevel];\n              level.items[level.index] = value;\n              return true;\n            }\n          }]);\n          return TagTree;\n        }();\n        var InclusionTree = /*#__PURE__*/function () {\n          function InclusionTree(width, height, defaultValue) {\n            _classCallCheck(this, InclusionTree);\n            var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n            this.levels = [];\n            for (var i = 0; i < levelsLength; i++) {\n              var items = new Uint8Array(width * height);\n              for (var j = 0, jj = items.length; j < jj; j++) {\n                items[j] = defaultValue;\n              }\n              var level = {\n                width: width,\n                height: height,\n                items: items\n              };\n              this.levels.push(level);\n              width = Math.ceil(width / 2);\n              height = Math.ceil(height / 2);\n            }\n          }\n          _createClass(InclusionTree, [{\n            key: \"reset\",\n            value: function reset(i, j, stopValue) {\n              var currentLevel = 0;\n              while (currentLevel < this.levels.length) {\n                var level = this.levels[currentLevel];\n                var index = i + j * level.width;\n                level.index = index;\n                var value = level.items[index];\n                if (value === 0xff) {\n                  break;\n                }\n                if (value > stopValue) {\n                  this.currentLevel = currentLevel;\n                  this.propagateValues();\n                  return false;\n                }\n                i >>= 1;\n                j >>= 1;\n                currentLevel++;\n              }\n              this.currentLevel = currentLevel - 1;\n              return true;\n            }\n          }, {\n            key: \"incrementValue\",\n            value: function incrementValue(stopValue) {\n              var level = this.levels[this.currentLevel];\n              level.items[level.index] = stopValue + 1;\n              this.propagateValues();\n            }\n          }, {\n            key: \"propagateValues\",\n            value: function propagateValues() {\n              var levelIndex = this.currentLevel;\n              var level = this.levels[levelIndex];\n              var currentValue = level.items[level.index];\n              while (--levelIndex >= 0) {\n                level = this.levels[levelIndex];\n                level.items[level.index] = currentValue;\n              }\n            }\n          }, {\n            key: \"nextLevel\",\n            value: function nextLevel() {\n              var currentLevel = this.currentLevel;\n              var level = this.levels[currentLevel];\n              var value = level.items[level.index];\n              level.items[level.index] = 0xff;\n              currentLevel--;\n              if (currentLevel < 0) {\n                return false;\n              }\n              this.currentLevel = currentLevel;\n              level = this.levels[currentLevel];\n              level.items[level.index] = value;\n              return true;\n            }\n          }]);\n          return InclusionTree;\n        }();\n        var BitModel = function BitModelClosure() {\n          var UNIFORM_CONTEXT = 17;\n          var RUNLENGTH_CONTEXT = 18;\n          var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);\n          var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);\n          var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);\n          var BitModel = /*#__PURE__*/function () {\n            function BitModel(width, height, subband, zeroBitPlanes, mb) {\n              _classCallCheck(this, BitModel);\n              this.width = width;\n              this.height = height;\n              var contextLabelTable;\n              if (subband === \"HH\") {\n                contextLabelTable = HHContextLabel;\n              } else if (subband === \"HL\") {\n                contextLabelTable = HLContextLabel;\n              } else {\n                contextLabelTable = LLAndLHContextsLabel;\n              }\n              this.contextLabelTable = contextLabelTable;\n              var coefficientCount = width * height;\n              this.neighborsSignificance = new Uint8Array(coefficientCount);\n              this.coefficentsSign = new Uint8Array(coefficientCount);\n              var coefficentsMagnitude;\n              if (mb > 14) {\n                coefficentsMagnitude = new Uint32Array(coefficientCount);\n              } else if (mb > 6) {\n                coefficentsMagnitude = new Uint16Array(coefficientCount);\n              } else {\n                coefficentsMagnitude = new Uint8Array(coefficientCount);\n              }\n              this.coefficentsMagnitude = coefficentsMagnitude;\n              this.processingFlags = new Uint8Array(coefficientCount);\n              var bitsDecoded = new Uint8Array(coefficientCount);\n              if (zeroBitPlanes !== 0) {\n                for (var i = 0; i < coefficientCount; i++) {\n                  bitsDecoded[i] = zeroBitPlanes;\n                }\n              }\n              this.bitsDecoded = bitsDecoded;\n              this.reset();\n            }\n            _createClass(BitModel, [{\n              key: \"setDecoder\",\n              value: function setDecoder(decoder) {\n                this.decoder = decoder;\n              }\n            }, {\n              key: \"reset\",\n              value: function reset() {\n                this.contexts = new Int8Array(19);\n                this.contexts[0] = 4 << 1 | 0;\n                this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n                this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n              }\n            }, {\n              key: \"setNeighborsSignificance\",\n              value: function setNeighborsSignificance(row, column, index) {\n                var neighborsSignificance = this.neighborsSignificance;\n                var width = this.width,\n                  height = this.height;\n                var left = column > 0;\n                var right = column + 1 < width;\n                var i;\n                if (row > 0) {\n                  i = index - width;\n                  if (left) {\n                    neighborsSignificance[i - 1] += 0x10;\n                  }\n                  if (right) {\n                    neighborsSignificance[i + 1] += 0x10;\n                  }\n                  neighborsSignificance[i] += 0x04;\n                }\n                if (row + 1 < height) {\n                  i = index + width;\n                  if (left) {\n                    neighborsSignificance[i - 1] += 0x10;\n                  }\n                  if (right) {\n                    neighborsSignificance[i + 1] += 0x10;\n                  }\n                  neighborsSignificance[i] += 0x04;\n                }\n                if (left) {\n                  neighborsSignificance[index - 1] += 0x01;\n                }\n                if (right) {\n                  neighborsSignificance[index + 1] += 0x01;\n                }\n                neighborsSignificance[index] |= 0x80;\n              }\n            }, {\n              key: \"runSignificancePropagationPass\",\n              value: function runSignificancePropagationPass() {\n                var decoder = this.decoder;\n                var width = this.width,\n                  height = this.height;\n                var coefficentsMagnitude = this.coefficentsMagnitude;\n                var coefficentsSign = this.coefficentsSign;\n                var neighborsSignificance = this.neighborsSignificance;\n                var processingFlags = this.processingFlags;\n                var contexts = this.contexts;\n                var labels = this.contextLabelTable;\n                var bitsDecoded = this.bitsDecoded;\n                var processedInverseMask = ~1;\n                var processedMask = 1;\n                var firstMagnitudeBitMask = 2;\n                for (var i0 = 0; i0 < height; i0 += 4) {\n                  for (var j = 0; j < width; j++) {\n                    var index = i0 * width + j;\n                    for (var i1 = 0; i1 < 4; i1++, index += width) {\n                      var i = i0 + i1;\n                      if (i >= height) {\n                        break;\n                      }\n                      processingFlags[index] &= processedInverseMask;\n                      if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                        continue;\n                      }\n                      var contextLabel = labels[neighborsSignificance[index]];\n                      var decision = decoder.readBit(contexts, contextLabel);\n                      if (decision) {\n                        var sign = this.decodeSignBit(i, j, index);\n                        coefficentsSign[index] = sign;\n                        coefficentsMagnitude[index] = 1;\n                        this.setNeighborsSignificance(i, j, index);\n                        processingFlags[index] |= firstMagnitudeBitMask;\n                      }\n                      bitsDecoded[index]++;\n                      processingFlags[index] |= processedMask;\n                    }\n                  }\n                }\n              }\n            }, {\n              key: \"decodeSignBit\",\n              value: function decodeSignBit(row, column, index) {\n                var width = this.width,\n                  height = this.height;\n                var coefficentsMagnitude = this.coefficentsMagnitude;\n                var coefficentsSign = this.coefficentsSign;\n                var contribution, sign0, sign1, significance1;\n                var contextLabel, decoded;\n                significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n                if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n                  sign1 = coefficentsSign[index + 1];\n                  if (significance1) {\n                    sign0 = coefficentsSign[index - 1];\n                    contribution = 1 - sign1 - sign0;\n                  } else {\n                    contribution = 1 - sign1 - sign1;\n                  }\n                } else if (significance1) {\n                  sign0 = coefficentsSign[index - 1];\n                  contribution = 1 - sign0 - sign0;\n                } else {\n                  contribution = 0;\n                }\n                var horizontalContribution = 3 * contribution;\n                significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n                if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n                  sign1 = coefficentsSign[index + width];\n                  if (significance1) {\n                    sign0 = coefficentsSign[index - width];\n                    contribution = 1 - sign1 - sign0 + horizontalContribution;\n                  } else {\n                    contribution = 1 - sign1 - sign1 + horizontalContribution;\n                  }\n                } else if (significance1) {\n                  sign0 = coefficentsSign[index - width];\n                  contribution = 1 - sign0 - sign0 + horizontalContribution;\n                } else {\n                  contribution = horizontalContribution;\n                }\n                if (contribution >= 0) {\n                  contextLabel = 9 + contribution;\n                  decoded = this.decoder.readBit(this.contexts, contextLabel);\n                } else {\n                  contextLabel = 9 - contribution;\n                  decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n                }\n                return decoded;\n              }\n            }, {\n              key: \"runMagnitudeRefinementPass\",\n              value: function runMagnitudeRefinementPass() {\n                var decoder = this.decoder;\n                var width = this.width,\n                  height = this.height;\n                var coefficentsMagnitude = this.coefficentsMagnitude;\n                var neighborsSignificance = this.neighborsSignificance;\n                var contexts = this.contexts;\n                var bitsDecoded = this.bitsDecoded;\n                var processingFlags = this.processingFlags;\n                var processedMask = 1;\n                var firstMagnitudeBitMask = 2;\n                var length = width * height;\n                var width4 = width * 4;\n                for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n                  indexNext = Math.min(length, index0 + width4);\n                  for (var j = 0; j < width; j++) {\n                    for (var index = index0 + j; index < indexNext; index += width) {\n                      if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                        continue;\n                      }\n                      var contextLabel = 16;\n                      if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                        processingFlags[index] ^= firstMagnitudeBitMask;\n                        var significance = neighborsSignificance[index] & 127;\n                        contextLabel = significance === 0 ? 15 : 14;\n                      }\n                      var bit = decoder.readBit(contexts, contextLabel);\n                      coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n                      bitsDecoded[index]++;\n                      processingFlags[index] |= processedMask;\n                    }\n                  }\n                }\n              }\n            }, {\n              key: \"runCleanupPass\",\n              value: function runCleanupPass() {\n                var decoder = this.decoder;\n                var width = this.width,\n                  height = this.height;\n                var neighborsSignificance = this.neighborsSignificance;\n                var coefficentsMagnitude = this.coefficentsMagnitude;\n                var coefficentsSign = this.coefficentsSign;\n                var contexts = this.contexts;\n                var labels = this.contextLabelTable;\n                var bitsDecoded = this.bitsDecoded;\n                var processingFlags = this.processingFlags;\n                var processedMask = 1;\n                var firstMagnitudeBitMask = 2;\n                var oneRowDown = width;\n                var twoRowsDown = width * 2;\n                var threeRowsDown = width * 3;\n                var iNext;\n                for (var i0 = 0; i0 < height; i0 = iNext) {\n                  iNext = Math.min(i0 + 4, height);\n                  var indexBase = i0 * width;\n                  var checkAllEmpty = i0 + 3 < height;\n                  for (var j = 0; j < width; j++) {\n                    var index0 = indexBase + j;\n                    var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n                    var i1 = 0,\n                      index = index0;\n                    var i = i0,\n                      sign = void 0;\n                    if (allEmpty) {\n                      var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n                      if (!hasSignificantCoefficent) {\n                        bitsDecoded[index0]++;\n                        bitsDecoded[index0 + oneRowDown]++;\n                        bitsDecoded[index0 + twoRowsDown]++;\n                        bitsDecoded[index0 + threeRowsDown]++;\n                        continue;\n                      }\n                      i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n                      if (i1 !== 0) {\n                        i = i0 + i1;\n                        index += i1 * width;\n                      }\n                      sign = this.decodeSignBit(i, j, index);\n                      coefficentsSign[index] = sign;\n                      coefficentsMagnitude[index] = 1;\n                      this.setNeighborsSignificance(i, j, index);\n                      processingFlags[index] |= firstMagnitudeBitMask;\n                      index = index0;\n                      for (var i2 = i0; i2 <= i; i2++, index += width) {\n                        bitsDecoded[index]++;\n                      }\n                      i1++;\n                    }\n                    for (i = i0 + i1; i < iNext; i++, index += width) {\n                      if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                        continue;\n                      }\n                      var contextLabel = labels[neighborsSignificance[index]];\n                      var decision = decoder.readBit(contexts, contextLabel);\n                      if (decision === 1) {\n                        sign = this.decodeSignBit(i, j, index);\n                        coefficentsSign[index] = sign;\n                        coefficentsMagnitude[index] = 1;\n                        this.setNeighborsSignificance(i, j, index);\n                        processingFlags[index] |= firstMagnitudeBitMask;\n                      }\n                      bitsDecoded[index]++;\n                    }\n                  }\n                }\n              }\n            }, {\n              key: \"checkSegmentationSymbol\",\n              value: function checkSegmentationSymbol() {\n                var decoder = this.decoder;\n                var contexts = this.contexts;\n                var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n                if (symbol !== 0xa) {\n                  throw new JpxError(\"Invalid segmentation symbol\");\n                }\n              }\n            }]);\n            return BitModel;\n          }();\n          return BitModel;\n        }();\n        var Transform = /*#__PURE__*/function () {\n          function Transform() {\n            _classCallCheck(this, Transform);\n            if (this.constructor === Transform) {\n              (0, _util.unreachable)(\"Cannot initialize Transform.\");\n            }\n          }\n          _createClass(Transform, [{\n            key: \"calculate\",\n            value: function calculate(subbands, u0, v0) {\n              var ll = subbands[0];\n              for (var i = 1, ii = subbands.length; i < ii; i++) {\n                ll = this.iterate(ll, subbands[i], u0, v0);\n              }\n              return ll;\n            }\n          }, {\n            key: \"extend\",\n            value: function extend(buffer, offset, size) {\n              var i1 = offset - 1,\n                j1 = offset + 1;\n              var i2 = offset + size - 2,\n                j2 = offset + size;\n              buffer[i1--] = buffer[j1++];\n              buffer[j2++] = buffer[i2--];\n              buffer[i1--] = buffer[j1++];\n              buffer[j2++] = buffer[i2--];\n              buffer[i1--] = buffer[j1++];\n              buffer[j2++] = buffer[i2--];\n              buffer[i1] = buffer[j1];\n              buffer[j2] = buffer[i2];\n            }\n          }, {\n            key: \"filter\",\n            value: function filter(x, offset, length) {\n              (0, _util.unreachable)(\"Abstract method `filter` called\");\n            }\n          }, {\n            key: \"iterate\",\n            value: function iterate(ll, hl_lh_hh, u0, v0) {\n              var llWidth = ll.width,\n                llHeight = ll.height;\n              var llItems = ll.items;\n              var width = hl_lh_hh.width;\n              var height = hl_lh_hh.height;\n              var items = hl_lh_hh.items;\n              var i, j, k, l, u, v;\n              for (k = 0, i = 0; i < llHeight; i++) {\n                l = i * 2 * width;\n                for (j = 0; j < llWidth; j++, k++, l += 2) {\n                  items[l] = llItems[k];\n                }\n              }\n              llItems = ll.items = null;\n              var bufferPadding = 4;\n              var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n              if (width === 1) {\n                if ((u0 & 1) !== 0) {\n                  for (v = 0, k = 0; v < height; v++, k += width) {\n                    items[k] *= 0.5;\n                  }\n                }\n              } else {\n                for (v = 0, k = 0; v < height; v++, k += width) {\n                  rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n                  this.extend(rowBuffer, bufferPadding, width);\n                  this.filter(rowBuffer, bufferPadding, width);\n                  items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n                }\n              }\n              var numBuffers = 16;\n              var colBuffers = [];\n              for (i = 0; i < numBuffers; i++) {\n                colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n              }\n              var b,\n                currentBuffer = 0;\n              ll = bufferPadding + height;\n              if (height === 1) {\n                if ((v0 & 1) !== 0) {\n                  for (u = 0; u < width; u++) {\n                    items[u] *= 0.5;\n                  }\n                }\n              } else {\n                for (u = 0; u < width; u++) {\n                  if (currentBuffer === 0) {\n                    numBuffers = Math.min(width - u, numBuffers);\n                    for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n                      for (b = 0; b < numBuffers; b++) {\n                        colBuffers[b][l] = items[k + b];\n                      }\n                    }\n                    currentBuffer = numBuffers;\n                  }\n                  currentBuffer--;\n                  var buffer = colBuffers[currentBuffer];\n                  this.extend(buffer, bufferPadding, height);\n                  this.filter(buffer, bufferPadding, height);\n                  if (currentBuffer === 0) {\n                    k = u - numBuffers + 1;\n                    for (l = bufferPadding; l < ll; k += width, l++) {\n                      for (b = 0; b < numBuffers; b++) {\n                        items[k + b] = colBuffers[b][l];\n                      }\n                    }\n                  }\n                }\n              }\n              return {\n                width: width,\n                height: height,\n                items: items\n              };\n            }\n          }]);\n          return Transform;\n        }();\n        var IrreversibleTransform = /*#__PURE__*/function (_Transform) {\n          _inherits(IrreversibleTransform, _Transform);\n          function IrreversibleTransform() {\n            _classCallCheck(this, IrreversibleTransform);\n            return _possibleConstructorReturn(this, _getPrototypeOf(IrreversibleTransform).apply(this, arguments));\n          }\n          _createClass(IrreversibleTransform, [{\n            key: \"filter\",\n            value: function filter(x, offset, length) {\n              var len = length >> 1;\n              offset |= 0;\n              var j, n, current, next;\n              var alpha = -1.586134342059924;\n              var beta = -0.052980118572961;\n              var gamma = 0.882911075530934;\n              var delta = 0.443506852043971;\n              var K = 1.230174104914001;\n              var K_ = 1 / K;\n              j = offset - 3;\n              for (n = len + 4; n--; j += 2) {\n                x[j] *= K_;\n              }\n              j = offset - 2;\n              current = delta * x[j - 1];\n              for (n = len + 3; n--; j += 2) {\n                next = delta * x[j + 1];\n                x[j] = K * x[j] - current - next;\n                if (n--) {\n                  j += 2;\n                  current = delta * x[j + 1];\n                  x[j] = K * x[j] - current - next;\n                } else {\n                  break;\n                }\n              }\n              j = offset - 1;\n              current = gamma * x[j - 1];\n              for (n = len + 2; n--; j += 2) {\n                next = gamma * x[j + 1];\n                x[j] -= current + next;\n                if (n--) {\n                  j += 2;\n                  current = gamma * x[j + 1];\n                  x[j] -= current + next;\n                } else {\n                  break;\n                }\n              }\n              j = offset;\n              current = beta * x[j - 1];\n              for (n = len + 1; n--; j += 2) {\n                next = beta * x[j + 1];\n                x[j] -= current + next;\n                if (n--) {\n                  j += 2;\n                  current = beta * x[j + 1];\n                  x[j] -= current + next;\n                } else {\n                  break;\n                }\n              }\n              if (len !== 0) {\n                j = offset + 1;\n                current = alpha * x[j - 1];\n                for (n = len; n--; j += 2) {\n                  next = alpha * x[j + 1];\n                  x[j] -= current + next;\n                  if (n--) {\n                    j += 2;\n                    current = alpha * x[j + 1];\n                    x[j] -= current + next;\n                  } else {\n                    break;\n                  }\n                }\n              }\n            }\n          }]);\n          return IrreversibleTransform;\n        }(Transform);\n        var ReversibleTransform = /*#__PURE__*/function (_Transform2) {\n          _inherits(ReversibleTransform, _Transform2);\n          function ReversibleTransform() {\n            _classCallCheck(this, ReversibleTransform);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ReversibleTransform).apply(this, arguments));\n          }\n          _createClass(ReversibleTransform, [{\n            key: \"filter\",\n            value: function filter(x, offset, length) {\n              var len = length >> 1;\n              offset |= 0;\n              var j, n;\n              for (j = offset, n = len + 1; n--; j += 2) {\n                x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n              }\n              for (j = offset + 1, n = len; n--; j += 2) {\n                x[j] += x[j - 1] + x[j + 1] >> 1;\n              }\n            }\n          }]);\n          return ReversibleTransform;\n        }(Transform);\n        /***/\n      }, /* 31 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.LZWStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var LZWStream = /*#__PURE__*/function (_decode_stream$Decode8) {\n          _inherits(LZWStream, _decode_stream$Decode8);\n          function LZWStream(str, maybeLength, earlyChange) {\n            var _this73;\n            _classCallCheck(this, LZWStream);\n            _this73 = _possibleConstructorReturn(this, _getPrototypeOf(LZWStream).call(this, maybeLength));\n            _this73.str = str;\n            _this73.dict = str.dict;\n            _this73.cachedData = 0;\n            _this73.bitsCached = 0;\n            var maxLzwDictionarySize = 4096;\n            var lzwState = {\n              earlyChange: earlyChange,\n              codeLength: 9,\n              nextCode: 258,\n              dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n              dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n              dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n              currentSequence: new Uint8Array(maxLzwDictionarySize),\n              currentSequenceLength: 0\n            };\n            for (var i = 0; i < 256; ++i) {\n              lzwState.dictionaryValues[i] = i;\n              lzwState.dictionaryLengths[i] = 1;\n            }\n            _this73.lzwState = lzwState;\n            return _this73;\n          }\n          _createClass(LZWStream, [{\n            key: \"readBits\",\n            value: function readBits(n) {\n              var bitsCached = this.bitsCached;\n              var cachedData = this.cachedData;\n              while (bitsCached < n) {\n                var c = this.str.getByte();\n                if (c === -1) {\n                  this.eof = true;\n                  return null;\n                }\n                cachedData = cachedData << 8 | c;\n                bitsCached += 8;\n              }\n              this.bitsCached = bitsCached -= n;\n              this.cachedData = cachedData;\n              this.lastCode = null;\n              return cachedData >>> bitsCached & (1 << n) - 1;\n            }\n          }, {\n            key: \"readBlock\",\n            value: function readBlock() {\n              var blockSize = 512,\n                decodedSizeDelta = blockSize;\n              var estimatedDecodedSize = blockSize * 2;\n              var i, j, q;\n              var lzwState = this.lzwState;\n              if (!lzwState) {\n                return;\n              }\n              var earlyChange = lzwState.earlyChange;\n              var nextCode = lzwState.nextCode;\n              var dictionaryValues = lzwState.dictionaryValues;\n              var dictionaryLengths = lzwState.dictionaryLengths;\n              var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n              var codeLength = lzwState.codeLength;\n              var prevCode = lzwState.prevCode;\n              var currentSequence = lzwState.currentSequence;\n              var currentSequenceLength = lzwState.currentSequenceLength;\n              var decodedLength = 0;\n              var currentBufferLength = this.bufferLength;\n              var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n              for (i = 0; i < blockSize; i++) {\n                var code = this.readBits(codeLength);\n                var hasPrev = currentSequenceLength > 0;\n                if (code < 256) {\n                  currentSequence[0] = code;\n                  currentSequenceLength = 1;\n                } else if (code >= 258) {\n                  if (code < nextCode) {\n                    currentSequenceLength = dictionaryLengths[code];\n                    for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n                      currentSequence[j] = dictionaryValues[q];\n                      q = dictionaryPrevCodes[q];\n                    }\n                  } else {\n                    currentSequence[currentSequenceLength++] = currentSequence[0];\n                  }\n                } else if (code === 256) {\n                  codeLength = 9;\n                  nextCode = 258;\n                  currentSequenceLength = 0;\n                  continue;\n                } else {\n                  this.eof = true;\n                  delete this.lzwState;\n                  break;\n                }\n                if (hasPrev) {\n                  dictionaryPrevCodes[nextCode] = prevCode;\n                  dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n                  dictionaryValues[nextCode] = currentSequence[0];\n                  nextCode++;\n                  codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n                }\n                prevCode = code;\n                decodedLength += currentSequenceLength;\n                if (estimatedDecodedSize < decodedLength) {\n                  do {\n                    estimatedDecodedSize += decodedSizeDelta;\n                  } while (estimatedDecodedSize < decodedLength);\n                  buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n                }\n                for (j = 0; j < currentSequenceLength; j++) {\n                  buffer[currentBufferLength++] = currentSequence[j];\n                }\n              }\n              lzwState.nextCode = nextCode;\n              lzwState.codeLength = codeLength;\n              lzwState.prevCode = prevCode;\n              lzwState.currentSequenceLength = currentSequenceLength;\n              this.bufferLength = currentBufferLength;\n            }\n          }]);\n          return LZWStream;\n        }(_decode_stream.DecodeStream);\n        exports.LZWStream = LZWStream;\n\n        /***/\n      }, /* 32 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PredictorStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _primitives = __w_pdfjs_require__(5);\n        var _util = __w_pdfjs_require__(2);\n        var PredictorStream = /*#__PURE__*/function (_decode_stream$Decode9) {\n          _inherits(PredictorStream, _decode_stream$Decode9);\n          function PredictorStream(str, maybeLength, params) {\n            var _this74;\n            _classCallCheck(this, PredictorStream);\n            _this74 = _possibleConstructorReturn(this, _getPrototypeOf(PredictorStream).call(this, maybeLength));\n            if (!(params instanceof _primitives.Dict)) {\n              return _possibleConstructorReturn(_this74, str);\n            }\n            var predictor = _this74.predictor = params.get(\"Predictor\") || 1;\n            if (predictor <= 1) {\n              return _possibleConstructorReturn(_this74, str);\n            }\n            if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n              throw new _util.FormatError(\"Unsupported predictor: \".concat(predictor));\n            }\n            if (predictor === 2) {\n              _this74.readBlock = _this74.readBlockTiff;\n            } else {\n              _this74.readBlock = _this74.readBlockPng;\n            }\n            _this74.str = str;\n            _this74.dict = str.dict;\n            var colors = _this74.colors = params.get(\"Colors\") || 1;\n            var bits = _this74.bits = params.get(\"BPC\", \"BitsPerComponent\") || 8;\n            var columns = _this74.columns = params.get(\"Columns\") || 1;\n            _this74.pixBytes = colors * bits + 7 >> 3;\n            _this74.rowBytes = columns * colors * bits + 7 >> 3;\n            return _possibleConstructorReturn(_this74, _assertThisInitialized(_assertThisInitialized(_this74)));\n          }\n          _createClass(PredictorStream, [{\n            key: \"readBlockTiff\",\n            value: function readBlockTiff() {\n              var rowBytes = this.rowBytes;\n              var bufferLength = this.bufferLength;\n              var buffer = this.ensureBuffer(bufferLength + rowBytes);\n              var bits = this.bits;\n              var colors = this.colors;\n              var rawBytes = this.str.getBytes(rowBytes);\n              this.eof = !rawBytes.length;\n              if (this.eof) {\n                return;\n              }\n              var inbuf = 0,\n                outbuf = 0;\n              var inbits = 0,\n                outbits = 0;\n              var pos = bufferLength;\n              var i;\n              if (bits === 1 && colors === 1) {\n                for (i = 0; i < rowBytes; ++i) {\n                  var c = rawBytes[i] ^ inbuf;\n                  c ^= c >> 1;\n                  c ^= c >> 2;\n                  c ^= c >> 4;\n                  inbuf = (c & 1) << 7;\n                  buffer[pos++] = c;\n                }\n              } else if (bits === 8) {\n                for (i = 0; i < colors; ++i) {\n                  buffer[pos++] = rawBytes[i];\n                }\n                for (; i < rowBytes; ++i) {\n                  buffer[pos] = buffer[pos - colors] + rawBytes[i];\n                  pos++;\n                }\n              } else if (bits === 16) {\n                var bytesPerPixel = colors * 2;\n                for (i = 0; i < bytesPerPixel; ++i) {\n                  buffer[pos++] = rawBytes[i];\n                }\n                for (; i < rowBytes; i += 2) {\n                  var sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);\n                  buffer[pos++] = sum >> 8 & 0xff;\n                  buffer[pos++] = sum & 0xff;\n                }\n              } else {\n                var compArray = new Uint8Array(colors + 1);\n                var bitMask = (1 << bits) - 1;\n                var j = 0,\n                  k = bufferLength;\n                var columns = this.columns;\n                for (i = 0; i < columns; ++i) {\n                  for (var kk = 0; kk < colors; ++kk) {\n                    if (inbits < bits) {\n                      inbuf = inbuf << 8 | rawBytes[j++] & 0xff;\n                      inbits += 8;\n                    }\n                    compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\n                    inbits -= bits;\n                    outbuf = outbuf << bits | compArray[kk];\n                    outbits += bits;\n                    if (outbits >= 8) {\n                      buffer[k++] = outbuf >> outbits - 8 & 0xff;\n                      outbits -= 8;\n                    }\n                  }\n                }\n                if (outbits > 0) {\n                  buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\n                }\n              }\n              this.bufferLength += rowBytes;\n            }\n          }, {\n            key: \"readBlockPng\",\n            value: function readBlockPng() {\n              var rowBytes = this.rowBytes;\n              var pixBytes = this.pixBytes;\n              var predictor = this.str.getByte();\n              var rawBytes = this.str.getBytes(rowBytes);\n              this.eof = !rawBytes.length;\n              if (this.eof) {\n                return;\n              }\n              var bufferLength = this.bufferLength;\n              var buffer = this.ensureBuffer(bufferLength + rowBytes);\n              var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n              if (prevRow.length === 0) {\n                prevRow = new Uint8Array(rowBytes);\n              }\n              var i,\n                j = bufferLength,\n                up,\n                c;\n              switch (predictor) {\n                case 0:\n                  for (i = 0; i < rowBytes; ++i) {\n                    buffer[j++] = rawBytes[i];\n                  }\n                  break;\n                case 1:\n                  for (i = 0; i < pixBytes; ++i) {\n                    buffer[j++] = rawBytes[i];\n                  }\n                  for (; i < rowBytes; ++i) {\n                    buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;\n                    j++;\n                  }\n                  break;\n                case 2:\n                  for (i = 0; i < rowBytes; ++i) {\n                    buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;\n                  }\n                  break;\n                case 3:\n                  for (i = 0; i < pixBytes; ++i) {\n                    buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n                  }\n                  for (; i < rowBytes; ++i) {\n                    buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;\n                    j++;\n                  }\n                  break;\n                case 4:\n                  for (i = 0; i < pixBytes; ++i) {\n                    up = prevRow[i];\n                    c = rawBytes[i];\n                    buffer[j++] = up + c;\n                  }\n                  for (; i < rowBytes; ++i) {\n                    up = prevRow[i];\n                    var upLeft = prevRow[i - pixBytes];\n                    var left = buffer[j - pixBytes];\n                    var p = left + up - upLeft;\n                    var pa = p - left;\n                    if (pa < 0) {\n                      pa = -pa;\n                    }\n                    var pb = p - up;\n                    if (pb < 0) {\n                      pb = -pb;\n                    }\n                    var pc = p - upLeft;\n                    if (pc < 0) {\n                      pc = -pc;\n                    }\n                    c = rawBytes[i];\n                    if (pa <= pb && pa <= pc) {\n                      buffer[j++] = left + c;\n                    } else if (pb <= pc) {\n                      buffer[j++] = up + c;\n                    } else {\n                      buffer[j++] = upLeft + c;\n                    }\n                  }\n                  break;\n                default:\n                  throw new _util.FormatError(\"Unsupported predictor: \".concat(predictor));\n              }\n              this.bufferLength += rowBytes;\n            }\n          }]);\n          return PredictorStream;\n        }(_decode_stream.DecodeStream);\n        exports.PredictorStream = PredictorStream;\n\n        /***/\n      }, /* 33 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.RunLengthStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var RunLengthStream = /*#__PURE__*/function (_decode_stream$Decode10) {\n          _inherits(RunLengthStream, _decode_stream$Decode10);\n          function RunLengthStream(str, maybeLength) {\n            var _this75;\n            _classCallCheck(this, RunLengthStream);\n            _this75 = _possibleConstructorReturn(this, _getPrototypeOf(RunLengthStream).call(this, maybeLength));\n            _this75.str = str;\n            _this75.dict = str.dict;\n            return _this75;\n          }\n          _createClass(RunLengthStream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              var repeatHeader = this.str.getBytes(2);\n              if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n                this.eof = true;\n                return;\n              }\n              var buffer;\n              var bufferLength = this.bufferLength;\n              var n = repeatHeader[0];\n              if (n < 128) {\n                buffer = this.ensureBuffer(bufferLength + n + 1);\n                buffer[bufferLength++] = repeatHeader[1];\n                if (n > 0) {\n                  var source = this.str.getBytes(n);\n                  buffer.set(source, bufferLength);\n                  bufferLength += n;\n                }\n              } else {\n                n = 257 - n;\n                var b = repeatHeader[1];\n                buffer = this.ensureBuffer(bufferLength + n + 1);\n                for (var i = 0; i < n; i++) {\n                  buffer[bufferLength++] = b;\n                }\n              }\n              this.bufferLength = bufferLength;\n            }\n          }]);\n          return RunLengthStream;\n        }(_decode_stream.DecodeStream);\n        exports.RunLengthStream = RunLengthStream;\n\n        /***/\n      }, /* 34 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Font = exports.ErrorFont = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _cff_parser = __w_pdfjs_require__(35);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var _unicode = __w_pdfjs_require__(40);\n        var _glyphlist = __w_pdfjs_require__(39);\n        var _encodings = __w_pdfjs_require__(37);\n        var _standard_fonts = __w_pdfjs_require__(41);\n        var _to_unicode_map = __w_pdfjs_require__(42);\n        var _cff_font = __w_pdfjs_require__(43);\n        var _font_renderer = __w_pdfjs_require__(44);\n        var _metrics = __w_pdfjs_require__(45);\n        var _glyf = __w_pdfjs_require__(46);\n        var _cmap = __w_pdfjs_require__(16);\n        var _opentype_file_builder = __w_pdfjs_require__(47);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _stream = __w_pdfjs_require__(10);\n        var _type1_font = __w_pdfjs_require__(48);\n        var PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];\n        var PDF_GLYPH_SPACE_UNITS = 1000;\n        var EXPORT_DATA_PROPERTIES = [\"ascent\", \"bbox\", \"black\", \"bold\", \"charProcOperatorList\", \"composite\", \"cssFontInfo\", \"data\", \"defaultVMetrics\", \"defaultWidth\", \"descent\", \"fallbackName\", \"fontMatrix\", \"fontType\", \"isType3Font\", \"italic\", \"loadedName\", \"mimetype\", \"missingFile\", \"name\", \"remeasure\", \"subtype\", \"type\", \"vertical\"];\n        var EXPORT_DATA_EXTRA_PROPERTIES = [\"cMap\", \"defaultEncoding\", \"differences\", \"isMonospace\", \"isSerifFont\", \"isSymbolicFont\", \"seacMap\", \"toFontChar\", \"toUnicode\", \"vmetrics\", \"widths\"];\n        function adjustWidths(properties) {\n          if (!properties.fontMatrix) {\n            return;\n          }\n          if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {\n            return;\n          }\n          var scale = 0.001 / properties.fontMatrix[0];\n          var glyphsWidths = properties.widths;\n          for (var glyph in glyphsWidths) {\n            glyphsWidths[glyph] *= scale;\n          }\n          properties.defaultWidth *= scale;\n        }\n        function adjustToUnicode(properties, builtInEncoding) {\n          if (properties.isInternalFont) {\n            return;\n          }\n          if (builtInEncoding === properties.defaultEncoding) {\n            return;\n          }\n          if (properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {\n            return;\n          }\n          var toUnicode = [],\n            glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n          for (var charCode in builtInEncoding) {\n            if (properties.hasIncludedToUnicodeMap) {\n              if (properties.toUnicode.has(charCode)) {\n                continue;\n              }\n            } else if (properties.hasEncoding) {\n              if (properties.differences.length === 0 || properties.differences[charCode] !== undefined) {\n                continue;\n              }\n            }\n            var glyphName = builtInEncoding[charCode];\n            var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n            if (unicode !== -1) {\n              toUnicode[charCode] = String.fromCharCode(unicode);\n            }\n          }\n          if (toUnicode.length > 0) {\n            properties.toUnicode.amend(toUnicode);\n          }\n        }\n        function amendFallbackToUnicode(properties) {\n          if (!properties.fallbackToUnicode) {\n            return;\n          }\n          if (properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {\n            return;\n          }\n          var toUnicode = [];\n          for (var charCode in properties.fallbackToUnicode) {\n            if (properties.toUnicode.has(charCode)) {\n              continue;\n            }\n            toUnicode[charCode] = properties.fallbackToUnicode[charCode];\n          }\n          if (toUnicode.length > 0) {\n            properties.toUnicode.amend(toUnicode);\n          }\n        }\n        var Glyph = /*#__PURE__*/function () {\n          function Glyph(originalCharCode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n            _classCallCheck(this, Glyph);\n            this.originalCharCode = originalCharCode;\n            this.fontChar = fontChar;\n            this.unicode = unicode;\n            this.accent = accent;\n            this.width = width;\n            this.vmetric = vmetric;\n            this.operatorListId = operatorListId;\n            this.isSpace = isSpace;\n            this.isInFont = isInFont;\n            var category = (0, _unicode.getCharUnicodeCategory)(unicode);\n            this.isWhitespace = category.isWhitespace;\n            this.isZeroWidthDiacritic = category.isZeroWidthDiacritic;\n            this.isInvisibleFormatMark = category.isInvisibleFormatMark;\n          }\n          _createClass(Glyph, [{\n            key: \"matchesForCache\",\n            value: function matchesForCache(originalCharCode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n              return this.originalCharCode === originalCharCode && this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;\n            }\n          }]);\n          return Glyph;\n        }();\n        function int16(b0, b1) {\n          return (b0 << 8) + b1;\n        }\n        function writeSignedInt16(bytes, index, value) {\n          bytes[index + 1] = value;\n          bytes[index] = value >>> 8;\n        }\n        function signedInt16(b0, b1) {\n          var value = (b0 << 8) + b1;\n          return value & 1 << 15 ? value - 0x10000 : value;\n        }\n        function int32(b0, b1, b2, b3) {\n          return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n        }\n        function string16(value) {\n          return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n        }\n        function safeString16(value) {\n          if (value > 0x7fff) {\n            value = 0x7fff;\n          } else if (value < -0x8000) {\n            value = -0x8000;\n          }\n          return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n        }\n        function isTrueTypeFile(file) {\n          var header = file.peekBytes(4);\n          return (0, _core_utils.readUint32)(header, 0) === 0x00010000 || (0, _util.bytesToString)(header) === \"true\";\n        }\n        function isTrueTypeCollectionFile(file) {\n          var header = file.peekBytes(4);\n          return (0, _util.bytesToString)(header) === \"ttcf\";\n        }\n        function isOpenTypeFile(file) {\n          var header = file.peekBytes(4);\n          return (0, _util.bytesToString)(header) === \"OTTO\";\n        }\n        function isType1File(file) {\n          var header = file.peekBytes(2);\n          if (header[0] === 0x25 && header[1] === 0x21) {\n            return true;\n          }\n          if (header[0] === 0x80 && header[1] === 0x01) {\n            return true;\n          }\n          return false;\n        }\n        function isCFFFile(file) {\n          var header = file.peekBytes(4);\n          if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {\n            return true;\n          }\n          return false;\n        }\n        function getFontFileType(file, _ref57) {\n          var type = _ref57.type,\n            subtype = _ref57.subtype,\n            composite = _ref57.composite;\n          var fileType, fileSubtype;\n          if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n            if (composite) {\n              fileType = \"CIDFontType2\";\n            } else {\n              fileType = \"TrueType\";\n            }\n          } else if (isOpenTypeFile(file)) {\n            if (composite) {\n              fileType = \"CIDFontType2\";\n            } else {\n              fileType = \"OpenType\";\n            }\n          } else if (isType1File(file)) {\n            if (composite) {\n              fileType = \"CIDFontType0\";\n            } else {\n              fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n            }\n          } else if (isCFFFile(file)) {\n            if (composite) {\n              fileType = \"CIDFontType0\";\n              fileSubtype = \"CIDFontType0C\";\n            } else {\n              fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n              fileSubtype = \"Type1C\";\n            }\n          } else {\n            (0, _util.warn)(\"getFontFileType: Unable to detect correct font file Type/Subtype.\");\n            fileType = type;\n            fileSubtype = subtype;\n          }\n          return [fileType, fileSubtype];\n        }\n        function applyStandardFontGlyphMap(map, glyphMap) {\n          for (var charCode in glyphMap) {\n            map[+charCode] = glyphMap[charCode];\n          }\n        }\n        function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n          var toFontChar = [];\n          var unicode;\n          for (var i = 0, ii = encoding.length; i < ii; i++) {\n            unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);\n            if (unicode !== -1) {\n              toFontChar[i] = unicode;\n            }\n          }\n          for (var charCode in differences) {\n            unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);\n            if (unicode !== -1) {\n              toFontChar[+charCode] = unicode;\n            }\n          }\n          return toFontChar;\n        }\n        function convertCidString(charCode, cid) {\n          var shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          switch (cid.length) {\n            case 1:\n              return cid.charCodeAt(0);\n            case 2:\n              return cid.charCodeAt(0) << 8 | cid.charCodeAt(1);\n          }\n          var msg = \"Unsupported CID string (charCode \".concat(charCode, \"): \\\"\").concat(cid, \"\\\".\");\n          if (shouldThrow) {\n            throw new _util.FormatError(msg);\n          }\n          (0, _util.warn)(msg);\n          return cid;\n        }\n        function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId, toUnicode) {\n          var newMap = Object.create(null);\n          var toUnicodeExtraMap = new Map();\n          var toFontChar = [];\n          var usedGlyphIds = new Set();\n          var privateUseAreaIndex = 0;\n          var privateUseOffetStart = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n          var nextAvailableFontCharCode = privateUseOffetStart;\n          var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n          for (var originalCharCode in charCodeToGlyphId) {\n            originalCharCode |= 0;\n            var glyphId = charCodeToGlyphId[originalCharCode];\n            if (!hasGlyph(glyphId)) {\n              continue;\n            }\n            if (nextAvailableFontCharCode > privateUseOffetEnd) {\n              privateUseAreaIndex++;\n              if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n                (0, _util.warn)(\"Ran out of space in font private use area.\");\n                break;\n              }\n              nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n              privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n            }\n            var fontCharCode = nextAvailableFontCharCode++;\n            if (glyphId === 0) {\n              glyphId = newGlyphZeroId;\n            }\n            var unicode = toUnicode.get(originalCharCode);\n            if (typeof unicode === \"string\") {\n              unicode = unicode.codePointAt(0);\n            }\n            if (unicode && unicode < privateUseOffetStart && !usedGlyphIds.has(glyphId)) {\n              toUnicodeExtraMap.set(unicode, glyphId);\n              usedGlyphIds.add(glyphId);\n            }\n            newMap[fontCharCode] = glyphId;\n            toFontChar[originalCharCode] = fontCharCode;\n          }\n          return {\n            toFontChar: toFontChar,\n            charCodeToGlyphId: newMap,\n            toUnicodeExtraMap: toUnicodeExtraMap,\n            nextAvailableFontCharCode: nextAvailableFontCharCode\n          };\n        }\n        function getRanges(glyphs, toUnicodeExtraMap, numGlyphs) {\n          var codes = [];\n          for (var charCode in glyphs) {\n            if (glyphs[charCode] >= numGlyphs) {\n              continue;\n            }\n            codes.push({\n              fontCharCode: charCode | 0,\n              glyphId: glyphs[charCode]\n            });\n          }\n          if (toUnicodeExtraMap) {\n            var _iterator77 = _createForOfIteratorHelper(toUnicodeExtraMap),\n              _step77;\n            try {\n              for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {\n                var _step77$value = _slicedToArray(_step77.value, 2),\n                  unicode = _step77$value[0],\n                  glyphId = _step77$value[1];\n                if (glyphId >= numGlyphs) {\n                  continue;\n                }\n                codes.push({\n                  fontCharCode: unicode,\n                  glyphId: glyphId\n                });\n              }\n            } catch (err) {\n              _iterator77.e(err);\n            } finally {\n              _iterator77.f();\n            }\n          }\n          if (codes.length === 0) {\n            codes.push({\n              fontCharCode: 0,\n              glyphId: 0\n            });\n          }\n          codes.sort(function fontGetRangesSort(a, b) {\n            return a.fontCharCode - b.fontCharCode;\n          });\n          var ranges = [];\n          var length = codes.length;\n          for (var n = 0; n < length;) {\n            var start = codes[n].fontCharCode;\n            var codeIndices = [codes[n].glyphId];\n            ++n;\n            var end = start;\n            while (n < length && end + 1 === codes[n].fontCharCode) {\n              codeIndices.push(codes[n].glyphId);\n              ++end;\n              ++n;\n              if (end === 0xffff) {\n                break;\n              }\n            }\n            ranges.push([start, end, codeIndices]);\n          }\n          return ranges;\n        }\n        function createCmapTable(glyphs, toUnicodeExtraMap, numGlyphs) {\n          var ranges = getRanges(glyphs, toUnicodeExtraMap, numGlyphs);\n          var numTables = ranges.at(-1)[1] > 0xffff ? 2 : 1;\n          var cmap = \"\\x00\\x00\" + string16(numTables) + \"\\x00\\x03\" + \"\\x00\\x01\" + (0, _util.string32)(4 + numTables * 8);\n          var i, ii, j, jj;\n          for (i = ranges.length - 1; i >= 0; --i) {\n            if (ranges[i][0] <= 0xffff) {\n              break;\n            }\n          }\n          var bmpLength = i + 1;\n          if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n            ranges[i][1] = 0xfffe;\n          }\n          var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n          var segCount = bmpLength + trailingRangesCount;\n          var searchParams = _opentype_file_builder.OpenTypeFileBuilder.getSearchParams(segCount, 2);\n          var startCount = \"\";\n          var endCount = \"\";\n          var idDeltas = \"\";\n          var idRangeOffsets = \"\";\n          var glyphsIds = \"\";\n          var bias = 0;\n          var range, start, end, codes;\n          for (i = 0, ii = bmpLength; i < ii; i++) {\n            range = ranges[i];\n            start = range[0];\n            end = range[1];\n            startCount += string16(start);\n            endCount += string16(end);\n            codes = range[2];\n            var contiguous = true;\n            for (j = 1, jj = codes.length; j < jj; ++j) {\n              if (codes[j] !== codes[j - 1] + 1) {\n                contiguous = false;\n                break;\n              }\n            }\n            if (!contiguous) {\n              var offset = (segCount - i) * 2 + bias * 2;\n              bias += end - start + 1;\n              idDeltas += string16(0);\n              idRangeOffsets += string16(offset);\n              for (j = 0, jj = codes.length; j < jj; ++j) {\n                glyphsIds += string16(codes[j]);\n              }\n            } else {\n              var startCode = codes[0];\n              idDeltas += string16(startCode - start & 0xffff);\n              idRangeOffsets += string16(0);\n            }\n          }\n          if (trailingRangesCount > 0) {\n            endCount += \"\\xFF\\xFF\";\n            startCount += \"\\xFF\\xFF\";\n            idDeltas += \"\\x00\\x01\";\n            idRangeOffsets += \"\\x00\\x00\";\n          }\n          var format314 = \"\\x00\\x00\" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + \"\\x00\\x00\" + startCount + idDeltas + idRangeOffsets + glyphsIds;\n          var format31012 = \"\";\n          var header31012 = \"\";\n          if (numTables > 1) {\n            cmap += \"\\x00\\x03\" + \"\\x00\\x0A\" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);\n            format31012 = \"\";\n            for (i = 0, ii = ranges.length; i < ii; i++) {\n              range = ranges[i];\n              start = range[0];\n              codes = range[2];\n              var code = codes[0];\n              for (j = 1, jj = codes.length; j < jj; ++j) {\n                if (codes[j] !== codes[j - 1] + 1) {\n                  end = range[0] + j - 1;\n                  format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);\n                  start = end + 1;\n                  code = codes[j];\n                }\n              }\n              format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);\n            }\n            header31012 = \"\\x00\\x0C\" + \"\\x00\\x00\" + (0, _util.string32)(format31012.length + 16) + \"\\x00\\x00\\x00\\x00\" + (0, _util.string32)(format31012.length / 12);\n          }\n          return cmap + \"\\x00\\x04\" + string16(format314.length + 4) + format314 + header31012 + format31012;\n        }\n        function validateOS2Table(os2, file) {\n          file.pos = (file.start || 0) + os2.offset;\n          var version = file.getUint16();\n          file.skip(60);\n          var selection = file.getUint16();\n          if (version < 4 && selection & 0x0300) {\n            return false;\n          }\n          var firstChar = file.getUint16();\n          var lastChar = file.getUint16();\n          if (firstChar > lastChar) {\n            return false;\n          }\n          file.skip(6);\n          var usWinAscent = file.getUint16();\n          if (usWinAscent === 0) {\n            return false;\n          }\n          os2.data[8] = os2.data[9] = 0;\n          return true;\n        }\n        function createOS2Table(properties, charstrings, override) {\n          override = override || {\n            unitsPerEm: 0,\n            yMax: 0,\n            yMin: 0,\n            ascent: 0,\n            descent: 0\n          };\n          var ulUnicodeRange1 = 0;\n          var ulUnicodeRange2 = 0;\n          var ulUnicodeRange3 = 0;\n          var ulUnicodeRange4 = 0;\n          var firstCharIndex = null;\n          var lastCharIndex = 0;\n          if (charstrings) {\n            for (var code in charstrings) {\n              code |= 0;\n              if (firstCharIndex > code || !firstCharIndex) {\n                firstCharIndex = code;\n              }\n              if (lastCharIndex < code) {\n                lastCharIndex = code;\n              }\n              var position = (0, _unicode.getUnicodeRangeFor)(code);\n              if (position < 32) {\n                ulUnicodeRange1 |= 1 << position;\n              } else if (position < 64) {\n                ulUnicodeRange2 |= 1 << position - 32;\n              } else if (position < 96) {\n                ulUnicodeRange3 |= 1 << position - 64;\n              } else if (position < 123) {\n                ulUnicodeRange4 |= 1 << position - 96;\n              } else {\n                throw new _util.FormatError(\"Unicode ranges Bits > 123 are reserved for internal usage\");\n              }\n            }\n            if (lastCharIndex > 0xffff) {\n              lastCharIndex = 0xffff;\n            }\n          } else {\n            firstCharIndex = 0;\n            lastCharIndex = 255;\n          }\n          var bbox = properties.bbox || [0, 0, 0, 0];\n          var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n          var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n          var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n          var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));\n          if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n            typoDescent = -typoDescent;\n          }\n          var winAscent = override.yMax || typoAscent;\n          var winDescent = -override.yMin || -typoDescent;\n          return \"\\x00\\x03\" + \"\\x02\\x24\" + \"\\x01\\xF4\" + \"\\x00\\x05\" + \"\\x00\\x00\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x00\\x8C\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x01\\xDF\" + \"\\x00\\x31\" + \"\\x01\\x02\" + \"\\x00\\x00\" + \"\\x00\\x00\\x06\" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + \"\\x00\\x00\\x00\\x00\\x00\\x00\" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + \"\\x2A\\x32\\x31\\x2A\" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + \"\\x00\\x64\" + string16(winAscent) + string16(winDescent) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + \"\\x00\\x03\";\n        }\n        function createPostTable(properties) {\n          var angle = Math.floor(properties.italicAngle * Math.pow(2, 16));\n          return \"\\x00\\x03\\x00\\x00\" + (0, _util.string32)(angle) + \"\\x00\\x00\" + \"\\x00\\x00\" + (0, _util.string32)(properties.fixedPitch ? 1 : 0) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\";\n        }\n        function createPostscriptName(name) {\n          return name.replace(/[^\\x21-\\x7E]|[[\\](){}<>/%]/g, \"\").slice(0, 63);\n        }\n        function createNameTable(name, proto) {\n          if (!proto) {\n            proto = [[], []];\n          }\n          var strings = [proto[0][0] || \"Original licence\", proto[0][1] || name, proto[0][2] || \"Unknown\", proto[0][3] || \"uniqueID\", proto[0][4] || name, proto[0][5] || \"Version 0.11\", proto[0][6] || createPostscriptName(name), proto[0][7] || \"Unknown\", proto[0][8] || \"Unknown\", proto[0][9] || \"Unknown\"];\n          var stringsUnicode = [];\n          var i, ii, j, jj, str;\n          for (i = 0, ii = strings.length; i < ii; i++) {\n            str = proto[1][i] || strings[i];\n            var strBufUnicode = [];\n            for (j = 0, jj = str.length; j < jj; j++) {\n              strBufUnicode.push(string16(str.charCodeAt(j)));\n            }\n            stringsUnicode.push(strBufUnicode.join(\"\"));\n          }\n          var names = [strings, stringsUnicode];\n          var platforms = [\"\\x00\\x01\", \"\\x00\\x03\"];\n          var encodings = [\"\\x00\\x00\", \"\\x00\\x01\"];\n          var languages = [\"\\x00\\x00\", \"\\x04\\x09\"];\n          var namesRecordCount = strings.length * platforms.length;\n          var nameTable = \"\\x00\\x00\" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);\n          var strOffset = 0;\n          for (i = 0, ii = platforms.length; i < ii; i++) {\n            var strs = names[i];\n            for (j = 0, jj = strs.length; j < jj; j++) {\n              str = strs[j];\n              var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);\n              nameTable += nameRecord;\n              strOffset += str.length;\n            }\n          }\n          nameTable += strings.join(\"\") + stringsUnicode.join(\"\");\n          return nameTable;\n        }\n        var Font = /*#__PURE__*/function () {\n          function Font(name, file, properties) {\n            _classCallCheck(this, Font);\n            this.name = name;\n            this.psName = null;\n            this.mimetype = null;\n            this.disableFontFace = false;\n            this.loadedName = properties.loadedName;\n            this.isType3Font = properties.isType3Font;\n            this.missingFile = false;\n            this.cssFontInfo = properties.cssFontInfo;\n            this._charsCache = Object.create(null);\n            this._glyphCache = Object.create(null);\n            var isSerifFont = !!(properties.flags & _fonts_utils.FontFlags.Serif);\n            if (!isSerifFont && !properties.isSimulatedFlags) {\n              var baseName = name.replace(/[,_]/g, \"-\").split(\"-\")[0],\n                serifFonts = (0, _standard_fonts.getSerifFonts)();\n              var _iterator78 = _createForOfIteratorHelper(baseName.split(\"+\")),\n                _step78;\n              try {\n                for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {\n                  var namePart = _step78.value;\n                  if (serifFonts[namePart]) {\n                    isSerifFont = true;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator78.e(err);\n              } finally {\n                _iterator78.f();\n              }\n            }\n            this.isSerifFont = isSerifFont;\n            this.isSymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Symbolic);\n            this.isMonospace = !!(properties.flags & _fonts_utils.FontFlags.FixedPitch);\n            var type = properties.type;\n            var subtype = properties.subtype;\n            this.type = type;\n            this.subtype = subtype;\n            var fallbackName = \"sans-serif\";\n            if (this.isMonospace) {\n              fallbackName = \"monospace\";\n            } else if (this.isSerifFont) {\n              fallbackName = \"serif\";\n            }\n            this.fallbackName = fallbackName;\n            this.differences = properties.differences;\n            this.widths = properties.widths;\n            this.defaultWidth = properties.defaultWidth;\n            this.composite = properties.composite;\n            this.cMap = properties.cMap;\n            this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;\n            this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n            this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n            this.lineHeight = this.ascent - this.descent;\n            this.fontMatrix = properties.fontMatrix;\n            this.bbox = properties.bbox;\n            this.defaultEncoding = properties.defaultEncoding;\n            this.toUnicode = properties.toUnicode;\n            this.toFontChar = [];\n            if (properties.type === \"Type3\") {\n              for (var charCode = 0; charCode < 256; charCode++) {\n                this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];\n              }\n              this.fontType = _util.FontType.TYPE3;\n              return;\n            }\n            this.cidEncoding = properties.cidEncoding || \"\";\n            this.vertical = !!properties.vertical;\n            if (this.vertical) {\n              this.vmetrics = properties.vmetrics;\n              this.defaultVMetrics = properties.defaultVMetrics;\n            }\n            if (!file || file.isEmpty) {\n              if (file) {\n                (0, _util.warn)('Font file is empty in \"' + name + '\" (' + this.loadedName + \")\");\n              }\n              this.fallbackToSystemFont(properties);\n              return;\n            }\n            var _getFontFileType = getFontFileType(file, properties);\n            var _getFontFileType2 = _slicedToArray(_getFontFileType, 2);\n            type = _getFontFileType2[0];\n            subtype = _getFontFileType2[1];\n            if (type !== this.type || subtype !== this.subtype) {\n              (0, _util.info)(\"Inconsistent font file Type/SubType, expected: \" + \"\".concat(this.type, \"/\").concat(this.subtype, \" but found: \").concat(type, \"/\").concat(subtype, \".\"));\n            }\n            var data;\n            try {\n              switch (type) {\n                case \"MMType1\":\n                  (0, _util.info)(\"MMType1 font (\" + name + \"), falling back to Type1.\");\n                case \"Type1\":\n                case \"CIDFontType0\":\n                  this.mimetype = \"font/opentype\";\n                  var cff = subtype === \"Type1C\" || subtype === \"CIDFontType0C\" ? new _cff_font.CFFFont(file, properties) : new _type1_font.Type1Font(name, file, properties);\n                  adjustWidths(properties);\n                  data = this.convert(name, cff, properties);\n                  break;\n                case \"OpenType\":\n                case \"TrueType\":\n                case \"CIDFontType2\":\n                  this.mimetype = \"font/opentype\";\n                  data = this.checkAndRepair(name, file, properties);\n                  if (this.isOpenType) {\n                    adjustWidths(properties);\n                    type = \"OpenType\";\n                  }\n                  break;\n                default:\n                  throw new _util.FormatError(\"Font \".concat(type, \" is not supported\"));\n              }\n            } catch (e) {\n              (0, _util.warn)(e);\n              this.fallbackToSystemFont(properties);\n              return;\n            }\n            amendFallbackToUnicode(properties);\n            this.data = data;\n            this.fontType = (0, _fonts_utils.getFontType)(type, subtype, properties.isStandardFont);\n            this.fontMatrix = properties.fontMatrix;\n            this.widths = properties.widths;\n            this.defaultWidth = properties.defaultWidth;\n            this.toUnicode = properties.toUnicode;\n            this.seacMap = properties.seacMap;\n          }\n          _createClass(Font, [{\n            key: \"exportData\",\n            value: function exportData() {\n              var extraProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var exportDataProperties = extraProperties ? [].concat(EXPORT_DATA_PROPERTIES, EXPORT_DATA_EXTRA_PROPERTIES) : EXPORT_DATA_PROPERTIES;\n              var data = Object.create(null);\n              var property, value;\n              var _iterator79 = _createForOfIteratorHelper(exportDataProperties),\n                _step79;\n              try {\n                for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {\n                  property = _step79.value;\n                  value = this[property];\n                  if (value !== undefined) {\n                    data[property] = value;\n                  }\n                }\n              } catch (err) {\n                _iterator79.e(err);\n              } finally {\n                _iterator79.f();\n              }\n              return data;\n            }\n          }, {\n            key: \"fallbackToSystemFont\",\n            value: function fallbackToSystemFont(properties) {\n              var _this76 = this;\n              this.missingFile = true;\n              var name = this.name;\n              var type = this.type;\n              var subtype = this.subtype;\n              var fontName = (0, _fonts_utils.normalizeFontName)(name);\n              var stdFontMap = (0, _standard_fonts.getStdFontMap)(),\n                nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();\n              var isStandardFont = !!stdFontMap[fontName];\n              var isMappedToStandardFont = !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n              fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n              var fontBasicMetricsMap = (0, _metrics.getFontBasicMetrics)();\n              var metrics = fontBasicMetricsMap[fontName];\n              if (metrics) {\n                if (isNaN(this.ascent)) {\n                  this.ascent = metrics.ascent / PDF_GLYPH_SPACE_UNITS;\n                }\n                if (isNaN(this.descent)) {\n                  this.descent = metrics.descent / PDF_GLYPH_SPACE_UNITS;\n                }\n                if (isNaN(this.capHeight)) {\n                  this.capHeight = metrics.capHeight / PDF_GLYPH_SPACE_UNITS;\n                }\n              }\n              this.bold = fontName.search(/bold/gi) !== -1;\n              this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;\n              this.black = name.search(/Black/g) !== -1;\n              var isNarrow = name.search(/Narrow/g) !== -1;\n              this.remeasure = (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;\n              if ((isStandardFont || isMappedToStandardFont) && type === \"CIDFontType2\" && this.cidEncoding.startsWith(\"Identity-\")) {\n                var cidToGidMap = properties.cidToGidMap;\n                var map = [];\n                applyStandardFontGlyphMap(map, (0, _standard_fonts.getGlyphMapForStandardFonts)());\n                if (/Arial-?Black/i.test(name)) {\n                  applyStandardFontGlyphMap(map, (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)());\n                } else if (/Calibri/i.test(name)) {\n                  applyStandardFontGlyphMap(map, (0, _standard_fonts.getSupplementalGlyphMapForCalibri)());\n                }\n                if (cidToGidMap) {\n                  for (var charCode in map) {\n                    var cid = map[charCode];\n                    if (cidToGidMap[cid] !== undefined) {\n                      map[+charCode] = cidToGidMap[cid];\n                    }\n                  }\n                  if (cidToGidMap.length !== this.toUnicode.length && properties.hasIncludedToUnicodeMap && this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {\n                    this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n                      var cid = map[charCode];\n                      if (cidToGidMap[cid] === undefined) {\n                        map[+charCode] = unicodeCharCode;\n                      }\n                    });\n                  }\n                }\n                if (!(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {\n                  this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n                    map[+charCode] = unicodeCharCode;\n                  });\n                }\n                this.toFontChar = map;\n                this.toUnicode = new _to_unicode_map.ToUnicodeMap(map);\n              } else if (/Symbol/i.test(fontName)) {\n                this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n              } else if (/Dingbats/i.test(fontName)) {\n                if (/Wingdings/i.test(name)) {\n                  (0, _util.warn)(\"Non-embedded Wingdings font, falling back to ZapfDingbats.\");\n                }\n                this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);\n              } else if (isStandardFont) {\n                var _map = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n                if (type === \"CIDFontType2\" && !this.cidEncoding.startsWith(\"Identity-\") && !(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {\n                  this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n                    _map[+charCode] = unicodeCharCode;\n                  });\n                }\n                this.toFontChar = _map;\n              } else {\n                var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n                var _map2 = [];\n                this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n                  if (!_this76.composite) {\n                    var glyphName = _this76.differences[charCode] || _this76.defaultEncoding[charCode];\n                    var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n                    if (unicode !== -1) {\n                      unicodeCharCode = unicode;\n                    }\n                  }\n                  _map2[+charCode] = unicodeCharCode;\n                });\n                if (this.composite && this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {\n                  if (/Verdana/i.test(name)) {\n                    applyStandardFontGlyphMap(_map2, (0, _standard_fonts.getGlyphMapForStandardFonts)());\n                  }\n                }\n                this.toFontChar = _map2;\n              }\n              amendFallbackToUnicode(properties);\n              this.loadedName = fontName.split(\"-\")[0];\n              this.fontType = (0, _fonts_utils.getFontType)(type, subtype, properties.isStandardFont);\n            }\n          }, {\n            key: \"checkAndRepair\",\n            value: function checkAndRepair(name, font, properties) {\n              var VALID_TABLES = [\"OS/2\", \"cmap\", \"head\", \"hhea\", \"hmtx\", \"maxp\", \"name\", \"post\", \"loca\", \"glyf\", \"fpgm\", \"prep\", \"cvt \", \"CFF \"];\n              function readTables(file, numTables) {\n                var tables = Object.create(null);\n                tables[\"OS/2\"] = null;\n                tables.cmap = null;\n                tables.head = null;\n                tables.hhea = null;\n                tables.hmtx = null;\n                tables.maxp = null;\n                tables.name = null;\n                tables.post = null;\n                for (var i = 0; i < numTables; i++) {\n                  var table = readTableEntry(file);\n                  if (!VALID_TABLES.includes(table.tag)) {\n                    continue;\n                  }\n                  if (table.length === 0) {\n                    continue;\n                  }\n                  tables[table.tag] = table;\n                }\n                return tables;\n              }\n              function readTableEntry(file) {\n                var tag = file.getString(4);\n                var checksum = file.getInt32() >>> 0;\n                var offset = file.getInt32() >>> 0;\n                var length = file.getInt32() >>> 0;\n                var previousPosition = file.pos;\n                file.pos = file.start || 0;\n                file.skip(offset);\n                var data = file.getBytes(length);\n                file.pos = previousPosition;\n                if (tag === \"head\") {\n                  data[8] = data[9] = data[10] = data[11] = 0;\n                  data[17] |= 0x20;\n                }\n                return {\n                  tag: tag,\n                  checksum: checksum,\n                  length: length,\n                  offset: offset,\n                  data: data\n                };\n              }\n              function readOpenTypeHeader(ttf) {\n                return {\n                  version: ttf.getString(4),\n                  numTables: ttf.getUint16(),\n                  searchRange: ttf.getUint16(),\n                  entrySelector: ttf.getUint16(),\n                  rangeShift: ttf.getUint16()\n                };\n              }\n              function readTrueTypeCollectionHeader(ttc) {\n                var ttcTag = ttc.getString(4);\n                (0, _util.assert)(ttcTag === \"ttcf\", \"Must be a TrueType Collection font.\");\n                var majorVersion = ttc.getUint16();\n                var minorVersion = ttc.getUint16();\n                var numFonts = ttc.getInt32() >>> 0;\n                var offsetTable = [];\n                for (var i = 0; i < numFonts; i++) {\n                  offsetTable.push(ttc.getInt32() >>> 0);\n                }\n                var header = {\n                  ttcTag: ttcTag,\n                  majorVersion: majorVersion,\n                  minorVersion: minorVersion,\n                  numFonts: numFonts,\n                  offsetTable: offsetTable\n                };\n                switch (majorVersion) {\n                  case 1:\n                    return header;\n                  case 2:\n                    header.dsigTag = ttc.getInt32() >>> 0;\n                    header.dsigLength = ttc.getInt32() >>> 0;\n                    header.dsigOffset = ttc.getInt32() >>> 0;\n                    return header;\n                }\n                throw new _util.FormatError(\"Invalid TrueType Collection majorVersion: \".concat(majorVersion, \".\"));\n              }\n              function readTrueTypeCollectionData(ttc, fontName) {\n                var _readTrueTypeCollecti = readTrueTypeCollectionHeader(ttc),\n                  numFonts = _readTrueTypeCollecti.numFonts,\n                  offsetTable = _readTrueTypeCollecti.offsetTable;\n                var fontNameParts = fontName.split(\"+\");\n                var fallbackData;\n                for (var i = 0; i < numFonts; i++) {\n                  ttc.pos = (ttc.start || 0) + offsetTable[i];\n                  var potentialHeader = readOpenTypeHeader(ttc);\n                  var potentialTables = readTables(ttc, potentialHeader.numTables);\n                  if (!potentialTables.name) {\n                    throw new _util.FormatError('TrueType Collection font must contain a \"name\" table.');\n                  }\n                  var nameTable = readNameTable(potentialTables.name);\n                  for (var j = 0, jj = nameTable.length; j < jj; j++) {\n                    for (var k = 0, kk = nameTable[j].length; k < kk; k++) {\n                      var nameEntry = nameTable[j][k] && nameTable[j][k].replace(/\\s/g, \"\");\n                      if (!nameEntry) {\n                        continue;\n                      }\n                      if (nameEntry === fontName) {\n                        return {\n                          header: potentialHeader,\n                          tables: potentialTables\n                        };\n                      }\n                      if (fontNameParts.length < 2) {\n                        continue;\n                      }\n                      var _iterator80 = _createForOfIteratorHelper(fontNameParts),\n                        _step80;\n                      try {\n                        for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {\n                          var part = _step80.value;\n                          if (nameEntry === part) {\n                            fallbackData = {\n                              name: part,\n                              header: potentialHeader,\n                              tables: potentialTables\n                            };\n                          }\n                        }\n                      } catch (err) {\n                        _iterator80.e(err);\n                      } finally {\n                        _iterator80.f();\n                      }\n                    }\n                  }\n                }\n                if (fallbackData) {\n                  (0, _util.warn)(\"TrueType Collection does not contain \\\"\".concat(fontName, \"\\\" font, \") + \"falling back to \\\"\".concat(fallbackData.name, \"\\\" font instead.\"));\n                  return {\n                    header: fallbackData.header,\n                    tables: fallbackData.tables\n                  };\n                }\n                throw new _util.FormatError(\"TrueType Collection does not contain \\\"\".concat(fontName, \"\\\" font.\"));\n              }\n              function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {\n                if (!cmap) {\n                  (0, _util.warn)(\"No cmap table available.\");\n                  return {\n                    platformId: -1,\n                    encodingId: -1,\n                    mappings: [],\n                    hasShortCmap: false\n                  };\n                }\n                var segment;\n                var start = (file.start || 0) + cmap.offset;\n                file.pos = start;\n                file.skip(2);\n                var numTables = file.getUint16();\n                var potentialTable;\n                var canBreak = false;\n                for (var i = 0; i < numTables; i++) {\n                  var platformId = file.getUint16();\n                  var encodingId = file.getUint16();\n                  var offset = file.getInt32() >>> 0;\n                  var useTable = false;\n                  if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {\n                    continue;\n                  }\n                  if (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 3)) {\n                    useTable = true;\n                  } else if (platformId === 1 && encodingId === 0) {\n                    useTable = true;\n                  } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {\n                    useTable = true;\n                    if (!isSymbolicFont) {\n                      canBreak = true;\n                    }\n                  } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n                    useTable = true;\n                    var correctlySorted = true;\n                    if (i < numTables - 1) {\n                      var nextBytes = file.peekBytes(2),\n                        nextPlatformId = int16(nextBytes[0], nextBytes[1]);\n                      if (nextPlatformId < platformId) {\n                        correctlySorted = false;\n                      }\n                    }\n                    if (correctlySorted) {\n                      canBreak = true;\n                    }\n                  }\n                  if (useTable) {\n                    potentialTable = {\n                      platformId: platformId,\n                      encodingId: encodingId,\n                      offset: offset\n                    };\n                  }\n                  if (canBreak) {\n                    break;\n                  }\n                }\n                if (potentialTable) {\n                  file.pos = start + potentialTable.offset;\n                }\n                if (!potentialTable || file.peekByte() === -1) {\n                  (0, _util.warn)(\"Could not find a preferred cmap table.\");\n                  return {\n                    platformId: -1,\n                    encodingId: -1,\n                    mappings: [],\n                    hasShortCmap: false\n                  };\n                }\n                var format = file.getUint16();\n                var hasShortCmap = false;\n                var mappings = [];\n                var j, glyphId;\n                if (format === 0) {\n                  file.skip(2 + 2);\n                  for (j = 0; j < 256; j++) {\n                    var index = file.getByte();\n                    if (!index) {\n                      continue;\n                    }\n                    mappings.push({\n                      charCode: j,\n                      glyphId: index\n                    });\n                  }\n                  hasShortCmap = true;\n                } else if (format === 2) {\n                  file.skip(2 + 2);\n                  var subHeaderKeys = [];\n                  var maxSubHeaderKey = 0;\n                  for (var _i27 = 0; _i27 < 256; _i27++) {\n                    var subHeaderKey = file.getUint16() >> 3;\n                    subHeaderKeys.push(subHeaderKey);\n                    maxSubHeaderKey = Math.max(subHeaderKey, maxSubHeaderKey);\n                  }\n                  var subHeaders = [];\n                  for (var _i28 = 0; _i28 <= maxSubHeaderKey; _i28++) {\n                    subHeaders.push({\n                      firstCode: file.getUint16(),\n                      entryCount: file.getUint16(),\n                      idDelta: signedInt16(file.getByte(), file.getByte()),\n                      idRangePos: file.pos + file.getUint16()\n                    });\n                  }\n                  for (var _i29 = 0; _i29 < 256; _i29++) {\n                    if (subHeaderKeys[_i29] === 0) {\n                      file.pos = subHeaders[0].idRangePos + 2 * _i29;\n                      glyphId = file.getUint16();\n                      mappings.push({\n                        charCode: _i29,\n                        glyphId: glyphId\n                      });\n                    } else {\n                      var s = subHeaders[subHeaderKeys[_i29]];\n                      for (j = 0; j < s.entryCount; j++) {\n                        var charCode = (_i29 << 8) + j + s.firstCode;\n                        file.pos = s.idRangePos + 2 * j;\n                        glyphId = file.getUint16();\n                        if (glyphId !== 0) {\n                          glyphId = (glyphId + s.idDelta) % 65536;\n                        }\n                        mappings.push({\n                          charCode: charCode,\n                          glyphId: glyphId\n                        });\n                      }\n                    }\n                  }\n                } else if (format === 4) {\n                  file.skip(2 + 2);\n                  var segCount = file.getUint16() >> 1;\n                  file.skip(6);\n                  var segments = [];\n                  var segIndex;\n                  for (segIndex = 0; segIndex < segCount; segIndex++) {\n                    segments.push({\n                      end: file.getUint16()\n                    });\n                  }\n                  file.skip(2);\n                  for (segIndex = 0; segIndex < segCount; segIndex++) {\n                    segments[segIndex].start = file.getUint16();\n                  }\n                  for (segIndex = 0; segIndex < segCount; segIndex++) {\n                    segments[segIndex].delta = file.getUint16();\n                  }\n                  var offsetsCount = 0,\n                    offsetIndex;\n                  for (segIndex = 0; segIndex < segCount; segIndex++) {\n                    segment = segments[segIndex];\n                    var rangeOffset = file.getUint16();\n                    if (!rangeOffset) {\n                      segment.offsetIndex = -1;\n                      continue;\n                    }\n                    offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n                    segment.offsetIndex = offsetIndex;\n                    offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);\n                  }\n                  var offsets = [];\n                  for (j = 0; j < offsetsCount; j++) {\n                    offsets.push(file.getUint16());\n                  }\n                  for (segIndex = 0; segIndex < segCount; segIndex++) {\n                    segment = segments[segIndex];\n                    start = segment.start;\n                    var end = segment.end;\n                    var delta = segment.delta;\n                    offsetIndex = segment.offsetIndex;\n                    for (j = start; j <= end; j++) {\n                      if (j === 0xffff) {\n                        continue;\n                      }\n                      glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n                      glyphId = glyphId + delta & 0xffff;\n                      mappings.push({\n                        charCode: j,\n                        glyphId: glyphId\n                      });\n                    }\n                  }\n                } else if (format === 6) {\n                  file.skip(2 + 2);\n                  var firstCode = file.getUint16();\n                  var entryCount = file.getUint16();\n                  for (j = 0; j < entryCount; j++) {\n                    glyphId = file.getUint16();\n                    var _charCode = firstCode + j;\n                    mappings.push({\n                      charCode: _charCode,\n                      glyphId: glyphId\n                    });\n                  }\n                } else if (format === 12) {\n                  file.skip(2 + 4 + 4);\n                  var nGroups = file.getInt32() >>> 0;\n                  for (j = 0; j < nGroups; j++) {\n                    var startCharCode = file.getInt32() >>> 0;\n                    var endCharCode = file.getInt32() >>> 0;\n                    var glyphCode = file.getInt32() >>> 0;\n                    for (var _charCode2 = startCharCode; _charCode2 <= endCharCode; _charCode2++) {\n                      mappings.push({\n                        charCode: _charCode2,\n                        glyphId: glyphCode++\n                      });\n                    }\n                  }\n                } else {\n                  (0, _util.warn)(\"cmap table has unsupported format: \" + format);\n                  return {\n                    platformId: -1,\n                    encodingId: -1,\n                    mappings: [],\n                    hasShortCmap: false\n                  };\n                }\n                mappings.sort(function (a, b) {\n                  return a.charCode - b.charCode;\n                });\n                for (var _i30 = 1; _i30 < mappings.length; _i30++) {\n                  if (mappings[_i30 - 1].charCode === mappings[_i30].charCode) {\n                    mappings.splice(_i30, 1);\n                    _i30--;\n                  }\n                }\n                return {\n                  platformId: potentialTable.platformId,\n                  encodingId: potentialTable.encodingId,\n                  mappings: mappings,\n                  hasShortCmap: hasShortCmap\n                };\n              }\n              function sanitizeMetrics(file, header, metrics, headTable, numGlyphs, dupFirstEntry) {\n                if (!header) {\n                  if (metrics) {\n                    metrics.data = null;\n                  }\n                  return;\n                }\n                file.pos = (file.start || 0) + header.offset;\n                file.pos += 4;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                file.pos += 2;\n                var caretOffset = file.getUint16();\n                file.pos += 8;\n                file.pos += 2;\n                var numOfMetrics = file.getUint16();\n                if (caretOffset !== 0) {\n                  var macStyle = int16(headTable.data[44], headTable.data[45]);\n                  if (!(macStyle & 2)) {\n                    header.data[22] = 0;\n                    header.data[23] = 0;\n                  }\n                }\n                if (numOfMetrics > numGlyphs) {\n                  (0, _util.info)(\"The numOfMetrics (\".concat(numOfMetrics, \") should not be \") + \"greater than the numGlyphs (\".concat(numGlyphs, \").\"));\n                  numOfMetrics = numGlyphs;\n                  header.data[34] = (numOfMetrics & 0xff00) >> 8;\n                  header.data[35] = numOfMetrics & 0x00ff;\n                }\n                var numOfSidebearings = numGlyphs - numOfMetrics;\n                var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);\n                if (numMissing > 0) {\n                  var entries = new Uint8Array(metrics.length + numMissing * 2);\n                  entries.set(metrics.data);\n                  if (dupFirstEntry) {\n                    entries[metrics.length] = metrics.data[2];\n                    entries[metrics.length + 1] = metrics.data[3];\n                  }\n                  metrics.data = entries;\n                }\n              }\n              function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {\n                var glyphProfile = {\n                  length: 0,\n                  sizeOfInstructions: 0\n                };\n                if (sourceEnd - sourceStart <= 12) {\n                  return glyphProfile;\n                }\n                var glyf = source.subarray(sourceStart, sourceEnd);\n                var contoursCount = signedInt16(glyf[0], glyf[1]);\n                if (contoursCount < 0) {\n                  contoursCount = -1;\n                  writeSignedInt16(glyf, 0, contoursCount);\n                  dest.set(glyf, destStart);\n                  glyphProfile.length = glyf.length;\n                  return glyphProfile;\n                }\n                var i,\n                  j = 10,\n                  flagsCount = 0;\n                for (i = 0; i < contoursCount; i++) {\n                  var endPoint = glyf[j] << 8 | glyf[j + 1];\n                  flagsCount = endPoint + 1;\n                  j += 2;\n                }\n                var instructionsStart = j;\n                var instructionsLength = glyf[j] << 8 | glyf[j + 1];\n                glyphProfile.sizeOfInstructions = instructionsLength;\n                j += 2 + instructionsLength;\n                var instructionsEnd = j;\n                var coordinatesLength = 0;\n                for (i = 0; i < flagsCount; i++) {\n                  var flag = glyf[j++];\n                  if (flag & 0xc0) {\n                    glyf[j - 1] = flag & 0x3f;\n                  }\n                  var xLength = 2;\n                  if (flag & 2) {\n                    xLength = 1;\n                  } else if (flag & 16) {\n                    xLength = 0;\n                  }\n                  var yLength = 2;\n                  if (flag & 4) {\n                    yLength = 1;\n                  } else if (flag & 32) {\n                    yLength = 0;\n                  }\n                  var xyLength = xLength + yLength;\n                  coordinatesLength += xyLength;\n                  if (flag & 8) {\n                    var repeat = glyf[j++];\n                    i += repeat;\n                    coordinatesLength += repeat * xyLength;\n                  }\n                }\n                if (coordinatesLength === 0) {\n                  return glyphProfile;\n                }\n                var glyphDataLength = j + coordinatesLength;\n                if (glyphDataLength > glyf.length) {\n                  return glyphProfile;\n                }\n                if (!hintsValid && instructionsLength > 0) {\n                  dest.set(glyf.subarray(0, instructionsStart), destStart);\n                  dest.set([0, 0], destStart + instructionsStart);\n                  dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);\n                  glyphDataLength -= instructionsLength;\n                  if (glyf.length - glyphDataLength > 3) {\n                    glyphDataLength = glyphDataLength + 3 & ~3;\n                  }\n                  glyphProfile.length = glyphDataLength;\n                  return glyphProfile;\n                }\n                if (glyf.length - glyphDataLength > 3) {\n                  glyphDataLength = glyphDataLength + 3 & ~3;\n                  dest.set(glyf.subarray(0, glyphDataLength), destStart);\n                  glyphProfile.length = glyphDataLength;\n                  return glyphProfile;\n                }\n                dest.set(glyf, destStart);\n                glyphProfile.length = glyf.length;\n                return glyphProfile;\n              }\n              function sanitizeHead(head, numGlyphs, locaLength) {\n                var data = head.data;\n                var version = int32(data[0], data[1], data[2], data[3]);\n                if (version >> 16 !== 1) {\n                  (0, _util.info)(\"Attempting to fix invalid version in head table: \" + version);\n                  data[0] = 0;\n                  data[1] = 1;\n                  data[2] = 0;\n                  data[3] = 0;\n                }\n                var indexToLocFormat = int16(data[50], data[51]);\n                if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n                  (0, _util.info)(\"Attempting to fix invalid indexToLocFormat in head table: \" + indexToLocFormat);\n                  var numGlyphsPlusOne = numGlyphs + 1;\n                  if (locaLength === numGlyphsPlusOne << 1) {\n                    data[50] = 0;\n                    data[51] = 0;\n                  } else if (locaLength === numGlyphsPlusOne << 2) {\n                    data[50] = 0;\n                    data[51] = 1;\n                  } else {\n                    throw new _util.FormatError(\"Could not fix indexToLocFormat: \" + indexToLocFormat);\n                  }\n                }\n              }\n              function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {\n                var itemSize, itemDecode, itemEncode;\n                if (isGlyphLocationsLong) {\n                  itemSize = 4;\n                  itemDecode = function fontItemDecodeLong(data, offset) {\n                    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n                  };\n                  itemEncode = function fontItemEncodeLong(data, offset, value) {\n                    data[offset] = value >>> 24 & 0xff;\n                    data[offset + 1] = value >> 16 & 0xff;\n                    data[offset + 2] = value >> 8 & 0xff;\n                    data[offset + 3] = value & 0xff;\n                  };\n                } else {\n                  itemSize = 2;\n                  itemDecode = function fontItemDecode(data, offset) {\n                    return data[offset] << 9 | data[offset + 1] << 1;\n                  };\n                  itemEncode = function fontItemEncode(data, offset, value) {\n                    data[offset] = value >> 9 & 0xff;\n                    data[offset + 1] = value >> 1 & 0xff;\n                  };\n                }\n                var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n                var locaDataSize = itemSize * (1 + numGlyphsOut);\n                var locaData = new Uint8Array(locaDataSize);\n                locaData.set(loca.data.subarray(0, locaDataSize));\n                loca.data = locaData;\n                var oldGlyfData = glyf.data;\n                var oldGlyfDataLength = oldGlyfData.length;\n                var newGlyfData = new Uint8Array(oldGlyfDataLength);\n                var i, j;\n                var locaEntries = [];\n                for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {\n                  var offset = itemDecode(locaData, j);\n                  if (offset > oldGlyfDataLength) {\n                    offset = oldGlyfDataLength;\n                  }\n                  locaEntries.push({\n                    index: i,\n                    offset: offset,\n                    endOffset: 0\n                  });\n                }\n                locaEntries.sort(function (a, b) {\n                  return a.offset - b.offset;\n                });\n                for (i = 0; i < numGlyphs; i++) {\n                  locaEntries[i].endOffset = locaEntries[i + 1].offset;\n                }\n                locaEntries.sort(function (a, b) {\n                  return a.index - b.index;\n                });\n                for (i = 0; i < numGlyphs; i++) {\n                  var _locaEntries$i = locaEntries[i],\n                    _offset = _locaEntries$i.offset,\n                    endOffset = _locaEntries$i.endOffset;\n                  if (_offset !== 0 || endOffset !== 0) {\n                    break;\n                  }\n                  var nextOffset = locaEntries[i + 1].offset;\n                  if (nextOffset === 0) {\n                    continue;\n                  }\n                  locaEntries[i].endOffset = nextOffset;\n                  break;\n                }\n                var missingGlyphs = Object.create(null);\n                var writeOffset = 0;\n                itemEncode(locaData, 0, writeOffset);\n                for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n                  var glyphProfile = sanitizeGlyph(oldGlyfData, locaEntries[i].offset, locaEntries[i].endOffset, newGlyfData, writeOffset, hintsValid);\n                  var newLength = glyphProfile.length;\n                  if (newLength === 0) {\n                    missingGlyphs[i] = true;\n                  }\n                  if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n                    maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n                  }\n                  writeOffset += newLength;\n                  itemEncode(locaData, j, writeOffset);\n                }\n                if (writeOffset === 0) {\n                  var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);\n                  for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n                    itemEncode(locaData, j, simpleGlyph.length);\n                  }\n                  glyf.data = simpleGlyph;\n                } else if (dupFirstEntry) {\n                  var firstEntryLength = itemDecode(locaData, itemSize);\n                  if (newGlyfData.length > firstEntryLength + writeOffset) {\n                    glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n                  } else {\n                    glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n                    glyf.data.set(newGlyfData.subarray(0, writeOffset));\n                  }\n                  glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n                  itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);\n                } else {\n                  glyf.data = newGlyfData.subarray(0, writeOffset);\n                }\n                return {\n                  missingGlyphs: missingGlyphs,\n                  maxSizeOfInstructions: maxSizeOfInstructions\n                };\n              }\n              function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {\n                var start = (font.start || 0) + post.offset;\n                font.pos = start;\n                var length = post.length,\n                  end = start + length;\n                var version = font.getInt32();\n                font.skip(28);\n                var glyphNames;\n                var valid = true;\n                var i;\n                switch (version) {\n                  case 0x00010000:\n                    glyphNames = _fonts_utils.MacStandardGlyphOrdering;\n                    break;\n                  case 0x00020000:\n                    var _numGlyphs = font.getUint16();\n                    if (_numGlyphs !== maxpNumGlyphs) {\n                      valid = false;\n                      break;\n                    }\n                    var glyphNameIndexes = [];\n                    for (i = 0; i < _numGlyphs; ++i) {\n                      var index = font.getUint16();\n                      if (index >= 32768) {\n                        valid = false;\n                        break;\n                      }\n                      glyphNameIndexes.push(index);\n                    }\n                    if (!valid) {\n                      break;\n                    }\n                    var customNames = [],\n                      strBuf = [];\n                    while (font.pos < end) {\n                      var stringLength = font.getByte();\n                      strBuf.length = stringLength;\n                      for (i = 0; i < stringLength; ++i) {\n                        strBuf[i] = String.fromCharCode(font.getByte());\n                      }\n                      customNames.push(strBuf.join(\"\"));\n                    }\n                    glyphNames = [];\n                    for (i = 0; i < _numGlyphs; ++i) {\n                      var j = glyphNameIndexes[i];\n                      if (j < 258) {\n                        glyphNames.push(_fonts_utils.MacStandardGlyphOrdering[j]);\n                        continue;\n                      }\n                      glyphNames.push(customNames[j - 258]);\n                    }\n                    break;\n                  case 0x00030000:\n                    break;\n                  default:\n                    (0, _util.warn)(\"Unknown/unsupported post table version \" + version);\n                    valid = false;\n                    if (propertiesObj.defaultEncoding) {\n                      glyphNames = propertiesObj.defaultEncoding;\n                    }\n                    break;\n                }\n                propertiesObj.glyphNames = glyphNames;\n                return valid;\n              }\n              function readNameTable(nameTable) {\n                var start = (font.start || 0) + nameTable.offset;\n                font.pos = start;\n                var names = [[], []];\n                var length = nameTable.length,\n                  end = start + length;\n                var format = font.getUint16();\n                var FORMAT_0_HEADER_LENGTH = 6;\n                if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n                  return names;\n                }\n                var numRecords = font.getUint16();\n                var stringsStart = font.getUint16();\n                var records = [];\n                var NAME_RECORD_LENGTH = 12;\n                var i, ii;\n                for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {\n                  var r = {\n                    platform: font.getUint16(),\n                    encoding: font.getUint16(),\n                    language: font.getUint16(),\n                    name: font.getUint16(),\n                    length: font.getUint16(),\n                    offset: font.getUint16()\n                  };\n                  if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {\n                    records.push(r);\n                  }\n                }\n                for (i = 0, ii = records.length; i < ii; i++) {\n                  var record = records[i];\n                  if (record.length <= 0) {\n                    continue;\n                  }\n                  var pos = start + stringsStart + record.offset;\n                  if (pos + record.length > end) {\n                    continue;\n                  }\n                  font.pos = pos;\n                  var nameIndex = record.name;\n                  if (record.encoding) {\n                    var str = \"\";\n                    for (var j = 0, jj = record.length; j < jj; j += 2) {\n                      str += String.fromCharCode(font.getUint16());\n                    }\n                    names[1][nameIndex] = str;\n                  } else {\n                    names[0][nameIndex] = font.getString(record.length);\n                  }\n                }\n                return names;\n              }\n              var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n              function sanitizeTTProgram(table, ttContext) {\n                var data = table.data;\n                var i = 0,\n                  j,\n                  n,\n                  b,\n                  funcId,\n                  pc,\n                  lastEndf = 0,\n                  lastDeff = 0;\n                var stack = [];\n                var callstack = [];\n                var functionsCalled = [];\n                var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n                var inFDEF = false,\n                  ifLevel = 0,\n                  inELSE = 0;\n                for (var ii = data.length; i < ii;) {\n                  var op = data[i++];\n                  if (op === 0x40) {\n                    n = data[i++];\n                    if (inFDEF || inELSE) {\n                      i += n;\n                    } else {\n                      for (j = 0; j < n; j++) {\n                        stack.push(data[i++]);\n                      }\n                    }\n                  } else if (op === 0x41) {\n                    n = data[i++];\n                    if (inFDEF || inELSE) {\n                      i += n * 2;\n                    } else {\n                      for (j = 0; j < n; j++) {\n                        b = data[i++];\n                        stack.push(b << 8 | data[i++]);\n                      }\n                    }\n                  } else if ((op & 0xf8) === 0xb0) {\n                    n = op - 0xb0 + 1;\n                    if (inFDEF || inELSE) {\n                      i += n;\n                    } else {\n                      for (j = 0; j < n; j++) {\n                        stack.push(data[i++]);\n                      }\n                    }\n                  } else if ((op & 0xf8) === 0xb8) {\n                    n = op - 0xb8 + 1;\n                    if (inFDEF || inELSE) {\n                      i += n * 2;\n                    } else {\n                      for (j = 0; j < n; j++) {\n                        b = data[i++];\n                        stack.push(b << 8 | data[i++]);\n                      }\n                    }\n                  } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n                    if (!inFDEF && !inELSE) {\n                      funcId = stack.at(-1);\n                      if (isNaN(funcId)) {\n                        (0, _util.info)(\"TT: CALL empty stack (or invalid entry).\");\n                      } else {\n                        ttContext.functionsUsed[funcId] = true;\n                        if (funcId in ttContext.functionsStackDeltas) {\n                          var newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];\n                          if (newStackLength < 0) {\n                            (0, _util.warn)(\"TT: CALL invalid functions stack delta.\");\n                            ttContext.hintsValid = false;\n                            return;\n                          }\n                          stack.length = newStackLength;\n                        } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {\n                          callstack.push({\n                            data: data,\n                            i: i,\n                            stackTop: stack.length - 1\n                          });\n                          functionsCalled.push(funcId);\n                          pc = ttContext.functionsDefined[funcId];\n                          if (!pc) {\n                            (0, _util.warn)(\"TT: CALL non-existent function\");\n                            ttContext.hintsValid = false;\n                            return;\n                          }\n                          data = pc.data;\n                          i = pc.i;\n                        }\n                      }\n                    }\n                  } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n                    if (inFDEF || inELSE) {\n                      (0, _util.warn)(\"TT: nested FDEFs not allowed\");\n                      tooComplexToFollowFunctions = true;\n                    }\n                    inFDEF = true;\n                    lastDeff = i;\n                    funcId = stack.pop();\n                    ttContext.functionsDefined[funcId] = {\n                      data: data,\n                      i: i\n                    };\n                  } else if (op === 0x2d) {\n                    if (inFDEF) {\n                      inFDEF = false;\n                      lastEndf = i;\n                    } else {\n                      pc = callstack.pop();\n                      if (!pc) {\n                        (0, _util.warn)(\"TT: ENDF bad stack\");\n                        ttContext.hintsValid = false;\n                        return;\n                      }\n                      funcId = functionsCalled.pop();\n                      data = pc.data;\n                      i = pc.i;\n                      ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;\n                    }\n                  } else if (op === 0x89) {\n                    if (inFDEF || inELSE) {\n                      (0, _util.warn)(\"TT: nested IDEFs not allowed\");\n                      tooComplexToFollowFunctions = true;\n                    }\n                    inFDEF = true;\n                    lastDeff = i;\n                  } else if (op === 0x58) {\n                    ++ifLevel;\n                  } else if (op === 0x1b) {\n                    inELSE = ifLevel;\n                  } else if (op === 0x59) {\n                    if (inELSE === ifLevel) {\n                      inELSE = 0;\n                    }\n                    --ifLevel;\n                  } else if (op === 0x1c) {\n                    if (!inFDEF && !inELSE) {\n                      var offset = stack.at(-1);\n                      if (offset > 0) {\n                        i += offset - 1;\n                      }\n                    }\n                  }\n                  if (!inFDEF && !inELSE) {\n                    var stackDelta = 0;\n                    if (op <= 0x8e) {\n                      stackDelta = TTOpsStackDeltas[op];\n                    } else if (op >= 0xc0 && op <= 0xdf) {\n                      stackDelta = -1;\n                    } else if (op >= 0xe0) {\n                      stackDelta = -2;\n                    }\n                    if (op >= 0x71 && op <= 0x75) {\n                      n = stack.pop();\n                      if (!isNaN(n)) {\n                        stackDelta = -n * 2;\n                      }\n                    }\n                    while (stackDelta < 0 && stack.length > 0) {\n                      stack.pop();\n                      stackDelta++;\n                    }\n                    while (stackDelta > 0) {\n                      stack.push(NaN);\n                      stackDelta--;\n                    }\n                  }\n                }\n                ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n                var content = [data];\n                if (i > data.length) {\n                  content.push(new Uint8Array(i - data.length));\n                }\n                if (lastDeff > lastEndf) {\n                  (0, _util.warn)(\"TT: complementing a missing function tail\");\n                  content.push(new Uint8Array([0x22, 0x2d]));\n                }\n                foldTTTable(table, content);\n              }\n              function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n                if (ttContext.tooComplexToFollowFunctions) {\n                  return;\n                }\n                if (ttContext.functionsDefined.length > maxFunctionDefs) {\n                  (0, _util.warn)(\"TT: more functions defined than expected\");\n                  ttContext.hintsValid = false;\n                  return;\n                }\n                for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n                  if (j > maxFunctionDefs) {\n                    (0, _util.warn)(\"TT: invalid function id: \" + j);\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n                  if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n                    (0, _util.warn)(\"TT: undefined function: \" + j);\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n                }\n              }\n              function foldTTTable(table, content) {\n                if (content.length > 1) {\n                  var newLength = 0;\n                  var j, jj;\n                  for (j = 0, jj = content.length; j < jj; j++) {\n                    newLength += content[j].length;\n                  }\n                  newLength = newLength + 3 & ~3;\n                  var result = new Uint8Array(newLength);\n                  var pos = 0;\n                  for (j = 0, jj = content.length; j < jj; j++) {\n                    result.set(content[j], pos);\n                    pos += content[j].length;\n                  }\n                  table.data = result;\n                  table.length = newLength;\n                }\n              }\n              function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n                var ttContext = {\n                  functionsDefined: [],\n                  functionsUsed: [],\n                  functionsStackDeltas: [],\n                  tooComplexToFollowFunctions: false,\n                  hintsValid: true\n                };\n                if (fpgm) {\n                  sanitizeTTProgram(fpgm, ttContext);\n                }\n                if (prep) {\n                  sanitizeTTProgram(prep, ttContext);\n                }\n                if (fpgm) {\n                  checkInvalidFunctions(ttContext, maxFunctionDefs);\n                }\n                if (cvt && cvt.length & 1) {\n                  var cvtData = new Uint8Array(cvt.length + 1);\n                  cvtData.set(cvt.data);\n                  cvt.data = cvtData;\n                }\n                return ttContext.hintsValid;\n              }\n              font = new _stream.Stream(new Uint8Array(font.getBytes()));\n              var header, tables;\n              if (isTrueTypeCollectionFile(font)) {\n                var ttcData = readTrueTypeCollectionData(font, this.name);\n                header = ttcData.header;\n                tables = ttcData.tables;\n              } else {\n                header = readOpenTypeHeader(font);\n                tables = readTables(font, header.numTables);\n              }\n              var cff, cffFile;\n              var isTrueType = !tables[\"CFF \"];\n              if (!isTrueType) {\n                var isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));\n                if (header.version === \"OTTO\" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {\n                  cffFile = new _stream.Stream(tables[\"CFF \"].data);\n                  cff = new _cff_font.CFFFont(cffFile, properties);\n                  adjustWidths(properties);\n                  return this.convert(name, cff, properties);\n                }\n                delete tables.glyf;\n                delete tables.loca;\n                delete tables.fpgm;\n                delete tables.prep;\n                delete tables[\"cvt \"];\n                this.isOpenType = true;\n              } else {\n                if (!tables.loca) {\n                  throw new _util.FormatError('Required \"loca\" table is not found');\n                }\n                if (!tables.glyf) {\n                  (0, _util.warn)('Required \"glyf\" table is not found -- trying to recover.');\n                  tables.glyf = {\n                    tag: \"glyf\",\n                    data: new Uint8Array(0)\n                  };\n                }\n                this.isOpenType = false;\n              }\n              if (!tables.maxp) {\n                throw new _util.FormatError('Required \"maxp\" table is not found');\n              }\n              font.pos = (font.start || 0) + tables.maxp.offset;\n              var version = font.getInt32();\n              var numGlyphs = font.getUint16();\n              if (properties.scaleFactors && properties.scaleFactors.length === numGlyphs && isTrueType) {\n                var scaleFactors = properties.scaleFactors;\n                var isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);\n                var glyphs = new _glyf.GlyfTable({\n                  glyfTable: tables.glyf.data,\n                  isGlyphLocationsLong: isGlyphLocationsLong,\n                  locaTable: tables.loca.data,\n                  numGlyphs: numGlyphs\n                });\n                glyphs.scale(scaleFactors);\n                var _glyphs$write = glyphs.write(),\n                  glyf = _glyphs$write.glyf,\n                  loca = _glyphs$write.loca,\n                  isLocationLong = _glyphs$write.isLocationLong;\n                tables.glyf.data = glyf;\n                tables.loca.data = loca;\n                if (isLocationLong !== !!isGlyphLocationsLong) {\n                  tables.head.data[50] = 0;\n                  tables.head.data[51] = isLocationLong ? 1 : 0;\n                }\n                var metrics = tables.hmtx.data;\n                for (var i = 0; i < numGlyphs; i++) {\n                  var j = 4 * i;\n                  var advanceWidth = Math.round(scaleFactors[i] * int16(metrics[j], metrics[j + 1]));\n                  metrics[j] = advanceWidth >> 8 & 0xff;\n                  metrics[j + 1] = advanceWidth & 0xff;\n                  var lsb = Math.round(scaleFactors[i] * signedInt16(metrics[j + 2], metrics[j + 3]));\n                  writeSignedInt16(metrics, j + 2, lsb);\n                }\n              }\n              var numGlyphsOut = numGlyphs + 1;\n              var dupFirstEntry = true;\n              if (numGlyphsOut > 0xffff) {\n                dupFirstEntry = false;\n                numGlyphsOut = numGlyphs;\n                (0, _util.warn)(\"Not enough space in glyfs to duplicate first glyph.\");\n              }\n              var maxFunctionDefs = 0;\n              var maxSizeOfInstructions = 0;\n              if (version >= 0x00010000 && tables.maxp.length >= 22) {\n                font.pos += 8;\n                var maxZones = font.getUint16();\n                if (maxZones > 2) {\n                  tables.maxp.data[14] = 0;\n                  tables.maxp.data[15] = 2;\n                }\n                font.pos += 4;\n                maxFunctionDefs = font.getUint16();\n                font.pos += 4;\n                maxSizeOfInstructions = font.getUint16();\n              }\n              tables.maxp.data[4] = numGlyphsOut >> 8;\n              tables.maxp.data[5] = numGlyphsOut & 255;\n              var hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables[\"cvt \"], maxFunctionDefs);\n              if (!hintsValid) {\n                delete tables.fpgm;\n                delete tables.prep;\n                delete tables[\"cvt \"];\n              }\n              sanitizeMetrics(font, tables.hhea, tables.hmtx, tables.head, numGlyphsOut, dupFirstEntry);\n              if (!tables.head) {\n                throw new _util.FormatError('Required \"head\" table is not found');\n              }\n              sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);\n              var missingGlyphs = Object.create(null);\n              if (isTrueType) {\n                var _isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);\n                var glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, _isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);\n                missingGlyphs = glyphsInfo.missingGlyphs;\n                if (version >= 0x00010000 && tables.maxp.length >= 22) {\n                  tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n                  tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n                }\n              }\n              if (!tables.hhea) {\n                throw new _util.FormatError('Required \"hhea\" table is not found');\n              }\n              if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {\n                tables.hhea.data[10] = 0xff;\n                tables.hhea.data[11] = 0xff;\n              }\n              var metricsOverride = {\n                unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),\n                yMax: int16(tables.head.data[42], tables.head.data[43]),\n                yMin: signedInt16(tables.head.data[38], tables.head.data[39]),\n                ascent: signedInt16(tables.hhea.data[4], tables.hhea.data[5]),\n                descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),\n                lineGap: signedInt16(tables.hhea.data[8], tables.hhea.data[9])\n              };\n              this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n              this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n              this.lineGap = metricsOverride.lineGap / metricsOverride.unitsPerEm;\n              if (this.cssFontInfo && this.cssFontInfo.lineHeight) {\n                this.lineHeight = this.cssFontInfo.metrics.lineHeight;\n                this.lineGap = this.cssFontInfo.metrics.lineGap;\n              } else {\n                this.lineHeight = this.ascent - this.descent + this.lineGap;\n              }\n              if (tables.post) {\n                readPostScriptTable(tables.post, properties, numGlyphs);\n              }\n              tables.post = {\n                tag: \"post\",\n                data: createPostTable(properties)\n              };\n              var charCodeToGlyphId = [];\n              function hasGlyph(glyphId) {\n                return !missingGlyphs[glyphId];\n              }\n              if (properties.composite) {\n                var cidToGidMap = properties.cidToGidMap || [];\n                var isCidToGidMapEmpty = cidToGidMap.length === 0;\n                properties.cMap.forEach(function (charCode, cid) {\n                  if (typeof cid === \"string\") {\n                    cid = convertCidString(charCode, cid, true);\n                  }\n                  if (cid > 0xffff) {\n                    throw new _util.FormatError(\"Max size of CID is 65,535\");\n                  }\n                  var glyphId = -1;\n                  if (isCidToGidMapEmpty) {\n                    glyphId = cid;\n                  } else if (cidToGidMap[cid] !== undefined) {\n                    glyphId = cidToGidMap[cid];\n                  }\n                  if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n                    charCodeToGlyphId[charCode] = glyphId;\n                  }\n                });\n              } else {\n                var cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);\n                var cmapPlatformId = cmapTable.platformId;\n                var cmapEncodingId = cmapTable.encodingId;\n                var cmapMappings = cmapTable.mappings;\n                var cmapMappingsLength = cmapMappings.length;\n                var baseEncoding = [],\n                  forcePostTable = false;\n                if (properties.hasEncoding && (properties.baseEncodingName === \"MacRomanEncoding\" || properties.baseEncodingName === \"WinAnsiEncoding\")) {\n                  baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n                }\n                if (properties.hasEncoding && !this.isSymbolicFont && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0)) {\n                  var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n                  for (var charCode = 0; charCode < 256; charCode++) {\n                    var glyphName = void 0;\n                    if (this.differences[charCode] !== undefined) {\n                      glyphName = this.differences[charCode];\n                    } else if (baseEncoding.length && baseEncoding[charCode] !== \"\") {\n                      glyphName = baseEncoding[charCode];\n                    } else {\n                      glyphName = _encodings.StandardEncoding[charCode];\n                    }\n                    if (!glyphName) {\n                      continue;\n                    }\n                    var standardGlyphName = (0, _fonts_utils.recoverGlyphName)(glyphName, glyphsUnicodeMap);\n                    var unicodeOrCharCode = void 0;\n                    if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n                      unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n                    } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n                      unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);\n                    }\n                    if (unicodeOrCharCode === undefined) {\n                      if (!properties.glyphNames && properties.hasIncludedToUnicodeMap && !(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {\n                        var unicode = this.toUnicode.get(charCode);\n                        if (unicode) {\n                          unicodeOrCharCode = unicode.codePointAt(0);\n                        }\n                      }\n                      if (unicodeOrCharCode === undefined) {\n                        continue;\n                      }\n                    }\n                    for (var _i31 = 0; _i31 < cmapMappingsLength; ++_i31) {\n                      if (cmapMappings[_i31].charCode !== unicodeOrCharCode) {\n                        continue;\n                      }\n                      charCodeToGlyphId[charCode] = cmapMappings[_i31].glyphId;\n                      break;\n                    }\n                  }\n                } else if (cmapPlatformId === 0) {\n                  for (var _i32 = 0; _i32 < cmapMappingsLength; ++_i32) {\n                    charCodeToGlyphId[cmapMappings[_i32].charCode] = cmapMappings[_i32].glyphId;\n                  }\n                  forcePostTable = true;\n                } else {\n                  for (var _i33 = 0; _i33 < cmapMappingsLength; ++_i33) {\n                    var _charCode3 = cmapMappings[_i33].charCode;\n                    if (cmapPlatformId === 3 && _charCode3 >= 0xf000 && _charCode3 <= 0xf0ff) {\n                      _charCode3 &= 0xff;\n                    }\n                    charCodeToGlyphId[_charCode3] = cmapMappings[_i33].glyphId;\n                  }\n                }\n                if (properties.glyphNames && (baseEncoding.length || this.differences.length)) {\n                  for (var _i34 = 0; _i34 < 256; ++_i34) {\n                    if (!forcePostTable && charCodeToGlyphId[_i34] !== undefined) {\n                      continue;\n                    }\n                    var _glyphName2 = this.differences[_i34] || baseEncoding[_i34];\n                    if (!_glyphName2) {\n                      continue;\n                    }\n                    var glyphId = properties.glyphNames.indexOf(_glyphName2);\n                    if (glyphId > 0 && hasGlyph(glyphId)) {\n                      charCodeToGlyphId[_i34] = glyphId;\n                    }\n                  }\n                }\n              }\n              if (charCodeToGlyphId.length === 0) {\n                charCodeToGlyphId[0] = 0;\n              }\n              var glyphZeroId = numGlyphsOut - 1;\n              if (!dupFirstEntry) {\n                glyphZeroId = 0;\n              }\n              if (!properties.cssFontInfo) {\n                var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId, this.toUnicode);\n                this.toFontChar = newMapping.toFontChar;\n                tables.cmap = {\n                  tag: \"cmap\",\n                  data: createCmapTable(newMapping.charCodeToGlyphId, newMapping.toUnicodeExtraMap, numGlyphsOut)\n                };\n                if (!tables[\"OS/2\"] || !validateOS2Table(tables[\"OS/2\"], font)) {\n                  tables[\"OS/2\"] = {\n                    tag: \"OS/2\",\n                    data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)\n                  };\n                }\n              }\n              if (!isTrueType) {\n                try {\n                  cffFile = new _stream.Stream(tables[\"CFF \"].data);\n                  var parser = new _cff_parser.CFFParser(cffFile, properties, _fonts_utils.SEAC_ANALYSIS_ENABLED);\n                  cff = parser.parse();\n                  cff.duplicateFirstGlyph();\n                  var compiler = new _cff_parser.CFFCompiler(cff);\n                  tables[\"CFF \"].data = compiler.compile();\n                } catch (e) {\n                  (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n                }\n              }\n              if (!tables.name) {\n                tables.name = {\n                  tag: \"name\",\n                  data: createNameTable(this.name)\n                };\n              } else {\n                var namePrototype = readNameTable(tables.name);\n                tables.name.data = createNameTable(name, namePrototype);\n                this.psName = namePrototype[0][6] || null;\n              }\n              var builder = new _opentype_file_builder.OpenTypeFileBuilder(header.version);\n              for (var tableTag in tables) {\n                builder.addTable(tableTag, tables[tableTag].data);\n              }\n              return builder.toArray();\n            }\n          }, {\n            key: \"convert\",\n            value: function convert(fontName, font, properties) {\n              properties.fixedPitch = false;\n              if (properties.builtInEncoding) {\n                adjustToUnicode(properties, properties.builtInEncoding);\n              }\n              var glyphZeroId = 1;\n              if (font instanceof _cff_font.CFFFont) {\n                glyphZeroId = font.numGlyphs - 1;\n              }\n              var mapping = font.getGlyphMapping(properties);\n              var newMapping = null;\n              var newCharCodeToGlyphId = mapping;\n              var toUnicodeExtraMap = null;\n              if (!properties.cssFontInfo) {\n                newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId, this.toUnicode);\n                this.toFontChar = newMapping.toFontChar;\n                newCharCodeToGlyphId = newMapping.charCodeToGlyphId;\n                toUnicodeExtraMap = newMapping.toUnicodeExtraMap;\n              }\n              var numGlyphs = font.numGlyphs;\n              function getCharCodes(charCodeToGlyphId, glyphId) {\n                var charCodes = null;\n                for (var charCode in charCodeToGlyphId) {\n                  if (glyphId === charCodeToGlyphId[charCode]) {\n                    if (!charCodes) {\n                      charCodes = [];\n                    }\n                    charCodes.push(charCode | 0);\n                  }\n                }\n                return charCodes;\n              }\n              function createCharCode(charCodeToGlyphId, glyphId) {\n                for (var charCode in charCodeToGlyphId) {\n                  if (glyphId === charCodeToGlyphId[charCode]) {\n                    return charCode | 0;\n                  }\n                }\n                newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;\n                return newMapping.nextAvailableFontCharCode++;\n              }\n              var seacs = font.seacs;\n              if (newMapping && _fonts_utils.SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n                var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n                var charset = font.getCharset();\n                var seacMap = Object.create(null);\n                for (var glyphId in seacs) {\n                  glyphId |= 0;\n                  var seac = seacs[glyphId];\n                  var baseGlyphName = _encodings.StandardEncoding[seac[2]];\n                  var accentGlyphName = _encodings.StandardEncoding[seac[3]];\n                  var baseGlyphId = charset.indexOf(baseGlyphName);\n                  var accentGlyphId = charset.indexOf(accentGlyphName);\n                  if (baseGlyphId < 0 || accentGlyphId < 0) {\n                    continue;\n                  }\n                  var accentOffset = {\n                    x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n                    y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]\n                  };\n                  var charCodes = getCharCodes(mapping, glyphId);\n                  if (!charCodes) {\n                    continue;\n                  }\n                  for (var i = 0, ii = charCodes.length; i < ii; i++) {\n                    var charCode = charCodes[i];\n                    var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n                    var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);\n                    var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);\n                    seacMap[charCode] = {\n                      baseFontCharCode: baseFontCharCode,\n                      accentFontCharCode: accentFontCharCode,\n                      accentOffset: accentOffset\n                    };\n                  }\n                }\n                properties.seacMap = seacMap;\n              }\n              var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n              var builder = new _opentype_file_builder.OpenTypeFileBuilder(\"\\x4F\\x54\\x54\\x4F\");\n              builder.addTable(\"CFF \", font.data);\n              builder.addTable(\"OS/2\", createOS2Table(properties, newCharCodeToGlyphId));\n              builder.addTable(\"cmap\", createCmapTable(newCharCodeToGlyphId, toUnicodeExtraMap, numGlyphs));\n              builder.addTable(\"head\", \"\\x00\\x01\\x00\\x00\" + \"\\x00\\x00\\x10\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x5F\\x0F\\x3C\\xF5\" + \"\\x00\\x00\" + safeString16(unitsPerEm) + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\" + safeString16(properties.descent) + \"\\x0F\\xFF\" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + \"\\x00\\x11\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\");\n              builder.addTable(\"hhea\", \"\\x00\\x01\\x00\\x00\" + safeString16(properties.ascent) + safeString16(properties.descent) + \"\\x00\\x00\" + \"\\xFF\\xFF\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + string16(numGlyphs));\n              builder.addTable(\"hmtx\", function fontFieldsHmtx() {\n                var charstrings = font.charstrings;\n                var cffWidths = font.cff ? font.cff.widths : null;\n                var hmtx = \"\\x00\\x00\\x00\\x00\";\n                for (var _i35 = 1, _ii3 = numGlyphs; _i35 < _ii3; _i35++) {\n                  var width = 0;\n                  if (charstrings) {\n                    var charstring = charstrings[_i35 - 1];\n                    width = \"width\" in charstring ? charstring.width : 0;\n                  } else if (cffWidths) {\n                    width = Math.ceil(cffWidths[_i35] || 0);\n                  }\n                  hmtx += string16(width) + string16(0);\n                }\n                return hmtx;\n              }());\n              builder.addTable(\"maxp\", \"\\x00\\x00\\x50\\x00\" + string16(numGlyphs));\n              builder.addTable(\"name\", createNameTable(fontName));\n              builder.addTable(\"post\", createPostTable(properties));\n              return builder.toArray();\n            }\n          }, {\n            key: \"_charToGlyph\",\n            value: function _charToGlyph(charcode) {\n              var isSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              var fontCharCode, width, operatorListId;\n              var widthCode = charcode;\n              if (this.cMap && this.cMap.contains(charcode)) {\n                widthCode = this.cMap.lookup(charcode);\n                if (typeof widthCode === \"string\") {\n                  widthCode = convertCidString(charcode, widthCode);\n                }\n              }\n              width = this.widths[widthCode];\n              if (typeof width !== \"number\") {\n                width = this.defaultWidth;\n              }\n              var vmetric = this.vmetrics && this.vmetrics[widthCode];\n              var unicode = this.toUnicode.get(charcode) || charcode;\n              if (typeof unicode === \"number\") {\n                unicode = String.fromCharCode(unicode);\n              }\n              var isInFont = this.toFontChar[charcode] !== undefined;\n              fontCharCode = this.toFontChar[charcode] || charcode;\n              if (this.missingFile) {\n                var glyphName = this.differences[charcode] || this.defaultEncoding[charcode];\n                if ((glyphName === \".notdef\" || glyphName === \"\") && this.type === \"Type1\") {\n                  fontCharCode = 0x20;\n                }\n                fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);\n              }\n              if (this.isType3Font) {\n                operatorListId = fontCharCode;\n              }\n              var accent = null;\n              if (this.seacMap && this.seacMap[charcode]) {\n                isInFont = true;\n                var seac = this.seacMap[charcode];\n                fontCharCode = seac.baseFontCharCode;\n                accent = {\n                  fontChar: String.fromCodePoint(seac.accentFontCharCode),\n                  offset: seac.accentOffset\n                };\n              }\n              var fontChar = \"\";\n              if (typeof fontCharCode === \"number\") {\n                if (fontCharCode <= 0x10ffff) {\n                  fontChar = String.fromCodePoint(fontCharCode);\n                } else {\n                  (0, _util.warn)(\"charToGlyph - invalid fontCharCode: \".concat(fontCharCode));\n                }\n              }\n              var glyph = this._glyphCache[charcode];\n              if (!glyph || !glyph.matchesForCache(charcode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {\n                glyph = new Glyph(charcode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);\n                this._glyphCache[charcode] = glyph;\n              }\n              return glyph;\n            }\n          }, {\n            key: \"charsToGlyphs\",\n            value: function charsToGlyphs(chars) {\n              var glyphs = this._charsCache[chars];\n              if (glyphs) {\n                return glyphs;\n              }\n              glyphs = [];\n              if (this.cMap) {\n                var c = Object.create(null),\n                  ii = chars.length;\n                var i = 0;\n                while (i < ii) {\n                  this.cMap.readCharCode(chars, i, c);\n                  var charcode = c.charcode,\n                    length = c.length;\n                  i += length;\n                  var glyph = this._charToGlyph(charcode, length === 1 && chars.charCodeAt(i - 1) === 0x20);\n                  glyphs.push(glyph);\n                }\n              } else {\n                for (var _i36 = 0, _ii4 = chars.length; _i36 < _ii4; ++_i36) {\n                  var _charcode2 = chars.charCodeAt(_i36);\n                  var _glyph = this._charToGlyph(_charcode2, _charcode2 === 0x20);\n                  glyphs.push(_glyph);\n                }\n              }\n              return this._charsCache[chars] = glyphs;\n            }\n          }, {\n            key: \"getCharPositions\",\n            value: function getCharPositions(chars) {\n              var positions = [];\n              if (this.cMap) {\n                var c = Object.create(null);\n                var i = 0;\n                while (i < chars.length) {\n                  this.cMap.readCharCode(chars, i, c);\n                  var length = c.length;\n                  positions.push([i, i + length]);\n                  i += length;\n                }\n              } else {\n                for (var _i37 = 0, ii = chars.length; _i37 < ii; ++_i37) {\n                  positions.push([_i37, _i37 + 1]);\n                }\n              }\n              return positions;\n            }\n          }, {\n            key: \"encodeString\",\n            value: function encodeString(str) {\n              var _this77 = this;\n              var buffers = [];\n              var currentBuf = [];\n              var hasCurrentBufErrors = function hasCurrentBufErrors() {\n                return buffers.length % 2 === 1;\n              };\n              var getCharCode = this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap ? function (unicode) {\n                return _this77.toUnicode.charCodeOf(unicode);\n              } : function (unicode) {\n                return _this77.toUnicode.charCodeOf(String.fromCodePoint(unicode));\n              };\n              for (var i = 0, ii = str.length; i < ii; i++) {\n                var unicode = str.codePointAt(i);\n                if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {\n                  i++;\n                }\n                if (this.toUnicode) {\n                  var charCode = getCharCode(unicode);\n                  if (charCode !== -1) {\n                    if (hasCurrentBufErrors()) {\n                      buffers.push(currentBuf.join(\"\"));\n                      currentBuf.length = 0;\n                    }\n                    var charCodeLength = this.cMap ? this.cMap.getCharCodeLength(charCode) : 1;\n                    for (var j = charCodeLength - 1; j >= 0; j--) {\n                      currentBuf.push(String.fromCharCode(charCode >> 8 * j & 0xff));\n                    }\n                    continue;\n                  }\n                }\n                if (!hasCurrentBufErrors()) {\n                  buffers.push(currentBuf.join(\"\"));\n                  currentBuf.length = 0;\n                }\n                currentBuf.push(String.fromCodePoint(unicode));\n              }\n              buffers.push(currentBuf.join(\"\"));\n              return buffers;\n            }\n          }, {\n            key: \"renderer\",\n            get: function get() {\n              var renderer = _font_renderer.FontRendererFactory.create(this, _fonts_utils.SEAC_ANALYSIS_ENABLED);\n              return (0, _util.shadow)(this, \"renderer\", renderer);\n            }\n          }, {\n            key: \"spaceWidth\",\n            get: function get() {\n              var possibleSpaceReplacements = [\"space\", \"minus\", \"one\", \"i\", \"I\"];\n              var width;\n              for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n                var glyphName = possibleSpaceReplacements[i];\n                if (glyphName in this.widths) {\n                  width = this.widths[glyphName];\n                  break;\n                }\n                var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n                var glyphUnicode = glyphsUnicodeMap[glyphName];\n                var charcode = 0;\n                if (this.composite && this.cMap.contains(glyphUnicode)) {\n                  charcode = this.cMap.lookup(glyphUnicode);\n                  if (typeof charcode === \"string\") {\n                    charcode = convertCidString(glyphUnicode, charcode);\n                  }\n                }\n                if (!charcode && this.toUnicode) {\n                  charcode = this.toUnicode.charCodeOf(glyphUnicode);\n                }\n                if (charcode <= 0) {\n                  charcode = glyphUnicode;\n                }\n                width = this.widths[charcode];\n                if (width) {\n                  break;\n                }\n              }\n              width = width || this.defaultWidth;\n              return (0, _util.shadow)(this, \"spaceWidth\", width);\n            }\n          }, {\n            key: \"glyphCacheValues\",\n            get: function get() {\n              return Object.values(this._glyphCache);\n            }\n          }]);\n          return Font;\n        }();\n        exports.Font = Font;\n        var ErrorFont = /*#__PURE__*/function () {\n          function ErrorFont(error) {\n            _classCallCheck(this, ErrorFont);\n            this.error = error;\n            this.loadedName = \"g_font_error\";\n            this.missingFile = true;\n          }\n          _createClass(ErrorFont, [{\n            key: \"charsToGlyphs\",\n            value: function charsToGlyphs() {\n              return [];\n            }\n          }, {\n            key: \"encodeString\",\n            value: function encodeString(chars) {\n              return [chars];\n            }\n          }, {\n            key: \"exportData\",\n            value: function exportData() {\n              var extraProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              return {\n                error: this.error\n              };\n            }\n          }]);\n          return ErrorFont;\n        }();\n        exports.ErrorFont = ErrorFont;\n\n        /***/\n      }, /* 35 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CFFTopDict = exports.CFFStrings = exports.CFFStandardStrings = exports.CFFPrivateDict = exports.CFFParser = exports.CFFIndex = exports.CFFHeader = exports.CFFFDSelect = exports.CFFCompiler = exports.CFFCharset = exports.CFF = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _charsets = __w_pdfjs_require__(36);\n        var _encodings = __w_pdfjs_require__(37);\n        var MAX_SUBR_NESTING = 10;\n        var CFFStandardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\n        exports.CFFStandardStrings = CFFStandardStrings;\n        var NUM_STANDARD_CFF_STRINGS = 391;\n        var CharstringValidationData = [null, {\n          id: \"hstem\",\n          min: 2,\n          stackClearing: true,\n          stem: true\n        }, null, {\n          id: \"vstem\",\n          min: 2,\n          stackClearing: true,\n          stem: true\n        }, {\n          id: \"vmoveto\",\n          min: 1,\n          stackClearing: true\n        }, {\n          id: \"rlineto\",\n          min: 2,\n          resetStack: true\n        }, {\n          id: \"hlineto\",\n          min: 1,\n          resetStack: true\n        }, {\n          id: \"vlineto\",\n          min: 1,\n          resetStack: true\n        }, {\n          id: \"rrcurveto\",\n          min: 6,\n          resetStack: true\n        }, null, {\n          id: \"callsubr\",\n          min: 1,\n          undefStack: true\n        }, {\n          id: \"return\",\n          min: 0,\n          undefStack: true\n        }, null, null, {\n          id: \"endchar\",\n          min: 0,\n          stackClearing: true\n        }, null, null, null, {\n          id: \"hstemhm\",\n          min: 2,\n          stackClearing: true,\n          stem: true\n        }, {\n          id: \"hintmask\",\n          min: 0,\n          stackClearing: true\n        }, {\n          id: \"cntrmask\",\n          min: 0,\n          stackClearing: true\n        }, {\n          id: \"rmoveto\",\n          min: 2,\n          stackClearing: true\n        }, {\n          id: \"hmoveto\",\n          min: 1,\n          stackClearing: true\n        }, {\n          id: \"vstemhm\",\n          min: 2,\n          stackClearing: true,\n          stem: true\n        }, {\n          id: \"rcurveline\",\n          min: 8,\n          resetStack: true\n        }, {\n          id: \"rlinecurve\",\n          min: 8,\n          resetStack: true\n        }, {\n          id: \"vvcurveto\",\n          min: 4,\n          resetStack: true\n        }, {\n          id: \"hhcurveto\",\n          min: 4,\n          resetStack: true\n        }, null, {\n          id: \"callgsubr\",\n          min: 1,\n          undefStack: true\n        }, {\n          id: \"vhcurveto\",\n          min: 4,\n          resetStack: true\n        }, {\n          id: \"hvcurveto\",\n          min: 4,\n          resetStack: true\n        }];\n        var CharstringValidationData12 = [null, null, null, {\n          id: \"and\",\n          min: 2,\n          stackDelta: -1\n        }, {\n          id: \"or\",\n          min: 2,\n          stackDelta: -1\n        }, {\n          id: \"not\",\n          min: 1,\n          stackDelta: 0\n        }, null, null, null, {\n          id: \"abs\",\n          min: 1,\n          stackDelta: 0\n        }, {\n          id: \"add\",\n          min: 2,\n          stackDelta: -1,\n          stackFn: function stackFn(stack, index) {\n            stack[index - 2] = stack[index - 2] + stack[index - 1];\n          }\n        }, {\n          id: \"sub\",\n          min: 2,\n          stackDelta: -1,\n          stackFn: function stackFn(stack, index) {\n            stack[index - 2] = stack[index - 2] - stack[index - 1];\n          }\n        }, {\n          id: \"div\",\n          min: 2,\n          stackDelta: -1,\n          stackFn: function stackFn(stack, index) {\n            stack[index - 2] = stack[index - 2] / stack[index - 1];\n          }\n        }, null, {\n          id: \"neg\",\n          min: 1,\n          stackDelta: 0,\n          stackFn: function stackFn(stack, index) {\n            stack[index - 1] = -stack[index - 1];\n          }\n        }, {\n          id: \"eq\",\n          min: 2,\n          stackDelta: -1\n        }, null, null, {\n          id: \"drop\",\n          min: 1,\n          stackDelta: -1\n        }, null, {\n          id: \"put\",\n          min: 2,\n          stackDelta: -2\n        }, {\n          id: \"get\",\n          min: 1,\n          stackDelta: 0\n        }, {\n          id: \"ifelse\",\n          min: 4,\n          stackDelta: -3\n        }, {\n          id: \"random\",\n          min: 0,\n          stackDelta: 1\n        }, {\n          id: \"mul\",\n          min: 2,\n          stackDelta: -1,\n          stackFn: function stackFn(stack, index) {\n            stack[index - 2] = stack[index - 2] * stack[index - 1];\n          }\n        }, null, {\n          id: \"sqrt\",\n          min: 1,\n          stackDelta: 0\n        }, {\n          id: \"dup\",\n          min: 1,\n          stackDelta: 1\n        }, {\n          id: \"exch\",\n          min: 2,\n          stackDelta: 0\n        }, {\n          id: \"index\",\n          min: 2,\n          stackDelta: 0\n        }, {\n          id: \"roll\",\n          min: 3,\n          stackDelta: -2\n        }, null, null, null, {\n          id: \"hflex\",\n          min: 7,\n          resetStack: true\n        }, {\n          id: \"flex\",\n          min: 13,\n          resetStack: true\n        }, {\n          id: \"hflex1\",\n          min: 9,\n          resetStack: true\n        }, {\n          id: \"flex1\",\n          min: 11,\n          resetStack: true\n        }];\n        var CFFParser = /*#__PURE__*/function () {\n          function CFFParser(file, properties, seacAnalysisEnabled) {\n            _classCallCheck(this, CFFParser);\n            this.bytes = file.getBytes();\n            this.properties = properties;\n            this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n          }\n          _createClass(CFFParser, [{\n            key: \"parse\",\n            value: function parse() {\n              var properties = this.properties;\n              var cff = new CFF();\n              this.cff = cff;\n              var header = this.parseHeader();\n              var nameIndex = this.parseIndex(header.endPos);\n              var topDictIndex = this.parseIndex(nameIndex.endPos);\n              var stringIndex = this.parseIndex(topDictIndex.endPos);\n              var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n              var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n              var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n              cff.header = header.obj;\n              cff.names = this.parseNameIndex(nameIndex.obj);\n              cff.strings = this.parseStringIndex(stringIndex.obj);\n              cff.topDict = topDict;\n              cff.globalSubrIndex = globalSubrIndex.obj;\n              this.parsePrivateDict(cff.topDict);\n              cff.isCIDFont = topDict.hasName(\"ROS\");\n              var charStringOffset = topDict.getByName(\"CharStrings\");\n              var charStringIndex = this.parseIndex(charStringOffset).obj;\n              var fontMatrix = topDict.getByName(\"FontMatrix\");\n              if (fontMatrix) {\n                properties.fontMatrix = fontMatrix;\n              }\n              var fontBBox = topDict.getByName(\"FontBBox\");\n              if (fontBBox) {\n                properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n                properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n                properties.ascentScaled = true;\n              }\n              var charset, encoding;\n              if (cff.isCIDFont) {\n                var fdArrayIndex = this.parseIndex(topDict.getByName(\"FDArray\")).obj;\n                for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n                  var dictRaw = fdArrayIndex.get(i);\n                  var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);\n                  this.parsePrivateDict(fontDict);\n                  cff.fdArray.push(fontDict);\n                }\n                encoding = null;\n                charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, true);\n                cff.fdSelect = this.parseFDSelect(topDict.getByName(\"FDSelect\"), charStringIndex.count);\n              } else {\n                charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, false);\n                encoding = this.parseEncoding(topDict.getByName(\"Encoding\"), properties, cff.strings, charset.charset);\n              }\n              cff.charset = charset;\n              cff.encoding = encoding;\n              var charStringsAndSeacs = this.parseCharStrings({\n                charStrings: charStringIndex,\n                localSubrIndex: topDict.privateDict.subrsIndex,\n                globalSubrIndex: globalSubrIndex.obj,\n                fdSelect: cff.fdSelect,\n                fdArray: cff.fdArray,\n                privateDict: topDict.privateDict\n              });\n              cff.charStrings = charStringsAndSeacs.charStrings;\n              cff.seacs = charStringsAndSeacs.seacs;\n              cff.widths = charStringsAndSeacs.widths;\n              return cff;\n            }\n          }, {\n            key: \"parseHeader\",\n            value: function parseHeader() {\n              var bytes = this.bytes;\n              var bytesLength = bytes.length;\n              var offset = 0;\n              while (offset < bytesLength && bytes[offset] !== 1) {\n                ++offset;\n              }\n              if (offset >= bytesLength) {\n                throw new _util.FormatError(\"Invalid CFF header\");\n              }\n              if (offset !== 0) {\n                (0, _util.info)(\"cff data is shifted\");\n                bytes = bytes.subarray(offset);\n                this.bytes = bytes;\n              }\n              var major = bytes[0];\n              var minor = bytes[1];\n              var hdrSize = bytes[2];\n              var offSize = bytes[3];\n              var header = new CFFHeader(major, minor, hdrSize, offSize);\n              return {\n                obj: header,\n                endPos: hdrSize\n              };\n            }\n          }, {\n            key: \"parseDict\",\n            value: function parseDict(dict) {\n              var pos = 0;\n              function parseOperand() {\n                var value = dict[pos++];\n                if (value === 30) {\n                  return parseFloatOperand();\n                } else if (value === 28) {\n                  value = dict[pos++];\n                  value = (value << 24 | dict[pos++] << 16) >> 16;\n                  return value;\n                } else if (value === 29) {\n                  value = dict[pos++];\n                  value = value << 8 | dict[pos++];\n                  value = value << 8 | dict[pos++];\n                  value = value << 8 | dict[pos++];\n                  return value;\n                } else if (value >= 32 && value <= 246) {\n                  return value - 139;\n                } else if (value >= 247 && value <= 250) {\n                  return (value - 247) * 256 + dict[pos++] + 108;\n                } else if (value >= 251 && value <= 254) {\n                  return -((value - 251) * 256) - dict[pos++] - 108;\n                }\n                (0, _util.warn)('CFFParser_parseDict: \"' + value + '\" is a reserved command.');\n                return NaN;\n              }\n              function parseFloatOperand() {\n                var str = \"\";\n                var eof = 15;\n                var lookup = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"];\n                var length = dict.length;\n                while (pos < length) {\n                  var b = dict[pos++];\n                  var b1 = b >> 4;\n                  var b2 = b & 15;\n                  if (b1 === eof) {\n                    break;\n                  }\n                  str += lookup[b1];\n                  if (b2 === eof) {\n                    break;\n                  }\n                  str += lookup[b2];\n                }\n                return parseFloat(str);\n              }\n              var operands = [];\n              var entries = [];\n              pos = 0;\n              var end = dict.length;\n              while (pos < end) {\n                var b = dict[pos];\n                if (b <= 21) {\n                  if (b === 12) {\n                    b = b << 8 | dict[++pos];\n                  }\n                  entries.push([b, operands]);\n                  operands = [];\n                  ++pos;\n                } else {\n                  operands.push(parseOperand());\n                }\n              }\n              return entries;\n            }\n          }, {\n            key: \"parseIndex\",\n            value: function parseIndex(pos) {\n              var cffIndex = new CFFIndex();\n              var bytes = this.bytes;\n              var count = bytes[pos++] << 8 | bytes[pos++];\n              var offsets = [];\n              var end = pos;\n              var i, ii;\n              if (count !== 0) {\n                var offsetSize = bytes[pos++];\n                var startPos = pos + (count + 1) * offsetSize - 1;\n                for (i = 0, ii = count + 1; i < ii; ++i) {\n                  var offset = 0;\n                  for (var j = 0; j < offsetSize; ++j) {\n                    offset <<= 8;\n                    offset += bytes[pos++];\n                  }\n                  offsets.push(startPos + offset);\n                }\n                end = offsets[count];\n              }\n              for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n                var offsetStart = offsets[i];\n                var offsetEnd = offsets[i + 1];\n                cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n              }\n              return {\n                obj: cffIndex,\n                endPos: end\n              };\n            }\n          }, {\n            key: \"parseNameIndex\",\n            value: function parseNameIndex(index) {\n              var names = [];\n              for (var i = 0, ii = index.count; i < ii; ++i) {\n                var name = index.get(i);\n                names.push((0, _util.bytesToString)(name));\n              }\n              return names;\n            }\n          }, {\n            key: \"parseStringIndex\",\n            value: function parseStringIndex(index) {\n              var strings = new CFFStrings();\n              for (var i = 0, ii = index.count; i < ii; ++i) {\n                var data = index.get(i);\n                strings.add((0, _util.bytesToString)(data));\n              }\n              return strings;\n            }\n          }, {\n            key: \"createDict\",\n            value: function createDict(Type, dict, strings) {\n              var cffDict = new Type(strings);\n              for (var i = 0, ii = dict.length; i < ii; ++i) {\n                var pair = dict[i];\n                var key = pair[0];\n                var value = pair[1];\n                cffDict.setByKey(key, value);\n              }\n              return cffDict;\n            }\n          }, {\n            key: \"parseCharString\",\n            value: function parseCharString(state, data, localSubrIndex, globalSubrIndex) {\n              if (!data || state.callDepth > MAX_SUBR_NESTING) {\n                return false;\n              }\n              var stackSize = state.stackSize;\n              var stack = state.stack;\n              var length = data.length;\n              for (var j = 0; j < length;) {\n                var value = data[j++];\n                var validationCommand = null;\n                if (value === 12) {\n                  var q = data[j++];\n                  if (q === 0) {\n                    data[j - 2] = 139;\n                    data[j - 1] = 22;\n                    stackSize = 0;\n                  } else {\n                    validationCommand = CharstringValidationData12[q];\n                  }\n                } else if (value === 28) {\n                  stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;\n                  j += 2;\n                  stackSize++;\n                } else if (value === 14) {\n                  if (stackSize >= 4) {\n                    stackSize -= 4;\n                    if (this.seacAnalysisEnabled) {\n                      state.seac = stack.slice(stackSize, stackSize + 4);\n                      return false;\n                    }\n                  }\n                  validationCommand = CharstringValidationData[value];\n                } else if (value >= 32 && value <= 246) {\n                  stack[stackSize] = value - 139;\n                  stackSize++;\n                } else if (value >= 247 && value <= 254) {\n                  stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;\n                  j++;\n                  stackSize++;\n                } else if (value === 255) {\n                  stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;\n                  j += 4;\n                  stackSize++;\n                } else if (value === 19 || value === 20) {\n                  state.hints += stackSize >> 1;\n                  j += state.hints + 7 >> 3;\n                  stackSize %= 2;\n                  validationCommand = CharstringValidationData[value];\n                } else if (value === 10 || value === 29) {\n                  var subrsIndex = void 0;\n                  if (value === 10) {\n                    subrsIndex = localSubrIndex;\n                  } else {\n                    subrsIndex = globalSubrIndex;\n                  }\n                  if (!subrsIndex) {\n                    validationCommand = CharstringValidationData[value];\n                    (0, _util.warn)(\"Missing subrsIndex for \" + validationCommand.id);\n                    return false;\n                  }\n                  var bias = 32768;\n                  if (subrsIndex.count < 1240) {\n                    bias = 107;\n                  } else if (subrsIndex.count < 33900) {\n                    bias = 1131;\n                  }\n                  var subrNumber = stack[--stackSize] + bias;\n                  if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {\n                    validationCommand = CharstringValidationData[value];\n                    (0, _util.warn)(\"Out of bounds subrIndex for \" + validationCommand.id);\n                    return false;\n                  }\n                  state.stackSize = stackSize;\n                  state.callDepth++;\n                  var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);\n                  if (!valid) {\n                    return false;\n                  }\n                  state.callDepth--;\n                  stackSize = state.stackSize;\n                  continue;\n                } else if (value === 11) {\n                  state.stackSize = stackSize;\n                  return true;\n                } else if (value === 0 && j === data.length) {\n                  data[j - 1] = 14;\n                  validationCommand = CharstringValidationData[14];\n                } else {\n                  validationCommand = CharstringValidationData[value];\n                }\n                if (validationCommand) {\n                  if (validationCommand.stem) {\n                    state.hints += stackSize >> 1;\n                    if (value === 3 || value === 23) {\n                      state.hasVStems = true;\n                    } else if (state.hasVStems && (value === 1 || value === 18)) {\n                      (0, _util.warn)(\"CFF stem hints are in wrong order\");\n                      data[j - 1] = value === 1 ? 3 : 23;\n                    }\n                  }\n                  if (\"min\" in validationCommand) {\n                    if (!state.undefStack && stackSize < validationCommand.min) {\n                      (0, _util.warn)(\"Not enough parameters for \" + validationCommand.id + \"; actual: \" + stackSize + \", expected: \" + validationCommand.min);\n                      if (stackSize === 0) {\n                        data[j - 1] = 14;\n                        return true;\n                      }\n                      return false;\n                    }\n                  }\n                  if (state.firstStackClearing && validationCommand.stackClearing) {\n                    state.firstStackClearing = false;\n                    stackSize -= validationCommand.min;\n                    if (stackSize >= 2 && validationCommand.stem) {\n                      stackSize %= 2;\n                    } else if (stackSize > 1) {\n                      (0, _util.warn)(\"Found too many parameters for stack-clearing command\");\n                    }\n                    if (stackSize > 0) {\n                      state.width = stack[stackSize - 1];\n                    }\n                  }\n                  if (\"stackDelta\" in validationCommand) {\n                    if (\"stackFn\" in validationCommand) {\n                      validationCommand.stackFn(stack, stackSize);\n                    }\n                    stackSize += validationCommand.stackDelta;\n                  } else if (validationCommand.stackClearing) {\n                    stackSize = 0;\n                  } else if (validationCommand.resetStack) {\n                    stackSize = 0;\n                    state.undefStack = false;\n                  } else if (validationCommand.undefStack) {\n                    stackSize = 0;\n                    state.undefStack = true;\n                    state.firstStackClearing = false;\n                  }\n                }\n              }\n              state.stackSize = stackSize;\n              return true;\n            }\n          }, {\n            key: \"parseCharStrings\",\n            value: function parseCharStrings(_ref58) {\n              var charStrings = _ref58.charStrings,\n                localSubrIndex = _ref58.localSubrIndex,\n                globalSubrIndex = _ref58.globalSubrIndex,\n                fdSelect = _ref58.fdSelect,\n                fdArray = _ref58.fdArray,\n                privateDict = _ref58.privateDict;\n              var seacs = [];\n              var widths = [];\n              var count = charStrings.count;\n              for (var i = 0; i < count; i++) {\n                var charstring = charStrings.get(i);\n                var state = {\n                  callDepth: 0,\n                  stackSize: 0,\n                  stack: [],\n                  undefStack: true,\n                  hints: 0,\n                  firstStackClearing: true,\n                  seac: null,\n                  width: null,\n                  hasVStems: false\n                };\n                var valid = true;\n                var localSubrToUse = null;\n                var privateDictToUse = privateDict;\n                if (fdSelect && fdArray.length) {\n                  var fdIndex = fdSelect.getFDIndex(i);\n                  if (fdIndex === -1) {\n                    (0, _util.warn)(\"Glyph index is not in fd select.\");\n                    valid = false;\n                  }\n                  if (fdIndex >= fdArray.length) {\n                    (0, _util.warn)(\"Invalid fd index for glyph index.\");\n                    valid = false;\n                  }\n                  if (valid) {\n                    privateDictToUse = fdArray[fdIndex].privateDict;\n                    localSubrToUse = privateDictToUse.subrsIndex;\n                  }\n                } else if (localSubrIndex) {\n                  localSubrToUse = localSubrIndex;\n                }\n                if (valid) {\n                  valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);\n                }\n                if (state.width !== null) {\n                  var nominalWidth = privateDictToUse.getByName(\"nominalWidthX\");\n                  widths[i] = nominalWidth + state.width;\n                } else {\n                  var defaultWidth = privateDictToUse.getByName(\"defaultWidthX\");\n                  widths[i] = defaultWidth;\n                }\n                if (state.seac !== null) {\n                  seacs[i] = state.seac;\n                }\n                if (!valid) {\n                  charStrings.set(i, new Uint8Array([14]));\n                }\n              }\n              return {\n                charStrings: charStrings,\n                seacs: seacs,\n                widths: widths\n              };\n            }\n          }, {\n            key: \"emptyPrivateDictionary\",\n            value: function emptyPrivateDictionary(parentDict) {\n              var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n              parentDict.setByKey(18, [0, 0]);\n              parentDict.privateDict = privateDict;\n            }\n          }, {\n            key: \"parsePrivateDict\",\n            value: function parsePrivateDict(parentDict) {\n              if (!parentDict.hasName(\"Private\")) {\n                this.emptyPrivateDictionary(parentDict);\n                return;\n              }\n              var privateOffset = parentDict.getByName(\"Private\");\n              if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n                parentDict.removeByName(\"Private\");\n                return;\n              }\n              var size = privateOffset[0];\n              var offset = privateOffset[1];\n              if (size === 0 || offset >= this.bytes.length) {\n                this.emptyPrivateDictionary(parentDict);\n                return;\n              }\n              var privateDictEnd = offset + size;\n              var dictData = this.bytes.subarray(offset, privateDictEnd);\n              var dict = this.parseDict(dictData);\n              var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);\n              parentDict.privateDict = privateDict;\n              if (!privateDict.getByName(\"Subrs\")) {\n                return;\n              }\n              var subrsOffset = privateDict.getByName(\"Subrs\");\n              var relativeOffset = offset + subrsOffset;\n              if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n                this.emptyPrivateDictionary(parentDict);\n                return;\n              }\n              var subrsIndex = this.parseIndex(relativeOffset);\n              privateDict.subrsIndex = subrsIndex.obj;\n            }\n          }, {\n            key: \"parseCharsets\",\n            value: function parseCharsets(pos, length, strings, cid) {\n              if (pos === 0) {\n                return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);\n              } else if (pos === 1) {\n                return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);\n              } else if (pos === 2) {\n                return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);\n              }\n              var bytes = this.bytes;\n              var start = pos;\n              var format = bytes[pos++];\n              var charset = [cid ? 0 : \".notdef\"];\n              var id, count, i;\n              length -= 1;\n              switch (format) {\n                case 0:\n                  for (i = 0; i < length; i++) {\n                    id = bytes[pos++] << 8 | bytes[pos++];\n                    charset.push(cid ? id : strings.get(id));\n                  }\n                  break;\n                case 1:\n                  while (charset.length <= length) {\n                    id = bytes[pos++] << 8 | bytes[pos++];\n                    count = bytes[pos++];\n                    for (i = 0; i <= count; i++) {\n                      charset.push(cid ? id++ : strings.get(id++));\n                    }\n                  }\n                  break;\n                case 2:\n                  while (charset.length <= length) {\n                    id = bytes[pos++] << 8 | bytes[pos++];\n                    count = bytes[pos++] << 8 | bytes[pos++];\n                    for (i = 0; i <= count; i++) {\n                      charset.push(cid ? id++ : strings.get(id++));\n                    }\n                  }\n                  break;\n                default:\n                  throw new _util.FormatError(\"Unknown charset format\");\n              }\n              var end = pos;\n              var raw = bytes.subarray(start, end);\n              return new CFFCharset(false, format, charset, raw);\n            }\n          }, {\n            key: \"parseEncoding\",\n            value: function parseEncoding(pos, properties, strings, charset) {\n              var encoding = Object.create(null);\n              var bytes = this.bytes;\n              var predefined = false;\n              var format, i, ii;\n              var raw = null;\n              function readSupplement() {\n                var supplementsCount = bytes[pos++];\n                for (i = 0; i < supplementsCount; i++) {\n                  var code = bytes[pos++];\n                  var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n                  encoding[code] = charset.indexOf(strings.get(sid));\n                }\n              }\n              if (pos === 0 || pos === 1) {\n                predefined = true;\n                format = pos;\n                var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;\n                for (i = 0, ii = charset.length; i < ii; i++) {\n                  var index = baseEncoding.indexOf(charset[i]);\n                  if (index !== -1) {\n                    encoding[index] = i;\n                  }\n                }\n              } else {\n                var dataStart = pos;\n                format = bytes[pos++];\n                switch (format & 0x7f) {\n                  case 0:\n                    var glyphsCount = bytes[pos++];\n                    for (i = 1; i <= glyphsCount; i++) {\n                      encoding[bytes[pos++]] = i;\n                    }\n                    break;\n                  case 1:\n                    var rangesCount = bytes[pos++];\n                    var gid = 1;\n                    for (i = 0; i < rangesCount; i++) {\n                      var start = bytes[pos++];\n                      var left = bytes[pos++];\n                      for (var j = start; j <= start + left; j++) {\n                        encoding[j] = gid++;\n                      }\n                    }\n                    break;\n                  default:\n                    throw new _util.FormatError(\"Unknown encoding format: \".concat(format, \" in CFF\"));\n                }\n                var dataEnd = pos;\n                if (format & 0x80) {\n                  bytes[dataStart] &= 0x7f;\n                  readSupplement();\n                }\n                raw = bytes.subarray(dataStart, dataEnd);\n              }\n              format &= 0x7f;\n              return new CFFEncoding(predefined, format, encoding, raw);\n            }\n          }, {\n            key: \"parseFDSelect\",\n            value: function parseFDSelect(pos, length) {\n              var bytes = this.bytes;\n              var format = bytes[pos++];\n              var fdSelect = [];\n              var i;\n              switch (format) {\n                case 0:\n                  for (i = 0; i < length; ++i) {\n                    var id = bytes[pos++];\n                    fdSelect.push(id);\n                  }\n                  break;\n                case 3:\n                  var rangesCount = bytes[pos++] << 8 | bytes[pos++];\n                  for (i = 0; i < rangesCount; ++i) {\n                    var first = bytes[pos++] << 8 | bytes[pos++];\n                    if (i === 0 && first !== 0) {\n                      (0, _util.warn)(\"parseFDSelect: The first range must have a first GID of 0\" + \" -- trying to recover.\");\n                      first = 0;\n                    }\n                    var fdIndex = bytes[pos++];\n                    var next = bytes[pos] << 8 | bytes[pos + 1];\n                    for (var j = first; j < next; ++j) {\n                      fdSelect.push(fdIndex);\n                    }\n                  }\n                  pos += 2;\n                  break;\n                default:\n                  throw new _util.FormatError(\"parseFDSelect: Unknown format \\\"\".concat(format, \"\\\".\"));\n              }\n              if (fdSelect.length !== length) {\n                throw new _util.FormatError(\"parseFDSelect: Invalid font data.\");\n              }\n              return new CFFFDSelect(format, fdSelect);\n            }\n          }]);\n          return CFFParser;\n        }();\n        exports.CFFParser = CFFParser;\n        var CFF = /*#__PURE__*/function () {\n          function CFF() {\n            _classCallCheck(this, CFF);\n            this.header = null;\n            this.names = [];\n            this.topDict = null;\n            this.strings = new CFFStrings();\n            this.globalSubrIndex = null;\n            this.encoding = null;\n            this.charset = null;\n            this.charStrings = null;\n            this.fdArray = [];\n            this.fdSelect = null;\n            this.isCIDFont = false;\n          }\n          _createClass(CFF, [{\n            key: \"duplicateFirstGlyph\",\n            value: function duplicateFirstGlyph() {\n              if (this.charStrings.count >= 65535) {\n                (0, _util.warn)(\"Not enough space in charstrings to duplicate first glyph.\");\n                return;\n              }\n              var glyphZero = this.charStrings.get(0);\n              this.charStrings.add(glyphZero);\n              if (this.isCIDFont) {\n                this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n              }\n            }\n          }, {\n            key: \"hasGlyphId\",\n            value: function hasGlyphId(id) {\n              if (id < 0 || id >= this.charStrings.count) {\n                return false;\n              }\n              var glyph = this.charStrings.get(id);\n              return glyph.length > 0;\n            }\n          }]);\n          return CFF;\n        }();\n        exports.CFF = CFF;\n        var CFFHeader = function CFFHeader(major, minor, hdrSize, offSize) {\n          _classCallCheck(this, CFFHeader);\n          this.major = major;\n          this.minor = minor;\n          this.hdrSize = hdrSize;\n          this.offSize = offSize;\n        };\n        exports.CFFHeader = CFFHeader;\n        var CFFStrings = /*#__PURE__*/function () {\n          function CFFStrings() {\n            _classCallCheck(this, CFFStrings);\n            this.strings = [];\n          }\n          _createClass(CFFStrings, [{\n            key: \"get\",\n            value: function get(index) {\n              if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n                return CFFStandardStrings[index];\n              }\n              if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n                return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n              }\n              return CFFStandardStrings[0];\n            }\n          }, {\n            key: \"getSID\",\n            value: function getSID(str) {\n              var index = CFFStandardStrings.indexOf(str);\n              if (index !== -1) {\n                return index;\n              }\n              index = this.strings.indexOf(str);\n              if (index !== -1) {\n                return index + NUM_STANDARD_CFF_STRINGS;\n              }\n              return -1;\n            }\n          }, {\n            key: \"add\",\n            value: function add(value) {\n              this.strings.push(value);\n            }\n          }, {\n            key: \"count\",\n            get: function get() {\n              return this.strings.length;\n            }\n          }]);\n          return CFFStrings;\n        }();\n        exports.CFFStrings = CFFStrings;\n        var CFFIndex = /*#__PURE__*/function () {\n          function CFFIndex() {\n            _classCallCheck(this, CFFIndex);\n            this.objects = [];\n            this.length = 0;\n          }\n          _createClass(CFFIndex, [{\n            key: \"add\",\n            value: function add(data) {\n              this.length += data.length;\n              this.objects.push(data);\n            }\n          }, {\n            key: \"set\",\n            value: function set(index, data) {\n              this.length += data.length - this.objects[index].length;\n              this.objects[index] = data;\n            }\n          }, {\n            key: \"get\",\n            value: function get(index) {\n              return this.objects[index];\n            }\n          }, {\n            key: \"count\",\n            get: function get() {\n              return this.objects.length;\n            }\n          }]);\n          return CFFIndex;\n        }();\n        exports.CFFIndex = CFFIndex;\n        var CFFDict = /*#__PURE__*/function () {\n          function CFFDict(tables, strings) {\n            _classCallCheck(this, CFFDict);\n            this.keyToNameMap = tables.keyToNameMap;\n            this.nameToKeyMap = tables.nameToKeyMap;\n            this.defaults = tables.defaults;\n            this.types = tables.types;\n            this.opcodes = tables.opcodes;\n            this.order = tables.order;\n            this.strings = strings;\n            this.values = Object.create(null);\n          }\n          _createClass(CFFDict, [{\n            key: \"setByKey\",\n            value: function setByKey(key, value) {\n              if (!(key in this.keyToNameMap)) {\n                return false;\n              }\n              var valueLength = value.length;\n              if (valueLength === 0) {\n                return true;\n              }\n              for (var i = 0; i < valueLength; i++) {\n                if (isNaN(value[i])) {\n                  (0, _util.warn)('Invalid CFFDict value: \"' + value + '\" for key \"' + key + '\".');\n                  return true;\n                }\n              }\n              var type = this.types[key];\n              if (type === \"num\" || type === \"sid\" || type === \"offset\") {\n                value = value[0];\n              }\n              this.values[key] = value;\n              return true;\n            }\n          }, {\n            key: \"setByName\",\n            value: function setByName(name, value) {\n              if (!(name in this.nameToKeyMap)) {\n                throw new _util.FormatError(\"Invalid dictionary name \\\"\".concat(name, \"\\\"\"));\n              }\n              this.values[this.nameToKeyMap[name]] = value;\n            }\n          }, {\n            key: \"hasName\",\n            value: function hasName(name) {\n              return this.nameToKeyMap[name] in this.values;\n            }\n          }, {\n            key: \"getByName\",\n            value: function getByName(name) {\n              if (!(name in this.nameToKeyMap)) {\n                throw new _util.FormatError(\"Invalid dictionary name \".concat(name, \"\\\"\"));\n              }\n              var key = this.nameToKeyMap[name];\n              if (!(key in this.values)) {\n                return this.defaults[key];\n              }\n              return this.values[key];\n            }\n          }, {\n            key: \"removeByName\",\n            value: function removeByName(name) {\n              delete this.values[this.nameToKeyMap[name]];\n            }\n          }], [{\n            key: \"createTables\",\n            value: function createTables(layout) {\n              var tables = {\n                keyToNameMap: {},\n                nameToKeyMap: {},\n                defaults: {},\n                types: {},\n                opcodes: {},\n                order: []\n              };\n              for (var i = 0, ii = layout.length; i < ii; ++i) {\n                var entry = layout[i];\n                var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];\n                tables.keyToNameMap[key] = entry[1];\n                tables.nameToKeyMap[entry[1]] = key;\n                tables.types[key] = entry[2];\n                tables.defaults[key] = entry[3];\n                tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n                tables.order.push(key);\n              }\n              return tables;\n            }\n          }]);\n          return CFFDict;\n        }();\n        var CFFTopDictLayout = [[[12, 30], \"ROS\", [\"sid\", \"sid\", \"num\"], null], [[12, 20], \"SyntheticBase\", \"num\", null], [0, \"version\", \"sid\", null], [1, \"Notice\", \"sid\", null], [[12, 0], \"Copyright\", \"sid\", null], [2, \"FullName\", \"sid\", null], [3, \"FamilyName\", \"sid\", null], [4, \"Weight\", \"sid\", null], [[12, 1], \"isFixedPitch\", \"num\", 0], [[12, 2], \"ItalicAngle\", \"num\", 0], [[12, 3], \"UnderlinePosition\", \"num\", -100], [[12, 4], \"UnderlineThickness\", \"num\", 50], [[12, 5], \"PaintType\", \"num\", 0], [[12, 6], \"CharstringType\", \"num\", 2], [[12, 7], \"FontMatrix\", [\"num\", \"num\", \"num\", \"num\", \"num\", \"num\"], [0.001, 0, 0, 0.001, 0, 0]], [13, \"UniqueID\", \"num\", null], [5, \"FontBBox\", [\"num\", \"num\", \"num\", \"num\"], [0, 0, 0, 0]], [[12, 8], \"StrokeWidth\", \"num\", 0], [14, \"XUID\", \"array\", null], [15, \"charset\", \"offset\", 0], [16, \"Encoding\", \"offset\", 0], [17, \"CharStrings\", \"offset\", 0], [18, \"Private\", [\"offset\", \"offset\"], null], [[12, 21], \"PostScript\", \"sid\", null], [[12, 22], \"BaseFontName\", \"sid\", null], [[12, 23], \"BaseFontBlend\", \"delta\", null], [[12, 31], \"CIDFontVersion\", \"num\", 0], [[12, 32], \"CIDFontRevision\", \"num\", 0], [[12, 33], \"CIDFontType\", \"num\", 0], [[12, 34], \"CIDCount\", \"num\", 8720], [[12, 35], \"UIDBase\", \"num\", null], [[12, 37], \"FDSelect\", \"offset\", null], [[12, 36], \"FDArray\", \"offset\", null], [[12, 38], \"FontName\", \"sid\", null]];\n        var CFFTopDict = /*#__PURE__*/function (_CFFDict) {\n          _inherits(CFFTopDict, _CFFDict);\n          _createClass(CFFTopDict, null, [{\n            key: \"tables\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"tables\", this.createTables(CFFTopDictLayout));\n            }\n          }]);\n          function CFFTopDict(strings) {\n            var _this78;\n            _classCallCheck(this, CFFTopDict);\n            _this78 = _possibleConstructorReturn(this, _getPrototypeOf(CFFTopDict).call(this, CFFTopDict.tables, strings));\n            _this78.privateDict = null;\n            return _this78;\n          }\n          return CFFTopDict;\n        }(CFFDict);\n        exports.CFFTopDict = CFFTopDict;\n        var CFFPrivateDictLayout = [[6, \"BlueValues\", \"delta\", null], [7, \"OtherBlues\", \"delta\", null], [8, \"FamilyBlues\", \"delta\", null], [9, \"FamilyOtherBlues\", \"delta\", null], [[12, 9], \"BlueScale\", \"num\", 0.039625], [[12, 10], \"BlueShift\", \"num\", 7], [[12, 11], \"BlueFuzz\", \"num\", 1], [10, \"StdHW\", \"num\", null], [11, \"StdVW\", \"num\", null], [[12, 12], \"StemSnapH\", \"delta\", null], [[12, 13], \"StemSnapV\", \"delta\", null], [[12, 14], \"ForceBold\", \"num\", 0], [[12, 17], \"LanguageGroup\", \"num\", 0], [[12, 18], \"ExpansionFactor\", \"num\", 0.06], [[12, 19], \"initialRandomSeed\", \"num\", 0], [20, \"defaultWidthX\", \"num\", 0], [21, \"nominalWidthX\", \"num\", 0], [19, \"Subrs\", \"offset\", null]];\n        var CFFPrivateDict = /*#__PURE__*/function (_CFFDict2) {\n          _inherits(CFFPrivateDict, _CFFDict2);\n          _createClass(CFFPrivateDict, null, [{\n            key: \"tables\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"tables\", this.createTables(CFFPrivateDictLayout));\n            }\n          }]);\n          function CFFPrivateDict(strings) {\n            var _this79;\n            _classCallCheck(this, CFFPrivateDict);\n            _this79 = _possibleConstructorReturn(this, _getPrototypeOf(CFFPrivateDict).call(this, CFFPrivateDict.tables, strings));\n            _this79.subrsIndex = null;\n            return _this79;\n          }\n          return CFFPrivateDict;\n        }(CFFDict);\n        exports.CFFPrivateDict = CFFPrivateDict;\n        var CFFCharsetPredefinedTypes = {\n          ISO_ADOBE: 0,\n          EXPERT: 1,\n          EXPERT_SUBSET: 2\n        };\n        var CFFCharset = function CFFCharset(predefined, format, charset, raw) {\n          _classCallCheck(this, CFFCharset);\n          this.predefined = predefined;\n          this.format = format;\n          this.charset = charset;\n          this.raw = raw;\n        };\n        exports.CFFCharset = CFFCharset;\n        var CFFEncoding = function CFFEncoding(predefined, format, encoding, raw) {\n          _classCallCheck(this, CFFEncoding);\n          this.predefined = predefined;\n          this.format = format;\n          this.encoding = encoding;\n          this.raw = raw;\n        };\n        var CFFFDSelect = /*#__PURE__*/function () {\n          function CFFFDSelect(format, fdSelect) {\n            _classCallCheck(this, CFFFDSelect);\n            this.format = format;\n            this.fdSelect = fdSelect;\n          }\n          _createClass(CFFFDSelect, [{\n            key: \"getFDIndex\",\n            value: function getFDIndex(glyphIndex) {\n              if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n                return -1;\n              }\n              return this.fdSelect[glyphIndex];\n            }\n          }]);\n          return CFFFDSelect;\n        }();\n        exports.CFFFDSelect = CFFFDSelect;\n        var CFFOffsetTracker = /*#__PURE__*/function () {\n          function CFFOffsetTracker() {\n            _classCallCheck(this, CFFOffsetTracker);\n            this.offsets = Object.create(null);\n          }\n          _createClass(CFFOffsetTracker, [{\n            key: \"isTracking\",\n            value: function isTracking(key) {\n              return key in this.offsets;\n            }\n          }, {\n            key: \"track\",\n            value: function track(key, location) {\n              if (key in this.offsets) {\n                throw new _util.FormatError(\"Already tracking location of \".concat(key));\n              }\n              this.offsets[key] = location;\n            }\n          }, {\n            key: \"offset\",\n            value: function offset(value) {\n              for (var key in this.offsets) {\n                this.offsets[key] += value;\n              }\n            }\n          }, {\n            key: \"setEntryLocation\",\n            value: function setEntryLocation(key, values, output) {\n              if (!(key in this.offsets)) {\n                throw new _util.FormatError(\"Not tracking location of \".concat(key));\n              }\n              var data = output.data;\n              var dataOffset = this.offsets[key];\n              var size = 5;\n              for (var i = 0, ii = values.length; i < ii; ++i) {\n                var offset0 = i * size + dataOffset;\n                var offset1 = offset0 + 1;\n                var offset2 = offset0 + 2;\n                var offset3 = offset0 + 3;\n                var offset4 = offset0 + 4;\n                if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {\n                  throw new _util.FormatError(\"writing to an offset that is not empty\");\n                }\n                var value = values[i];\n                data[offset0] = 0x1d;\n                data[offset1] = value >> 24 & 0xff;\n                data[offset2] = value >> 16 & 0xff;\n                data[offset3] = value >> 8 & 0xff;\n                data[offset4] = value & 0xff;\n              }\n            }\n          }]);\n          return CFFOffsetTracker;\n        }();\n        var CFFCompiler = /*#__PURE__*/function () {\n          function CFFCompiler(cff) {\n            _classCallCheck(this, CFFCompiler);\n            this.cff = cff;\n          }\n          _createClass(CFFCompiler, [{\n            key: \"compile\",\n            value: function compile() {\n              var cff = this.cff;\n              var output = {\n                data: [],\n                length: 0,\n                add: function add(data) {\n                  this.data = this.data.concat(data);\n                  this.length = this.data.length;\n                }\n              };\n              var header = this.compileHeader(cff.header);\n              output.add(header);\n              var nameIndex = this.compileNameIndex(cff.names);\n              output.add(nameIndex);\n              if (cff.isCIDFont) {\n                if (cff.topDict.hasName(\"FontMatrix\")) {\n                  var base = cff.topDict.getByName(\"FontMatrix\");\n                  cff.topDict.removeByName(\"FontMatrix\");\n                  for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n                    var subDict = cff.fdArray[i];\n                    var matrix = base.slice(0);\n                    if (subDict.hasName(\"FontMatrix\")) {\n                      matrix = _util.Util.transform(matrix, subDict.getByName(\"FontMatrix\"));\n                    }\n                    subDict.setByName(\"FontMatrix\", matrix);\n                  }\n                }\n              }\n              var xuid = cff.topDict.getByName(\"XUID\");\n              if (xuid && xuid.length > 16) {\n                cff.topDict.removeByName(\"XUID\");\n              }\n              cff.topDict.setByName(\"charset\", 0);\n              var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);\n              output.add(compiled.output);\n              var topDictTracker = compiled.trackers[0];\n              var stringIndex = this.compileStringIndex(cff.strings.strings);\n              output.add(stringIndex);\n              var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n              output.add(globalSubrIndex);\n              if (cff.encoding && cff.topDict.hasName(\"Encoding\")) {\n                if (cff.encoding.predefined) {\n                  topDictTracker.setEntryLocation(\"Encoding\", [cff.encoding.format], output);\n                } else {\n                  var encoding = this.compileEncoding(cff.encoding);\n                  topDictTracker.setEntryLocation(\"Encoding\", [output.length], output);\n                  output.add(encoding);\n                }\n              }\n              var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);\n              topDictTracker.setEntryLocation(\"charset\", [output.length], output);\n              output.add(charset);\n              var charStrings = this.compileCharStrings(cff.charStrings);\n              topDictTracker.setEntryLocation(\"CharStrings\", [output.length], output);\n              output.add(charStrings);\n              if (cff.isCIDFont) {\n                topDictTracker.setEntryLocation(\"FDSelect\", [output.length], output);\n                var fdSelect = this.compileFDSelect(cff.fdSelect);\n                output.add(fdSelect);\n                compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n                topDictTracker.setEntryLocation(\"FDArray\", [output.length], output);\n                output.add(compiled.output);\n                var fontDictTrackers = compiled.trackers;\n                this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n              }\n              this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n              output.add([0]);\n              return output.data;\n            }\n          }, {\n            key: \"encodeNumber\",\n            value: function encodeNumber(value) {\n              if (Number.isInteger(value)) {\n                return this.encodeInteger(value);\n              }\n              return this.encodeFloat(value);\n            }\n          }, {\n            key: \"encodeFloat\",\n            value: function encodeFloat(num) {\n              var value = num.toString();\n              var m = CFFCompiler.EncodeFloatRegExp.exec(value);\n              if (m) {\n                var epsilon = parseFloat(\"1e\" + ((m[2] ? +m[2] : 0) + m[1].length));\n                value = (Math.round(num * epsilon) / epsilon).toString();\n              }\n              var nibbles = \"\";\n              var i, ii;\n              for (i = 0, ii = value.length; i < ii; ++i) {\n                var a = value[i];\n                if (a === \"e\") {\n                  nibbles += value[++i] === \"-\" ? \"c\" : \"b\";\n                } else if (a === \".\") {\n                  nibbles += \"a\";\n                } else if (a === \"-\") {\n                  nibbles += \"e\";\n                } else {\n                  nibbles += a;\n                }\n              }\n              nibbles += nibbles.length & 1 ? \"f\" : \"ff\";\n              var out = [30];\n              for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n                out.push(parseInt(nibbles.substring(i, i + 2), 16));\n              }\n              return out;\n            }\n          }, {\n            key: \"encodeInteger\",\n            value: function encodeInteger(value) {\n              var code;\n              if (value >= -107 && value <= 107) {\n                code = [value + 139];\n              } else if (value >= 108 && value <= 1131) {\n                value -= 108;\n                code = [(value >> 8) + 247, value & 0xff];\n              } else if (value >= -1131 && value <= -108) {\n                value = -value - 108;\n                code = [(value >> 8) + 251, value & 0xff];\n              } else if (value >= -32768 && value <= 32767) {\n                code = [0x1c, value >> 8 & 0xff, value & 0xff];\n              } else {\n                code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];\n              }\n              return code;\n            }\n          }, {\n            key: \"compileHeader\",\n            value: function compileHeader(header) {\n              return [header.major, header.minor, 4, header.offSize];\n            }\n          }, {\n            key: \"compileNameIndex\",\n            value: function compileNameIndex(names) {\n              var nameIndex = new CFFIndex();\n              for (var i = 0, ii = names.length; i < ii; ++i) {\n                var name = names[i];\n                var length = Math.min(name.length, 127);\n                var sanitizedName = new Array(length);\n                for (var j = 0; j < length; j++) {\n                  var char = name[j];\n                  if (char < \"!\" || char > \"~\" || char === \"[\" || char === \"]\" || char === \"(\" || char === \")\" || char === \"{\" || char === \"}\" || char === \"<\" || char === \">\" || char === \"/\" || char === \"%\") {\n                    char = \"_\";\n                  }\n                  sanitizedName[j] = char;\n                }\n                sanitizedName = sanitizedName.join(\"\");\n                if (sanitizedName === \"\") {\n                  sanitizedName = \"Bad_Font_Name\";\n                }\n                nameIndex.add((0, _util.stringToBytes)(sanitizedName));\n              }\n              return this.compileIndex(nameIndex);\n            }\n          }, {\n            key: \"compileTopDicts\",\n            value: function compileTopDicts(dicts, length, removeCidKeys) {\n              var fontDictTrackers = [];\n              var fdArrayIndex = new CFFIndex();\n              for (var i = 0, ii = dicts.length; i < ii; ++i) {\n                var fontDict = dicts[i];\n                if (removeCidKeys) {\n                  fontDict.removeByName(\"CIDFontVersion\");\n                  fontDict.removeByName(\"CIDFontRevision\");\n                  fontDict.removeByName(\"CIDFontType\");\n                  fontDict.removeByName(\"CIDCount\");\n                  fontDict.removeByName(\"UIDBase\");\n                }\n                var fontDictTracker = new CFFOffsetTracker();\n                var fontDictData = this.compileDict(fontDict, fontDictTracker);\n                fontDictTrackers.push(fontDictTracker);\n                fdArrayIndex.add(fontDictData);\n                fontDictTracker.offset(length);\n              }\n              fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n              return {\n                trackers: fontDictTrackers,\n                output: fdArrayIndex\n              };\n            }\n          }, {\n            key: \"compilePrivateDicts\",\n            value: function compilePrivateDicts(dicts, trackers, output) {\n              for (var i = 0, ii = dicts.length; i < ii; ++i) {\n                var fontDict = dicts[i];\n                var privateDict = fontDict.privateDict;\n                if (!privateDict || !fontDict.hasName(\"Private\")) {\n                  throw new _util.FormatError(\"There must be a private dictionary.\");\n                }\n                var privateDictTracker = new CFFOffsetTracker();\n                var privateDictData = this.compileDict(privateDict, privateDictTracker);\n                var outputLength = output.length;\n                privateDictTracker.offset(outputLength);\n                if (!privateDictData.length) {\n                  outputLength = 0;\n                }\n                trackers[i].setEntryLocation(\"Private\", [privateDictData.length, outputLength], output);\n                output.add(privateDictData);\n                if (privateDict.subrsIndex && privateDict.hasName(\"Subrs\")) {\n                  var subrs = this.compileIndex(privateDict.subrsIndex);\n                  privateDictTracker.setEntryLocation(\"Subrs\", [privateDictData.length], output);\n                  output.add(subrs);\n                }\n              }\n            }\n          }, {\n            key: \"compileDict\",\n            value: function compileDict(dict, offsetTracker) {\n              var out = [];\n              var _iterator81 = _createForOfIteratorHelper(dict.order),\n                _step81;\n              try {\n                for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {\n                  var key = _step81.value;\n                  if (!(key in dict.values)) {\n                    continue;\n                  }\n                  var values = dict.values[key];\n                  var types = dict.types[key];\n                  if (!Array.isArray(types)) {\n                    types = [types];\n                  }\n                  if (!Array.isArray(values)) {\n                    values = [values];\n                  }\n                  if (values.length === 0) {\n                    continue;\n                  }\n                  for (var j = 0, jj = types.length; j < jj; ++j) {\n                    var type = types[j];\n                    var value = values[j];\n                    switch (type) {\n                      case \"num\":\n                      case \"sid\":\n                        out.push.apply(out, _toConsumableArray(this.encodeNumber(value)));\n                        break;\n                      case \"offset\":\n                        var name = dict.keyToNameMap[key];\n                        if (!offsetTracker.isTracking(name)) {\n                          offsetTracker.track(name, out.length);\n                        }\n                        out.push(0x1d, 0, 0, 0, 0);\n                        break;\n                      case \"array\":\n                      case \"delta\":\n                        out.push.apply(out, _toConsumableArray(this.encodeNumber(value)));\n                        for (var k = 1, kk = values.length; k < kk; ++k) {\n                          out.push.apply(out, _toConsumableArray(this.encodeNumber(values[k])));\n                        }\n                        break;\n                      default:\n                        throw new _util.FormatError(\"Unknown data type of \".concat(type));\n                    }\n                  }\n                  out.push.apply(out, _toConsumableArray(dict.opcodes[key]));\n                }\n              } catch (err) {\n                _iterator81.e(err);\n              } finally {\n                _iterator81.f();\n              }\n              return out;\n            }\n          }, {\n            key: \"compileStringIndex\",\n            value: function compileStringIndex(strings) {\n              var stringIndex = new CFFIndex();\n              for (var i = 0, ii = strings.length; i < ii; ++i) {\n                stringIndex.add((0, _util.stringToBytes)(strings[i]));\n              }\n              return this.compileIndex(stringIndex);\n            }\n          }, {\n            key: \"compileGlobalSubrIndex\",\n            value: function compileGlobalSubrIndex() {\n              var globalSubrIndex = this.cff.globalSubrIndex;\n              this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n            }\n          }, {\n            key: \"compileCharStrings\",\n            value: function compileCharStrings(charStrings) {\n              var charStringsIndex = new CFFIndex();\n              for (var i = 0; i < charStrings.count; i++) {\n                var glyph = charStrings.get(i);\n                if (glyph.length === 0) {\n                  charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n                  continue;\n                }\n                charStringsIndex.add(glyph);\n              }\n              return this.compileIndex(charStringsIndex);\n            }\n          }, {\n            key: \"compileCharset\",\n            value: function compileCharset(charset, numGlyphs, strings, isCIDFont) {\n              var out;\n              var numGlyphsLessNotDef = numGlyphs - 1;\n              if (isCIDFont) {\n                out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);\n              } else {\n                var length = 1 + numGlyphsLessNotDef * 2;\n                out = new Uint8Array(length);\n                out[0] = 0;\n                var charsetIndex = 0;\n                var numCharsets = charset.charset.length;\n                var warned = false;\n                for (var i = 1; i < out.length; i += 2) {\n                  var sid = 0;\n                  if (charsetIndex < numCharsets) {\n                    var name = charset.charset[charsetIndex++];\n                    sid = strings.getSID(name);\n                    if (sid === -1) {\n                      sid = 0;\n                      if (!warned) {\n                        warned = true;\n                        (0, _util.warn)(\"Couldn't find \".concat(name, \" in CFF strings\"));\n                      }\n                    }\n                  }\n                  out[i] = sid >> 8 & 0xff;\n                  out[i + 1] = sid & 0xff;\n                }\n              }\n              return this.compileTypedArray(out);\n            }\n          }, {\n            key: \"compileEncoding\",\n            value: function compileEncoding(encoding) {\n              return this.compileTypedArray(encoding.raw);\n            }\n          }, {\n            key: \"compileFDSelect\",\n            value: function compileFDSelect(fdSelect) {\n              var format = fdSelect.format;\n              var out, i;\n              switch (format) {\n                case 0:\n                  out = new Uint8Array(1 + fdSelect.fdSelect.length);\n                  out[0] = format;\n                  for (i = 0; i < fdSelect.fdSelect.length; i++) {\n                    out[i + 1] = fdSelect.fdSelect[i];\n                  }\n                  break;\n                case 3:\n                  var start = 0;\n                  var lastFD = fdSelect.fdSelect[0];\n                  var ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];\n                  for (i = 1; i < fdSelect.fdSelect.length; i++) {\n                    var currentFD = fdSelect.fdSelect[i];\n                    if (currentFD !== lastFD) {\n                      ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);\n                      lastFD = currentFD;\n                    }\n                  }\n                  var numRanges = (ranges.length - 3) / 3;\n                  ranges[1] = numRanges >> 8 & 0xff;\n                  ranges[2] = numRanges & 0xff;\n                  ranges.push(i >> 8 & 0xff, i & 0xff);\n                  out = new Uint8Array(ranges);\n                  break;\n              }\n              return this.compileTypedArray(out);\n            }\n          }, {\n            key: \"compileTypedArray\",\n            value: function compileTypedArray(data) {\n              var out = [];\n              for (var i = 0, ii = data.length; i < ii; ++i) {\n                out[i] = data[i];\n              }\n              return out;\n            }\n          }, {\n            key: \"compileIndex\",\n            value: function compileIndex(index) {\n              var trackers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n              var objects = index.objects;\n              var count = objects.length;\n              if (count === 0) {\n                return [0, 0];\n              }\n              var data = [count >> 8 & 0xff, count & 0xff];\n              var lastOffset = 1,\n                i;\n              for (i = 0; i < count; ++i) {\n                lastOffset += objects[i].length;\n              }\n              var offsetSize;\n              if (lastOffset < 0x100) {\n                offsetSize = 1;\n              } else if (lastOffset < 0x10000) {\n                offsetSize = 2;\n              } else if (lastOffset < 0x1000000) {\n                offsetSize = 3;\n              } else {\n                offsetSize = 4;\n              }\n              data.push(offsetSize);\n              var relativeOffset = 1;\n              for (i = 0; i < count + 1; i++) {\n                if (offsetSize === 1) {\n                  data.push(relativeOffset & 0xff);\n                } else if (offsetSize === 2) {\n                  data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n                } else if (offsetSize === 3) {\n                  data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n                } else {\n                  data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n                }\n                if (objects[i]) {\n                  relativeOffset += objects[i].length;\n                }\n              }\n              for (i = 0; i < count; i++) {\n                if (trackers[i]) {\n                  trackers[i].offset(data.length);\n                }\n                for (var j = 0, jj = objects[i].length; j < jj; j++) {\n                  data.push(objects[i][j]);\n                }\n              }\n              return data;\n            }\n          }], [{\n            key: \"EncodeFloatRegExp\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"EncodeFloatRegExp\", /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/);\n            }\n          }]);\n          return CFFCompiler;\n        }();\n        exports.CFFCompiler = CFFCompiler;\n\n        /***/\n      }, /* 36 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ISOAdobeCharset = exports.ExpertSubsetCharset = exports.ExpertCharset = void 0;\n        var ISOAdobeCharset = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"];\n        exports.ISOAdobeCharset = ISOAdobeCharset;\n        var ExpertCharset = [\".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\n        exports.ExpertCharset = ExpertCharset;\n        var ExpertSubsetCharset = [\".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\"];\n        exports.ExpertSubsetCharset = ExpertSubsetCharset;\n\n        /***/\n      }, /* 37 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ZapfDingbatsEncoding = exports.WinAnsiEncoding = exports.SymbolSetEncoding = exports.StandardEncoding = exports.MacRomanEncoding = exports.ExpertEncoding = void 0;\n        exports.getEncoding = getEncoding;\n        var ExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\n        exports.ExpertEncoding = ExpertEncoding;\n        var MacExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"centoldstyle\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"\", \"threequartersemdash\", \"\", \"questionsmall\", \"\", \"\", \"\", \"\", \"Ethsmall\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"\", \"\", \"\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hypheninferior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"asuperior\", \"centsuperior\", \"\", \"\", \"\", \"\", \"Aacutesmall\", \"Agravesmall\", \"Acircumflexsmall\", \"Adieresissmall\", \"Atildesmall\", \"Aringsmall\", \"Ccedillasmall\", \"Eacutesmall\", \"Egravesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Iacutesmall\", \"Igravesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ntildesmall\", \"Oacutesmall\", \"Ogravesmall\", \"Ocircumflexsmall\", \"Odieresissmall\", \"Otildesmall\", \"Uacutesmall\", \"Ugravesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"\", \"eightsuperior\", \"fourinferior\", \"threeinferior\", \"sixinferior\", \"eightinferior\", \"seveninferior\", \"Scaronsmall\", \"\", \"centinferior\", \"twoinferior\", \"\", \"Dieresissmall\", \"\", \"Caronsmall\", \"osuperior\", \"fiveinferior\", \"\", \"commainferior\", \"periodinferior\", \"Yacutesmall\", \"\", \"dollarinferior\", \"\", \"\", \"Thornsmall\", \"\", \"nineinferior\", \"zeroinferior\", \"Zcaronsmall\", \"AEsmall\", \"Oslashsmall\", \"questiondownsmall\", \"oneinferior\", \"Lslashsmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"Cedillasmall\", \"\", \"\", \"\", \"\", \"\", \"OEsmall\", \"figuredash\", \"hyphensuperior\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"\", \"Ydieresissmall\", \"\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"ninesuperior\", \"zerosuperior\", \"\", \"esuperior\", \"rsuperior\", \"tsuperior\", \"\", \"\", \"isuperior\", \"ssuperior\", \"dsuperior\", \"\", \"\", \"\", \"\", \"\", \"lsuperior\", \"Ogoneksmall\", \"Brevesmall\", \"Macronsmall\", \"bsuperior\", \"nsuperior\", \"msuperior\", \"commasuperior\", \"periodsuperior\", \"Dotaccentsmall\", \"Ringsmall\", \"\", \"\", \"\", \"\"];\n        var MacRomanEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"space\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\"];\n        exports.MacRomanEncoding = MacRomanEncoding;\n        var StandardEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"\", \"\", \"\", \"\"];\n        exports.StandardEncoding = StandardEncoding;\n        var WinAnsiEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"bullet\", \"Euro\", \"bullet\", \"quotesinglbase\", \"florin\", \"quotedblbase\", \"ellipsis\", \"dagger\", \"daggerdbl\", \"circumflex\", \"perthousand\", \"Scaron\", \"guilsinglleft\", \"OE\", \"bullet\", \"Zcaron\", \"bullet\", \"bullet\", \"quoteleft\", \"quoteright\", \"quotedblleft\", \"quotedblright\", \"bullet\", \"endash\", \"emdash\", \"tilde\", \"trademark\", \"scaron\", \"guilsinglright\", \"oe\", \"bullet\", \"zcaron\", \"Ydieresis\", \"space\", \"exclamdown\", \"cent\", \"sterling\", \"currency\", \"yen\", \"brokenbar\", \"section\", \"dieresis\", \"copyright\", \"ordfeminine\", \"guillemotleft\", \"logicalnot\", \"hyphen\", \"registered\", \"macron\", \"degree\", \"plusminus\", \"twosuperior\", \"threesuperior\", \"acute\", \"mu\", \"paragraph\", \"periodcentered\", \"cedilla\", \"onesuperior\", \"ordmasculine\", \"guillemotright\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondown\", \"Agrave\", \"Aacute\", \"Acircumflex\", \"Atilde\", \"Adieresis\", \"Aring\", \"AE\", \"Ccedilla\", \"Egrave\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Igrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Eth\", \"Ntilde\", \"Ograve\", \"Oacute\", \"Ocircumflex\", \"Otilde\", \"Odieresis\", \"multiply\", \"Oslash\", \"Ugrave\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Yacute\", \"Thorn\", \"germandbls\", \"agrave\", \"aacute\", \"acircumflex\", \"atilde\", \"adieresis\", \"aring\", \"ae\", \"ccedilla\", \"egrave\", \"eacute\", \"ecircumflex\", \"edieresis\", \"igrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"eth\", \"ntilde\", \"ograve\", \"oacute\", \"ocircumflex\", \"otilde\", \"odieresis\", \"divide\", \"oslash\", \"ugrave\", \"uacute\", \"ucircumflex\", \"udieresis\", \"yacute\", \"thorn\", \"ydieresis\"];\n        exports.WinAnsiEncoding = WinAnsiEncoding;\n        var SymbolSetEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"universal\", \"numbersign\", \"existential\", \"percent\", \"ampersand\", \"suchthat\", \"parenleft\", \"parenright\", \"asteriskmath\", \"plus\", \"comma\", \"minus\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"congruent\", \"Alpha\", \"Beta\", \"Chi\", \"Delta\", \"Epsilon\", \"Phi\", \"Gamma\", \"Eta\", \"Iota\", \"theta1\", \"Kappa\", \"Lambda\", \"Mu\", \"Nu\", \"Omicron\", \"Pi\", \"Theta\", \"Rho\", \"Sigma\", \"Tau\", \"Upsilon\", \"sigma1\", \"Omega\", \"Xi\", \"Psi\", \"Zeta\", \"bracketleft\", \"therefore\", \"bracketright\", \"perpendicular\", \"underscore\", \"radicalex\", \"alpha\", \"beta\", \"chi\", \"delta\", \"epsilon\", \"phi\", \"gamma\", \"eta\", \"iota\", \"phi1\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"omicron\", \"pi\", \"theta\", \"rho\", \"sigma\", \"tau\", \"upsilon\", \"omega1\", \"omega\", \"xi\", \"psi\", \"zeta\", \"braceleft\", \"bar\", \"braceright\", \"similar\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Euro\", \"Upsilon1\", \"minute\", \"lessequal\", \"fraction\", \"infinity\", \"florin\", \"club\", \"diamond\", \"heart\", \"spade\", \"arrowboth\", \"arrowleft\", \"arrowup\", \"arrowright\", \"arrowdown\", \"degree\", \"plusminus\", \"second\", \"greaterequal\", \"multiply\", \"proportional\", \"partialdiff\", \"bullet\", \"divide\", \"notequal\", \"equivalence\", \"approxequal\", \"ellipsis\", \"arrowvertex\", \"arrowhorizex\", \"carriagereturn\", \"aleph\", \"Ifraktur\", \"Rfraktur\", \"weierstrass\", \"circlemultiply\", \"circleplus\", \"emptyset\", \"intersection\", \"union\", \"propersuperset\", \"reflexsuperset\", \"notsubset\", \"propersubset\", \"reflexsubset\", \"element\", \"notelement\", \"angle\", \"gradient\", \"registerserif\", \"copyrightserif\", \"trademarkserif\", \"product\", \"radical\", \"dotmath\", \"logicalnot\", \"logicaland\", \"logicalor\", \"arrowdblboth\", \"arrowdblleft\", \"arrowdblup\", \"arrowdblright\", \"arrowdbldown\", \"lozenge\", \"angleleft\", \"registersans\", \"copyrightsans\", \"trademarksans\", \"summation\", \"parenlefttp\", \"parenleftex\", \"parenleftbt\", \"bracketlefttp\", \"bracketleftex\", \"bracketleftbt\", \"bracelefttp\", \"braceleftmid\", \"braceleftbt\", \"braceex\", \"\", \"angleright\", \"integral\", \"integraltp\", \"integralex\", \"integralbt\", \"parenrighttp\", \"parenrightex\", \"parenrightbt\", \"bracketrighttp\", \"bracketrightex\", \"bracketrightbt\", \"bracerighttp\", \"bracerightmid\", \"bracerightbt\", \"\"];\n        exports.SymbolSetEncoding = SymbolSetEncoding;\n        var ZapfDingbatsEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"a1\", \"a2\", \"a202\", \"a3\", \"a4\", \"a5\", \"a119\", \"a118\", \"a117\", \"a11\", \"a12\", \"a13\", \"a14\", \"a15\", \"a16\", \"a105\", \"a17\", \"a18\", \"a19\", \"a20\", \"a21\", \"a22\", \"a23\", \"a24\", \"a25\", \"a26\", \"a27\", \"a28\", \"a6\", \"a7\", \"a8\", \"a9\", \"a10\", \"a29\", \"a30\", \"a31\", \"a32\", \"a33\", \"a34\", \"a35\", \"a36\", \"a37\", \"a38\", \"a39\", \"a40\", \"a41\", \"a42\", \"a43\", \"a44\", \"a45\", \"a46\", \"a47\", \"a48\", \"a49\", \"a50\", \"a51\", \"a52\", \"a53\", \"a54\", \"a55\", \"a56\", \"a57\", \"a58\", \"a59\", \"a60\", \"a61\", \"a62\", \"a63\", \"a64\", \"a65\", \"a66\", \"a67\", \"a68\", \"a69\", \"a70\", \"a71\", \"a72\", \"a73\", \"a74\", \"a203\", \"a75\", \"a204\", \"a76\", \"a77\", \"a78\", \"a79\", \"a81\", \"a82\", \"a83\", \"a84\", \"a97\", \"a98\", \"a99\", \"a100\", \"\", \"a89\", \"a90\", \"a93\", \"a94\", \"a91\", \"a92\", \"a205\", \"a85\", \"a206\", \"a86\", \"a87\", \"a88\", \"a95\", \"a96\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a101\", \"a102\", \"a103\", \"a104\", \"a106\", \"a107\", \"a108\", \"a112\", \"a111\", \"a110\", \"a109\", \"a120\", \"a121\", \"a122\", \"a123\", \"a124\", \"a125\", \"a126\", \"a127\", \"a128\", \"a129\", \"a130\", \"a131\", \"a132\", \"a133\", \"a134\", \"a135\", \"a136\", \"a137\", \"a138\", \"a139\", \"a140\", \"a141\", \"a142\", \"a143\", \"a144\", \"a145\", \"a146\", \"a147\", \"a148\", \"a149\", \"a150\", \"a151\", \"a152\", \"a153\", \"a154\", \"a155\", \"a156\", \"a157\", \"a158\", \"a159\", \"a160\", \"a161\", \"a163\", \"a164\", \"a196\", \"a165\", \"a192\", \"a166\", \"a167\", \"a168\", \"a169\", \"a170\", \"a171\", \"a172\", \"a173\", \"a162\", \"a174\", \"a175\", \"a176\", \"a177\", \"a178\", \"a179\", \"a193\", \"a180\", \"a199\", \"a181\", \"a200\", \"a182\", \"\", \"a201\", \"a183\", \"a184\", \"a197\", \"a185\", \"a194\", \"a198\", \"a186\", \"a195\", \"a187\", \"a188\", \"a189\", \"a190\", \"a191\", \"\"];\n        exports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;\n        function getEncoding(encodingName) {\n          switch (encodingName) {\n            case \"WinAnsiEncoding\":\n              return WinAnsiEncoding;\n            case \"StandardEncoding\":\n              return StandardEncoding;\n            case \"MacRomanEncoding\":\n              return MacRomanEncoding;\n            case \"SymbolSetEncoding\":\n              return SymbolSetEncoding;\n            case \"ZapfDingbatsEncoding\":\n              return ZapfDingbatsEncoding;\n            case \"ExpertEncoding\":\n              return ExpertEncoding;\n            case \"MacExpertEncoding\":\n              return MacExpertEncoding;\n            default:\n              return null;\n          }\n        }\n\n        /***/\n      }, /* 38 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SEAC_ANALYSIS_ENABLED = exports.MacStandardGlyphOrdering = exports.FontFlags = void 0;\n        exports.getFontType = getFontType;\n        exports.normalizeFontName = normalizeFontName;\n        exports.recoverGlyphName = recoverGlyphName;\n        exports.type1FontGlyphMapping = type1FontGlyphMapping;\n        var _util = __w_pdfjs_require__(2);\n        var _encodings = __w_pdfjs_require__(37);\n        var _glyphlist = __w_pdfjs_require__(39);\n        var _unicode = __w_pdfjs_require__(40);\n        var SEAC_ANALYSIS_ENABLED = true;\n        exports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;\n        var FontFlags = {\n          FixedPitch: 1,\n          Serif: 2,\n          Symbolic: 4,\n          Script: 8,\n          Nonsymbolic: 32,\n          Italic: 64,\n          AllCap: 65536,\n          SmallCap: 131072,\n          ForceBold: 262144\n        };\n        exports.FontFlags = FontFlags;\n        var MacStandardGlyphOrdering = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n        exports.MacStandardGlyphOrdering = MacStandardGlyphOrdering;\n        function getFontType(type, subtype) {\n          var isStandardFont = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          switch (type) {\n            case \"Type1\":\n              if (isStandardFont) {\n                return _util.FontType.TYPE1STANDARD;\n              }\n              return subtype === \"Type1C\" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;\n            case \"CIDFontType0\":\n              return subtype === \"CIDFontType0C\" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;\n            case \"OpenType\":\n              return _util.FontType.OPENTYPE;\n            case \"TrueType\":\n              return _util.FontType.TRUETYPE;\n            case \"CIDFontType2\":\n              return _util.FontType.CIDFONTTYPE2;\n            case \"MMType1\":\n              return _util.FontType.MMTYPE1;\n            case \"Type0\":\n              return _util.FontType.TYPE0;\n            default:\n              return _util.FontType.UNKNOWN;\n          }\n        }\n        function recoverGlyphName(name, glyphsUnicodeMap) {\n          if (glyphsUnicodeMap[name] !== undefined) {\n            return name;\n          }\n          var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);\n          if (unicode !== -1) {\n            for (var key in glyphsUnicodeMap) {\n              if (glyphsUnicodeMap[key] === unicode) {\n                return key;\n              }\n            }\n          }\n          (0, _util.info)(\"Unable to recover a standard glyph name for: \" + name);\n          return name;\n        }\n        function type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n          var charCodeToGlyphId = Object.create(null);\n          var glyphId, charCode, baseEncoding;\n          var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n          if (properties.isInternalFont) {\n            baseEncoding = builtInEncoding;\n            for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n              glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n              if (glyphId >= 0) {\n                charCodeToGlyphId[charCode] = glyphId;\n              } else {\n                charCodeToGlyphId[charCode] = 0;\n              }\n            }\n          } else if (properties.baseEncodingName) {\n            baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n            for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n              glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n              if (glyphId >= 0) {\n                charCodeToGlyphId[charCode] = glyphId;\n              } else {\n                charCodeToGlyphId[charCode] = 0;\n              }\n            }\n          } else if (isSymbolicFont) {\n            for (charCode in builtInEncoding) {\n              charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n            }\n          } else {\n            baseEncoding = _encodings.StandardEncoding;\n            for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n              glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n              if (glyphId >= 0) {\n                charCodeToGlyphId[charCode] = glyphId;\n              } else {\n                charCodeToGlyphId[charCode] = 0;\n              }\n            }\n          }\n          var differences = properties.differences;\n          var glyphsUnicodeMap;\n          if (differences) {\n            for (charCode in differences) {\n              var glyphName = differences[charCode];\n              glyphId = glyphNames.indexOf(glyphName);\n              if (glyphId === -1) {\n                if (!glyphsUnicodeMap) {\n                  glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n                }\n                var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n                if (standardGlyphName !== glyphName) {\n                  glyphId = glyphNames.indexOf(standardGlyphName);\n                }\n              }\n              if (glyphId >= 0) {\n                charCodeToGlyphId[charCode] = glyphId;\n              } else {\n                charCodeToGlyphId[charCode] = 0;\n              }\n            }\n          }\n          return charCodeToGlyphId;\n        }\n        function normalizeFontName(name) {\n          return name.replace(/[,_]/g, \"-\").replace(/\\s/g, \"\");\n        }\n\n        /***/\n      }, /* 39 */\n      /***/function (__unused_webpack_module, __webpack_exports__, __w_pdfjs_require__) {\n        __w_pdfjs_require__.r(__webpack_exports__);\n        /* harmony export */\n        __w_pdfjs_require__.d(__webpack_exports__, {\n          /* harmony export */\"getDingbatsGlyphsUnicode\": function getDingbatsGlyphsUnicode() {\n            return (/* binding */_getDingbatsGlyphsUnicode\n            );\n          },\n          /* harmony export */\"getGlyphsUnicode\": function getGlyphsUnicode() {\n            return (/* binding */_getGlyphsUnicode\n            );\n          }\n          /* harmony export */\n        });\n        /* harmony import */\n        var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__(6);\n        var _getGlyphsUnicode = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n          return [\"A\", 0x0041, \"AE\", 0x00c6, \"AEacute\", 0x01fc, \"AEmacron\", 0x01e2, \"AEsmall\", 0xf7e6, \"Aacute\", 0x00c1, \"Aacutesmall\", 0xf7e1, \"Abreve\", 0x0102, \"Abreveacute\", 0x1eae, \"Abrevecyrillic\", 0x04d0, \"Abrevedotbelow\", 0x1eb6, \"Abrevegrave\", 0x1eb0, \"Abrevehookabove\", 0x1eb2, \"Abrevetilde\", 0x1eb4, \"Acaron\", 0x01cd, \"Acircle\", 0x24b6, \"Acircumflex\", 0x00c2, \"Acircumflexacute\", 0x1ea4, \"Acircumflexdotbelow\", 0x1eac, \"Acircumflexgrave\", 0x1ea6, \"Acircumflexhookabove\", 0x1ea8, \"Acircumflexsmall\", 0xf7e2, \"Acircumflextilde\", 0x1eaa, \"Acute\", 0xf6c9, \"Acutesmall\", 0xf7b4, \"Acyrillic\", 0x0410, \"Adblgrave\", 0x0200, \"Adieresis\", 0x00c4, \"Adieresiscyrillic\", 0x04d2, \"Adieresismacron\", 0x01de, \"Adieresissmall\", 0xf7e4, \"Adotbelow\", 0x1ea0, \"Adotmacron\", 0x01e0, \"Agrave\", 0x00c0, \"Agravesmall\", 0xf7e0, \"Ahookabove\", 0x1ea2, \"Aiecyrillic\", 0x04d4, \"Ainvertedbreve\", 0x0202, \"Alpha\", 0x0391, \"Alphatonos\", 0x0386, \"Amacron\", 0x0100, \"Amonospace\", 0xff21, \"Aogonek\", 0x0104, \"Aring\", 0x00c5, \"Aringacute\", 0x01fa, \"Aringbelow\", 0x1e00, \"Aringsmall\", 0xf7e5, \"Asmall\", 0xf761, \"Atilde\", 0x00c3, \"Atildesmall\", 0xf7e3, \"Aybarmenian\", 0x0531, \"B\", 0x0042, \"Bcircle\", 0x24b7, \"Bdotaccent\", 0x1e02, \"Bdotbelow\", 0x1e04, \"Becyrillic\", 0x0411, \"Benarmenian\", 0x0532, \"Beta\", 0x0392, \"Bhook\", 0x0181, \"Blinebelow\", 0x1e06, \"Bmonospace\", 0xff22, \"Brevesmall\", 0xf6f4, \"Bsmall\", 0xf762, \"Btopbar\", 0x0182, \"C\", 0x0043, \"Caarmenian\", 0x053e, \"Cacute\", 0x0106, \"Caron\", 0xf6ca, \"Caronsmall\", 0xf6f5, \"Ccaron\", 0x010c, \"Ccedilla\", 0x00c7, \"Ccedillaacute\", 0x1e08, \"Ccedillasmall\", 0xf7e7, \"Ccircle\", 0x24b8, \"Ccircumflex\", 0x0108, \"Cdot\", 0x010a, \"Cdotaccent\", 0x010a, \"Cedillasmall\", 0xf7b8, \"Chaarmenian\", 0x0549, \"Cheabkhasiancyrillic\", 0x04bc, \"Checyrillic\", 0x0427, \"Chedescenderabkhasiancyrillic\", 0x04be, \"Chedescendercyrillic\", 0x04b6, \"Chedieresiscyrillic\", 0x04f4, \"Cheharmenian\", 0x0543, \"Chekhakassiancyrillic\", 0x04cb, \"Cheverticalstrokecyrillic\", 0x04b8, \"Chi\", 0x03a7, \"Chook\", 0x0187, \"Circumflexsmall\", 0xf6f6, \"Cmonospace\", 0xff23, \"Coarmenian\", 0x0551, \"Csmall\", 0xf763, \"D\", 0x0044, \"DZ\", 0x01f1, \"DZcaron\", 0x01c4, \"Daarmenian\", 0x0534, \"Dafrican\", 0x0189, \"Dcaron\", 0x010e, \"Dcedilla\", 0x1e10, \"Dcircle\", 0x24b9, \"Dcircumflexbelow\", 0x1e12, \"Dcroat\", 0x0110, \"Ddotaccent\", 0x1e0a, \"Ddotbelow\", 0x1e0c, \"Decyrillic\", 0x0414, \"Deicoptic\", 0x03ee, \"Delta\", 0x2206, \"Deltagreek\", 0x0394, \"Dhook\", 0x018a, \"Dieresis\", 0xf6cb, \"DieresisAcute\", 0xf6cc, \"DieresisGrave\", 0xf6cd, \"Dieresissmall\", 0xf7a8, \"Digammagreek\", 0x03dc, \"Djecyrillic\", 0x0402, \"Dlinebelow\", 0x1e0e, \"Dmonospace\", 0xff24, \"Dotaccentsmall\", 0xf6f7, \"Dslash\", 0x0110, \"Dsmall\", 0xf764, \"Dtopbar\", 0x018b, \"Dz\", 0x01f2, \"Dzcaron\", 0x01c5, \"Dzeabkhasiancyrillic\", 0x04e0, \"Dzecyrillic\", 0x0405, \"Dzhecyrillic\", 0x040f, \"E\", 0x0045, \"Eacute\", 0x00c9, \"Eacutesmall\", 0xf7e9, \"Ebreve\", 0x0114, \"Ecaron\", 0x011a, \"Ecedillabreve\", 0x1e1c, \"Echarmenian\", 0x0535, \"Ecircle\", 0x24ba, \"Ecircumflex\", 0x00ca, \"Ecircumflexacute\", 0x1ebe, \"Ecircumflexbelow\", 0x1e18, \"Ecircumflexdotbelow\", 0x1ec6, \"Ecircumflexgrave\", 0x1ec0, \"Ecircumflexhookabove\", 0x1ec2, \"Ecircumflexsmall\", 0xf7ea, \"Ecircumflextilde\", 0x1ec4, \"Ecyrillic\", 0x0404, \"Edblgrave\", 0x0204, \"Edieresis\", 0x00cb, \"Edieresissmall\", 0xf7eb, \"Edot\", 0x0116, \"Edotaccent\", 0x0116, \"Edotbelow\", 0x1eb8, \"Efcyrillic\", 0x0424, \"Egrave\", 0x00c8, \"Egravesmall\", 0xf7e8, \"Eharmenian\", 0x0537, \"Ehookabove\", 0x1eba, \"Eightroman\", 0x2167, \"Einvertedbreve\", 0x0206, \"Eiotifiedcyrillic\", 0x0464, \"Elcyrillic\", 0x041b, \"Elevenroman\", 0x216a, \"Emacron\", 0x0112, \"Emacronacute\", 0x1e16, \"Emacrongrave\", 0x1e14, \"Emcyrillic\", 0x041c, \"Emonospace\", 0xff25, \"Encyrillic\", 0x041d, \"Endescendercyrillic\", 0x04a2, \"Eng\", 0x014a, \"Enghecyrillic\", 0x04a4, \"Enhookcyrillic\", 0x04c7, \"Eogonek\", 0x0118, \"Eopen\", 0x0190, \"Epsilon\", 0x0395, \"Epsilontonos\", 0x0388, \"Ercyrillic\", 0x0420, \"Ereversed\", 0x018e, \"Ereversedcyrillic\", 0x042d, \"Escyrillic\", 0x0421, \"Esdescendercyrillic\", 0x04aa, \"Esh\", 0x01a9, \"Esmall\", 0xf765, \"Eta\", 0x0397, \"Etarmenian\", 0x0538, \"Etatonos\", 0x0389, \"Eth\", 0x00d0, \"Ethsmall\", 0xf7f0, \"Etilde\", 0x1ebc, \"Etildebelow\", 0x1e1a, \"Euro\", 0x20ac, \"Ezh\", 0x01b7, \"Ezhcaron\", 0x01ee, \"Ezhreversed\", 0x01b8, \"F\", 0x0046, \"Fcircle\", 0x24bb, \"Fdotaccent\", 0x1e1e, \"Feharmenian\", 0x0556, \"Feicoptic\", 0x03e4, \"Fhook\", 0x0191, \"Fitacyrillic\", 0x0472, \"Fiveroman\", 0x2164, \"Fmonospace\", 0xff26, \"Fourroman\", 0x2163, \"Fsmall\", 0xf766, \"G\", 0x0047, \"GBsquare\", 0x3387, \"Gacute\", 0x01f4, \"Gamma\", 0x0393, \"Gammaafrican\", 0x0194, \"Gangiacoptic\", 0x03ea, \"Gbreve\", 0x011e, \"Gcaron\", 0x01e6, \"Gcedilla\", 0x0122, \"Gcircle\", 0x24bc, \"Gcircumflex\", 0x011c, \"Gcommaaccent\", 0x0122, \"Gdot\", 0x0120, \"Gdotaccent\", 0x0120, \"Gecyrillic\", 0x0413, \"Ghadarmenian\", 0x0542, \"Ghemiddlehookcyrillic\", 0x0494, \"Ghestrokecyrillic\", 0x0492, \"Gheupturncyrillic\", 0x0490, \"Ghook\", 0x0193, \"Gimarmenian\", 0x0533, \"Gjecyrillic\", 0x0403, \"Gmacron\", 0x1e20, \"Gmonospace\", 0xff27, \"Grave\", 0xf6ce, \"Gravesmall\", 0xf760, \"Gsmall\", 0xf767, \"Gsmallhook\", 0x029b, \"Gstroke\", 0x01e4, \"H\", 0x0048, \"H18533\", 0x25cf, \"H18543\", 0x25aa, \"H18551\", 0x25ab, \"H22073\", 0x25a1, \"HPsquare\", 0x33cb, \"Haabkhasiancyrillic\", 0x04a8, \"Hadescendercyrillic\", 0x04b2, \"Hardsigncyrillic\", 0x042a, \"Hbar\", 0x0126, \"Hbrevebelow\", 0x1e2a, \"Hcedilla\", 0x1e28, \"Hcircle\", 0x24bd, \"Hcircumflex\", 0x0124, \"Hdieresis\", 0x1e26, \"Hdotaccent\", 0x1e22, \"Hdotbelow\", 0x1e24, \"Hmonospace\", 0xff28, \"Hoarmenian\", 0x0540, \"Horicoptic\", 0x03e8, \"Hsmall\", 0xf768, \"Hungarumlaut\", 0xf6cf, \"Hungarumlautsmall\", 0xf6f8, \"Hzsquare\", 0x3390, \"I\", 0x0049, \"IAcyrillic\", 0x042f, \"IJ\", 0x0132, \"IUcyrillic\", 0x042e, \"Iacute\", 0x00cd, \"Iacutesmall\", 0xf7ed, \"Ibreve\", 0x012c, \"Icaron\", 0x01cf, \"Icircle\", 0x24be, \"Icircumflex\", 0x00ce, \"Icircumflexsmall\", 0xf7ee, \"Icyrillic\", 0x0406, \"Idblgrave\", 0x0208, \"Idieresis\", 0x00cf, \"Idieresisacute\", 0x1e2e, \"Idieresiscyrillic\", 0x04e4, \"Idieresissmall\", 0xf7ef, \"Idot\", 0x0130, \"Idotaccent\", 0x0130, \"Idotbelow\", 0x1eca, \"Iebrevecyrillic\", 0x04d6, \"Iecyrillic\", 0x0415, \"Ifraktur\", 0x2111, \"Igrave\", 0x00cc, \"Igravesmall\", 0xf7ec, \"Ihookabove\", 0x1ec8, \"Iicyrillic\", 0x0418, \"Iinvertedbreve\", 0x020a, \"Iishortcyrillic\", 0x0419, \"Imacron\", 0x012a, \"Imacroncyrillic\", 0x04e2, \"Imonospace\", 0xff29, \"Iniarmenian\", 0x053b, \"Iocyrillic\", 0x0401, \"Iogonek\", 0x012e, \"Iota\", 0x0399, \"Iotaafrican\", 0x0196, \"Iotadieresis\", 0x03aa, \"Iotatonos\", 0x038a, \"Ismall\", 0xf769, \"Istroke\", 0x0197, \"Itilde\", 0x0128, \"Itildebelow\", 0x1e2c, \"Izhitsacyrillic\", 0x0474, \"Izhitsadblgravecyrillic\", 0x0476, \"J\", 0x004a, \"Jaarmenian\", 0x0541, \"Jcircle\", 0x24bf, \"Jcircumflex\", 0x0134, \"Jecyrillic\", 0x0408, \"Jheharmenian\", 0x054b, \"Jmonospace\", 0xff2a, \"Jsmall\", 0xf76a, \"K\", 0x004b, \"KBsquare\", 0x3385, \"KKsquare\", 0x33cd, \"Kabashkircyrillic\", 0x04a0, \"Kacute\", 0x1e30, \"Kacyrillic\", 0x041a, \"Kadescendercyrillic\", 0x049a, \"Kahookcyrillic\", 0x04c3, \"Kappa\", 0x039a, \"Kastrokecyrillic\", 0x049e, \"Kaverticalstrokecyrillic\", 0x049c, \"Kcaron\", 0x01e8, \"Kcedilla\", 0x0136, \"Kcircle\", 0x24c0, \"Kcommaaccent\", 0x0136, \"Kdotbelow\", 0x1e32, \"Keharmenian\", 0x0554, \"Kenarmenian\", 0x053f, \"Khacyrillic\", 0x0425, \"Kheicoptic\", 0x03e6, \"Khook\", 0x0198, \"Kjecyrillic\", 0x040c, \"Klinebelow\", 0x1e34, \"Kmonospace\", 0xff2b, \"Koppacyrillic\", 0x0480, \"Koppagreek\", 0x03de, \"Ksicyrillic\", 0x046e, \"Ksmall\", 0xf76b, \"L\", 0x004c, \"LJ\", 0x01c7, \"LL\", 0xf6bf, \"Lacute\", 0x0139, \"Lambda\", 0x039b, \"Lcaron\", 0x013d, \"Lcedilla\", 0x013b, \"Lcircle\", 0x24c1, \"Lcircumflexbelow\", 0x1e3c, \"Lcommaaccent\", 0x013b, \"Ldot\", 0x013f, \"Ldotaccent\", 0x013f, \"Ldotbelow\", 0x1e36, \"Ldotbelowmacron\", 0x1e38, \"Liwnarmenian\", 0x053c, \"Lj\", 0x01c8, \"Ljecyrillic\", 0x0409, \"Llinebelow\", 0x1e3a, \"Lmonospace\", 0xff2c, \"Lslash\", 0x0141, \"Lslashsmall\", 0xf6f9, \"Lsmall\", 0xf76c, \"M\", 0x004d, \"MBsquare\", 0x3386, \"Macron\", 0xf6d0, \"Macronsmall\", 0xf7af, \"Macute\", 0x1e3e, \"Mcircle\", 0x24c2, \"Mdotaccent\", 0x1e40, \"Mdotbelow\", 0x1e42, \"Menarmenian\", 0x0544, \"Mmonospace\", 0xff2d, \"Msmall\", 0xf76d, \"Mturned\", 0x019c, \"Mu\", 0x039c, \"N\", 0x004e, \"NJ\", 0x01ca, \"Nacute\", 0x0143, \"Ncaron\", 0x0147, \"Ncedilla\", 0x0145, \"Ncircle\", 0x24c3, \"Ncircumflexbelow\", 0x1e4a, \"Ncommaaccent\", 0x0145, \"Ndotaccent\", 0x1e44, \"Ndotbelow\", 0x1e46, \"Nhookleft\", 0x019d, \"Nineroman\", 0x2168, \"Nj\", 0x01cb, \"Njecyrillic\", 0x040a, \"Nlinebelow\", 0x1e48, \"Nmonospace\", 0xff2e, \"Nowarmenian\", 0x0546, \"Nsmall\", 0xf76e, \"Ntilde\", 0x00d1, \"Ntildesmall\", 0xf7f1, \"Nu\", 0x039d, \"O\", 0x004f, \"OE\", 0x0152, \"OEsmall\", 0xf6fa, \"Oacute\", 0x00d3, \"Oacutesmall\", 0xf7f3, \"Obarredcyrillic\", 0x04e8, \"Obarreddieresiscyrillic\", 0x04ea, \"Obreve\", 0x014e, \"Ocaron\", 0x01d1, \"Ocenteredtilde\", 0x019f, \"Ocircle\", 0x24c4, \"Ocircumflex\", 0x00d4, \"Ocircumflexacute\", 0x1ed0, \"Ocircumflexdotbelow\", 0x1ed8, \"Ocircumflexgrave\", 0x1ed2, \"Ocircumflexhookabove\", 0x1ed4, \"Ocircumflexsmall\", 0xf7f4, \"Ocircumflextilde\", 0x1ed6, \"Ocyrillic\", 0x041e, \"Odblacute\", 0x0150, \"Odblgrave\", 0x020c, \"Odieresis\", 0x00d6, \"Odieresiscyrillic\", 0x04e6, \"Odieresissmall\", 0xf7f6, \"Odotbelow\", 0x1ecc, \"Ogoneksmall\", 0xf6fb, \"Ograve\", 0x00d2, \"Ogravesmall\", 0xf7f2, \"Oharmenian\", 0x0555, \"Ohm\", 0x2126, \"Ohookabove\", 0x1ece, \"Ohorn\", 0x01a0, \"Ohornacute\", 0x1eda, \"Ohorndotbelow\", 0x1ee2, \"Ohorngrave\", 0x1edc, \"Ohornhookabove\", 0x1ede, \"Ohorntilde\", 0x1ee0, \"Ohungarumlaut\", 0x0150, \"Oi\", 0x01a2, \"Oinvertedbreve\", 0x020e, \"Omacron\", 0x014c, \"Omacronacute\", 0x1e52, \"Omacrongrave\", 0x1e50, \"Omega\", 0x2126, \"Omegacyrillic\", 0x0460, \"Omegagreek\", 0x03a9, \"Omegaroundcyrillic\", 0x047a, \"Omegatitlocyrillic\", 0x047c, \"Omegatonos\", 0x038f, \"Omicron\", 0x039f, \"Omicrontonos\", 0x038c, \"Omonospace\", 0xff2f, \"Oneroman\", 0x2160, \"Oogonek\", 0x01ea, \"Oogonekmacron\", 0x01ec, \"Oopen\", 0x0186, \"Oslash\", 0x00d8, \"Oslashacute\", 0x01fe, \"Oslashsmall\", 0xf7f8, \"Osmall\", 0xf76f, \"Ostrokeacute\", 0x01fe, \"Otcyrillic\", 0x047e, \"Otilde\", 0x00d5, \"Otildeacute\", 0x1e4c, \"Otildedieresis\", 0x1e4e, \"Otildesmall\", 0xf7f5, \"P\", 0x0050, \"Pacute\", 0x1e54, \"Pcircle\", 0x24c5, \"Pdotaccent\", 0x1e56, \"Pecyrillic\", 0x041f, \"Peharmenian\", 0x054a, \"Pemiddlehookcyrillic\", 0x04a6, \"Phi\", 0x03a6, \"Phook\", 0x01a4, \"Pi\", 0x03a0, \"Piwrarmenian\", 0x0553, \"Pmonospace\", 0xff30, \"Psi\", 0x03a8, \"Psicyrillic\", 0x0470, \"Psmall\", 0xf770, \"Q\", 0x0051, \"Qcircle\", 0x24c6, \"Qmonospace\", 0xff31, \"Qsmall\", 0xf771, \"R\", 0x0052, \"Raarmenian\", 0x054c, \"Racute\", 0x0154, \"Rcaron\", 0x0158, \"Rcedilla\", 0x0156, \"Rcircle\", 0x24c7, \"Rcommaaccent\", 0x0156, \"Rdblgrave\", 0x0210, \"Rdotaccent\", 0x1e58, \"Rdotbelow\", 0x1e5a, \"Rdotbelowmacron\", 0x1e5c, \"Reharmenian\", 0x0550, \"Rfraktur\", 0x211c, \"Rho\", 0x03a1, \"Ringsmall\", 0xf6fc, \"Rinvertedbreve\", 0x0212, \"Rlinebelow\", 0x1e5e, \"Rmonospace\", 0xff32, \"Rsmall\", 0xf772, \"Rsmallinverted\", 0x0281, \"Rsmallinvertedsuperior\", 0x02b6, \"S\", 0x0053, \"SF010000\", 0x250c, \"SF020000\", 0x2514, \"SF030000\", 0x2510, \"SF040000\", 0x2518, \"SF050000\", 0x253c, \"SF060000\", 0x252c, \"SF070000\", 0x2534, \"SF080000\", 0x251c, \"SF090000\", 0x2524, \"SF100000\", 0x2500, \"SF110000\", 0x2502, \"SF190000\", 0x2561, \"SF200000\", 0x2562, \"SF210000\", 0x2556, \"SF220000\", 0x2555, \"SF230000\", 0x2563, \"SF240000\", 0x2551, \"SF250000\", 0x2557, \"SF260000\", 0x255d, \"SF270000\", 0x255c, \"SF280000\", 0x255b, \"SF360000\", 0x255e, \"SF370000\", 0x255f, \"SF380000\", 0x255a, \"SF390000\", 0x2554, \"SF400000\", 0x2569, \"SF410000\", 0x2566, \"SF420000\", 0x2560, \"SF430000\", 0x2550, \"SF440000\", 0x256c, \"SF450000\", 0x2567, \"SF460000\", 0x2568, \"SF470000\", 0x2564, \"SF480000\", 0x2565, \"SF490000\", 0x2559, \"SF500000\", 0x2558, \"SF510000\", 0x2552, \"SF520000\", 0x2553, \"SF530000\", 0x256b, \"SF540000\", 0x256a, \"Sacute\", 0x015a, \"Sacutedotaccent\", 0x1e64, \"Sampigreek\", 0x03e0, \"Scaron\", 0x0160, \"Scarondotaccent\", 0x1e66, \"Scaronsmall\", 0xf6fd, \"Scedilla\", 0x015e, \"Schwa\", 0x018f, \"Schwacyrillic\", 0x04d8, \"Schwadieresiscyrillic\", 0x04da, \"Scircle\", 0x24c8, \"Scircumflex\", 0x015c, \"Scommaaccent\", 0x0218, \"Sdotaccent\", 0x1e60, \"Sdotbelow\", 0x1e62, \"Sdotbelowdotaccent\", 0x1e68, \"Seharmenian\", 0x054d, \"Sevenroman\", 0x2166, \"Shaarmenian\", 0x0547, \"Shacyrillic\", 0x0428, \"Shchacyrillic\", 0x0429, \"Sheicoptic\", 0x03e2, \"Shhacyrillic\", 0x04ba, \"Shimacoptic\", 0x03ec, \"Sigma\", 0x03a3, \"Sixroman\", 0x2165, \"Smonospace\", 0xff33, \"Softsigncyrillic\", 0x042c, \"Ssmall\", 0xf773, \"Stigmagreek\", 0x03da, \"T\", 0x0054, \"Tau\", 0x03a4, \"Tbar\", 0x0166, \"Tcaron\", 0x0164, \"Tcedilla\", 0x0162, \"Tcircle\", 0x24c9, \"Tcircumflexbelow\", 0x1e70, \"Tcommaaccent\", 0x0162, \"Tdotaccent\", 0x1e6a, \"Tdotbelow\", 0x1e6c, \"Tecyrillic\", 0x0422, \"Tedescendercyrillic\", 0x04ac, \"Tenroman\", 0x2169, \"Tetsecyrillic\", 0x04b4, \"Theta\", 0x0398, \"Thook\", 0x01ac, \"Thorn\", 0x00de, \"Thornsmall\", 0xf7fe, \"Threeroman\", 0x2162, \"Tildesmall\", 0xf6fe, \"Tiwnarmenian\", 0x054f, \"Tlinebelow\", 0x1e6e, \"Tmonospace\", 0xff34, \"Toarmenian\", 0x0539, \"Tonefive\", 0x01bc, \"Tonesix\", 0x0184, \"Tonetwo\", 0x01a7, \"Tretroflexhook\", 0x01ae, \"Tsecyrillic\", 0x0426, \"Tshecyrillic\", 0x040b, \"Tsmall\", 0xf774, \"Twelveroman\", 0x216b, \"Tworoman\", 0x2161, \"U\", 0x0055, \"Uacute\", 0x00da, \"Uacutesmall\", 0xf7fa, \"Ubreve\", 0x016c, \"Ucaron\", 0x01d3, \"Ucircle\", 0x24ca, \"Ucircumflex\", 0x00db, \"Ucircumflexbelow\", 0x1e76, \"Ucircumflexsmall\", 0xf7fb, \"Ucyrillic\", 0x0423, \"Udblacute\", 0x0170, \"Udblgrave\", 0x0214, \"Udieresis\", 0x00dc, \"Udieresisacute\", 0x01d7, \"Udieresisbelow\", 0x1e72, \"Udieresiscaron\", 0x01d9, \"Udieresiscyrillic\", 0x04f0, \"Udieresisgrave\", 0x01db, \"Udieresismacron\", 0x01d5, \"Udieresissmall\", 0xf7fc, \"Udotbelow\", 0x1ee4, \"Ugrave\", 0x00d9, \"Ugravesmall\", 0xf7f9, \"Uhookabove\", 0x1ee6, \"Uhorn\", 0x01af, \"Uhornacute\", 0x1ee8, \"Uhorndotbelow\", 0x1ef0, \"Uhorngrave\", 0x1eea, \"Uhornhookabove\", 0x1eec, \"Uhorntilde\", 0x1eee, \"Uhungarumlaut\", 0x0170, \"Uhungarumlautcyrillic\", 0x04f2, \"Uinvertedbreve\", 0x0216, \"Ukcyrillic\", 0x0478, \"Umacron\", 0x016a, \"Umacroncyrillic\", 0x04ee, \"Umacrondieresis\", 0x1e7a, \"Umonospace\", 0xff35, \"Uogonek\", 0x0172, \"Upsilon\", 0x03a5, \"Upsilon1\", 0x03d2, \"Upsilonacutehooksymbolgreek\", 0x03d3, \"Upsilonafrican\", 0x01b1, \"Upsilondieresis\", 0x03ab, \"Upsilondieresishooksymbolgreek\", 0x03d4, \"Upsilonhooksymbol\", 0x03d2, \"Upsilontonos\", 0x038e, \"Uring\", 0x016e, \"Ushortcyrillic\", 0x040e, \"Usmall\", 0xf775, \"Ustraightcyrillic\", 0x04ae, \"Ustraightstrokecyrillic\", 0x04b0, \"Utilde\", 0x0168, \"Utildeacute\", 0x1e78, \"Utildebelow\", 0x1e74, \"V\", 0x0056, \"Vcircle\", 0x24cb, \"Vdotbelow\", 0x1e7e, \"Vecyrillic\", 0x0412, \"Vewarmenian\", 0x054e, \"Vhook\", 0x01b2, \"Vmonospace\", 0xff36, \"Voarmenian\", 0x0548, \"Vsmall\", 0xf776, \"Vtilde\", 0x1e7c, \"W\", 0x0057, \"Wacute\", 0x1e82, \"Wcircle\", 0x24cc, \"Wcircumflex\", 0x0174, \"Wdieresis\", 0x1e84, \"Wdotaccent\", 0x1e86, \"Wdotbelow\", 0x1e88, \"Wgrave\", 0x1e80, \"Wmonospace\", 0xff37, \"Wsmall\", 0xf777, \"X\", 0x0058, \"Xcircle\", 0x24cd, \"Xdieresis\", 0x1e8c, \"Xdotaccent\", 0x1e8a, \"Xeharmenian\", 0x053d, \"Xi\", 0x039e, \"Xmonospace\", 0xff38, \"Xsmall\", 0xf778, \"Y\", 0x0059, \"Yacute\", 0x00dd, \"Yacutesmall\", 0xf7fd, \"Yatcyrillic\", 0x0462, \"Ycircle\", 0x24ce, \"Ycircumflex\", 0x0176, \"Ydieresis\", 0x0178, \"Ydieresissmall\", 0xf7ff, \"Ydotaccent\", 0x1e8e, \"Ydotbelow\", 0x1ef4, \"Yericyrillic\", 0x042b, \"Yerudieresiscyrillic\", 0x04f8, \"Ygrave\", 0x1ef2, \"Yhook\", 0x01b3, \"Yhookabove\", 0x1ef6, \"Yiarmenian\", 0x0545, \"Yicyrillic\", 0x0407, \"Yiwnarmenian\", 0x0552, \"Ymonospace\", 0xff39, \"Ysmall\", 0xf779, \"Ytilde\", 0x1ef8, \"Yusbigcyrillic\", 0x046a, \"Yusbigiotifiedcyrillic\", 0x046c, \"Yuslittlecyrillic\", 0x0466, \"Yuslittleiotifiedcyrillic\", 0x0468, \"Z\", 0x005a, \"Zaarmenian\", 0x0536, \"Zacute\", 0x0179, \"Zcaron\", 0x017d, \"Zcaronsmall\", 0xf6ff, \"Zcircle\", 0x24cf, \"Zcircumflex\", 0x1e90, \"Zdot\", 0x017b, \"Zdotaccent\", 0x017b, \"Zdotbelow\", 0x1e92, \"Zecyrillic\", 0x0417, \"Zedescendercyrillic\", 0x0498, \"Zedieresiscyrillic\", 0x04de, \"Zeta\", 0x0396, \"Zhearmenian\", 0x053a, \"Zhebrevecyrillic\", 0x04c1, \"Zhecyrillic\", 0x0416, \"Zhedescendercyrillic\", 0x0496, \"Zhedieresiscyrillic\", 0x04dc, \"Zlinebelow\", 0x1e94, \"Zmonospace\", 0xff3a, \"Zsmall\", 0xf77a, \"Zstroke\", 0x01b5, \"a\", 0x0061, \"aabengali\", 0x0986, \"aacute\", 0x00e1, \"aadeva\", 0x0906, \"aagujarati\", 0x0a86, \"aagurmukhi\", 0x0a06, \"aamatragurmukhi\", 0x0a3e, \"aarusquare\", 0x3303, \"aavowelsignbengali\", 0x09be, \"aavowelsigndeva\", 0x093e, \"aavowelsigngujarati\", 0x0abe, \"abbreviationmarkarmenian\", 0x055f, \"abbreviationsigndeva\", 0x0970, \"abengali\", 0x0985, \"abopomofo\", 0x311a, \"abreve\", 0x0103, \"abreveacute\", 0x1eaf, \"abrevecyrillic\", 0x04d1, \"abrevedotbelow\", 0x1eb7, \"abrevegrave\", 0x1eb1, \"abrevehookabove\", 0x1eb3, \"abrevetilde\", 0x1eb5, \"acaron\", 0x01ce, \"acircle\", 0x24d0, \"acircumflex\", 0x00e2, \"acircumflexacute\", 0x1ea5, \"acircumflexdotbelow\", 0x1ead, \"acircumflexgrave\", 0x1ea7, \"acircumflexhookabove\", 0x1ea9, \"acircumflextilde\", 0x1eab, \"acute\", 0x00b4, \"acutebelowcmb\", 0x0317, \"acutecmb\", 0x0301, \"acutecomb\", 0x0301, \"acutedeva\", 0x0954, \"acutelowmod\", 0x02cf, \"acutetonecmb\", 0x0341, \"acyrillic\", 0x0430, \"adblgrave\", 0x0201, \"addakgurmukhi\", 0x0a71, \"adeva\", 0x0905, \"adieresis\", 0x00e4, \"adieresiscyrillic\", 0x04d3, \"adieresismacron\", 0x01df, \"adotbelow\", 0x1ea1, \"adotmacron\", 0x01e1, \"ae\", 0x00e6, \"aeacute\", 0x01fd, \"aekorean\", 0x3150, \"aemacron\", 0x01e3, \"afii00208\", 0x2015, \"afii08941\", 0x20a4, \"afii10017\", 0x0410, \"afii10018\", 0x0411, \"afii10019\", 0x0412, \"afii10020\", 0x0413, \"afii10021\", 0x0414, \"afii10022\", 0x0415, \"afii10023\", 0x0401, \"afii10024\", 0x0416, \"afii10025\", 0x0417, \"afii10026\", 0x0418, \"afii10027\", 0x0419, \"afii10028\", 0x041a, \"afii10029\", 0x041b, \"afii10030\", 0x041c, \"afii10031\", 0x041d, \"afii10032\", 0x041e, \"afii10033\", 0x041f, \"afii10034\", 0x0420, \"afii10035\", 0x0421, \"afii10036\", 0x0422, \"afii10037\", 0x0423, \"afii10038\", 0x0424, \"afii10039\", 0x0425, \"afii10040\", 0x0426, \"afii10041\", 0x0427, \"afii10042\", 0x0428, \"afii10043\", 0x0429, \"afii10044\", 0x042a, \"afii10045\", 0x042b, \"afii10046\", 0x042c, \"afii10047\", 0x042d, \"afii10048\", 0x042e, \"afii10049\", 0x042f, \"afii10050\", 0x0490, \"afii10051\", 0x0402, \"afii10052\", 0x0403, \"afii10053\", 0x0404, \"afii10054\", 0x0405, \"afii10055\", 0x0406, \"afii10056\", 0x0407, \"afii10057\", 0x0408, \"afii10058\", 0x0409, \"afii10059\", 0x040a, \"afii10060\", 0x040b, \"afii10061\", 0x040c, \"afii10062\", 0x040e, \"afii10063\", 0xf6c4, \"afii10064\", 0xf6c5, \"afii10065\", 0x0430, \"afii10066\", 0x0431, \"afii10067\", 0x0432, \"afii10068\", 0x0433, \"afii10069\", 0x0434, \"afii10070\", 0x0435, \"afii10071\", 0x0451, \"afii10072\", 0x0436, \"afii10073\", 0x0437, \"afii10074\", 0x0438, \"afii10075\", 0x0439, \"afii10076\", 0x043a, \"afii10077\", 0x043b, \"afii10078\", 0x043c, \"afii10079\", 0x043d, \"afii10080\", 0x043e, \"afii10081\", 0x043f, \"afii10082\", 0x0440, \"afii10083\", 0x0441, \"afii10084\", 0x0442, \"afii10085\", 0x0443, \"afii10086\", 0x0444, \"afii10087\", 0x0445, \"afii10088\", 0x0446, \"afii10089\", 0x0447, \"afii10090\", 0x0448, \"afii10091\", 0x0449, \"afii10092\", 0x044a, \"afii10093\", 0x044b, \"afii10094\", 0x044c, \"afii10095\", 0x044d, \"afii10096\", 0x044e, \"afii10097\", 0x044f, \"afii10098\", 0x0491, \"afii10099\", 0x0452, \"afii10100\", 0x0453, \"afii10101\", 0x0454, \"afii10102\", 0x0455, \"afii10103\", 0x0456, \"afii10104\", 0x0457, \"afii10105\", 0x0458, \"afii10106\", 0x0459, \"afii10107\", 0x045a, \"afii10108\", 0x045b, \"afii10109\", 0x045c, \"afii10110\", 0x045e, \"afii10145\", 0x040f, \"afii10146\", 0x0462, \"afii10147\", 0x0472, \"afii10148\", 0x0474, \"afii10192\", 0xf6c6, \"afii10193\", 0x045f, \"afii10194\", 0x0463, \"afii10195\", 0x0473, \"afii10196\", 0x0475, \"afii10831\", 0xf6c7, \"afii10832\", 0xf6c8, \"afii10846\", 0x04d9, \"afii299\", 0x200e, \"afii300\", 0x200f, \"afii301\", 0x200d, \"afii57381\", 0x066a, \"afii57388\", 0x060c, \"afii57392\", 0x0660, \"afii57393\", 0x0661, \"afii57394\", 0x0662, \"afii57395\", 0x0663, \"afii57396\", 0x0664, \"afii57397\", 0x0665, \"afii57398\", 0x0666, \"afii57399\", 0x0667, \"afii57400\", 0x0668, \"afii57401\", 0x0669, \"afii57403\", 0x061b, \"afii57407\", 0x061f, \"afii57409\", 0x0621, \"afii57410\", 0x0622, \"afii57411\", 0x0623, \"afii57412\", 0x0624, \"afii57413\", 0x0625, \"afii57414\", 0x0626, \"afii57415\", 0x0627, \"afii57416\", 0x0628, \"afii57417\", 0x0629, \"afii57418\", 0x062a, \"afii57419\", 0x062b, \"afii57420\", 0x062c, \"afii57421\", 0x062d, \"afii57422\", 0x062e, \"afii57423\", 0x062f, \"afii57424\", 0x0630, \"afii57425\", 0x0631, \"afii57426\", 0x0632, \"afii57427\", 0x0633, \"afii57428\", 0x0634, \"afii57429\", 0x0635, \"afii57430\", 0x0636, \"afii57431\", 0x0637, \"afii57432\", 0x0638, \"afii57433\", 0x0639, \"afii57434\", 0x063a, \"afii57440\", 0x0640, \"afii57441\", 0x0641, \"afii57442\", 0x0642, \"afii57443\", 0x0643, \"afii57444\", 0x0644, \"afii57445\", 0x0645, \"afii57446\", 0x0646, \"afii57448\", 0x0648, \"afii57449\", 0x0649, \"afii57450\", 0x064a, \"afii57451\", 0x064b, \"afii57452\", 0x064c, \"afii57453\", 0x064d, \"afii57454\", 0x064e, \"afii57455\", 0x064f, \"afii57456\", 0x0650, \"afii57457\", 0x0651, \"afii57458\", 0x0652, \"afii57470\", 0x0647, \"afii57505\", 0x06a4, \"afii57506\", 0x067e, \"afii57507\", 0x0686, \"afii57508\", 0x0698, \"afii57509\", 0x06af, \"afii57511\", 0x0679, \"afii57512\", 0x0688, \"afii57513\", 0x0691, \"afii57514\", 0x06ba, \"afii57519\", 0x06d2, \"afii57534\", 0x06d5, \"afii57636\", 0x20aa, \"afii57645\", 0x05be, \"afii57658\", 0x05c3, \"afii57664\", 0x05d0, \"afii57665\", 0x05d1, \"afii57666\", 0x05d2, \"afii57667\", 0x05d3, \"afii57668\", 0x05d4, \"afii57669\", 0x05d5, \"afii57670\", 0x05d6, \"afii57671\", 0x05d7, \"afii57672\", 0x05d8, \"afii57673\", 0x05d9, \"afii57674\", 0x05da, \"afii57675\", 0x05db, \"afii57676\", 0x05dc, \"afii57677\", 0x05dd, \"afii57678\", 0x05de, \"afii57679\", 0x05df, \"afii57680\", 0x05e0, \"afii57681\", 0x05e1, \"afii57682\", 0x05e2, \"afii57683\", 0x05e3, \"afii57684\", 0x05e4, \"afii57685\", 0x05e5, \"afii57686\", 0x05e6, \"afii57687\", 0x05e7, \"afii57688\", 0x05e8, \"afii57689\", 0x05e9, \"afii57690\", 0x05ea, \"afii57694\", 0xfb2a, \"afii57695\", 0xfb2b, \"afii57700\", 0xfb4b, \"afii57705\", 0xfb1f, \"afii57716\", 0x05f0, \"afii57717\", 0x05f1, \"afii57718\", 0x05f2, \"afii57723\", 0xfb35, \"afii57793\", 0x05b4, \"afii57794\", 0x05b5, \"afii57795\", 0x05b6, \"afii57796\", 0x05bb, \"afii57797\", 0x05b8, \"afii57798\", 0x05b7, \"afii57799\", 0x05b0, \"afii57800\", 0x05b2, \"afii57801\", 0x05b1, \"afii57802\", 0x05b3, \"afii57803\", 0x05c2, \"afii57804\", 0x05c1, \"afii57806\", 0x05b9, \"afii57807\", 0x05bc, \"afii57839\", 0x05bd, \"afii57841\", 0x05bf, \"afii57842\", 0x05c0, \"afii57929\", 0x02bc, \"afii61248\", 0x2105, \"afii61289\", 0x2113, \"afii61352\", 0x2116, \"afii61573\", 0x202c, \"afii61574\", 0x202d, \"afii61575\", 0x202e, \"afii61664\", 0x200c, \"afii63167\", 0x066d, \"afii64937\", 0x02bd, \"agrave\", 0x00e0, \"agujarati\", 0x0a85, \"agurmukhi\", 0x0a05, \"ahiragana\", 0x3042, \"ahookabove\", 0x1ea3, \"aibengali\", 0x0990, \"aibopomofo\", 0x311e, \"aideva\", 0x0910, \"aiecyrillic\", 0x04d5, \"aigujarati\", 0x0a90, \"aigurmukhi\", 0x0a10, \"aimatragurmukhi\", 0x0a48, \"ainarabic\", 0x0639, \"ainfinalarabic\", 0xfeca, \"aininitialarabic\", 0xfecb, \"ainmedialarabic\", 0xfecc, \"ainvertedbreve\", 0x0203, \"aivowelsignbengali\", 0x09c8, \"aivowelsigndeva\", 0x0948, \"aivowelsigngujarati\", 0x0ac8, \"akatakana\", 0x30a2, \"akatakanahalfwidth\", 0xff71, \"akorean\", 0x314f, \"alef\", 0x05d0, \"alefarabic\", 0x0627, \"alefdageshhebrew\", 0xfb30, \"aleffinalarabic\", 0xfe8e, \"alefhamzaabovearabic\", 0x0623, \"alefhamzaabovefinalarabic\", 0xfe84, \"alefhamzabelowarabic\", 0x0625, \"alefhamzabelowfinalarabic\", 0xfe88, \"alefhebrew\", 0x05d0, \"aleflamedhebrew\", 0xfb4f, \"alefmaddaabovearabic\", 0x0622, \"alefmaddaabovefinalarabic\", 0xfe82, \"alefmaksuraarabic\", 0x0649, \"alefmaksurafinalarabic\", 0xfef0, \"alefmaksurainitialarabic\", 0xfef3, \"alefmaksuramedialarabic\", 0xfef4, \"alefpatahhebrew\", 0xfb2e, \"alefqamatshebrew\", 0xfb2f, \"aleph\", 0x2135, \"allequal\", 0x224c, \"alpha\", 0x03b1, \"alphatonos\", 0x03ac, \"amacron\", 0x0101, \"amonospace\", 0xff41, \"ampersand\", 0x0026, \"ampersandmonospace\", 0xff06, \"ampersandsmall\", 0xf726, \"amsquare\", 0x33c2, \"anbopomofo\", 0x3122, \"angbopomofo\", 0x3124, \"angbracketleft\", 0x3008, \"angbracketright\", 0x3009, \"angkhankhuthai\", 0x0e5a, \"angle\", 0x2220, \"anglebracketleft\", 0x3008, \"anglebracketleftvertical\", 0xfe3f, \"anglebracketright\", 0x3009, \"anglebracketrightvertical\", 0xfe40, \"angleleft\", 0x2329, \"angleright\", 0x232a, \"angstrom\", 0x212b, \"anoteleia\", 0x0387, \"anudattadeva\", 0x0952, \"anusvarabengali\", 0x0982, \"anusvaradeva\", 0x0902, \"anusvaragujarati\", 0x0a82, \"aogonek\", 0x0105, \"apaatosquare\", 0x3300, \"aparen\", 0x249c, \"apostrophearmenian\", 0x055a, \"apostrophemod\", 0x02bc, \"apple\", 0xf8ff, \"approaches\", 0x2250, \"approxequal\", 0x2248, \"approxequalorimage\", 0x2252, \"approximatelyequal\", 0x2245, \"araeaekorean\", 0x318e, \"araeakorean\", 0x318d, \"arc\", 0x2312, \"arighthalfring\", 0x1e9a, \"aring\", 0x00e5, \"aringacute\", 0x01fb, \"aringbelow\", 0x1e01, \"arrowboth\", 0x2194, \"arrowdashdown\", 0x21e3, \"arrowdashleft\", 0x21e0, \"arrowdashright\", 0x21e2, \"arrowdashup\", 0x21e1, \"arrowdblboth\", 0x21d4, \"arrowdbldown\", 0x21d3, \"arrowdblleft\", 0x21d0, \"arrowdblright\", 0x21d2, \"arrowdblup\", 0x21d1, \"arrowdown\", 0x2193, \"arrowdownleft\", 0x2199, \"arrowdownright\", 0x2198, \"arrowdownwhite\", 0x21e9, \"arrowheaddownmod\", 0x02c5, \"arrowheadleftmod\", 0x02c2, \"arrowheadrightmod\", 0x02c3, \"arrowheadupmod\", 0x02c4, \"arrowhorizex\", 0xf8e7, \"arrowleft\", 0x2190, \"arrowleftdbl\", 0x21d0, \"arrowleftdblstroke\", 0x21cd, \"arrowleftoverright\", 0x21c6, \"arrowleftwhite\", 0x21e6, \"arrowright\", 0x2192, \"arrowrightdblstroke\", 0x21cf, \"arrowrightheavy\", 0x279e, \"arrowrightoverleft\", 0x21c4, \"arrowrightwhite\", 0x21e8, \"arrowtableft\", 0x21e4, \"arrowtabright\", 0x21e5, \"arrowup\", 0x2191, \"arrowupdn\", 0x2195, \"arrowupdnbse\", 0x21a8, \"arrowupdownbase\", 0x21a8, \"arrowupleft\", 0x2196, \"arrowupleftofdown\", 0x21c5, \"arrowupright\", 0x2197, \"arrowupwhite\", 0x21e7, \"arrowvertex\", 0xf8e6, \"asciicircum\", 0x005e, \"asciicircummonospace\", 0xff3e, \"asciitilde\", 0x007e, \"asciitildemonospace\", 0xff5e, \"ascript\", 0x0251, \"ascriptturned\", 0x0252, \"asmallhiragana\", 0x3041, \"asmallkatakana\", 0x30a1, \"asmallkatakanahalfwidth\", 0xff67, \"asterisk\", 0x002a, \"asteriskaltonearabic\", 0x066d, \"asteriskarabic\", 0x066d, \"asteriskmath\", 0x2217, \"asteriskmonospace\", 0xff0a, \"asterisksmall\", 0xfe61, \"asterism\", 0x2042, \"asuperior\", 0xf6e9, \"asymptoticallyequal\", 0x2243, \"at\", 0x0040, \"atilde\", 0x00e3, \"atmonospace\", 0xff20, \"atsmall\", 0xfe6b, \"aturned\", 0x0250, \"aubengali\", 0x0994, \"aubopomofo\", 0x3120, \"audeva\", 0x0914, \"augujarati\", 0x0a94, \"augurmukhi\", 0x0a14, \"aulengthmarkbengali\", 0x09d7, \"aumatragurmukhi\", 0x0a4c, \"auvowelsignbengali\", 0x09cc, \"auvowelsigndeva\", 0x094c, \"auvowelsigngujarati\", 0x0acc, \"avagrahadeva\", 0x093d, \"aybarmenian\", 0x0561, \"ayin\", 0x05e2, \"ayinaltonehebrew\", 0xfb20, \"ayinhebrew\", 0x05e2, \"b\", 0x0062, \"babengali\", 0x09ac, \"backslash\", 0x005c, \"backslashmonospace\", 0xff3c, \"badeva\", 0x092c, \"bagujarati\", 0x0aac, \"bagurmukhi\", 0x0a2c, \"bahiragana\", 0x3070, \"bahtthai\", 0x0e3f, \"bakatakana\", 0x30d0, \"bar\", 0x007c, \"barmonospace\", 0xff5c, \"bbopomofo\", 0x3105, \"bcircle\", 0x24d1, \"bdotaccent\", 0x1e03, \"bdotbelow\", 0x1e05, \"beamedsixteenthnotes\", 0x266c, \"because\", 0x2235, \"becyrillic\", 0x0431, \"beharabic\", 0x0628, \"behfinalarabic\", 0xfe90, \"behinitialarabic\", 0xfe91, \"behiragana\", 0x3079, \"behmedialarabic\", 0xfe92, \"behmeeminitialarabic\", 0xfc9f, \"behmeemisolatedarabic\", 0xfc08, \"behnoonfinalarabic\", 0xfc6d, \"bekatakana\", 0x30d9, \"benarmenian\", 0x0562, \"bet\", 0x05d1, \"beta\", 0x03b2, \"betasymbolgreek\", 0x03d0, \"betdagesh\", 0xfb31, \"betdageshhebrew\", 0xfb31, \"bethebrew\", 0x05d1, \"betrafehebrew\", 0xfb4c, \"bhabengali\", 0x09ad, \"bhadeva\", 0x092d, \"bhagujarati\", 0x0aad, \"bhagurmukhi\", 0x0a2d, \"bhook\", 0x0253, \"bihiragana\", 0x3073, \"bikatakana\", 0x30d3, \"bilabialclick\", 0x0298, \"bindigurmukhi\", 0x0a02, \"birusquare\", 0x3331, \"blackcircle\", 0x25cf, \"blackdiamond\", 0x25c6, \"blackdownpointingtriangle\", 0x25bc, \"blackleftpointingpointer\", 0x25c4, \"blackleftpointingtriangle\", 0x25c0, \"blacklenticularbracketleft\", 0x3010, \"blacklenticularbracketleftvertical\", 0xfe3b, \"blacklenticularbracketright\", 0x3011, \"blacklenticularbracketrightvertical\", 0xfe3c, \"blacklowerlefttriangle\", 0x25e3, \"blacklowerrighttriangle\", 0x25e2, \"blackrectangle\", 0x25ac, \"blackrightpointingpointer\", 0x25ba, \"blackrightpointingtriangle\", 0x25b6, \"blacksmallsquare\", 0x25aa, \"blacksmilingface\", 0x263b, \"blacksquare\", 0x25a0, \"blackstar\", 0x2605, \"blackupperlefttriangle\", 0x25e4, \"blackupperrighttriangle\", 0x25e5, \"blackuppointingsmalltriangle\", 0x25b4, \"blackuppointingtriangle\", 0x25b2, \"blank\", 0x2423, \"blinebelow\", 0x1e07, \"block\", 0x2588, \"bmonospace\", 0xff42, \"bobaimaithai\", 0x0e1a, \"bohiragana\", 0x307c, \"bokatakana\", 0x30dc, \"bparen\", 0x249d, \"bqsquare\", 0x33c3, \"braceex\", 0xf8f4, \"braceleft\", 0x007b, \"braceleftbt\", 0xf8f3, \"braceleftmid\", 0xf8f2, \"braceleftmonospace\", 0xff5b, \"braceleftsmall\", 0xfe5b, \"bracelefttp\", 0xf8f1, \"braceleftvertical\", 0xfe37, \"braceright\", 0x007d, \"bracerightbt\", 0xf8fe, \"bracerightmid\", 0xf8fd, \"bracerightmonospace\", 0xff5d, \"bracerightsmall\", 0xfe5c, \"bracerighttp\", 0xf8fc, \"bracerightvertical\", 0xfe38, \"bracketleft\", 0x005b, \"bracketleftbt\", 0xf8f0, \"bracketleftex\", 0xf8ef, \"bracketleftmonospace\", 0xff3b, \"bracketlefttp\", 0xf8ee, \"bracketright\", 0x005d, \"bracketrightbt\", 0xf8fb, \"bracketrightex\", 0xf8fa, \"bracketrightmonospace\", 0xff3d, \"bracketrighttp\", 0xf8f9, \"breve\", 0x02d8, \"brevebelowcmb\", 0x032e, \"brevecmb\", 0x0306, \"breveinvertedbelowcmb\", 0x032f, \"breveinvertedcmb\", 0x0311, \"breveinverteddoublecmb\", 0x0361, \"bridgebelowcmb\", 0x032a, \"bridgeinvertedbelowcmb\", 0x033a, \"brokenbar\", 0x00a6, \"bstroke\", 0x0180, \"bsuperior\", 0xf6ea, \"btopbar\", 0x0183, \"buhiragana\", 0x3076, \"bukatakana\", 0x30d6, \"bullet\", 0x2022, \"bulletinverse\", 0x25d8, \"bulletoperator\", 0x2219, \"bullseye\", 0x25ce, \"c\", 0x0063, \"caarmenian\", 0x056e, \"cabengali\", 0x099a, \"cacute\", 0x0107, \"cadeva\", 0x091a, \"cagujarati\", 0x0a9a, \"cagurmukhi\", 0x0a1a, \"calsquare\", 0x3388, \"candrabindubengali\", 0x0981, \"candrabinducmb\", 0x0310, \"candrabindudeva\", 0x0901, \"candrabindugujarati\", 0x0a81, \"capslock\", 0x21ea, \"careof\", 0x2105, \"caron\", 0x02c7, \"caronbelowcmb\", 0x032c, \"caroncmb\", 0x030c, \"carriagereturn\", 0x21b5, \"cbopomofo\", 0x3118, \"ccaron\", 0x010d, \"ccedilla\", 0x00e7, \"ccedillaacute\", 0x1e09, \"ccircle\", 0x24d2, \"ccircumflex\", 0x0109, \"ccurl\", 0x0255, \"cdot\", 0x010b, \"cdotaccent\", 0x010b, \"cdsquare\", 0x33c5, \"cedilla\", 0x00b8, \"cedillacmb\", 0x0327, \"cent\", 0x00a2, \"centigrade\", 0x2103, \"centinferior\", 0xf6df, \"centmonospace\", 0xffe0, \"centoldstyle\", 0xf7a2, \"centsuperior\", 0xf6e0, \"chaarmenian\", 0x0579, \"chabengali\", 0x099b, \"chadeva\", 0x091b, \"chagujarati\", 0x0a9b, \"chagurmukhi\", 0x0a1b, \"chbopomofo\", 0x3114, \"cheabkhasiancyrillic\", 0x04bd, \"checkmark\", 0x2713, \"checyrillic\", 0x0447, \"chedescenderabkhasiancyrillic\", 0x04bf, \"chedescendercyrillic\", 0x04b7, \"chedieresiscyrillic\", 0x04f5, \"cheharmenian\", 0x0573, \"chekhakassiancyrillic\", 0x04cc, \"cheverticalstrokecyrillic\", 0x04b9, \"chi\", 0x03c7, \"chieuchacirclekorean\", 0x3277, \"chieuchaparenkorean\", 0x3217, \"chieuchcirclekorean\", 0x3269, \"chieuchkorean\", 0x314a, \"chieuchparenkorean\", 0x3209, \"chochangthai\", 0x0e0a, \"chochanthai\", 0x0e08, \"chochingthai\", 0x0e09, \"chochoethai\", 0x0e0c, \"chook\", 0x0188, \"cieucacirclekorean\", 0x3276, \"cieucaparenkorean\", 0x3216, \"cieuccirclekorean\", 0x3268, \"cieuckorean\", 0x3148, \"cieucparenkorean\", 0x3208, \"cieucuparenkorean\", 0x321c, \"circle\", 0x25cb, \"circlecopyrt\", 0x00a9, \"circlemultiply\", 0x2297, \"circleot\", 0x2299, \"circleplus\", 0x2295, \"circlepostalmark\", 0x3036, \"circlewithlefthalfblack\", 0x25d0, \"circlewithrighthalfblack\", 0x25d1, \"circumflex\", 0x02c6, \"circumflexbelowcmb\", 0x032d, \"circumflexcmb\", 0x0302, \"clear\", 0x2327, \"clickalveolar\", 0x01c2, \"clickdental\", 0x01c0, \"clicklateral\", 0x01c1, \"clickretroflex\", 0x01c3, \"club\", 0x2663, \"clubsuitblack\", 0x2663, \"clubsuitwhite\", 0x2667, \"cmcubedsquare\", 0x33a4, \"cmonospace\", 0xff43, \"cmsquaredsquare\", 0x33a0, \"coarmenian\", 0x0581, \"colon\", 0x003a, \"colonmonetary\", 0x20a1, \"colonmonospace\", 0xff1a, \"colonsign\", 0x20a1, \"colonsmall\", 0xfe55, \"colontriangularhalfmod\", 0x02d1, \"colontriangularmod\", 0x02d0, \"comma\", 0x002c, \"commaabovecmb\", 0x0313, \"commaaboverightcmb\", 0x0315, \"commaaccent\", 0xf6c3, \"commaarabic\", 0x060c, \"commaarmenian\", 0x055d, \"commainferior\", 0xf6e1, \"commamonospace\", 0xff0c, \"commareversedabovecmb\", 0x0314, \"commareversedmod\", 0x02bd, \"commasmall\", 0xfe50, \"commasuperior\", 0xf6e2, \"commaturnedabovecmb\", 0x0312, \"commaturnedmod\", 0x02bb, \"compass\", 0x263c, \"congruent\", 0x2245, \"contourintegral\", 0x222e, \"control\", 0x2303, \"controlACK\", 0x0006, \"controlBEL\", 0x0007, \"controlBS\", 0x0008, \"controlCAN\", 0x0018, \"controlCR\", 0x000d, \"controlDC1\", 0x0011, \"controlDC2\", 0x0012, \"controlDC3\", 0x0013, \"controlDC4\", 0x0014, \"controlDEL\", 0x007f, \"controlDLE\", 0x0010, \"controlEM\", 0x0019, \"controlENQ\", 0x0005, \"controlEOT\", 0x0004, \"controlESC\", 0x001b, \"controlETB\", 0x0017, \"controlETX\", 0x0003, \"controlFF\", 0x000c, \"controlFS\", 0x001c, \"controlGS\", 0x001d, \"controlHT\", 0x0009, \"controlLF\", 0x000a, \"controlNAK\", 0x0015, \"controlNULL\", 0x0000, \"controlRS\", 0x001e, \"controlSI\", 0x000f, \"controlSO\", 0x000e, \"controlSOT\", 0x0002, \"controlSTX\", 0x0001, \"controlSUB\", 0x001a, \"controlSYN\", 0x0016, \"controlUS\", 0x001f, \"controlVT\", 0x000b, \"copyright\", 0x00a9, \"copyrightsans\", 0xf8e9, \"copyrightserif\", 0xf6d9, \"cornerbracketleft\", 0x300c, \"cornerbracketlefthalfwidth\", 0xff62, \"cornerbracketleftvertical\", 0xfe41, \"cornerbracketright\", 0x300d, \"cornerbracketrighthalfwidth\", 0xff63, \"cornerbracketrightvertical\", 0xfe42, \"corporationsquare\", 0x337f, \"cosquare\", 0x33c7, \"coverkgsquare\", 0x33c6, \"cparen\", 0x249e, \"cruzeiro\", 0x20a2, \"cstretched\", 0x0297, \"curlyand\", 0x22cf, \"curlyor\", 0x22ce, \"currency\", 0x00a4, \"cyrBreve\", 0xf6d1, \"cyrFlex\", 0xf6d2, \"cyrbreve\", 0xf6d4, \"cyrflex\", 0xf6d5, \"d\", 0x0064, \"daarmenian\", 0x0564, \"dabengali\", 0x09a6, \"dadarabic\", 0x0636, \"dadeva\", 0x0926, \"dadfinalarabic\", 0xfebe, \"dadinitialarabic\", 0xfebf, \"dadmedialarabic\", 0xfec0, \"dagesh\", 0x05bc, \"dageshhebrew\", 0x05bc, \"dagger\", 0x2020, \"daggerdbl\", 0x2021, \"dagujarati\", 0x0aa6, \"dagurmukhi\", 0x0a26, \"dahiragana\", 0x3060, \"dakatakana\", 0x30c0, \"dalarabic\", 0x062f, \"dalet\", 0x05d3, \"daletdagesh\", 0xfb33, \"daletdageshhebrew\", 0xfb33, \"dalethebrew\", 0x05d3, \"dalfinalarabic\", 0xfeaa, \"dammaarabic\", 0x064f, \"dammalowarabic\", 0x064f, \"dammatanaltonearabic\", 0x064c, \"dammatanarabic\", 0x064c, \"danda\", 0x0964, \"dargahebrew\", 0x05a7, \"dargalefthebrew\", 0x05a7, \"dasiapneumatacyrilliccmb\", 0x0485, \"dblGrave\", 0xf6d3, \"dblanglebracketleft\", 0x300a, \"dblanglebracketleftvertical\", 0xfe3d, \"dblanglebracketright\", 0x300b, \"dblanglebracketrightvertical\", 0xfe3e, \"dblarchinvertedbelowcmb\", 0x032b, \"dblarrowleft\", 0x21d4, \"dblarrowright\", 0x21d2, \"dbldanda\", 0x0965, \"dblgrave\", 0xf6d6, \"dblgravecmb\", 0x030f, \"dblintegral\", 0x222c, \"dbllowline\", 0x2017, \"dbllowlinecmb\", 0x0333, \"dbloverlinecmb\", 0x033f, \"dblprimemod\", 0x02ba, \"dblverticalbar\", 0x2016, \"dblverticallineabovecmb\", 0x030e, \"dbopomofo\", 0x3109, \"dbsquare\", 0x33c8, \"dcaron\", 0x010f, \"dcedilla\", 0x1e11, \"dcircle\", 0x24d3, \"dcircumflexbelow\", 0x1e13, \"dcroat\", 0x0111, \"ddabengali\", 0x09a1, \"ddadeva\", 0x0921, \"ddagujarati\", 0x0aa1, \"ddagurmukhi\", 0x0a21, \"ddalarabic\", 0x0688, \"ddalfinalarabic\", 0xfb89, \"dddhadeva\", 0x095c, \"ddhabengali\", 0x09a2, \"ddhadeva\", 0x0922, \"ddhagujarati\", 0x0aa2, \"ddhagurmukhi\", 0x0a22, \"ddotaccent\", 0x1e0b, \"ddotbelow\", 0x1e0d, \"decimalseparatorarabic\", 0x066b, \"decimalseparatorpersian\", 0x066b, \"decyrillic\", 0x0434, \"degree\", 0x00b0, \"dehihebrew\", 0x05ad, \"dehiragana\", 0x3067, \"deicoptic\", 0x03ef, \"dekatakana\", 0x30c7, \"deleteleft\", 0x232b, \"deleteright\", 0x2326, \"delta\", 0x03b4, \"deltaturned\", 0x018d, \"denominatorminusonenumeratorbengali\", 0x09f8, \"dezh\", 0x02a4, \"dhabengali\", 0x09a7, \"dhadeva\", 0x0927, \"dhagujarati\", 0x0aa7, \"dhagurmukhi\", 0x0a27, \"dhook\", 0x0257, \"dialytikatonos\", 0x0385, \"dialytikatonoscmb\", 0x0344, \"diamond\", 0x2666, \"diamondsuitwhite\", 0x2662, \"dieresis\", 0x00a8, \"dieresisacute\", 0xf6d7, \"dieresisbelowcmb\", 0x0324, \"dieresiscmb\", 0x0308, \"dieresisgrave\", 0xf6d8, \"dieresistonos\", 0x0385, \"dihiragana\", 0x3062, \"dikatakana\", 0x30c2, \"dittomark\", 0x3003, \"divide\", 0x00f7, \"divides\", 0x2223, \"divisionslash\", 0x2215, \"djecyrillic\", 0x0452, \"dkshade\", 0x2593, \"dlinebelow\", 0x1e0f, \"dlsquare\", 0x3397, \"dmacron\", 0x0111, \"dmonospace\", 0xff44, \"dnblock\", 0x2584, \"dochadathai\", 0x0e0e, \"dodekthai\", 0x0e14, \"dohiragana\", 0x3069, \"dokatakana\", 0x30c9, \"dollar\", 0x0024, \"dollarinferior\", 0xf6e3, \"dollarmonospace\", 0xff04, \"dollaroldstyle\", 0xf724, \"dollarsmall\", 0xfe69, \"dollarsuperior\", 0xf6e4, \"dong\", 0x20ab, \"dorusquare\", 0x3326, \"dotaccent\", 0x02d9, \"dotaccentcmb\", 0x0307, \"dotbelowcmb\", 0x0323, \"dotbelowcomb\", 0x0323, \"dotkatakana\", 0x30fb, \"dotlessi\", 0x0131, \"dotlessj\", 0xf6be, \"dotlessjstrokehook\", 0x0284, \"dotmath\", 0x22c5, \"dottedcircle\", 0x25cc, \"doubleyodpatah\", 0xfb1f, \"doubleyodpatahhebrew\", 0xfb1f, \"downtackbelowcmb\", 0x031e, \"downtackmod\", 0x02d5, \"dparen\", 0x249f, \"dsuperior\", 0xf6eb, \"dtail\", 0x0256, \"dtopbar\", 0x018c, \"duhiragana\", 0x3065, \"dukatakana\", 0x30c5, \"dz\", 0x01f3, \"dzaltone\", 0x02a3, \"dzcaron\", 0x01c6, \"dzcurl\", 0x02a5, \"dzeabkhasiancyrillic\", 0x04e1, \"dzecyrillic\", 0x0455, \"dzhecyrillic\", 0x045f, \"e\", 0x0065, \"eacute\", 0x00e9, \"earth\", 0x2641, \"ebengali\", 0x098f, \"ebopomofo\", 0x311c, \"ebreve\", 0x0115, \"ecandradeva\", 0x090d, \"ecandragujarati\", 0x0a8d, \"ecandravowelsigndeva\", 0x0945, \"ecandravowelsigngujarati\", 0x0ac5, \"ecaron\", 0x011b, \"ecedillabreve\", 0x1e1d, \"echarmenian\", 0x0565, \"echyiwnarmenian\", 0x0587, \"ecircle\", 0x24d4, \"ecircumflex\", 0x00ea, \"ecircumflexacute\", 0x1ebf, \"ecircumflexbelow\", 0x1e19, \"ecircumflexdotbelow\", 0x1ec7, \"ecircumflexgrave\", 0x1ec1, \"ecircumflexhookabove\", 0x1ec3, \"ecircumflextilde\", 0x1ec5, \"ecyrillic\", 0x0454, \"edblgrave\", 0x0205, \"edeva\", 0x090f, \"edieresis\", 0x00eb, \"edot\", 0x0117, \"edotaccent\", 0x0117, \"edotbelow\", 0x1eb9, \"eegurmukhi\", 0x0a0f, \"eematragurmukhi\", 0x0a47, \"efcyrillic\", 0x0444, \"egrave\", 0x00e8, \"egujarati\", 0x0a8f, \"eharmenian\", 0x0567, \"ehbopomofo\", 0x311d, \"ehiragana\", 0x3048, \"ehookabove\", 0x1ebb, \"eibopomofo\", 0x311f, \"eight\", 0x0038, \"eightarabic\", 0x0668, \"eightbengali\", 0x09ee, \"eightcircle\", 0x2467, \"eightcircleinversesansserif\", 0x2791, \"eightdeva\", 0x096e, \"eighteencircle\", 0x2471, \"eighteenparen\", 0x2485, \"eighteenperiod\", 0x2499, \"eightgujarati\", 0x0aee, \"eightgurmukhi\", 0x0a6e, \"eighthackarabic\", 0x0668, \"eighthangzhou\", 0x3028, \"eighthnotebeamed\", 0x266b, \"eightideographicparen\", 0x3227, \"eightinferior\", 0x2088, \"eightmonospace\", 0xff18, \"eightoldstyle\", 0xf738, \"eightparen\", 0x247b, \"eightperiod\", 0x248f, \"eightpersian\", 0x06f8, \"eightroman\", 0x2177, \"eightsuperior\", 0x2078, \"eightthai\", 0x0e58, \"einvertedbreve\", 0x0207, \"eiotifiedcyrillic\", 0x0465, \"ekatakana\", 0x30a8, \"ekatakanahalfwidth\", 0xff74, \"ekonkargurmukhi\", 0x0a74, \"ekorean\", 0x3154, \"elcyrillic\", 0x043b, \"element\", 0x2208, \"elevencircle\", 0x246a, \"elevenparen\", 0x247e, \"elevenperiod\", 0x2492, \"elevenroman\", 0x217a, \"ellipsis\", 0x2026, \"ellipsisvertical\", 0x22ee, \"emacron\", 0x0113, \"emacronacute\", 0x1e17, \"emacrongrave\", 0x1e15, \"emcyrillic\", 0x043c, \"emdash\", 0x2014, \"emdashvertical\", 0xfe31, \"emonospace\", 0xff45, \"emphasismarkarmenian\", 0x055b, \"emptyset\", 0x2205, \"enbopomofo\", 0x3123, \"encyrillic\", 0x043d, \"endash\", 0x2013, \"endashvertical\", 0xfe32, \"endescendercyrillic\", 0x04a3, \"eng\", 0x014b, \"engbopomofo\", 0x3125, \"enghecyrillic\", 0x04a5, \"enhookcyrillic\", 0x04c8, \"enspace\", 0x2002, \"eogonek\", 0x0119, \"eokorean\", 0x3153, \"eopen\", 0x025b, \"eopenclosed\", 0x029a, \"eopenreversed\", 0x025c, \"eopenreversedclosed\", 0x025e, \"eopenreversedhook\", 0x025d, \"eparen\", 0x24a0, \"epsilon\", 0x03b5, \"epsilontonos\", 0x03ad, \"equal\", 0x003d, \"equalmonospace\", 0xff1d, \"equalsmall\", 0xfe66, \"equalsuperior\", 0x207c, \"equivalence\", 0x2261, \"erbopomofo\", 0x3126, \"ercyrillic\", 0x0440, \"ereversed\", 0x0258, \"ereversedcyrillic\", 0x044d, \"escyrillic\", 0x0441, \"esdescendercyrillic\", 0x04ab, \"esh\", 0x0283, \"eshcurl\", 0x0286, \"eshortdeva\", 0x090e, \"eshortvowelsigndeva\", 0x0946, \"eshreversedloop\", 0x01aa, \"eshsquatreversed\", 0x0285, \"esmallhiragana\", 0x3047, \"esmallkatakana\", 0x30a7, \"esmallkatakanahalfwidth\", 0xff6a, \"estimated\", 0x212e, \"esuperior\", 0xf6ec, \"eta\", 0x03b7, \"etarmenian\", 0x0568, \"etatonos\", 0x03ae, \"eth\", 0x00f0, \"etilde\", 0x1ebd, \"etildebelow\", 0x1e1b, \"etnahtafoukhhebrew\", 0x0591, \"etnahtafoukhlefthebrew\", 0x0591, \"etnahtahebrew\", 0x0591, \"etnahtalefthebrew\", 0x0591, \"eturned\", 0x01dd, \"eukorean\", 0x3161, \"euro\", 0x20ac, \"evowelsignbengali\", 0x09c7, \"evowelsigndeva\", 0x0947, \"evowelsigngujarati\", 0x0ac7, \"exclam\", 0x0021, \"exclamarmenian\", 0x055c, \"exclamdbl\", 0x203c, \"exclamdown\", 0x00a1, \"exclamdownsmall\", 0xf7a1, \"exclammonospace\", 0xff01, \"exclamsmall\", 0xf721, \"existential\", 0x2203, \"ezh\", 0x0292, \"ezhcaron\", 0x01ef, \"ezhcurl\", 0x0293, \"ezhreversed\", 0x01b9, \"ezhtail\", 0x01ba, \"f\", 0x0066, \"fadeva\", 0x095e, \"fagurmukhi\", 0x0a5e, \"fahrenheit\", 0x2109, \"fathaarabic\", 0x064e, \"fathalowarabic\", 0x064e, \"fathatanarabic\", 0x064b, \"fbopomofo\", 0x3108, \"fcircle\", 0x24d5, \"fdotaccent\", 0x1e1f, \"feharabic\", 0x0641, \"feharmenian\", 0x0586, \"fehfinalarabic\", 0xfed2, \"fehinitialarabic\", 0xfed3, \"fehmedialarabic\", 0xfed4, \"feicoptic\", 0x03e5, \"female\", 0x2640, \"ff\", 0xfb00, \"f_f\", 0xfb00, \"ffi\", 0xfb03, \"ffl\", 0xfb04, \"fi\", 0xfb01, \"fifteencircle\", 0x246e, \"fifteenparen\", 0x2482, \"fifteenperiod\", 0x2496, \"figuredash\", 0x2012, \"filledbox\", 0x25a0, \"filledrect\", 0x25ac, \"finalkaf\", 0x05da, \"finalkafdagesh\", 0xfb3a, \"finalkafdageshhebrew\", 0xfb3a, \"finalkafhebrew\", 0x05da, \"finalmem\", 0x05dd, \"finalmemhebrew\", 0x05dd, \"finalnun\", 0x05df, \"finalnunhebrew\", 0x05df, \"finalpe\", 0x05e3, \"finalpehebrew\", 0x05e3, \"finaltsadi\", 0x05e5, \"finaltsadihebrew\", 0x05e5, \"firsttonechinese\", 0x02c9, \"fisheye\", 0x25c9, \"fitacyrillic\", 0x0473, \"five\", 0x0035, \"fivearabic\", 0x0665, \"fivebengali\", 0x09eb, \"fivecircle\", 0x2464, \"fivecircleinversesansserif\", 0x278e, \"fivedeva\", 0x096b, \"fiveeighths\", 0x215d, \"fivegujarati\", 0x0aeb, \"fivegurmukhi\", 0x0a6b, \"fivehackarabic\", 0x0665, \"fivehangzhou\", 0x3025, \"fiveideographicparen\", 0x3224, \"fiveinferior\", 0x2085, \"fivemonospace\", 0xff15, \"fiveoldstyle\", 0xf735, \"fiveparen\", 0x2478, \"fiveperiod\", 0x248c, \"fivepersian\", 0x06f5, \"fiveroman\", 0x2174, \"fivesuperior\", 0x2075, \"fivethai\", 0x0e55, \"fl\", 0xfb02, \"florin\", 0x0192, \"fmonospace\", 0xff46, \"fmsquare\", 0x3399, \"fofanthai\", 0x0e1f, \"fofathai\", 0x0e1d, \"fongmanthai\", 0x0e4f, \"forall\", 0x2200, \"four\", 0x0034, \"fourarabic\", 0x0664, \"fourbengali\", 0x09ea, \"fourcircle\", 0x2463, \"fourcircleinversesansserif\", 0x278d, \"fourdeva\", 0x096a, \"fourgujarati\", 0x0aea, \"fourgurmukhi\", 0x0a6a, \"fourhackarabic\", 0x0664, \"fourhangzhou\", 0x3024, \"fourideographicparen\", 0x3223, \"fourinferior\", 0x2084, \"fourmonospace\", 0xff14, \"fournumeratorbengali\", 0x09f7, \"fouroldstyle\", 0xf734, \"fourparen\", 0x2477, \"fourperiod\", 0x248b, \"fourpersian\", 0x06f4, \"fourroman\", 0x2173, \"foursuperior\", 0x2074, \"fourteencircle\", 0x246d, \"fourteenparen\", 0x2481, \"fourteenperiod\", 0x2495, \"fourthai\", 0x0e54, \"fourthtonechinese\", 0x02cb, \"fparen\", 0x24a1, \"fraction\", 0x2044, \"franc\", 0x20a3, \"g\", 0x0067, \"gabengali\", 0x0997, \"gacute\", 0x01f5, \"gadeva\", 0x0917, \"gafarabic\", 0x06af, \"gaffinalarabic\", 0xfb93, \"gafinitialarabic\", 0xfb94, \"gafmedialarabic\", 0xfb95, \"gagujarati\", 0x0a97, \"gagurmukhi\", 0x0a17, \"gahiragana\", 0x304c, \"gakatakana\", 0x30ac, \"gamma\", 0x03b3, \"gammalatinsmall\", 0x0263, \"gammasuperior\", 0x02e0, \"gangiacoptic\", 0x03eb, \"gbopomofo\", 0x310d, \"gbreve\", 0x011f, \"gcaron\", 0x01e7, \"gcedilla\", 0x0123, \"gcircle\", 0x24d6, \"gcircumflex\", 0x011d, \"gcommaaccent\", 0x0123, \"gdot\", 0x0121, \"gdotaccent\", 0x0121, \"gecyrillic\", 0x0433, \"gehiragana\", 0x3052, \"gekatakana\", 0x30b2, \"geometricallyequal\", 0x2251, \"gereshaccenthebrew\", 0x059c, \"gereshhebrew\", 0x05f3, \"gereshmuqdamhebrew\", 0x059d, \"germandbls\", 0x00df, \"gershayimaccenthebrew\", 0x059e, \"gershayimhebrew\", 0x05f4, \"getamark\", 0x3013, \"ghabengali\", 0x0998, \"ghadarmenian\", 0x0572, \"ghadeva\", 0x0918, \"ghagujarati\", 0x0a98, \"ghagurmukhi\", 0x0a18, \"ghainarabic\", 0x063a, \"ghainfinalarabic\", 0xfece, \"ghaininitialarabic\", 0xfecf, \"ghainmedialarabic\", 0xfed0, \"ghemiddlehookcyrillic\", 0x0495, \"ghestrokecyrillic\", 0x0493, \"gheupturncyrillic\", 0x0491, \"ghhadeva\", 0x095a, \"ghhagurmukhi\", 0x0a5a, \"ghook\", 0x0260, \"ghzsquare\", 0x3393, \"gihiragana\", 0x304e, \"gikatakana\", 0x30ae, \"gimarmenian\", 0x0563, \"gimel\", 0x05d2, \"gimeldagesh\", 0xfb32, \"gimeldageshhebrew\", 0xfb32, \"gimelhebrew\", 0x05d2, \"gjecyrillic\", 0x0453, \"glottalinvertedstroke\", 0x01be, \"glottalstop\", 0x0294, \"glottalstopinverted\", 0x0296, \"glottalstopmod\", 0x02c0, \"glottalstopreversed\", 0x0295, \"glottalstopreversedmod\", 0x02c1, \"glottalstopreversedsuperior\", 0x02e4, \"glottalstopstroke\", 0x02a1, \"glottalstopstrokereversed\", 0x02a2, \"gmacron\", 0x1e21, \"gmonospace\", 0xff47, \"gohiragana\", 0x3054, \"gokatakana\", 0x30b4, \"gparen\", 0x24a2, \"gpasquare\", 0x33ac, \"gradient\", 0x2207, \"grave\", 0x0060, \"gravebelowcmb\", 0x0316, \"gravecmb\", 0x0300, \"gravecomb\", 0x0300, \"gravedeva\", 0x0953, \"gravelowmod\", 0x02ce, \"gravemonospace\", 0xff40, \"gravetonecmb\", 0x0340, \"greater\", 0x003e, \"greaterequal\", 0x2265, \"greaterequalorless\", 0x22db, \"greatermonospace\", 0xff1e, \"greaterorequivalent\", 0x2273, \"greaterorless\", 0x2277, \"greateroverequal\", 0x2267, \"greatersmall\", 0xfe65, \"gscript\", 0x0261, \"gstroke\", 0x01e5, \"guhiragana\", 0x3050, \"guillemotleft\", 0x00ab, \"guillemotright\", 0x00bb, \"guilsinglleft\", 0x2039, \"guilsinglright\", 0x203a, \"gukatakana\", 0x30b0, \"guramusquare\", 0x3318, \"gysquare\", 0x33c9, \"h\", 0x0068, \"haabkhasiancyrillic\", 0x04a9, \"haaltonearabic\", 0x06c1, \"habengali\", 0x09b9, \"hadescendercyrillic\", 0x04b3, \"hadeva\", 0x0939, \"hagujarati\", 0x0ab9, \"hagurmukhi\", 0x0a39, \"haharabic\", 0x062d, \"hahfinalarabic\", 0xfea2, \"hahinitialarabic\", 0xfea3, \"hahiragana\", 0x306f, \"hahmedialarabic\", 0xfea4, \"haitusquare\", 0x332a, \"hakatakana\", 0x30cf, \"hakatakanahalfwidth\", 0xff8a, \"halantgurmukhi\", 0x0a4d, \"hamzaarabic\", 0x0621, \"hamzalowarabic\", 0x0621, \"hangulfiller\", 0x3164, \"hardsigncyrillic\", 0x044a, \"harpoonleftbarbup\", 0x21bc, \"harpoonrightbarbup\", 0x21c0, \"hasquare\", 0x33ca, \"hatafpatah\", 0x05b2, \"hatafpatah16\", 0x05b2, \"hatafpatah23\", 0x05b2, \"hatafpatah2f\", 0x05b2, \"hatafpatahhebrew\", 0x05b2, \"hatafpatahnarrowhebrew\", 0x05b2, \"hatafpatahquarterhebrew\", 0x05b2, \"hatafpatahwidehebrew\", 0x05b2, \"hatafqamats\", 0x05b3, \"hatafqamats1b\", 0x05b3, \"hatafqamats28\", 0x05b3, \"hatafqamats34\", 0x05b3, \"hatafqamatshebrew\", 0x05b3, \"hatafqamatsnarrowhebrew\", 0x05b3, \"hatafqamatsquarterhebrew\", 0x05b3, \"hatafqamatswidehebrew\", 0x05b3, \"hatafsegol\", 0x05b1, \"hatafsegol17\", 0x05b1, \"hatafsegol24\", 0x05b1, \"hatafsegol30\", 0x05b1, \"hatafsegolhebrew\", 0x05b1, \"hatafsegolnarrowhebrew\", 0x05b1, \"hatafsegolquarterhebrew\", 0x05b1, \"hatafsegolwidehebrew\", 0x05b1, \"hbar\", 0x0127, \"hbopomofo\", 0x310f, \"hbrevebelow\", 0x1e2b, \"hcedilla\", 0x1e29, \"hcircle\", 0x24d7, \"hcircumflex\", 0x0125, \"hdieresis\", 0x1e27, \"hdotaccent\", 0x1e23, \"hdotbelow\", 0x1e25, \"he\", 0x05d4, \"heart\", 0x2665, \"heartsuitblack\", 0x2665, \"heartsuitwhite\", 0x2661, \"hedagesh\", 0xfb34, \"hedageshhebrew\", 0xfb34, \"hehaltonearabic\", 0x06c1, \"heharabic\", 0x0647, \"hehebrew\", 0x05d4, \"hehfinalaltonearabic\", 0xfba7, \"hehfinalalttwoarabic\", 0xfeea, \"hehfinalarabic\", 0xfeea, \"hehhamzaabovefinalarabic\", 0xfba5, \"hehhamzaaboveisolatedarabic\", 0xfba4, \"hehinitialaltonearabic\", 0xfba8, \"hehinitialarabic\", 0xfeeb, \"hehiragana\", 0x3078, \"hehmedialaltonearabic\", 0xfba9, \"hehmedialarabic\", 0xfeec, \"heiseierasquare\", 0x337b, \"hekatakana\", 0x30d8, \"hekatakanahalfwidth\", 0xff8d, \"hekutaarusquare\", 0x3336, \"henghook\", 0x0267, \"herutusquare\", 0x3339, \"het\", 0x05d7, \"hethebrew\", 0x05d7, \"hhook\", 0x0266, \"hhooksuperior\", 0x02b1, \"hieuhacirclekorean\", 0x327b, \"hieuhaparenkorean\", 0x321b, \"hieuhcirclekorean\", 0x326d, \"hieuhkorean\", 0x314e, \"hieuhparenkorean\", 0x320d, \"hihiragana\", 0x3072, \"hikatakana\", 0x30d2, \"hikatakanahalfwidth\", 0xff8b, \"hiriq\", 0x05b4, \"hiriq14\", 0x05b4, \"hiriq21\", 0x05b4, \"hiriq2d\", 0x05b4, \"hiriqhebrew\", 0x05b4, \"hiriqnarrowhebrew\", 0x05b4, \"hiriqquarterhebrew\", 0x05b4, \"hiriqwidehebrew\", 0x05b4, \"hlinebelow\", 0x1e96, \"hmonospace\", 0xff48, \"hoarmenian\", 0x0570, \"hohipthai\", 0x0e2b, \"hohiragana\", 0x307b, \"hokatakana\", 0x30db, \"hokatakanahalfwidth\", 0xff8e, \"holam\", 0x05b9, \"holam19\", 0x05b9, \"holam26\", 0x05b9, \"holam32\", 0x05b9, \"holamhebrew\", 0x05b9, \"holamnarrowhebrew\", 0x05b9, \"holamquarterhebrew\", 0x05b9, \"holamwidehebrew\", 0x05b9, \"honokhukthai\", 0x0e2e, \"hookabovecomb\", 0x0309, \"hookcmb\", 0x0309, \"hookpalatalizedbelowcmb\", 0x0321, \"hookretroflexbelowcmb\", 0x0322, \"hoonsquare\", 0x3342, \"horicoptic\", 0x03e9, \"horizontalbar\", 0x2015, \"horncmb\", 0x031b, \"hotsprings\", 0x2668, \"house\", 0x2302, \"hparen\", 0x24a3, \"hsuperior\", 0x02b0, \"hturned\", 0x0265, \"huhiragana\", 0x3075, \"huiitosquare\", 0x3333, \"hukatakana\", 0x30d5, \"hukatakanahalfwidth\", 0xff8c, \"hungarumlaut\", 0x02dd, \"hungarumlautcmb\", 0x030b, \"hv\", 0x0195, \"hyphen\", 0x002d, \"hypheninferior\", 0xf6e5, \"hyphenmonospace\", 0xff0d, \"hyphensmall\", 0xfe63, \"hyphensuperior\", 0xf6e6, \"hyphentwo\", 0x2010, \"i\", 0x0069, \"iacute\", 0x00ed, \"iacyrillic\", 0x044f, \"ibengali\", 0x0987, \"ibopomofo\", 0x3127, \"ibreve\", 0x012d, \"icaron\", 0x01d0, \"icircle\", 0x24d8, \"icircumflex\", 0x00ee, \"icyrillic\", 0x0456, \"idblgrave\", 0x0209, \"ideographearthcircle\", 0x328f, \"ideographfirecircle\", 0x328b, \"ideographicallianceparen\", 0x323f, \"ideographiccallparen\", 0x323a, \"ideographiccentrecircle\", 0x32a5, \"ideographicclose\", 0x3006, \"ideographiccomma\", 0x3001, \"ideographiccommaleft\", 0xff64, \"ideographiccongratulationparen\", 0x3237, \"ideographiccorrectcircle\", 0x32a3, \"ideographicearthparen\", 0x322f, \"ideographicenterpriseparen\", 0x323d, \"ideographicexcellentcircle\", 0x329d, \"ideographicfestivalparen\", 0x3240, \"ideographicfinancialcircle\", 0x3296, \"ideographicfinancialparen\", 0x3236, \"ideographicfireparen\", 0x322b, \"ideographichaveparen\", 0x3232, \"ideographichighcircle\", 0x32a4, \"ideographiciterationmark\", 0x3005, \"ideographiclaborcircle\", 0x3298, \"ideographiclaborparen\", 0x3238, \"ideographicleftcircle\", 0x32a7, \"ideographiclowcircle\", 0x32a6, \"ideographicmedicinecircle\", 0x32a9, \"ideographicmetalparen\", 0x322e, \"ideographicmoonparen\", 0x322a, \"ideographicnameparen\", 0x3234, \"ideographicperiod\", 0x3002, \"ideographicprintcircle\", 0x329e, \"ideographicreachparen\", 0x3243, \"ideographicrepresentparen\", 0x3239, \"ideographicresourceparen\", 0x323e, \"ideographicrightcircle\", 0x32a8, \"ideographicsecretcircle\", 0x3299, \"ideographicselfparen\", 0x3242, \"ideographicsocietyparen\", 0x3233, \"ideographicspace\", 0x3000, \"ideographicspecialparen\", 0x3235, \"ideographicstockparen\", 0x3231, \"ideographicstudyparen\", 0x323b, \"ideographicsunparen\", 0x3230, \"ideographicsuperviseparen\", 0x323c, \"ideographicwaterparen\", 0x322c, \"ideographicwoodparen\", 0x322d, \"ideographiczero\", 0x3007, \"ideographmetalcircle\", 0x328e, \"ideographmooncircle\", 0x328a, \"ideographnamecircle\", 0x3294, \"ideographsuncircle\", 0x3290, \"ideographwatercircle\", 0x328c, \"ideographwoodcircle\", 0x328d, \"ideva\", 0x0907, \"idieresis\", 0x00ef, \"idieresisacute\", 0x1e2f, \"idieresiscyrillic\", 0x04e5, \"idotbelow\", 0x1ecb, \"iebrevecyrillic\", 0x04d7, \"iecyrillic\", 0x0435, \"ieungacirclekorean\", 0x3275, \"ieungaparenkorean\", 0x3215, \"ieungcirclekorean\", 0x3267, \"ieungkorean\", 0x3147, \"ieungparenkorean\", 0x3207, \"igrave\", 0x00ec, \"igujarati\", 0x0a87, \"igurmukhi\", 0x0a07, \"ihiragana\", 0x3044, \"ihookabove\", 0x1ec9, \"iibengali\", 0x0988, \"iicyrillic\", 0x0438, \"iideva\", 0x0908, \"iigujarati\", 0x0a88, \"iigurmukhi\", 0x0a08, \"iimatragurmukhi\", 0x0a40, \"iinvertedbreve\", 0x020b, \"iishortcyrillic\", 0x0439, \"iivowelsignbengali\", 0x09c0, \"iivowelsigndeva\", 0x0940, \"iivowelsigngujarati\", 0x0ac0, \"ij\", 0x0133, \"ikatakana\", 0x30a4, \"ikatakanahalfwidth\", 0xff72, \"ikorean\", 0x3163, \"ilde\", 0x02dc, \"iluyhebrew\", 0x05ac, \"imacron\", 0x012b, \"imacroncyrillic\", 0x04e3, \"imageorapproximatelyequal\", 0x2253, \"imatragurmukhi\", 0x0a3f, \"imonospace\", 0xff49, \"increment\", 0x2206, \"infinity\", 0x221e, \"iniarmenian\", 0x056b, \"integral\", 0x222b, \"integralbottom\", 0x2321, \"integralbt\", 0x2321, \"integralex\", 0xf8f5, \"integraltop\", 0x2320, \"integraltp\", 0x2320, \"intersection\", 0x2229, \"intisquare\", 0x3305, \"invbullet\", 0x25d8, \"invcircle\", 0x25d9, \"invsmileface\", 0x263b, \"iocyrillic\", 0x0451, \"iogonek\", 0x012f, \"iota\", 0x03b9, \"iotadieresis\", 0x03ca, \"iotadieresistonos\", 0x0390, \"iotalatin\", 0x0269, \"iotatonos\", 0x03af, \"iparen\", 0x24a4, \"irigurmukhi\", 0x0a72, \"ismallhiragana\", 0x3043, \"ismallkatakana\", 0x30a3, \"ismallkatakanahalfwidth\", 0xff68, \"issharbengali\", 0x09fa, \"istroke\", 0x0268, \"isuperior\", 0xf6ed, \"iterationhiragana\", 0x309d, \"iterationkatakana\", 0x30fd, \"itilde\", 0x0129, \"itildebelow\", 0x1e2d, \"iubopomofo\", 0x3129, \"iucyrillic\", 0x044e, \"ivowelsignbengali\", 0x09bf, \"ivowelsigndeva\", 0x093f, \"ivowelsigngujarati\", 0x0abf, \"izhitsacyrillic\", 0x0475, \"izhitsadblgravecyrillic\", 0x0477, \"j\", 0x006a, \"jaarmenian\", 0x0571, \"jabengali\", 0x099c, \"jadeva\", 0x091c, \"jagujarati\", 0x0a9c, \"jagurmukhi\", 0x0a1c, \"jbopomofo\", 0x3110, \"jcaron\", 0x01f0, \"jcircle\", 0x24d9, \"jcircumflex\", 0x0135, \"jcrossedtail\", 0x029d, \"jdotlessstroke\", 0x025f, \"jecyrillic\", 0x0458, \"jeemarabic\", 0x062c, \"jeemfinalarabic\", 0xfe9e, \"jeeminitialarabic\", 0xfe9f, \"jeemmedialarabic\", 0xfea0, \"jeharabic\", 0x0698, \"jehfinalarabic\", 0xfb8b, \"jhabengali\", 0x099d, \"jhadeva\", 0x091d, \"jhagujarati\", 0x0a9d, \"jhagurmukhi\", 0x0a1d, \"jheharmenian\", 0x057b, \"jis\", 0x3004, \"jmonospace\", 0xff4a, \"jparen\", 0x24a5, \"jsuperior\", 0x02b2, \"k\", 0x006b, \"kabashkircyrillic\", 0x04a1, \"kabengali\", 0x0995, \"kacute\", 0x1e31, \"kacyrillic\", 0x043a, \"kadescendercyrillic\", 0x049b, \"kadeva\", 0x0915, \"kaf\", 0x05db, \"kafarabic\", 0x0643, \"kafdagesh\", 0xfb3b, \"kafdageshhebrew\", 0xfb3b, \"kaffinalarabic\", 0xfeda, \"kafhebrew\", 0x05db, \"kafinitialarabic\", 0xfedb, \"kafmedialarabic\", 0xfedc, \"kafrafehebrew\", 0xfb4d, \"kagujarati\", 0x0a95, \"kagurmukhi\", 0x0a15, \"kahiragana\", 0x304b, \"kahookcyrillic\", 0x04c4, \"kakatakana\", 0x30ab, \"kakatakanahalfwidth\", 0xff76, \"kappa\", 0x03ba, \"kappasymbolgreek\", 0x03f0, \"kapyeounmieumkorean\", 0x3171, \"kapyeounphieuphkorean\", 0x3184, \"kapyeounpieupkorean\", 0x3178, \"kapyeounssangpieupkorean\", 0x3179, \"karoriisquare\", 0x330d, \"kashidaautoarabic\", 0x0640, \"kashidaautonosidebearingarabic\", 0x0640, \"kasmallkatakana\", 0x30f5, \"kasquare\", 0x3384, \"kasraarabic\", 0x0650, \"kasratanarabic\", 0x064d, \"kastrokecyrillic\", 0x049f, \"katahiraprolongmarkhalfwidth\", 0xff70, \"kaverticalstrokecyrillic\", 0x049d, \"kbopomofo\", 0x310e, \"kcalsquare\", 0x3389, \"kcaron\", 0x01e9, \"kcedilla\", 0x0137, \"kcircle\", 0x24da, \"kcommaaccent\", 0x0137, \"kdotbelow\", 0x1e33, \"keharmenian\", 0x0584, \"kehiragana\", 0x3051, \"kekatakana\", 0x30b1, \"kekatakanahalfwidth\", 0xff79, \"kenarmenian\", 0x056f, \"kesmallkatakana\", 0x30f6, \"kgreenlandic\", 0x0138, \"khabengali\", 0x0996, \"khacyrillic\", 0x0445, \"khadeva\", 0x0916, \"khagujarati\", 0x0a96, \"khagurmukhi\", 0x0a16, \"khaharabic\", 0x062e, \"khahfinalarabic\", 0xfea6, \"khahinitialarabic\", 0xfea7, \"khahmedialarabic\", 0xfea8, \"kheicoptic\", 0x03e7, \"khhadeva\", 0x0959, \"khhagurmukhi\", 0x0a59, \"khieukhacirclekorean\", 0x3278, \"khieukhaparenkorean\", 0x3218, \"khieukhcirclekorean\", 0x326a, \"khieukhkorean\", 0x314b, \"khieukhparenkorean\", 0x320a, \"khokhaithai\", 0x0e02, \"khokhonthai\", 0x0e05, \"khokhuatthai\", 0x0e03, \"khokhwaithai\", 0x0e04, \"khomutthai\", 0x0e5b, \"khook\", 0x0199, \"khorakhangthai\", 0x0e06, \"khzsquare\", 0x3391, \"kihiragana\", 0x304d, \"kikatakana\", 0x30ad, \"kikatakanahalfwidth\", 0xff77, \"kiroguramusquare\", 0x3315, \"kiromeetorusquare\", 0x3316, \"kirosquare\", 0x3314, \"kiyeokacirclekorean\", 0x326e, \"kiyeokaparenkorean\", 0x320e, \"kiyeokcirclekorean\", 0x3260, \"kiyeokkorean\", 0x3131, \"kiyeokparenkorean\", 0x3200, \"kiyeoksioskorean\", 0x3133, \"kjecyrillic\", 0x045c, \"klinebelow\", 0x1e35, \"klsquare\", 0x3398, \"kmcubedsquare\", 0x33a6, \"kmonospace\", 0xff4b, \"kmsquaredsquare\", 0x33a2, \"kohiragana\", 0x3053, \"kohmsquare\", 0x33c0, \"kokaithai\", 0x0e01, \"kokatakana\", 0x30b3, \"kokatakanahalfwidth\", 0xff7a, \"kooposquare\", 0x331e, \"koppacyrillic\", 0x0481, \"koreanstandardsymbol\", 0x327f, \"koroniscmb\", 0x0343, \"kparen\", 0x24a6, \"kpasquare\", 0x33aa, \"ksicyrillic\", 0x046f, \"ktsquare\", 0x33cf, \"kturned\", 0x029e, \"kuhiragana\", 0x304f, \"kukatakana\", 0x30af, \"kukatakanahalfwidth\", 0xff78, \"kvsquare\", 0x33b8, \"kwsquare\", 0x33be, \"l\", 0x006c, \"labengali\", 0x09b2, \"lacute\", 0x013a, \"ladeva\", 0x0932, \"lagujarati\", 0x0ab2, \"lagurmukhi\", 0x0a32, \"lakkhangyaothai\", 0x0e45, \"lamaleffinalarabic\", 0xfefc, \"lamalefhamzaabovefinalarabic\", 0xfef8, \"lamalefhamzaaboveisolatedarabic\", 0xfef7, \"lamalefhamzabelowfinalarabic\", 0xfefa, \"lamalefhamzabelowisolatedarabic\", 0xfef9, \"lamalefisolatedarabic\", 0xfefb, \"lamalefmaddaabovefinalarabic\", 0xfef6, \"lamalefmaddaaboveisolatedarabic\", 0xfef5, \"lamarabic\", 0x0644, \"lambda\", 0x03bb, \"lambdastroke\", 0x019b, \"lamed\", 0x05dc, \"lameddagesh\", 0xfb3c, \"lameddageshhebrew\", 0xfb3c, \"lamedhebrew\", 0x05dc, \"lamfinalarabic\", 0xfede, \"lamhahinitialarabic\", 0xfcca, \"laminitialarabic\", 0xfedf, \"lamjeeminitialarabic\", 0xfcc9, \"lamkhahinitialarabic\", 0xfccb, \"lamlamhehisolatedarabic\", 0xfdf2, \"lammedialarabic\", 0xfee0, \"lammeemhahinitialarabic\", 0xfd88, \"lammeeminitialarabic\", 0xfccc, \"largecircle\", 0x25ef, \"lbar\", 0x019a, \"lbelt\", 0x026c, \"lbopomofo\", 0x310c, \"lcaron\", 0x013e, \"lcedilla\", 0x013c, \"lcircle\", 0x24db, \"lcircumflexbelow\", 0x1e3d, \"lcommaaccent\", 0x013c, \"ldot\", 0x0140, \"ldotaccent\", 0x0140, \"ldotbelow\", 0x1e37, \"ldotbelowmacron\", 0x1e39, \"leftangleabovecmb\", 0x031a, \"lefttackbelowcmb\", 0x0318, \"less\", 0x003c, \"lessequal\", 0x2264, \"lessequalorgreater\", 0x22da, \"lessmonospace\", 0xff1c, \"lessorequivalent\", 0x2272, \"lessorgreater\", 0x2276, \"lessoverequal\", 0x2266, \"lesssmall\", 0xfe64, \"lezh\", 0x026e, \"lfblock\", 0x258c, \"lhookretroflex\", 0x026d, \"lira\", 0x20a4, \"liwnarmenian\", 0x056c, \"lj\", 0x01c9, \"ljecyrillic\", 0x0459, \"ll\", 0xf6c0, \"lladeva\", 0x0933, \"llagujarati\", 0x0ab3, \"llinebelow\", 0x1e3b, \"llladeva\", 0x0934, \"llvocalicbengali\", 0x09e1, \"llvocalicdeva\", 0x0961, \"llvocalicvowelsignbengali\", 0x09e3, \"llvocalicvowelsigndeva\", 0x0963, \"lmiddletilde\", 0x026b, \"lmonospace\", 0xff4c, \"lmsquare\", 0x33d0, \"lochulathai\", 0x0e2c, \"logicaland\", 0x2227, \"logicalnot\", 0x00ac, \"logicalnotreversed\", 0x2310, \"logicalor\", 0x2228, \"lolingthai\", 0x0e25, \"longs\", 0x017f, \"lowlinecenterline\", 0xfe4e, \"lowlinecmb\", 0x0332, \"lowlinedashed\", 0xfe4d, \"lozenge\", 0x25ca, \"lparen\", 0x24a7, \"lslash\", 0x0142, \"lsquare\", 0x2113, \"lsuperior\", 0xf6ee, \"ltshade\", 0x2591, \"luthai\", 0x0e26, \"lvocalicbengali\", 0x098c, \"lvocalicdeva\", 0x090c, \"lvocalicvowelsignbengali\", 0x09e2, \"lvocalicvowelsigndeva\", 0x0962, \"lxsquare\", 0x33d3, \"m\", 0x006d, \"mabengali\", 0x09ae, \"macron\", 0x00af, \"macronbelowcmb\", 0x0331, \"macroncmb\", 0x0304, \"macronlowmod\", 0x02cd, \"macronmonospace\", 0xffe3, \"macute\", 0x1e3f, \"madeva\", 0x092e, \"magujarati\", 0x0aae, \"magurmukhi\", 0x0a2e, \"mahapakhhebrew\", 0x05a4, \"mahapakhlefthebrew\", 0x05a4, \"mahiragana\", 0x307e, \"maichattawalowleftthai\", 0xf895, \"maichattawalowrightthai\", 0xf894, \"maichattawathai\", 0x0e4b, \"maichattawaupperleftthai\", 0xf893, \"maieklowleftthai\", 0xf88c, \"maieklowrightthai\", 0xf88b, \"maiekthai\", 0x0e48, \"maiekupperleftthai\", 0xf88a, \"maihanakatleftthai\", 0xf884, \"maihanakatthai\", 0x0e31, \"maitaikhuleftthai\", 0xf889, \"maitaikhuthai\", 0x0e47, \"maitholowleftthai\", 0xf88f, \"maitholowrightthai\", 0xf88e, \"maithothai\", 0x0e49, \"maithoupperleftthai\", 0xf88d, \"maitrilowleftthai\", 0xf892, \"maitrilowrightthai\", 0xf891, \"maitrithai\", 0x0e4a, \"maitriupperleftthai\", 0xf890, \"maiyamokthai\", 0x0e46, \"makatakana\", 0x30de, \"makatakanahalfwidth\", 0xff8f, \"male\", 0x2642, \"mansyonsquare\", 0x3347, \"maqafhebrew\", 0x05be, \"mars\", 0x2642, \"masoracirclehebrew\", 0x05af, \"masquare\", 0x3383, \"mbopomofo\", 0x3107, \"mbsquare\", 0x33d4, \"mcircle\", 0x24dc, \"mcubedsquare\", 0x33a5, \"mdotaccent\", 0x1e41, \"mdotbelow\", 0x1e43, \"meemarabic\", 0x0645, \"meemfinalarabic\", 0xfee2, \"meeminitialarabic\", 0xfee3, \"meemmedialarabic\", 0xfee4, \"meemmeeminitialarabic\", 0xfcd1, \"meemmeemisolatedarabic\", 0xfc48, \"meetorusquare\", 0x334d, \"mehiragana\", 0x3081, \"meizierasquare\", 0x337e, \"mekatakana\", 0x30e1, \"mekatakanahalfwidth\", 0xff92, \"mem\", 0x05de, \"memdagesh\", 0xfb3e, \"memdageshhebrew\", 0xfb3e, \"memhebrew\", 0x05de, \"menarmenian\", 0x0574, \"merkhahebrew\", 0x05a5, \"merkhakefulahebrew\", 0x05a6, \"merkhakefulalefthebrew\", 0x05a6, \"merkhalefthebrew\", 0x05a5, \"mhook\", 0x0271, \"mhzsquare\", 0x3392, \"middledotkatakanahalfwidth\", 0xff65, \"middot\", 0x00b7, \"mieumacirclekorean\", 0x3272, \"mieumaparenkorean\", 0x3212, \"mieumcirclekorean\", 0x3264, \"mieumkorean\", 0x3141, \"mieumpansioskorean\", 0x3170, \"mieumparenkorean\", 0x3204, \"mieumpieupkorean\", 0x316e, \"mieumsioskorean\", 0x316f, \"mihiragana\", 0x307f, \"mikatakana\", 0x30df, \"mikatakanahalfwidth\", 0xff90, \"minus\", 0x2212, \"minusbelowcmb\", 0x0320, \"minuscircle\", 0x2296, \"minusmod\", 0x02d7, \"minusplus\", 0x2213, \"minute\", 0x2032, \"miribaarusquare\", 0x334a, \"mirisquare\", 0x3349, \"mlonglegturned\", 0x0270, \"mlsquare\", 0x3396, \"mmcubedsquare\", 0x33a3, \"mmonospace\", 0xff4d, \"mmsquaredsquare\", 0x339f, \"mohiragana\", 0x3082, \"mohmsquare\", 0x33c1, \"mokatakana\", 0x30e2, \"mokatakanahalfwidth\", 0xff93, \"molsquare\", 0x33d6, \"momathai\", 0x0e21, \"moverssquare\", 0x33a7, \"moverssquaredsquare\", 0x33a8, \"mparen\", 0x24a8, \"mpasquare\", 0x33ab, \"mssquare\", 0x33b3, \"msuperior\", 0xf6ef, \"mturned\", 0x026f, \"mu\", 0x00b5, \"mu1\", 0x00b5, \"muasquare\", 0x3382, \"muchgreater\", 0x226b, \"muchless\", 0x226a, \"mufsquare\", 0x338c, \"mugreek\", 0x03bc, \"mugsquare\", 0x338d, \"muhiragana\", 0x3080, \"mukatakana\", 0x30e0, \"mukatakanahalfwidth\", 0xff91, \"mulsquare\", 0x3395, \"multiply\", 0x00d7, \"mumsquare\", 0x339b, \"munahhebrew\", 0x05a3, \"munahlefthebrew\", 0x05a3, \"musicalnote\", 0x266a, \"musicalnotedbl\", 0x266b, \"musicflatsign\", 0x266d, \"musicsharpsign\", 0x266f, \"mussquare\", 0x33b2, \"muvsquare\", 0x33b6, \"muwsquare\", 0x33bc, \"mvmegasquare\", 0x33b9, \"mvsquare\", 0x33b7, \"mwmegasquare\", 0x33bf, \"mwsquare\", 0x33bd, \"n\", 0x006e, \"nabengali\", 0x09a8, \"nabla\", 0x2207, \"nacute\", 0x0144, \"nadeva\", 0x0928, \"nagujarati\", 0x0aa8, \"nagurmukhi\", 0x0a28, \"nahiragana\", 0x306a, \"nakatakana\", 0x30ca, \"nakatakanahalfwidth\", 0xff85, \"napostrophe\", 0x0149, \"nasquare\", 0x3381, \"nbopomofo\", 0x310b, \"nbspace\", 0x00a0, \"ncaron\", 0x0148, \"ncedilla\", 0x0146, \"ncircle\", 0x24dd, \"ncircumflexbelow\", 0x1e4b, \"ncommaaccent\", 0x0146, \"ndotaccent\", 0x1e45, \"ndotbelow\", 0x1e47, \"nehiragana\", 0x306d, \"nekatakana\", 0x30cd, \"nekatakanahalfwidth\", 0xff88, \"newsheqelsign\", 0x20aa, \"nfsquare\", 0x338b, \"ngabengali\", 0x0999, \"ngadeva\", 0x0919, \"ngagujarati\", 0x0a99, \"ngagurmukhi\", 0x0a19, \"ngonguthai\", 0x0e07, \"nhiragana\", 0x3093, \"nhookleft\", 0x0272, \"nhookretroflex\", 0x0273, \"nieunacirclekorean\", 0x326f, \"nieunaparenkorean\", 0x320f, \"nieuncieuckorean\", 0x3135, \"nieuncirclekorean\", 0x3261, \"nieunhieuhkorean\", 0x3136, \"nieunkorean\", 0x3134, \"nieunpansioskorean\", 0x3168, \"nieunparenkorean\", 0x3201, \"nieunsioskorean\", 0x3167, \"nieuntikeutkorean\", 0x3166, \"nihiragana\", 0x306b, \"nikatakana\", 0x30cb, \"nikatakanahalfwidth\", 0xff86, \"nikhahitleftthai\", 0xf899, \"nikhahitthai\", 0x0e4d, \"nine\", 0x0039, \"ninearabic\", 0x0669, \"ninebengali\", 0x09ef, \"ninecircle\", 0x2468, \"ninecircleinversesansserif\", 0x2792, \"ninedeva\", 0x096f, \"ninegujarati\", 0x0aef, \"ninegurmukhi\", 0x0a6f, \"ninehackarabic\", 0x0669, \"ninehangzhou\", 0x3029, \"nineideographicparen\", 0x3228, \"nineinferior\", 0x2089, \"ninemonospace\", 0xff19, \"nineoldstyle\", 0xf739, \"nineparen\", 0x247c, \"nineperiod\", 0x2490, \"ninepersian\", 0x06f9, \"nineroman\", 0x2178, \"ninesuperior\", 0x2079, \"nineteencircle\", 0x2472, \"nineteenparen\", 0x2486, \"nineteenperiod\", 0x249a, \"ninethai\", 0x0e59, \"nj\", 0x01cc, \"njecyrillic\", 0x045a, \"nkatakana\", 0x30f3, \"nkatakanahalfwidth\", 0xff9d, \"nlegrightlong\", 0x019e, \"nlinebelow\", 0x1e49, \"nmonospace\", 0xff4e, \"nmsquare\", 0x339a, \"nnabengali\", 0x09a3, \"nnadeva\", 0x0923, \"nnagujarati\", 0x0aa3, \"nnagurmukhi\", 0x0a23, \"nnnadeva\", 0x0929, \"nohiragana\", 0x306e, \"nokatakana\", 0x30ce, \"nokatakanahalfwidth\", 0xff89, \"nonbreakingspace\", 0x00a0, \"nonenthai\", 0x0e13, \"nonuthai\", 0x0e19, \"noonarabic\", 0x0646, \"noonfinalarabic\", 0xfee6, \"noonghunnaarabic\", 0x06ba, \"noonghunnafinalarabic\", 0xfb9f, \"nooninitialarabic\", 0xfee7, \"noonjeeminitialarabic\", 0xfcd2, \"noonjeemisolatedarabic\", 0xfc4b, \"noonmedialarabic\", 0xfee8, \"noonmeeminitialarabic\", 0xfcd5, \"noonmeemisolatedarabic\", 0xfc4e, \"noonnoonfinalarabic\", 0xfc8d, \"notcontains\", 0x220c, \"notelement\", 0x2209, \"notelementof\", 0x2209, \"notequal\", 0x2260, \"notgreater\", 0x226f, \"notgreaternorequal\", 0x2271, \"notgreaternorless\", 0x2279, \"notidentical\", 0x2262, \"notless\", 0x226e, \"notlessnorequal\", 0x2270, \"notparallel\", 0x2226, \"notprecedes\", 0x2280, \"notsubset\", 0x2284, \"notsucceeds\", 0x2281, \"notsuperset\", 0x2285, \"nowarmenian\", 0x0576, \"nparen\", 0x24a9, \"nssquare\", 0x33b1, \"nsuperior\", 0x207f, \"ntilde\", 0x00f1, \"nu\", 0x03bd, \"nuhiragana\", 0x306c, \"nukatakana\", 0x30cc, \"nukatakanahalfwidth\", 0xff87, \"nuktabengali\", 0x09bc, \"nuktadeva\", 0x093c, \"nuktagujarati\", 0x0abc, \"nuktagurmukhi\", 0x0a3c, \"numbersign\", 0x0023, \"numbersignmonospace\", 0xff03, \"numbersignsmall\", 0xfe5f, \"numeralsigngreek\", 0x0374, \"numeralsignlowergreek\", 0x0375, \"numero\", 0x2116, \"nun\", 0x05e0, \"nundagesh\", 0xfb40, \"nundageshhebrew\", 0xfb40, \"nunhebrew\", 0x05e0, \"nvsquare\", 0x33b5, \"nwsquare\", 0x33bb, \"nyabengali\", 0x099e, \"nyadeva\", 0x091e, \"nyagujarati\", 0x0a9e, \"nyagurmukhi\", 0x0a1e, \"o\", 0x006f, \"oacute\", 0x00f3, \"oangthai\", 0x0e2d, \"obarred\", 0x0275, \"obarredcyrillic\", 0x04e9, \"obarreddieresiscyrillic\", 0x04eb, \"obengali\", 0x0993, \"obopomofo\", 0x311b, \"obreve\", 0x014f, \"ocandradeva\", 0x0911, \"ocandragujarati\", 0x0a91, \"ocandravowelsigndeva\", 0x0949, \"ocandravowelsigngujarati\", 0x0ac9, \"ocaron\", 0x01d2, \"ocircle\", 0x24de, \"ocircumflex\", 0x00f4, \"ocircumflexacute\", 0x1ed1, \"ocircumflexdotbelow\", 0x1ed9, \"ocircumflexgrave\", 0x1ed3, \"ocircumflexhookabove\", 0x1ed5, \"ocircumflextilde\", 0x1ed7, \"ocyrillic\", 0x043e, \"odblacute\", 0x0151, \"odblgrave\", 0x020d, \"odeva\", 0x0913, \"odieresis\", 0x00f6, \"odieresiscyrillic\", 0x04e7, \"odotbelow\", 0x1ecd, \"oe\", 0x0153, \"oekorean\", 0x315a, \"ogonek\", 0x02db, \"ogonekcmb\", 0x0328, \"ograve\", 0x00f2, \"ogujarati\", 0x0a93, \"oharmenian\", 0x0585, \"ohiragana\", 0x304a, \"ohookabove\", 0x1ecf, \"ohorn\", 0x01a1, \"ohornacute\", 0x1edb, \"ohorndotbelow\", 0x1ee3, \"ohorngrave\", 0x1edd, \"ohornhookabove\", 0x1edf, \"ohorntilde\", 0x1ee1, \"ohungarumlaut\", 0x0151, \"oi\", 0x01a3, \"oinvertedbreve\", 0x020f, \"okatakana\", 0x30aa, \"okatakanahalfwidth\", 0xff75, \"okorean\", 0x3157, \"olehebrew\", 0x05ab, \"omacron\", 0x014d, \"omacronacute\", 0x1e53, \"omacrongrave\", 0x1e51, \"omdeva\", 0x0950, \"omega\", 0x03c9, \"omega1\", 0x03d6, \"omegacyrillic\", 0x0461, \"omegalatinclosed\", 0x0277, \"omegaroundcyrillic\", 0x047b, \"omegatitlocyrillic\", 0x047d, \"omegatonos\", 0x03ce, \"omgujarati\", 0x0ad0, \"omicron\", 0x03bf, \"omicrontonos\", 0x03cc, \"omonospace\", 0xff4f, \"one\", 0x0031, \"onearabic\", 0x0661, \"onebengali\", 0x09e7, \"onecircle\", 0x2460, \"onecircleinversesansserif\", 0x278a, \"onedeva\", 0x0967, \"onedotenleader\", 0x2024, \"oneeighth\", 0x215b, \"onefitted\", 0xf6dc, \"onegujarati\", 0x0ae7, \"onegurmukhi\", 0x0a67, \"onehackarabic\", 0x0661, \"onehalf\", 0x00bd, \"onehangzhou\", 0x3021, \"oneideographicparen\", 0x3220, \"oneinferior\", 0x2081, \"onemonospace\", 0xff11, \"onenumeratorbengali\", 0x09f4, \"oneoldstyle\", 0xf731, \"oneparen\", 0x2474, \"oneperiod\", 0x2488, \"onepersian\", 0x06f1, \"onequarter\", 0x00bc, \"oneroman\", 0x2170, \"onesuperior\", 0x00b9, \"onethai\", 0x0e51, \"onethird\", 0x2153, \"oogonek\", 0x01eb, \"oogonekmacron\", 0x01ed, \"oogurmukhi\", 0x0a13, \"oomatragurmukhi\", 0x0a4b, \"oopen\", 0x0254, \"oparen\", 0x24aa, \"openbullet\", 0x25e6, \"option\", 0x2325, \"ordfeminine\", 0x00aa, \"ordmasculine\", 0x00ba, \"orthogonal\", 0x221f, \"oshortdeva\", 0x0912, \"oshortvowelsigndeva\", 0x094a, \"oslash\", 0x00f8, \"oslashacute\", 0x01ff, \"osmallhiragana\", 0x3049, \"osmallkatakana\", 0x30a9, \"osmallkatakanahalfwidth\", 0xff6b, \"ostrokeacute\", 0x01ff, \"osuperior\", 0xf6f0, \"otcyrillic\", 0x047f, \"otilde\", 0x00f5, \"otildeacute\", 0x1e4d, \"otildedieresis\", 0x1e4f, \"oubopomofo\", 0x3121, \"overline\", 0x203e, \"overlinecenterline\", 0xfe4a, \"overlinecmb\", 0x0305, \"overlinedashed\", 0xfe49, \"overlinedblwavy\", 0xfe4c, \"overlinewavy\", 0xfe4b, \"overscore\", 0x00af, \"ovowelsignbengali\", 0x09cb, \"ovowelsigndeva\", 0x094b, \"ovowelsigngujarati\", 0x0acb, \"p\", 0x0070, \"paampssquare\", 0x3380, \"paasentosquare\", 0x332b, \"pabengali\", 0x09aa, \"pacute\", 0x1e55, \"padeva\", 0x092a, \"pagedown\", 0x21df, \"pageup\", 0x21de, \"pagujarati\", 0x0aaa, \"pagurmukhi\", 0x0a2a, \"pahiragana\", 0x3071, \"paiyannoithai\", 0x0e2f, \"pakatakana\", 0x30d1, \"palatalizationcyrilliccmb\", 0x0484, \"palochkacyrillic\", 0x04c0, \"pansioskorean\", 0x317f, \"paragraph\", 0x00b6, \"parallel\", 0x2225, \"parenleft\", 0x0028, \"parenleftaltonearabic\", 0xfd3e, \"parenleftbt\", 0xf8ed, \"parenleftex\", 0xf8ec, \"parenleftinferior\", 0x208d, \"parenleftmonospace\", 0xff08, \"parenleftsmall\", 0xfe59, \"parenleftsuperior\", 0x207d, \"parenlefttp\", 0xf8eb, \"parenleftvertical\", 0xfe35, \"parenright\", 0x0029, \"parenrightaltonearabic\", 0xfd3f, \"parenrightbt\", 0xf8f8, \"parenrightex\", 0xf8f7, \"parenrightinferior\", 0x208e, \"parenrightmonospace\", 0xff09, \"parenrightsmall\", 0xfe5a, \"parenrightsuperior\", 0x207e, \"parenrighttp\", 0xf8f6, \"parenrightvertical\", 0xfe36, \"partialdiff\", 0x2202, \"paseqhebrew\", 0x05c0, \"pashtahebrew\", 0x0599, \"pasquare\", 0x33a9, \"patah\", 0x05b7, \"patah11\", 0x05b7, \"patah1d\", 0x05b7, \"patah2a\", 0x05b7, \"patahhebrew\", 0x05b7, \"patahnarrowhebrew\", 0x05b7, \"patahquarterhebrew\", 0x05b7, \"patahwidehebrew\", 0x05b7, \"pazerhebrew\", 0x05a1, \"pbopomofo\", 0x3106, \"pcircle\", 0x24df, \"pdotaccent\", 0x1e57, \"pe\", 0x05e4, \"pecyrillic\", 0x043f, \"pedagesh\", 0xfb44, \"pedageshhebrew\", 0xfb44, \"peezisquare\", 0x333b, \"pefinaldageshhebrew\", 0xfb43, \"peharabic\", 0x067e, \"peharmenian\", 0x057a, \"pehebrew\", 0x05e4, \"pehfinalarabic\", 0xfb57, \"pehinitialarabic\", 0xfb58, \"pehiragana\", 0x307a, \"pehmedialarabic\", 0xfb59, \"pekatakana\", 0x30da, \"pemiddlehookcyrillic\", 0x04a7, \"perafehebrew\", 0xfb4e, \"percent\", 0x0025, \"percentarabic\", 0x066a, \"percentmonospace\", 0xff05, \"percentsmall\", 0xfe6a, \"period\", 0x002e, \"periodarmenian\", 0x0589, \"periodcentered\", 0x00b7, \"periodhalfwidth\", 0xff61, \"periodinferior\", 0xf6e7, \"periodmonospace\", 0xff0e, \"periodsmall\", 0xfe52, \"periodsuperior\", 0xf6e8, \"perispomenigreekcmb\", 0x0342, \"perpendicular\", 0x22a5, \"perthousand\", 0x2030, \"peseta\", 0x20a7, \"pfsquare\", 0x338a, \"phabengali\", 0x09ab, \"phadeva\", 0x092b, \"phagujarati\", 0x0aab, \"phagurmukhi\", 0x0a2b, \"phi\", 0x03c6, \"phi1\", 0x03d5, \"phieuphacirclekorean\", 0x327a, \"phieuphaparenkorean\", 0x321a, \"phieuphcirclekorean\", 0x326c, \"phieuphkorean\", 0x314d, \"phieuphparenkorean\", 0x320c, \"philatin\", 0x0278, \"phinthuthai\", 0x0e3a, \"phisymbolgreek\", 0x03d5, \"phook\", 0x01a5, \"phophanthai\", 0x0e1e, \"phophungthai\", 0x0e1c, \"phosamphaothai\", 0x0e20, \"pi\", 0x03c0, \"pieupacirclekorean\", 0x3273, \"pieupaparenkorean\", 0x3213, \"pieupcieuckorean\", 0x3176, \"pieupcirclekorean\", 0x3265, \"pieupkiyeokkorean\", 0x3172, \"pieupkorean\", 0x3142, \"pieupparenkorean\", 0x3205, \"pieupsioskiyeokkorean\", 0x3174, \"pieupsioskorean\", 0x3144, \"pieupsiostikeutkorean\", 0x3175, \"pieupthieuthkorean\", 0x3177, \"pieuptikeutkorean\", 0x3173, \"pihiragana\", 0x3074, \"pikatakana\", 0x30d4, \"pisymbolgreek\", 0x03d6, \"piwrarmenian\", 0x0583, \"plus\", 0x002b, \"plusbelowcmb\", 0x031f, \"pluscircle\", 0x2295, \"plusminus\", 0x00b1, \"plusmod\", 0x02d6, \"plusmonospace\", 0xff0b, \"plussmall\", 0xfe62, \"plussuperior\", 0x207a, \"pmonospace\", 0xff50, \"pmsquare\", 0x33d8, \"pohiragana\", 0x307d, \"pointingindexdownwhite\", 0x261f, \"pointingindexleftwhite\", 0x261c, \"pointingindexrightwhite\", 0x261e, \"pointingindexupwhite\", 0x261d, \"pokatakana\", 0x30dd, \"poplathai\", 0x0e1b, \"postalmark\", 0x3012, \"postalmarkface\", 0x3020, \"pparen\", 0x24ab, \"precedes\", 0x227a, \"prescription\", 0x211e, \"primemod\", 0x02b9, \"primereversed\", 0x2035, \"product\", 0x220f, \"projective\", 0x2305, \"prolongedkana\", 0x30fc, \"propellor\", 0x2318, \"propersubset\", 0x2282, \"propersuperset\", 0x2283, \"proportion\", 0x2237, \"proportional\", 0x221d, \"psi\", 0x03c8, \"psicyrillic\", 0x0471, \"psilipneumatacyrilliccmb\", 0x0486, \"pssquare\", 0x33b0, \"puhiragana\", 0x3077, \"pukatakana\", 0x30d7, \"pvsquare\", 0x33b4, \"pwsquare\", 0x33ba, \"q\", 0x0071, \"qadeva\", 0x0958, \"qadmahebrew\", 0x05a8, \"qafarabic\", 0x0642, \"qaffinalarabic\", 0xfed6, \"qafinitialarabic\", 0xfed7, \"qafmedialarabic\", 0xfed8, \"qamats\", 0x05b8, \"qamats10\", 0x05b8, \"qamats1a\", 0x05b8, \"qamats1c\", 0x05b8, \"qamats27\", 0x05b8, \"qamats29\", 0x05b8, \"qamats33\", 0x05b8, \"qamatsde\", 0x05b8, \"qamatshebrew\", 0x05b8, \"qamatsnarrowhebrew\", 0x05b8, \"qamatsqatanhebrew\", 0x05b8, \"qamatsqatannarrowhebrew\", 0x05b8, \"qamatsqatanquarterhebrew\", 0x05b8, \"qamatsqatanwidehebrew\", 0x05b8, \"qamatsquarterhebrew\", 0x05b8, \"qamatswidehebrew\", 0x05b8, \"qarneyparahebrew\", 0x059f, \"qbopomofo\", 0x3111, \"qcircle\", 0x24e0, \"qhook\", 0x02a0, \"qmonospace\", 0xff51, \"qof\", 0x05e7, \"qofdagesh\", 0xfb47, \"qofdageshhebrew\", 0xfb47, \"qofhebrew\", 0x05e7, \"qparen\", 0x24ac, \"quarternote\", 0x2669, \"qubuts\", 0x05bb, \"qubuts18\", 0x05bb, \"qubuts25\", 0x05bb, \"qubuts31\", 0x05bb, \"qubutshebrew\", 0x05bb, \"qubutsnarrowhebrew\", 0x05bb, \"qubutsquarterhebrew\", 0x05bb, \"qubutswidehebrew\", 0x05bb, \"question\", 0x003f, \"questionarabic\", 0x061f, \"questionarmenian\", 0x055e, \"questiondown\", 0x00bf, \"questiondownsmall\", 0xf7bf, \"questiongreek\", 0x037e, \"questionmonospace\", 0xff1f, \"questionsmall\", 0xf73f, \"quotedbl\", 0x0022, \"quotedblbase\", 0x201e, \"quotedblleft\", 0x201c, \"quotedblmonospace\", 0xff02, \"quotedblprime\", 0x301e, \"quotedblprimereversed\", 0x301d, \"quotedblright\", 0x201d, \"quoteleft\", 0x2018, \"quoteleftreversed\", 0x201b, \"quotereversed\", 0x201b, \"quoteright\", 0x2019, \"quoterightn\", 0x0149, \"quotesinglbase\", 0x201a, \"quotesingle\", 0x0027, \"quotesinglemonospace\", 0xff07, \"r\", 0x0072, \"raarmenian\", 0x057c, \"rabengali\", 0x09b0, \"racute\", 0x0155, \"radeva\", 0x0930, \"radical\", 0x221a, \"radicalex\", 0xf8e5, \"radoverssquare\", 0x33ae, \"radoverssquaredsquare\", 0x33af, \"radsquare\", 0x33ad, \"rafe\", 0x05bf, \"rafehebrew\", 0x05bf, \"ragujarati\", 0x0ab0, \"ragurmukhi\", 0x0a30, \"rahiragana\", 0x3089, \"rakatakana\", 0x30e9, \"rakatakanahalfwidth\", 0xff97, \"ralowerdiagonalbengali\", 0x09f1, \"ramiddlediagonalbengali\", 0x09f0, \"ramshorn\", 0x0264, \"ratio\", 0x2236, \"rbopomofo\", 0x3116, \"rcaron\", 0x0159, \"rcedilla\", 0x0157, \"rcircle\", 0x24e1, \"rcommaaccent\", 0x0157, \"rdblgrave\", 0x0211, \"rdotaccent\", 0x1e59, \"rdotbelow\", 0x1e5b, \"rdotbelowmacron\", 0x1e5d, \"referencemark\", 0x203b, \"reflexsubset\", 0x2286, \"reflexsuperset\", 0x2287, \"registered\", 0x00ae, \"registersans\", 0xf8e8, \"registerserif\", 0xf6da, \"reharabic\", 0x0631, \"reharmenian\", 0x0580, \"rehfinalarabic\", 0xfeae, \"rehiragana\", 0x308c, \"rekatakana\", 0x30ec, \"rekatakanahalfwidth\", 0xff9a, \"resh\", 0x05e8, \"reshdageshhebrew\", 0xfb48, \"reshhebrew\", 0x05e8, \"reversedtilde\", 0x223d, \"reviahebrew\", 0x0597, \"reviamugrashhebrew\", 0x0597, \"revlogicalnot\", 0x2310, \"rfishhook\", 0x027e, \"rfishhookreversed\", 0x027f, \"rhabengali\", 0x09dd, \"rhadeva\", 0x095d, \"rho\", 0x03c1, \"rhook\", 0x027d, \"rhookturned\", 0x027b, \"rhookturnedsuperior\", 0x02b5, \"rhosymbolgreek\", 0x03f1, \"rhotichookmod\", 0x02de, \"rieulacirclekorean\", 0x3271, \"rieulaparenkorean\", 0x3211, \"rieulcirclekorean\", 0x3263, \"rieulhieuhkorean\", 0x3140, \"rieulkiyeokkorean\", 0x313a, \"rieulkiyeoksioskorean\", 0x3169, \"rieulkorean\", 0x3139, \"rieulmieumkorean\", 0x313b, \"rieulpansioskorean\", 0x316c, \"rieulparenkorean\", 0x3203, \"rieulphieuphkorean\", 0x313f, \"rieulpieupkorean\", 0x313c, \"rieulpieupsioskorean\", 0x316b, \"rieulsioskorean\", 0x313d, \"rieulthieuthkorean\", 0x313e, \"rieultikeutkorean\", 0x316a, \"rieulyeorinhieuhkorean\", 0x316d, \"rightangle\", 0x221f, \"righttackbelowcmb\", 0x0319, \"righttriangle\", 0x22bf, \"rihiragana\", 0x308a, \"rikatakana\", 0x30ea, \"rikatakanahalfwidth\", 0xff98, \"ring\", 0x02da, \"ringbelowcmb\", 0x0325, \"ringcmb\", 0x030a, \"ringhalfleft\", 0x02bf, \"ringhalfleftarmenian\", 0x0559, \"ringhalfleftbelowcmb\", 0x031c, \"ringhalfleftcentered\", 0x02d3, \"ringhalfright\", 0x02be, \"ringhalfrightbelowcmb\", 0x0339, \"ringhalfrightcentered\", 0x02d2, \"rinvertedbreve\", 0x0213, \"rittorusquare\", 0x3351, \"rlinebelow\", 0x1e5f, \"rlongleg\", 0x027c, \"rlonglegturned\", 0x027a, \"rmonospace\", 0xff52, \"rohiragana\", 0x308d, \"rokatakana\", 0x30ed, \"rokatakanahalfwidth\", 0xff9b, \"roruathai\", 0x0e23, \"rparen\", 0x24ad, \"rrabengali\", 0x09dc, \"rradeva\", 0x0931, \"rragurmukhi\", 0x0a5c, \"rreharabic\", 0x0691, \"rrehfinalarabic\", 0xfb8d, \"rrvocalicbengali\", 0x09e0, \"rrvocalicdeva\", 0x0960, \"rrvocalicgujarati\", 0x0ae0, \"rrvocalicvowelsignbengali\", 0x09c4, \"rrvocalicvowelsigndeva\", 0x0944, \"rrvocalicvowelsigngujarati\", 0x0ac4, \"rsuperior\", 0xf6f1, \"rtblock\", 0x2590, \"rturned\", 0x0279, \"rturnedsuperior\", 0x02b4, \"ruhiragana\", 0x308b, \"rukatakana\", 0x30eb, \"rukatakanahalfwidth\", 0xff99, \"rupeemarkbengali\", 0x09f2, \"rupeesignbengali\", 0x09f3, \"rupiah\", 0xf6dd, \"ruthai\", 0x0e24, \"rvocalicbengali\", 0x098b, \"rvocalicdeva\", 0x090b, \"rvocalicgujarati\", 0x0a8b, \"rvocalicvowelsignbengali\", 0x09c3, \"rvocalicvowelsigndeva\", 0x0943, \"rvocalicvowelsigngujarati\", 0x0ac3, \"s\", 0x0073, \"sabengali\", 0x09b8, \"sacute\", 0x015b, \"sacutedotaccent\", 0x1e65, \"sadarabic\", 0x0635, \"sadeva\", 0x0938, \"sadfinalarabic\", 0xfeba, \"sadinitialarabic\", 0xfebb, \"sadmedialarabic\", 0xfebc, \"sagujarati\", 0x0ab8, \"sagurmukhi\", 0x0a38, \"sahiragana\", 0x3055, \"sakatakana\", 0x30b5, \"sakatakanahalfwidth\", 0xff7b, \"sallallahoualayhewasallamarabic\", 0xfdfa, \"samekh\", 0x05e1, \"samekhdagesh\", 0xfb41, \"samekhdageshhebrew\", 0xfb41, \"samekhhebrew\", 0x05e1, \"saraaathai\", 0x0e32, \"saraaethai\", 0x0e41, \"saraaimaimalaithai\", 0x0e44, \"saraaimaimuanthai\", 0x0e43, \"saraamthai\", 0x0e33, \"saraathai\", 0x0e30, \"saraethai\", 0x0e40, \"saraiileftthai\", 0xf886, \"saraiithai\", 0x0e35, \"saraileftthai\", 0xf885, \"saraithai\", 0x0e34, \"saraothai\", 0x0e42, \"saraueeleftthai\", 0xf888, \"saraueethai\", 0x0e37, \"saraueleftthai\", 0xf887, \"sarauethai\", 0x0e36, \"sarauthai\", 0x0e38, \"sarauuthai\", 0x0e39, \"sbopomofo\", 0x3119, \"scaron\", 0x0161, \"scarondotaccent\", 0x1e67, \"scedilla\", 0x015f, \"schwa\", 0x0259, \"schwacyrillic\", 0x04d9, \"schwadieresiscyrillic\", 0x04db, \"schwahook\", 0x025a, \"scircle\", 0x24e2, \"scircumflex\", 0x015d, \"scommaaccent\", 0x0219, \"sdotaccent\", 0x1e61, \"sdotbelow\", 0x1e63, \"sdotbelowdotaccent\", 0x1e69, \"seagullbelowcmb\", 0x033c, \"second\", 0x2033, \"secondtonechinese\", 0x02ca, \"section\", 0x00a7, \"seenarabic\", 0x0633, \"seenfinalarabic\", 0xfeb2, \"seeninitialarabic\", 0xfeb3, \"seenmedialarabic\", 0xfeb4, \"segol\", 0x05b6, \"segol13\", 0x05b6, \"segol1f\", 0x05b6, \"segol2c\", 0x05b6, \"segolhebrew\", 0x05b6, \"segolnarrowhebrew\", 0x05b6, \"segolquarterhebrew\", 0x05b6, \"segoltahebrew\", 0x0592, \"segolwidehebrew\", 0x05b6, \"seharmenian\", 0x057d, \"sehiragana\", 0x305b, \"sekatakana\", 0x30bb, \"sekatakanahalfwidth\", 0xff7e, \"semicolon\", 0x003b, \"semicolonarabic\", 0x061b, \"semicolonmonospace\", 0xff1b, \"semicolonsmall\", 0xfe54, \"semivoicedmarkkana\", 0x309c, \"semivoicedmarkkanahalfwidth\", 0xff9f, \"sentisquare\", 0x3322, \"sentosquare\", 0x3323, \"seven\", 0x0037, \"sevenarabic\", 0x0667, \"sevenbengali\", 0x09ed, \"sevencircle\", 0x2466, \"sevencircleinversesansserif\", 0x2790, \"sevendeva\", 0x096d, \"seveneighths\", 0x215e, \"sevengujarati\", 0x0aed, \"sevengurmukhi\", 0x0a6d, \"sevenhackarabic\", 0x0667, \"sevenhangzhou\", 0x3027, \"sevenideographicparen\", 0x3226, \"seveninferior\", 0x2087, \"sevenmonospace\", 0xff17, \"sevenoldstyle\", 0xf737, \"sevenparen\", 0x247a, \"sevenperiod\", 0x248e, \"sevenpersian\", 0x06f7, \"sevenroman\", 0x2176, \"sevensuperior\", 0x2077, \"seventeencircle\", 0x2470, \"seventeenparen\", 0x2484, \"seventeenperiod\", 0x2498, \"seventhai\", 0x0e57, \"sfthyphen\", 0x00ad, \"shaarmenian\", 0x0577, \"shabengali\", 0x09b6, \"shacyrillic\", 0x0448, \"shaddaarabic\", 0x0651, \"shaddadammaarabic\", 0xfc61, \"shaddadammatanarabic\", 0xfc5e, \"shaddafathaarabic\", 0xfc60, \"shaddakasraarabic\", 0xfc62, \"shaddakasratanarabic\", 0xfc5f, \"shade\", 0x2592, \"shadedark\", 0x2593, \"shadelight\", 0x2591, \"shademedium\", 0x2592, \"shadeva\", 0x0936, \"shagujarati\", 0x0ab6, \"shagurmukhi\", 0x0a36, \"shalshelethebrew\", 0x0593, \"shbopomofo\", 0x3115, \"shchacyrillic\", 0x0449, \"sheenarabic\", 0x0634, \"sheenfinalarabic\", 0xfeb6, \"sheeninitialarabic\", 0xfeb7, \"sheenmedialarabic\", 0xfeb8, \"sheicoptic\", 0x03e3, \"sheqel\", 0x20aa, \"sheqelhebrew\", 0x20aa, \"sheva\", 0x05b0, \"sheva115\", 0x05b0, \"sheva15\", 0x05b0, \"sheva22\", 0x05b0, \"sheva2e\", 0x05b0, \"shevahebrew\", 0x05b0, \"shevanarrowhebrew\", 0x05b0, \"shevaquarterhebrew\", 0x05b0, \"shevawidehebrew\", 0x05b0, \"shhacyrillic\", 0x04bb, \"shimacoptic\", 0x03ed, \"shin\", 0x05e9, \"shindagesh\", 0xfb49, \"shindageshhebrew\", 0xfb49, \"shindageshshindot\", 0xfb2c, \"shindageshshindothebrew\", 0xfb2c, \"shindageshsindot\", 0xfb2d, \"shindageshsindothebrew\", 0xfb2d, \"shindothebrew\", 0x05c1, \"shinhebrew\", 0x05e9, \"shinshindot\", 0xfb2a, \"shinshindothebrew\", 0xfb2a, \"shinsindot\", 0xfb2b, \"shinsindothebrew\", 0xfb2b, \"shook\", 0x0282, \"sigma\", 0x03c3, \"sigma1\", 0x03c2, \"sigmafinal\", 0x03c2, \"sigmalunatesymbolgreek\", 0x03f2, \"sihiragana\", 0x3057, \"sikatakana\", 0x30b7, \"sikatakanahalfwidth\", 0xff7c, \"siluqhebrew\", 0x05bd, \"siluqlefthebrew\", 0x05bd, \"similar\", 0x223c, \"sindothebrew\", 0x05c2, \"siosacirclekorean\", 0x3274, \"siosaparenkorean\", 0x3214, \"sioscieuckorean\", 0x317e, \"sioscirclekorean\", 0x3266, \"sioskiyeokkorean\", 0x317a, \"sioskorean\", 0x3145, \"siosnieunkorean\", 0x317b, \"siosparenkorean\", 0x3206, \"siospieupkorean\", 0x317d, \"siostikeutkorean\", 0x317c, \"six\", 0x0036, \"sixarabic\", 0x0666, \"sixbengali\", 0x09ec, \"sixcircle\", 0x2465, \"sixcircleinversesansserif\", 0x278f, \"sixdeva\", 0x096c, \"sixgujarati\", 0x0aec, \"sixgurmukhi\", 0x0a6c, \"sixhackarabic\", 0x0666, \"sixhangzhou\", 0x3026, \"sixideographicparen\", 0x3225, \"sixinferior\", 0x2086, \"sixmonospace\", 0xff16, \"sixoldstyle\", 0xf736, \"sixparen\", 0x2479, \"sixperiod\", 0x248d, \"sixpersian\", 0x06f6, \"sixroman\", 0x2175, \"sixsuperior\", 0x2076, \"sixteencircle\", 0x246f, \"sixteencurrencydenominatorbengali\", 0x09f9, \"sixteenparen\", 0x2483, \"sixteenperiod\", 0x2497, \"sixthai\", 0x0e56, \"slash\", 0x002f, \"slashmonospace\", 0xff0f, \"slong\", 0x017f, \"slongdotaccent\", 0x1e9b, \"smileface\", 0x263a, \"smonospace\", 0xff53, \"sofpasuqhebrew\", 0x05c3, \"softhyphen\", 0x00ad, \"softsigncyrillic\", 0x044c, \"sohiragana\", 0x305d, \"sokatakana\", 0x30bd, \"sokatakanahalfwidth\", 0xff7f, \"soliduslongoverlaycmb\", 0x0338, \"solidusshortoverlaycmb\", 0x0337, \"sorusithai\", 0x0e29, \"sosalathai\", 0x0e28, \"sosothai\", 0x0e0b, \"sosuathai\", 0x0e2a, \"space\", 0x0020, \"spacehackarabic\", 0x0020, \"spade\", 0x2660, \"spadesuitblack\", 0x2660, \"spadesuitwhite\", 0x2664, \"sparen\", 0x24ae, \"squarebelowcmb\", 0x033b, \"squarecc\", 0x33c4, \"squarecm\", 0x339d, \"squarediagonalcrosshatchfill\", 0x25a9, \"squarehorizontalfill\", 0x25a4, \"squarekg\", 0x338f, \"squarekm\", 0x339e, \"squarekmcapital\", 0x33ce, \"squareln\", 0x33d1, \"squarelog\", 0x33d2, \"squaremg\", 0x338e, \"squaremil\", 0x33d5, \"squaremm\", 0x339c, \"squaremsquared\", 0x33a1, \"squareorthogonalcrosshatchfill\", 0x25a6, \"squareupperlefttolowerrightfill\", 0x25a7, \"squareupperrighttolowerleftfill\", 0x25a8, \"squareverticalfill\", 0x25a5, \"squarewhitewithsmallblack\", 0x25a3, \"srsquare\", 0x33db, \"ssabengali\", 0x09b7, \"ssadeva\", 0x0937, \"ssagujarati\", 0x0ab7, \"ssangcieuckorean\", 0x3149, \"ssanghieuhkorean\", 0x3185, \"ssangieungkorean\", 0x3180, \"ssangkiyeokkorean\", 0x3132, \"ssangnieunkorean\", 0x3165, \"ssangpieupkorean\", 0x3143, \"ssangsioskorean\", 0x3146, \"ssangtikeutkorean\", 0x3138, \"ssuperior\", 0xf6f2, \"sterling\", 0x00a3, \"sterlingmonospace\", 0xffe1, \"strokelongoverlaycmb\", 0x0336, \"strokeshortoverlaycmb\", 0x0335, \"subset\", 0x2282, \"subsetnotequal\", 0x228a, \"subsetorequal\", 0x2286, \"succeeds\", 0x227b, \"suchthat\", 0x220b, \"suhiragana\", 0x3059, \"sukatakana\", 0x30b9, \"sukatakanahalfwidth\", 0xff7d, \"sukunarabic\", 0x0652, \"summation\", 0x2211, \"sun\", 0x263c, \"superset\", 0x2283, \"supersetnotequal\", 0x228b, \"supersetorequal\", 0x2287, \"svsquare\", 0x33dc, \"syouwaerasquare\", 0x337c, \"t\", 0x0074, \"tabengali\", 0x09a4, \"tackdown\", 0x22a4, \"tackleft\", 0x22a3, \"tadeva\", 0x0924, \"tagujarati\", 0x0aa4, \"tagurmukhi\", 0x0a24, \"taharabic\", 0x0637, \"tahfinalarabic\", 0xfec2, \"tahinitialarabic\", 0xfec3, \"tahiragana\", 0x305f, \"tahmedialarabic\", 0xfec4, \"taisyouerasquare\", 0x337d, \"takatakana\", 0x30bf, \"takatakanahalfwidth\", 0xff80, \"tatweelarabic\", 0x0640, \"tau\", 0x03c4, \"tav\", 0x05ea, \"tavdages\", 0xfb4a, \"tavdagesh\", 0xfb4a, \"tavdageshhebrew\", 0xfb4a, \"tavhebrew\", 0x05ea, \"tbar\", 0x0167, \"tbopomofo\", 0x310a, \"tcaron\", 0x0165, \"tccurl\", 0x02a8, \"tcedilla\", 0x0163, \"tcheharabic\", 0x0686, \"tchehfinalarabic\", 0xfb7b, \"tchehinitialarabic\", 0xfb7c, \"tchehmedialarabic\", 0xfb7d, \"tcircle\", 0x24e3, \"tcircumflexbelow\", 0x1e71, \"tcommaaccent\", 0x0163, \"tdieresis\", 0x1e97, \"tdotaccent\", 0x1e6b, \"tdotbelow\", 0x1e6d, \"tecyrillic\", 0x0442, \"tedescendercyrillic\", 0x04ad, \"teharabic\", 0x062a, \"tehfinalarabic\", 0xfe96, \"tehhahinitialarabic\", 0xfca2, \"tehhahisolatedarabic\", 0xfc0c, \"tehinitialarabic\", 0xfe97, \"tehiragana\", 0x3066, \"tehjeeminitialarabic\", 0xfca1, \"tehjeemisolatedarabic\", 0xfc0b, \"tehmarbutaarabic\", 0x0629, \"tehmarbutafinalarabic\", 0xfe94, \"tehmedialarabic\", 0xfe98, \"tehmeeminitialarabic\", 0xfca4, \"tehmeemisolatedarabic\", 0xfc0e, \"tehnoonfinalarabic\", 0xfc73, \"tekatakana\", 0x30c6, \"tekatakanahalfwidth\", 0xff83, \"telephone\", 0x2121, \"telephoneblack\", 0x260e, \"telishagedolahebrew\", 0x05a0, \"telishaqetanahebrew\", 0x05a9, \"tencircle\", 0x2469, \"tenideographicparen\", 0x3229, \"tenparen\", 0x247d, \"tenperiod\", 0x2491, \"tenroman\", 0x2179, \"tesh\", 0x02a7, \"tet\", 0x05d8, \"tetdagesh\", 0xfb38, \"tetdageshhebrew\", 0xfb38, \"tethebrew\", 0x05d8, \"tetsecyrillic\", 0x04b5, \"tevirhebrew\", 0x059b, \"tevirlefthebrew\", 0x059b, \"thabengali\", 0x09a5, \"thadeva\", 0x0925, \"thagujarati\", 0x0aa5, \"thagurmukhi\", 0x0a25, \"thalarabic\", 0x0630, \"thalfinalarabic\", 0xfeac, \"thanthakhatlowleftthai\", 0xf898, \"thanthakhatlowrightthai\", 0xf897, \"thanthakhatthai\", 0x0e4c, \"thanthakhatupperleftthai\", 0xf896, \"theharabic\", 0x062b, \"thehfinalarabic\", 0xfe9a, \"thehinitialarabic\", 0xfe9b, \"thehmedialarabic\", 0xfe9c, \"thereexists\", 0x2203, \"therefore\", 0x2234, \"theta\", 0x03b8, \"theta1\", 0x03d1, \"thetasymbolgreek\", 0x03d1, \"thieuthacirclekorean\", 0x3279, \"thieuthaparenkorean\", 0x3219, \"thieuthcirclekorean\", 0x326b, \"thieuthkorean\", 0x314c, \"thieuthparenkorean\", 0x320b, \"thirteencircle\", 0x246c, \"thirteenparen\", 0x2480, \"thirteenperiod\", 0x2494, \"thonangmonthothai\", 0x0e11, \"thook\", 0x01ad, \"thophuthaothai\", 0x0e12, \"thorn\", 0x00fe, \"thothahanthai\", 0x0e17, \"thothanthai\", 0x0e10, \"thothongthai\", 0x0e18, \"thothungthai\", 0x0e16, \"thousandcyrillic\", 0x0482, \"thousandsseparatorarabic\", 0x066c, \"thousandsseparatorpersian\", 0x066c, \"three\", 0x0033, \"threearabic\", 0x0663, \"threebengali\", 0x09e9, \"threecircle\", 0x2462, \"threecircleinversesansserif\", 0x278c, \"threedeva\", 0x0969, \"threeeighths\", 0x215c, \"threegujarati\", 0x0ae9, \"threegurmukhi\", 0x0a69, \"threehackarabic\", 0x0663, \"threehangzhou\", 0x3023, \"threeideographicparen\", 0x3222, \"threeinferior\", 0x2083, \"threemonospace\", 0xff13, \"threenumeratorbengali\", 0x09f6, \"threeoldstyle\", 0xf733, \"threeparen\", 0x2476, \"threeperiod\", 0x248a, \"threepersian\", 0x06f3, \"threequarters\", 0x00be, \"threequartersemdash\", 0xf6de, \"threeroman\", 0x2172, \"threesuperior\", 0x00b3, \"threethai\", 0x0e53, \"thzsquare\", 0x3394, \"tihiragana\", 0x3061, \"tikatakana\", 0x30c1, \"tikatakanahalfwidth\", 0xff81, \"tikeutacirclekorean\", 0x3270, \"tikeutaparenkorean\", 0x3210, \"tikeutcirclekorean\", 0x3262, \"tikeutkorean\", 0x3137, \"tikeutparenkorean\", 0x3202, \"tilde\", 0x02dc, \"tildebelowcmb\", 0x0330, \"tildecmb\", 0x0303, \"tildecomb\", 0x0303, \"tildedoublecmb\", 0x0360, \"tildeoperator\", 0x223c, \"tildeoverlaycmb\", 0x0334, \"tildeverticalcmb\", 0x033e, \"timescircle\", 0x2297, \"tipehahebrew\", 0x0596, \"tipehalefthebrew\", 0x0596, \"tippigurmukhi\", 0x0a70, \"titlocyrilliccmb\", 0x0483, \"tiwnarmenian\", 0x057f, \"tlinebelow\", 0x1e6f, \"tmonospace\", 0xff54, \"toarmenian\", 0x0569, \"tohiragana\", 0x3068, \"tokatakana\", 0x30c8, \"tokatakanahalfwidth\", 0xff84, \"tonebarextrahighmod\", 0x02e5, \"tonebarextralowmod\", 0x02e9, \"tonebarhighmod\", 0x02e6, \"tonebarlowmod\", 0x02e8, \"tonebarmidmod\", 0x02e7, \"tonefive\", 0x01bd, \"tonesix\", 0x0185, \"tonetwo\", 0x01a8, \"tonos\", 0x0384, \"tonsquare\", 0x3327, \"topatakthai\", 0x0e0f, \"tortoiseshellbracketleft\", 0x3014, \"tortoiseshellbracketleftsmall\", 0xfe5d, \"tortoiseshellbracketleftvertical\", 0xfe39, \"tortoiseshellbracketright\", 0x3015, \"tortoiseshellbracketrightsmall\", 0xfe5e, \"tortoiseshellbracketrightvertical\", 0xfe3a, \"totaothai\", 0x0e15, \"tpalatalhook\", 0x01ab, \"tparen\", 0x24af, \"trademark\", 0x2122, \"trademarksans\", 0xf8ea, \"trademarkserif\", 0xf6db, \"tretroflexhook\", 0x0288, \"triagdn\", 0x25bc, \"triaglf\", 0x25c4, \"triagrt\", 0x25ba, \"triagup\", 0x25b2, \"ts\", 0x02a6, \"tsadi\", 0x05e6, \"tsadidagesh\", 0xfb46, \"tsadidageshhebrew\", 0xfb46, \"tsadihebrew\", 0x05e6, \"tsecyrillic\", 0x0446, \"tsere\", 0x05b5, \"tsere12\", 0x05b5, \"tsere1e\", 0x05b5, \"tsere2b\", 0x05b5, \"tserehebrew\", 0x05b5, \"tserenarrowhebrew\", 0x05b5, \"tserequarterhebrew\", 0x05b5, \"tserewidehebrew\", 0x05b5, \"tshecyrillic\", 0x045b, \"tsuperior\", 0xf6f3, \"ttabengali\", 0x099f, \"ttadeva\", 0x091f, \"ttagujarati\", 0x0a9f, \"ttagurmukhi\", 0x0a1f, \"tteharabic\", 0x0679, \"ttehfinalarabic\", 0xfb67, \"ttehinitialarabic\", 0xfb68, \"ttehmedialarabic\", 0xfb69, \"tthabengali\", 0x09a0, \"tthadeva\", 0x0920, \"tthagujarati\", 0x0aa0, \"tthagurmukhi\", 0x0a20, \"tturned\", 0x0287, \"tuhiragana\", 0x3064, \"tukatakana\", 0x30c4, \"tukatakanahalfwidth\", 0xff82, \"tusmallhiragana\", 0x3063, \"tusmallkatakana\", 0x30c3, \"tusmallkatakanahalfwidth\", 0xff6f, \"twelvecircle\", 0x246b, \"twelveparen\", 0x247f, \"twelveperiod\", 0x2493, \"twelveroman\", 0x217b, \"twentycircle\", 0x2473, \"twentyhangzhou\", 0x5344, \"twentyparen\", 0x2487, \"twentyperiod\", 0x249b, \"two\", 0x0032, \"twoarabic\", 0x0662, \"twobengali\", 0x09e8, \"twocircle\", 0x2461, \"twocircleinversesansserif\", 0x278b, \"twodeva\", 0x0968, \"twodotenleader\", 0x2025, \"twodotleader\", 0x2025, \"twodotleadervertical\", 0xfe30, \"twogujarati\", 0x0ae8, \"twogurmukhi\", 0x0a68, \"twohackarabic\", 0x0662, \"twohangzhou\", 0x3022, \"twoideographicparen\", 0x3221, \"twoinferior\", 0x2082, \"twomonospace\", 0xff12, \"twonumeratorbengali\", 0x09f5, \"twooldstyle\", 0xf732, \"twoparen\", 0x2475, \"twoperiod\", 0x2489, \"twopersian\", 0x06f2, \"tworoman\", 0x2171, \"twostroke\", 0x01bb, \"twosuperior\", 0x00b2, \"twothai\", 0x0e52, \"twothirds\", 0x2154, \"u\", 0x0075, \"uacute\", 0x00fa, \"ubar\", 0x0289, \"ubengali\", 0x0989, \"ubopomofo\", 0x3128, \"ubreve\", 0x016d, \"ucaron\", 0x01d4, \"ucircle\", 0x24e4, \"ucircumflex\", 0x00fb, \"ucircumflexbelow\", 0x1e77, \"ucyrillic\", 0x0443, \"udattadeva\", 0x0951, \"udblacute\", 0x0171, \"udblgrave\", 0x0215, \"udeva\", 0x0909, \"udieresis\", 0x00fc, \"udieresisacute\", 0x01d8, \"udieresisbelow\", 0x1e73, \"udieresiscaron\", 0x01da, \"udieresiscyrillic\", 0x04f1, \"udieresisgrave\", 0x01dc, \"udieresismacron\", 0x01d6, \"udotbelow\", 0x1ee5, \"ugrave\", 0x00f9, \"ugujarati\", 0x0a89, \"ugurmukhi\", 0x0a09, \"uhiragana\", 0x3046, \"uhookabove\", 0x1ee7, \"uhorn\", 0x01b0, \"uhornacute\", 0x1ee9, \"uhorndotbelow\", 0x1ef1, \"uhorngrave\", 0x1eeb, \"uhornhookabove\", 0x1eed, \"uhorntilde\", 0x1eef, \"uhungarumlaut\", 0x0171, \"uhungarumlautcyrillic\", 0x04f3, \"uinvertedbreve\", 0x0217, \"ukatakana\", 0x30a6, \"ukatakanahalfwidth\", 0xff73, \"ukcyrillic\", 0x0479, \"ukorean\", 0x315c, \"umacron\", 0x016b, \"umacroncyrillic\", 0x04ef, \"umacrondieresis\", 0x1e7b, \"umatragurmukhi\", 0x0a41, \"umonospace\", 0xff55, \"underscore\", 0x005f, \"underscoredbl\", 0x2017, \"underscoremonospace\", 0xff3f, \"underscorevertical\", 0xfe33, \"underscorewavy\", 0xfe4f, \"union\", 0x222a, \"universal\", 0x2200, \"uogonek\", 0x0173, \"uparen\", 0x24b0, \"upblock\", 0x2580, \"upperdothebrew\", 0x05c4, \"upsilon\", 0x03c5, \"upsilondieresis\", 0x03cb, \"upsilondieresistonos\", 0x03b0, \"upsilonlatin\", 0x028a, \"upsilontonos\", 0x03cd, \"uptackbelowcmb\", 0x031d, \"uptackmod\", 0x02d4, \"uragurmukhi\", 0x0a73, \"uring\", 0x016f, \"ushortcyrillic\", 0x045e, \"usmallhiragana\", 0x3045, \"usmallkatakana\", 0x30a5, \"usmallkatakanahalfwidth\", 0xff69, \"ustraightcyrillic\", 0x04af, \"ustraightstrokecyrillic\", 0x04b1, \"utilde\", 0x0169, \"utildeacute\", 0x1e79, \"utildebelow\", 0x1e75, \"uubengali\", 0x098a, \"uudeva\", 0x090a, \"uugujarati\", 0x0a8a, \"uugurmukhi\", 0x0a0a, \"uumatragurmukhi\", 0x0a42, \"uuvowelsignbengali\", 0x09c2, \"uuvowelsigndeva\", 0x0942, \"uuvowelsigngujarati\", 0x0ac2, \"uvowelsignbengali\", 0x09c1, \"uvowelsigndeva\", 0x0941, \"uvowelsigngujarati\", 0x0ac1, \"v\", 0x0076, \"vadeva\", 0x0935, \"vagujarati\", 0x0ab5, \"vagurmukhi\", 0x0a35, \"vakatakana\", 0x30f7, \"vav\", 0x05d5, \"vavdagesh\", 0xfb35, \"vavdagesh65\", 0xfb35, \"vavdageshhebrew\", 0xfb35, \"vavhebrew\", 0x05d5, \"vavholam\", 0xfb4b, \"vavholamhebrew\", 0xfb4b, \"vavvavhebrew\", 0x05f0, \"vavyodhebrew\", 0x05f1, \"vcircle\", 0x24e5, \"vdotbelow\", 0x1e7f, \"vecyrillic\", 0x0432, \"veharabic\", 0x06a4, \"vehfinalarabic\", 0xfb6b, \"vehinitialarabic\", 0xfb6c, \"vehmedialarabic\", 0xfb6d, \"vekatakana\", 0x30f9, \"venus\", 0x2640, \"verticalbar\", 0x007c, \"verticallineabovecmb\", 0x030d, \"verticallinebelowcmb\", 0x0329, \"verticallinelowmod\", 0x02cc, \"verticallinemod\", 0x02c8, \"vewarmenian\", 0x057e, \"vhook\", 0x028b, \"vikatakana\", 0x30f8, \"viramabengali\", 0x09cd, \"viramadeva\", 0x094d, \"viramagujarati\", 0x0acd, \"visargabengali\", 0x0983, \"visargadeva\", 0x0903, \"visargagujarati\", 0x0a83, \"vmonospace\", 0xff56, \"voarmenian\", 0x0578, \"voicediterationhiragana\", 0x309e, \"voicediterationkatakana\", 0x30fe, \"voicedmarkkana\", 0x309b, \"voicedmarkkanahalfwidth\", 0xff9e, \"vokatakana\", 0x30fa, \"vparen\", 0x24b1, \"vtilde\", 0x1e7d, \"vturned\", 0x028c, \"vuhiragana\", 0x3094, \"vukatakana\", 0x30f4, \"w\", 0x0077, \"wacute\", 0x1e83, \"waekorean\", 0x3159, \"wahiragana\", 0x308f, \"wakatakana\", 0x30ef, \"wakatakanahalfwidth\", 0xff9c, \"wakorean\", 0x3158, \"wasmallhiragana\", 0x308e, \"wasmallkatakana\", 0x30ee, \"wattosquare\", 0x3357, \"wavedash\", 0x301c, \"wavyunderscorevertical\", 0xfe34, \"wawarabic\", 0x0648, \"wawfinalarabic\", 0xfeee, \"wawhamzaabovearabic\", 0x0624, \"wawhamzaabovefinalarabic\", 0xfe86, \"wbsquare\", 0x33dd, \"wcircle\", 0x24e6, \"wcircumflex\", 0x0175, \"wdieresis\", 0x1e85, \"wdotaccent\", 0x1e87, \"wdotbelow\", 0x1e89, \"wehiragana\", 0x3091, \"weierstrass\", 0x2118, \"wekatakana\", 0x30f1, \"wekorean\", 0x315e, \"weokorean\", 0x315d, \"wgrave\", 0x1e81, \"whitebullet\", 0x25e6, \"whitecircle\", 0x25cb, \"whitecircleinverse\", 0x25d9, \"whitecornerbracketleft\", 0x300e, \"whitecornerbracketleftvertical\", 0xfe43, \"whitecornerbracketright\", 0x300f, \"whitecornerbracketrightvertical\", 0xfe44, \"whitediamond\", 0x25c7, \"whitediamondcontainingblacksmalldiamond\", 0x25c8, \"whitedownpointingsmalltriangle\", 0x25bf, \"whitedownpointingtriangle\", 0x25bd, \"whiteleftpointingsmalltriangle\", 0x25c3, \"whiteleftpointingtriangle\", 0x25c1, \"whitelenticularbracketleft\", 0x3016, \"whitelenticularbracketright\", 0x3017, \"whiterightpointingsmalltriangle\", 0x25b9, \"whiterightpointingtriangle\", 0x25b7, \"whitesmallsquare\", 0x25ab, \"whitesmilingface\", 0x263a, \"whitesquare\", 0x25a1, \"whitestar\", 0x2606, \"whitetelephone\", 0x260f, \"whitetortoiseshellbracketleft\", 0x3018, \"whitetortoiseshellbracketright\", 0x3019, \"whiteuppointingsmalltriangle\", 0x25b5, \"whiteuppointingtriangle\", 0x25b3, \"wihiragana\", 0x3090, \"wikatakana\", 0x30f0, \"wikorean\", 0x315f, \"wmonospace\", 0xff57, \"wohiragana\", 0x3092, \"wokatakana\", 0x30f2, \"wokatakanahalfwidth\", 0xff66, \"won\", 0x20a9, \"wonmonospace\", 0xffe6, \"wowaenthai\", 0x0e27, \"wparen\", 0x24b2, \"wring\", 0x1e98, \"wsuperior\", 0x02b7, \"wturned\", 0x028d, \"wynn\", 0x01bf, \"x\", 0x0078, \"xabovecmb\", 0x033d, \"xbopomofo\", 0x3112, \"xcircle\", 0x24e7, \"xdieresis\", 0x1e8d, \"xdotaccent\", 0x1e8b, \"xeharmenian\", 0x056d, \"xi\", 0x03be, \"xmonospace\", 0xff58, \"xparen\", 0x24b3, \"xsuperior\", 0x02e3, \"y\", 0x0079, \"yaadosquare\", 0x334e, \"yabengali\", 0x09af, \"yacute\", 0x00fd, \"yadeva\", 0x092f, \"yaekorean\", 0x3152, \"yagujarati\", 0x0aaf, \"yagurmukhi\", 0x0a2f, \"yahiragana\", 0x3084, \"yakatakana\", 0x30e4, \"yakatakanahalfwidth\", 0xff94, \"yakorean\", 0x3151, \"yamakkanthai\", 0x0e4e, \"yasmallhiragana\", 0x3083, \"yasmallkatakana\", 0x30e3, \"yasmallkatakanahalfwidth\", 0xff6c, \"yatcyrillic\", 0x0463, \"ycircle\", 0x24e8, \"ycircumflex\", 0x0177, \"ydieresis\", 0x00ff, \"ydotaccent\", 0x1e8f, \"ydotbelow\", 0x1ef5, \"yeharabic\", 0x064a, \"yehbarreearabic\", 0x06d2, \"yehbarreefinalarabic\", 0xfbaf, \"yehfinalarabic\", 0xfef2, \"yehhamzaabovearabic\", 0x0626, \"yehhamzaabovefinalarabic\", 0xfe8a, \"yehhamzaaboveinitialarabic\", 0xfe8b, \"yehhamzaabovemedialarabic\", 0xfe8c, \"yehinitialarabic\", 0xfef3, \"yehmedialarabic\", 0xfef4, \"yehmeeminitialarabic\", 0xfcdd, \"yehmeemisolatedarabic\", 0xfc58, \"yehnoonfinalarabic\", 0xfc94, \"yehthreedotsbelowarabic\", 0x06d1, \"yekorean\", 0x3156, \"yen\", 0x00a5, \"yenmonospace\", 0xffe5, \"yeokorean\", 0x3155, \"yeorinhieuhkorean\", 0x3186, \"yerahbenyomohebrew\", 0x05aa, \"yerahbenyomolefthebrew\", 0x05aa, \"yericyrillic\", 0x044b, \"yerudieresiscyrillic\", 0x04f9, \"yesieungkorean\", 0x3181, \"yesieungpansioskorean\", 0x3183, \"yesieungsioskorean\", 0x3182, \"yetivhebrew\", 0x059a, \"ygrave\", 0x1ef3, \"yhook\", 0x01b4, \"yhookabove\", 0x1ef7, \"yiarmenian\", 0x0575, \"yicyrillic\", 0x0457, \"yikorean\", 0x3162, \"yinyang\", 0x262f, \"yiwnarmenian\", 0x0582, \"ymonospace\", 0xff59, \"yod\", 0x05d9, \"yoddagesh\", 0xfb39, \"yoddageshhebrew\", 0xfb39, \"yodhebrew\", 0x05d9, \"yodyodhebrew\", 0x05f2, \"yodyodpatahhebrew\", 0xfb1f, \"yohiragana\", 0x3088, \"yoikorean\", 0x3189, \"yokatakana\", 0x30e8, \"yokatakanahalfwidth\", 0xff96, \"yokorean\", 0x315b, \"yosmallhiragana\", 0x3087, \"yosmallkatakana\", 0x30e7, \"yosmallkatakanahalfwidth\", 0xff6e, \"yotgreek\", 0x03f3, \"yoyaekorean\", 0x3188, \"yoyakorean\", 0x3187, \"yoyakthai\", 0x0e22, \"yoyingthai\", 0x0e0d, \"yparen\", 0x24b4, \"ypogegrammeni\", 0x037a, \"ypogegrammenigreekcmb\", 0x0345, \"yr\", 0x01a6, \"yring\", 0x1e99, \"ysuperior\", 0x02b8, \"ytilde\", 0x1ef9, \"yturned\", 0x028e, \"yuhiragana\", 0x3086, \"yuikorean\", 0x318c, \"yukatakana\", 0x30e6, \"yukatakanahalfwidth\", 0xff95, \"yukorean\", 0x3160, \"yusbigcyrillic\", 0x046b, \"yusbigiotifiedcyrillic\", 0x046d, \"yuslittlecyrillic\", 0x0467, \"yuslittleiotifiedcyrillic\", 0x0469, \"yusmallhiragana\", 0x3085, \"yusmallkatakana\", 0x30e5, \"yusmallkatakanahalfwidth\", 0xff6d, \"yuyekorean\", 0x318b, \"yuyeokorean\", 0x318a, \"yyabengali\", 0x09df, \"yyadeva\", 0x095f, \"z\", 0x007a, \"zaarmenian\", 0x0566, \"zacute\", 0x017a, \"zadeva\", 0x095b, \"zagurmukhi\", 0x0a5b, \"zaharabic\", 0x0638, \"zahfinalarabic\", 0xfec6, \"zahinitialarabic\", 0xfec7, \"zahiragana\", 0x3056, \"zahmedialarabic\", 0xfec8, \"zainarabic\", 0x0632, \"zainfinalarabic\", 0xfeb0, \"zakatakana\", 0x30b6, \"zaqefgadolhebrew\", 0x0595, \"zaqefqatanhebrew\", 0x0594, \"zarqahebrew\", 0x0598, \"zayin\", 0x05d6, \"zayindagesh\", 0xfb36, \"zayindageshhebrew\", 0xfb36, \"zayinhebrew\", 0x05d6, \"zbopomofo\", 0x3117, \"zcaron\", 0x017e, \"zcircle\", 0x24e9, \"zcircumflex\", 0x1e91, \"zcurl\", 0x0291, \"zdot\", 0x017c, \"zdotaccent\", 0x017c, \"zdotbelow\", 0x1e93, \"zecyrillic\", 0x0437, \"zedescendercyrillic\", 0x0499, \"zedieresiscyrillic\", 0x04df, \"zehiragana\", 0x305c, \"zekatakana\", 0x30bc, \"zero\", 0x0030, \"zeroarabic\", 0x0660, \"zerobengali\", 0x09e6, \"zerodeva\", 0x0966, \"zerogujarati\", 0x0ae6, \"zerogurmukhi\", 0x0a66, \"zerohackarabic\", 0x0660, \"zeroinferior\", 0x2080, \"zeromonospace\", 0xff10, \"zerooldstyle\", 0xf730, \"zeropersian\", 0x06f0, \"zerosuperior\", 0x2070, \"zerothai\", 0x0e50, \"zerowidthjoiner\", 0xfeff, \"zerowidthnonjoiner\", 0x200c, \"zerowidthspace\", 0x200b, \"zeta\", 0x03b6, \"zhbopomofo\", 0x3113, \"zhearmenian\", 0x056a, \"zhebrevecyrillic\", 0x04c2, \"zhecyrillic\", 0x0436, \"zhedescendercyrillic\", 0x0497, \"zhedieresiscyrillic\", 0x04dd, \"zihiragana\", 0x3058, \"zikatakana\", 0x30b8, \"zinorhebrew\", 0x05ae, \"zlinebelow\", 0x1e95, \"zmonospace\", 0xff5a, \"zohiragana\", 0x305e, \"zokatakana\", 0x30be, \"zparen\", 0x24b5, \"zretroflexhook\", 0x0290, \"zstroke\", 0x01b6, \"zuhiragana\", 0x305a, \"zukatakana\", 0x30ba, \".notdef\", 0x0000, \"angbracketleftbig\", 0x2329, \"angbracketleftBig\", 0x2329, \"angbracketleftbigg\", 0x2329, \"angbracketleftBigg\", 0x2329, \"angbracketrightBig\", 0x232a, \"angbracketrightbig\", 0x232a, \"angbracketrightBigg\", 0x232a, \"angbracketrightbigg\", 0x232a, \"arrowhookleft\", 0x21aa, \"arrowhookright\", 0x21a9, \"arrowlefttophalf\", 0x21bc, \"arrowleftbothalf\", 0x21bd, \"arrownortheast\", 0x2197, \"arrownorthwest\", 0x2196, \"arrowrighttophalf\", 0x21c0, \"arrowrightbothalf\", 0x21c1, \"arrowsoutheast\", 0x2198, \"arrowsouthwest\", 0x2199, \"backslashbig\", 0x2216, \"backslashBig\", 0x2216, \"backslashBigg\", 0x2216, \"backslashbigg\", 0x2216, \"bardbl\", 0x2016, \"bracehtipdownleft\", 0xfe37, \"bracehtipdownright\", 0xfe37, \"bracehtipupleft\", 0xfe38, \"bracehtipupright\", 0xfe38, \"braceleftBig\", 0x007b, \"braceleftbig\", 0x007b, \"braceleftbigg\", 0x007b, \"braceleftBigg\", 0x007b, \"bracerightBig\", 0x007d, \"bracerightbig\", 0x007d, \"bracerightbigg\", 0x007d, \"bracerightBigg\", 0x007d, \"bracketleftbig\", 0x005b, \"bracketleftBig\", 0x005b, \"bracketleftbigg\", 0x005b, \"bracketleftBigg\", 0x005b, \"bracketrightBig\", 0x005d, \"bracketrightbig\", 0x005d, \"bracketrightbigg\", 0x005d, \"bracketrightBigg\", 0x005d, \"ceilingleftbig\", 0x2308, \"ceilingleftBig\", 0x2308, \"ceilingleftBigg\", 0x2308, \"ceilingleftbigg\", 0x2308, \"ceilingrightbig\", 0x2309, \"ceilingrightBig\", 0x2309, \"ceilingrightbigg\", 0x2309, \"ceilingrightBigg\", 0x2309, \"circledotdisplay\", 0x2299, \"circledottext\", 0x2299, \"circlemultiplydisplay\", 0x2297, \"circlemultiplytext\", 0x2297, \"circleplusdisplay\", 0x2295, \"circleplustext\", 0x2295, \"contintegraldisplay\", 0x222e, \"contintegraltext\", 0x222e, \"coproductdisplay\", 0x2210, \"coproducttext\", 0x2210, \"floorleftBig\", 0x230a, \"floorleftbig\", 0x230a, \"floorleftbigg\", 0x230a, \"floorleftBigg\", 0x230a, \"floorrightbig\", 0x230b, \"floorrightBig\", 0x230b, \"floorrightBigg\", 0x230b, \"floorrightbigg\", 0x230b, \"hatwide\", 0x0302, \"hatwider\", 0x0302, \"hatwidest\", 0x0302, \"intercal\", 0x1d40, \"integraldisplay\", 0x222b, \"integraltext\", 0x222b, \"intersectiondisplay\", 0x22c2, \"intersectiontext\", 0x22c2, \"logicalanddisplay\", 0x2227, \"logicalandtext\", 0x2227, \"logicalordisplay\", 0x2228, \"logicalortext\", 0x2228, \"parenleftBig\", 0x0028, \"parenleftbig\", 0x0028, \"parenleftBigg\", 0x0028, \"parenleftbigg\", 0x0028, \"parenrightBig\", 0x0029, \"parenrightbig\", 0x0029, \"parenrightBigg\", 0x0029, \"parenrightbigg\", 0x0029, \"prime\", 0x2032, \"productdisplay\", 0x220f, \"producttext\", 0x220f, \"radicalbig\", 0x221a, \"radicalBig\", 0x221a, \"radicalBigg\", 0x221a, \"radicalbigg\", 0x221a, \"radicalbt\", 0x221a, \"radicaltp\", 0x221a, \"radicalvertex\", 0x221a, \"slashbig\", 0x002f, \"slashBig\", 0x002f, \"slashBigg\", 0x002f, \"slashbigg\", 0x002f, \"summationdisplay\", 0x2211, \"summationtext\", 0x2211, \"tildewide\", 0x02dc, \"tildewider\", 0x02dc, \"tildewidest\", 0x02dc, \"uniondisplay\", 0x22c3, \"unionmultidisplay\", 0x228e, \"unionmultitext\", 0x228e, \"unionsqdisplay\", 0x2294, \"unionsqtext\", 0x2294, \"uniontext\", 0x22c3, \"vextenddouble\", 0x2225, \"vextendsingle\", 0x2223];\n        });\n        var _getDingbatsGlyphsUnicode = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n          return [\"space\", 0x0020, \"a1\", 0x2701, \"a2\", 0x2702, \"a202\", 0x2703, \"a3\", 0x2704, \"a4\", 0x260e, \"a5\", 0x2706, \"a119\", 0x2707, \"a118\", 0x2708, \"a117\", 0x2709, \"a11\", 0x261b, \"a12\", 0x261e, \"a13\", 0x270c, \"a14\", 0x270d, \"a15\", 0x270e, \"a16\", 0x270f, \"a105\", 0x2710, \"a17\", 0x2711, \"a18\", 0x2712, \"a19\", 0x2713, \"a20\", 0x2714, \"a21\", 0x2715, \"a22\", 0x2716, \"a23\", 0x2717, \"a24\", 0x2718, \"a25\", 0x2719, \"a26\", 0x271a, \"a27\", 0x271b, \"a28\", 0x271c, \"a6\", 0x271d, \"a7\", 0x271e, \"a8\", 0x271f, \"a9\", 0x2720, \"a10\", 0x2721, \"a29\", 0x2722, \"a30\", 0x2723, \"a31\", 0x2724, \"a32\", 0x2725, \"a33\", 0x2726, \"a34\", 0x2727, \"a35\", 0x2605, \"a36\", 0x2729, \"a37\", 0x272a, \"a38\", 0x272b, \"a39\", 0x272c, \"a40\", 0x272d, \"a41\", 0x272e, \"a42\", 0x272f, \"a43\", 0x2730, \"a44\", 0x2731, \"a45\", 0x2732, \"a46\", 0x2733, \"a47\", 0x2734, \"a48\", 0x2735, \"a49\", 0x2736, \"a50\", 0x2737, \"a51\", 0x2738, \"a52\", 0x2739, \"a53\", 0x273a, \"a54\", 0x273b, \"a55\", 0x273c, \"a56\", 0x273d, \"a57\", 0x273e, \"a58\", 0x273f, \"a59\", 0x2740, \"a60\", 0x2741, \"a61\", 0x2742, \"a62\", 0x2743, \"a63\", 0x2744, \"a64\", 0x2745, \"a65\", 0x2746, \"a66\", 0x2747, \"a67\", 0x2748, \"a68\", 0x2749, \"a69\", 0x274a, \"a70\", 0x274b, \"a71\", 0x25cf, \"a72\", 0x274d, \"a73\", 0x25a0, \"a74\", 0x274f, \"a203\", 0x2750, \"a75\", 0x2751, \"a204\", 0x2752, \"a76\", 0x25b2, \"a77\", 0x25bc, \"a78\", 0x25c6, \"a79\", 0x2756, \"a81\", 0x25d7, \"a82\", 0x2758, \"a83\", 0x2759, \"a84\", 0x275a, \"a97\", 0x275b, \"a98\", 0x275c, \"a99\", 0x275d, \"a100\", 0x275e, \"a101\", 0x2761, \"a102\", 0x2762, \"a103\", 0x2763, \"a104\", 0x2764, \"a106\", 0x2765, \"a107\", 0x2766, \"a108\", 0x2767, \"a112\", 0x2663, \"a111\", 0x2666, \"a110\", 0x2665, \"a109\", 0x2660, \"a120\", 0x2460, \"a121\", 0x2461, \"a122\", 0x2462, \"a123\", 0x2463, \"a124\", 0x2464, \"a125\", 0x2465, \"a126\", 0x2466, \"a127\", 0x2467, \"a128\", 0x2468, \"a129\", 0x2469, \"a130\", 0x2776, \"a131\", 0x2777, \"a132\", 0x2778, \"a133\", 0x2779, \"a134\", 0x277a, \"a135\", 0x277b, \"a136\", 0x277c, \"a137\", 0x277d, \"a138\", 0x277e, \"a139\", 0x277f, \"a140\", 0x2780, \"a141\", 0x2781, \"a142\", 0x2782, \"a143\", 0x2783, \"a144\", 0x2784, \"a145\", 0x2785, \"a146\", 0x2786, \"a147\", 0x2787, \"a148\", 0x2788, \"a149\", 0x2789, \"a150\", 0x278a, \"a151\", 0x278b, \"a152\", 0x278c, \"a153\", 0x278d, \"a154\", 0x278e, \"a155\", 0x278f, \"a156\", 0x2790, \"a157\", 0x2791, \"a158\", 0x2792, \"a159\", 0x2793, \"a160\", 0x2794, \"a161\", 0x2192, \"a163\", 0x2194, \"a164\", 0x2195, \"a196\", 0x2798, \"a165\", 0x2799, \"a192\", 0x279a, \"a166\", 0x279b, \"a167\", 0x279c, \"a168\", 0x279d, \"a169\", 0x279e, \"a170\", 0x279f, \"a171\", 0x27a0, \"a172\", 0x27a1, \"a173\", 0x27a2, \"a162\", 0x27a3, \"a174\", 0x27a4, \"a175\", 0x27a5, \"a176\", 0x27a6, \"a177\", 0x27a7, \"a178\", 0x27a8, \"a179\", 0x27a9, \"a193\", 0x27aa, \"a180\", 0x27ab, \"a199\", 0x27ac, \"a181\", 0x27ad, \"a200\", 0x27ae, \"a182\", 0x27af, \"a201\", 0x27b1, \"a183\", 0x27b2, \"a184\", 0x27b3, \"a197\", 0x27b4, \"a185\", 0x27b5, \"a194\", 0x27b6, \"a198\", 0x27b7, \"a186\", 0x27b8, \"a195\", 0x27b9, \"a187\", 0x27ba, \"a188\", 0x27bb, \"a189\", 0x27bc, \"a190\", 0x27bd, \"a191\", 0x27be, \"a89\", 0x2768, \"a90\", 0x2769, \"a93\", 0x276a, \"a94\", 0x276b, \"a91\", 0x276c, \"a92\", 0x276d, \"a205\", 0x276e, \"a85\", 0x276f, \"a206\", 0x2770, \"a86\", 0x2771, \"a87\", 0x2772, \"a88\", 0x2773, \"a95\", 0x2774, \"a96\", 0x2775, \".notdef\", 0x0000];\n        });\n\n        /***/\n      }, /* 40 */\n      /***/function (__unused_webpack_module, __webpack_exports__, __w_pdfjs_require__) {\n        __w_pdfjs_require__.r(__webpack_exports__);\n        /* harmony export */\n        __w_pdfjs_require__.d(__webpack_exports__, {\n          /* harmony export */\"clearUnicodeCaches\": function clearUnicodeCaches() {\n            return (/* binding */_clearUnicodeCaches\n            );\n          },\n          /* harmony export */\"getCharUnicodeCategory\": function getCharUnicodeCategory() {\n            return (/* binding */_getCharUnicodeCategory\n            );\n          },\n          /* harmony export */\"getNormalizedUnicodes\": function getNormalizedUnicodes() {\n            return (/* binding */_getNormalizedUnicodes\n            );\n          },\n          /* harmony export */\"getUnicodeForGlyph\": function getUnicodeForGlyph() {\n            return (/* binding */_getUnicodeForGlyph\n            );\n          },\n          /* harmony export */\"getUnicodeRangeFor\": function getUnicodeRangeFor() {\n            return (/* binding */_getUnicodeRangeFor\n            );\n          },\n          /* harmony export */\"mapSpecialUnicodeValues\": function mapSpecialUnicodeValues() {\n            return (/* binding */_mapSpecialUnicodeValues\n            );\n          },\n          /* harmony export */\"reverseIfRtl\": function reverseIfRtl() {\n            return (/* binding */_reverseIfRtl\n            );\n          }\n          /* harmony export */\n        });\n        /* harmony import */\n        var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__(6);\n        var getSpecialPUASymbols = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getLookupTableFactory)(function (t) {\n          t[63721] = 0x00a9;\n          t[63193] = 0x00a9;\n          t[63720] = 0x00ae;\n          t[63194] = 0x00ae;\n          t[63722] = 0x2122;\n          t[63195] = 0x2122;\n          t[63729] = 0x23a7;\n          t[63730] = 0x23a8;\n          t[63731] = 0x23a9;\n          t[63740] = 0x23ab;\n          t[63741] = 0x23ac;\n          t[63742] = 0x23ad;\n          t[63726] = 0x23a1;\n          t[63727] = 0x23a2;\n          t[63728] = 0x23a3;\n          t[63737] = 0x23a4;\n          t[63738] = 0x23a5;\n          t[63739] = 0x23a6;\n          t[63723] = 0x239b;\n          t[63724] = 0x239c;\n          t[63725] = 0x239d;\n          t[63734] = 0x239e;\n          t[63735] = 0x239f;\n          t[63736] = 0x23a0;\n        });\n        function _mapSpecialUnicodeValues(code) {\n          if (code >= 0xfff0 && code <= 0xffff) {\n            return 0;\n          } else if (code >= 0xf600 && code <= 0xf8ff) {\n            return getSpecialPUASymbols()[code] || code;\n          } else if (code === 0x00ad) {\n            return 0x002d;\n          }\n          return code;\n        }\n        function _getUnicodeForGlyph(name, glyphsUnicodeMap) {\n          var unicode = glyphsUnicodeMap[name];\n          if (unicode !== undefined) {\n            return unicode;\n          }\n          if (!name) {\n            return -1;\n          }\n          if (name[0] === \"u\") {\n            var nameLen = name.length;\n            var hexStr;\n            if (nameLen === 7 && name[1] === \"n\" && name[2] === \"i\") {\n              hexStr = name.substring(3);\n            } else if (nameLen >= 5 && nameLen <= 7) {\n              hexStr = name.substring(1);\n            } else {\n              return -1;\n            }\n            if (hexStr === hexStr.toUpperCase()) {\n              unicode = parseInt(hexStr, 16);\n              if (unicode >= 0) {\n                return unicode;\n              }\n            }\n          }\n          return -1;\n        }\n        var UnicodeRanges = [{\n          begin: 0x0000,\n          end: 0x007f\n        }, {\n          begin: 0x0080,\n          end: 0x00ff\n        }, {\n          begin: 0x0100,\n          end: 0x017f\n        }, {\n          begin: 0x0180,\n          end: 0x024f\n        }, {\n          begin: 0x0250,\n          end: 0x02af\n        }, {\n          begin: 0x02b0,\n          end: 0x02ff\n        }, {\n          begin: 0x0300,\n          end: 0x036f\n        }, {\n          begin: 0x0370,\n          end: 0x03ff\n        }, {\n          begin: 0x2c80,\n          end: 0x2cff\n        }, {\n          begin: 0x0400,\n          end: 0x04ff\n        }, {\n          begin: 0x0530,\n          end: 0x058f\n        }, {\n          begin: 0x0590,\n          end: 0x05ff\n        }, {\n          begin: 0xa500,\n          end: 0xa63f\n        }, {\n          begin: 0x0600,\n          end: 0x06ff\n        }, {\n          begin: 0x07c0,\n          end: 0x07ff\n        }, {\n          begin: 0x0900,\n          end: 0x097f\n        }, {\n          begin: 0x0980,\n          end: 0x09ff\n        }, {\n          begin: 0x0a00,\n          end: 0x0a7f\n        }, {\n          begin: 0x0a80,\n          end: 0x0aff\n        }, {\n          begin: 0x0b00,\n          end: 0x0b7f\n        }, {\n          begin: 0x0b80,\n          end: 0x0bff\n        }, {\n          begin: 0x0c00,\n          end: 0x0c7f\n        }, {\n          begin: 0x0c80,\n          end: 0x0cff\n        }, {\n          begin: 0x0d00,\n          end: 0x0d7f\n        }, {\n          begin: 0x0e00,\n          end: 0x0e7f\n        }, {\n          begin: 0x0e80,\n          end: 0x0eff\n        }, {\n          begin: 0x10a0,\n          end: 0x10ff\n        }, {\n          begin: 0x1b00,\n          end: 0x1b7f\n        }, {\n          begin: 0x1100,\n          end: 0x11ff\n        }, {\n          begin: 0x1e00,\n          end: 0x1eff\n        }, {\n          begin: 0x1f00,\n          end: 0x1fff\n        }, {\n          begin: 0x2000,\n          end: 0x206f\n        }, {\n          begin: 0x2070,\n          end: 0x209f\n        }, {\n          begin: 0x20a0,\n          end: 0x20cf\n        }, {\n          begin: 0x20d0,\n          end: 0x20ff\n        }, {\n          begin: 0x2100,\n          end: 0x214f\n        }, {\n          begin: 0x2150,\n          end: 0x218f\n        }, {\n          begin: 0x2190,\n          end: 0x21ff\n        }, {\n          begin: 0x2200,\n          end: 0x22ff\n        }, {\n          begin: 0x2300,\n          end: 0x23ff\n        }, {\n          begin: 0x2400,\n          end: 0x243f\n        }, {\n          begin: 0x2440,\n          end: 0x245f\n        }, {\n          begin: 0x2460,\n          end: 0x24ff\n        }, {\n          begin: 0x2500,\n          end: 0x257f\n        }, {\n          begin: 0x2580,\n          end: 0x259f\n        }, {\n          begin: 0x25a0,\n          end: 0x25ff\n        }, {\n          begin: 0x2600,\n          end: 0x26ff\n        }, {\n          begin: 0x2700,\n          end: 0x27bf\n        }, {\n          begin: 0x3000,\n          end: 0x303f\n        }, {\n          begin: 0x3040,\n          end: 0x309f\n        }, {\n          begin: 0x30a0,\n          end: 0x30ff\n        }, {\n          begin: 0x3100,\n          end: 0x312f\n        }, {\n          begin: 0x3130,\n          end: 0x318f\n        }, {\n          begin: 0xa840,\n          end: 0xa87f\n        }, {\n          begin: 0x3200,\n          end: 0x32ff\n        }, {\n          begin: 0x3300,\n          end: 0x33ff\n        }, {\n          begin: 0xac00,\n          end: 0xd7af\n        }, {\n          begin: 0xd800,\n          end: 0xdfff\n        }, {\n          begin: 0x10900,\n          end: 0x1091f\n        }, {\n          begin: 0x4e00,\n          end: 0x9fff\n        }, {\n          begin: 0xe000,\n          end: 0xf8ff\n        }, {\n          begin: 0x31c0,\n          end: 0x31ef\n        }, {\n          begin: 0xfb00,\n          end: 0xfb4f\n        }, {\n          begin: 0xfb50,\n          end: 0xfdff\n        }, {\n          begin: 0xfe20,\n          end: 0xfe2f\n        }, {\n          begin: 0xfe10,\n          end: 0xfe1f\n        }, {\n          begin: 0xfe50,\n          end: 0xfe6f\n        }, {\n          begin: 0xfe70,\n          end: 0xfeff\n        }, {\n          begin: 0xff00,\n          end: 0xffef\n        }, {\n          begin: 0xfff0,\n          end: 0xffff\n        }, {\n          begin: 0x0f00,\n          end: 0x0fff\n        }, {\n          begin: 0x0700,\n          end: 0x074f\n        }, {\n          begin: 0x0780,\n          end: 0x07bf\n        }, {\n          begin: 0x0d80,\n          end: 0x0dff\n        }, {\n          begin: 0x1000,\n          end: 0x109f\n        }, {\n          begin: 0x1200,\n          end: 0x137f\n        }, {\n          begin: 0x13a0,\n          end: 0x13ff\n        }, {\n          begin: 0x1400,\n          end: 0x167f\n        }, {\n          begin: 0x1680,\n          end: 0x169f\n        }, {\n          begin: 0x16a0,\n          end: 0x16ff\n        }, {\n          begin: 0x1780,\n          end: 0x17ff\n        }, {\n          begin: 0x1800,\n          end: 0x18af\n        }, {\n          begin: 0x2800,\n          end: 0x28ff\n        }, {\n          begin: 0xa000,\n          end: 0xa48f\n        }, {\n          begin: 0x1700,\n          end: 0x171f\n        }, {\n          begin: 0x10300,\n          end: 0x1032f\n        }, {\n          begin: 0x10330,\n          end: 0x1034f\n        }, {\n          begin: 0x10400,\n          end: 0x1044f\n        }, {\n          begin: 0x1d000,\n          end: 0x1d0ff\n        }, {\n          begin: 0x1d400,\n          end: 0x1d7ff\n        }, {\n          begin: 0xff000,\n          end: 0xffffd\n        }, {\n          begin: 0xfe00,\n          end: 0xfe0f\n        }, {\n          begin: 0xe0000,\n          end: 0xe007f\n        }, {\n          begin: 0x1900,\n          end: 0x194f\n        }, {\n          begin: 0x1950,\n          end: 0x197f\n        }, {\n          begin: 0x1980,\n          end: 0x19df\n        }, {\n          begin: 0x1a00,\n          end: 0x1a1f\n        }, {\n          begin: 0x2c00,\n          end: 0x2c5f\n        }, {\n          begin: 0x2d30,\n          end: 0x2d7f\n        }, {\n          begin: 0x4dc0,\n          end: 0x4dff\n        }, {\n          begin: 0xa800,\n          end: 0xa82f\n        }, {\n          begin: 0x10000,\n          end: 0x1007f\n        }, {\n          begin: 0x10140,\n          end: 0x1018f\n        }, {\n          begin: 0x10380,\n          end: 0x1039f\n        }, {\n          begin: 0x103a0,\n          end: 0x103df\n        }, {\n          begin: 0x10450,\n          end: 0x1047f\n        }, {\n          begin: 0x10480,\n          end: 0x104af\n        }, {\n          begin: 0x10800,\n          end: 0x1083f\n        }, {\n          begin: 0x10a00,\n          end: 0x10a5f\n        }, {\n          begin: 0x1d300,\n          end: 0x1d35f\n        }, {\n          begin: 0x12000,\n          end: 0x123ff\n        }, {\n          begin: 0x1d360,\n          end: 0x1d37f\n        }, {\n          begin: 0x1b80,\n          end: 0x1bbf\n        }, {\n          begin: 0x1c00,\n          end: 0x1c4f\n        }, {\n          begin: 0x1c50,\n          end: 0x1c7f\n        }, {\n          begin: 0xa880,\n          end: 0xa8df\n        }, {\n          begin: 0xa900,\n          end: 0xa92f\n        }, {\n          begin: 0xa930,\n          end: 0xa95f\n        }, {\n          begin: 0xaa00,\n          end: 0xaa5f\n        }, {\n          begin: 0x10190,\n          end: 0x101cf\n        }, {\n          begin: 0x101d0,\n          end: 0x101ff\n        }, {\n          begin: 0x102a0,\n          end: 0x102df\n        }, {\n          begin: 0x1f030,\n          end: 0x1f09f\n        }];\n        function _getUnicodeRangeFor(value) {\n          for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n            var range = UnicodeRanges[i];\n            if (value >= range.begin && value < range.end) {\n              return i;\n            }\n          }\n          return -1;\n        }\n        function isRTLRangeFor(value) {\n          var range = UnicodeRanges[13];\n          if (value >= range.begin && value < range.end) {\n            return true;\n          }\n          range = UnicodeRanges[11];\n          if (value >= range.begin && value < range.end) {\n            return true;\n          }\n          return false;\n        }\n        var _getNormalizedUnicodes = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n          return [\"\\xA8\", \" \\u0308\", \"\\xAF\", \" \\u0304\", \"\\xB4\", \" \\u0301\", \"\\xB5\", \"\\u03BC\", \"\\xB8\", \" \\u0327\", \"\\u0132\", \"IJ\", \"\\u0133\", \"ij\", \"\\u013F\", \"L\\xB7\", \"\\u0140\", \"l\\xB7\", \"\\u0149\", \"\\u02BCn\", \"\\u017F\", \"s\", \"\\u01C4\", \"D\\u017D\", \"\\u01C5\", \"D\\u017E\", \"\\u01C6\", \"d\\u017E\", \"\\u01C7\", \"LJ\", \"\\u01C8\", \"Lj\", \"\\u01C9\", \"lj\", \"\\u01CA\", \"NJ\", \"\\u01CB\", \"Nj\", \"\\u01CC\", \"nj\", \"\\u01F1\", \"DZ\", \"\\u01F2\", \"Dz\", \"\\u01F3\", \"dz\", \"\\u02D8\", \" \\u0306\", \"\\u02D9\", \" \\u0307\", \"\\u02DA\", \" \\u030A\", \"\\u02DB\", \" \\u0328\", \"\\u02DC\", \" \\u0303\", \"\\u02DD\", \" \\u030B\", \"\\u037A\", \" \\u0345\", \"\\u0384\", \" \\u0301\", \"\\u03D0\", \"\\u03B2\", \"\\u03D1\", \"\\u03B8\", \"\\u03D2\", \"\\u03A5\", \"\\u03D5\", \"\\u03C6\", \"\\u03D6\", \"\\u03C0\", \"\\u03F0\", \"\\u03BA\", \"\\u03F1\", \"\\u03C1\", \"\\u03F2\", \"\\u03C2\", \"\\u03F4\", \"\\u0398\", \"\\u03F5\", \"\\u03B5\", \"\\u03F9\", \"\\u03A3\", \"\\u0587\", \"\\u0565\\u0582\", \"\\u0675\", \"\\u0627\\u0674\", \"\\u0676\", \"\\u0648\\u0674\", \"\\u0677\", \"\\u06C7\\u0674\", \"\\u0678\", \"\\u064A\\u0674\", \"\\u0E33\", \"\\u0E4D\\u0E32\", \"\\u0EB3\", \"\\u0ECD\\u0EB2\", \"\\u0EDC\", \"\\u0EAB\\u0E99\", \"\\u0EDD\", \"\\u0EAB\\u0EA1\", \"\\u0F77\", \"\\u0FB2\\u0F81\", \"\\u0F79\", \"\\u0FB3\\u0F81\", \"\\u1E9A\", \"a\\u02BE\", \"\\u1FBD\", \" \\u0313\", \"\\u1FBF\", \" \\u0313\", \"\\u1FC0\", \" \\u0342\", \"\\u1FFE\", \" \\u0314\", \"\\u2002\", \" \", \"\\u2003\", \" \", \"\\u2004\", \" \", \"\\u2005\", \" \", \"\\u2006\", \" \", \"\\u2008\", \" \", \"\\u2009\", \" \", \"\\u200A\", \" \", \"\\u2017\", \" \\u0333\", \"\\u2024\", \".\", \"\\u2025\", \"..\", \"\\u2026\", \"...\", \"\\u2033\", \"\\u2032\\u2032\", \"\\u2034\", \"\\u2032\\u2032\\u2032\", \"\\u2036\", \"\\u2035\\u2035\", \"\\u2037\", \"\\u2035\\u2035\\u2035\", \"\\u203C\", \"!!\", \"\\u203E\", \" \\u0305\", \"\\u2047\", \"??\", \"\\u2048\", \"?!\", \"\\u2049\", \"!?\", \"\\u2057\", \"\\u2032\\u2032\\u2032\\u2032\", \"\\u205F\", \" \", \"\\u20A8\", \"Rs\", \"\\u2100\", \"a/c\", \"\\u2101\", \"a/s\", \"\\u2103\", \"\\xB0C\", \"\\u2105\", \"c/o\", \"\\u2106\", \"c/u\", \"\\u2107\", \"\\u0190\", \"\\u2109\", \"\\xB0F\", \"\\u2116\", \"No\", \"\\u2121\", \"TEL\", \"\\u2135\", \"\\u05D0\", \"\\u2136\", \"\\u05D1\", \"\\u2137\", \"\\u05D2\", \"\\u2138\", \"\\u05D3\", \"\\u213B\", \"FAX\", \"\\u2160\", \"I\", \"\\u2161\", \"II\", \"\\u2162\", \"III\", \"\\u2163\", \"IV\", \"\\u2164\", \"V\", \"\\u2165\", \"VI\", \"\\u2166\", \"VII\", \"\\u2167\", \"VIII\", \"\\u2168\", \"IX\", \"\\u2169\", \"X\", \"\\u216A\", \"XI\", \"\\u216B\", \"XII\", \"\\u216C\", \"L\", \"\\u216D\", \"C\", \"\\u216E\", \"D\", \"\\u216F\", \"M\", \"\\u2170\", \"i\", \"\\u2171\", \"ii\", \"\\u2172\", \"iii\", \"\\u2173\", \"iv\", \"\\u2174\", \"v\", \"\\u2175\", \"vi\", \"\\u2176\", \"vii\", \"\\u2177\", \"viii\", \"\\u2178\", \"ix\", \"\\u2179\", \"x\", \"\\u217A\", \"xi\", \"\\u217B\", \"xii\", \"\\u217C\", \"l\", \"\\u217D\", \"c\", \"\\u217E\", \"d\", \"\\u217F\", \"m\", \"\\u222C\", \"\\u222B\\u222B\", \"\\u222D\", \"\\u222B\\u222B\\u222B\", \"\\u222F\", \"\\u222E\\u222E\", \"\\u2230\", \"\\u222E\\u222E\\u222E\", \"\\u2474\", \"(1)\", \"\\u2475\", \"(2)\", \"\\u2476\", \"(3)\", \"\\u2477\", \"(4)\", \"\\u2478\", \"(5)\", \"\\u2479\", \"(6)\", \"\\u247A\", \"(7)\", \"\\u247B\", \"(8)\", \"\\u247C\", \"(9)\", \"\\u247D\", \"(10)\", \"\\u247E\", \"(11)\", \"\\u247F\", \"(12)\", \"\\u2480\", \"(13)\", \"\\u2481\", \"(14)\", \"\\u2482\", \"(15)\", \"\\u2483\", \"(16)\", \"\\u2484\", \"(17)\", \"\\u2485\", \"(18)\", \"\\u2486\", \"(19)\", \"\\u2487\", \"(20)\", \"\\u2488\", \"1.\", \"\\u2489\", \"2.\", \"\\u248A\", \"3.\", \"\\u248B\", \"4.\", \"\\u248C\", \"5.\", \"\\u248D\", \"6.\", \"\\u248E\", \"7.\", \"\\u248F\", \"8.\", \"\\u2490\", \"9.\", \"\\u2491\", \"10.\", \"\\u2492\", \"11.\", \"\\u2493\", \"12.\", \"\\u2494\", \"13.\", \"\\u2495\", \"14.\", \"\\u2496\", \"15.\", \"\\u2497\", \"16.\", \"\\u2498\", \"17.\", \"\\u2499\", \"18.\", \"\\u249A\", \"19.\", \"\\u249B\", \"20.\", \"\\u249C\", \"(a)\", \"\\u249D\", \"(b)\", \"\\u249E\", \"(c)\", \"\\u249F\", \"(d)\", \"\\u24A0\", \"(e)\", \"\\u24A1\", \"(f)\", \"\\u24A2\", \"(g)\", \"\\u24A3\", \"(h)\", \"\\u24A4\", \"(i)\", \"\\u24A5\", \"(j)\", \"\\u24A6\", \"(k)\", \"\\u24A7\", \"(l)\", \"\\u24A8\", \"(m)\", \"\\u24A9\", \"(n)\", \"\\u24AA\", \"(o)\", \"\\u24AB\", \"(p)\", \"\\u24AC\", \"(q)\", \"\\u24AD\", \"(r)\", \"\\u24AE\", \"(s)\", \"\\u24AF\", \"(t)\", \"\\u24B0\", \"(u)\", \"\\u24B1\", \"(v)\", \"\\u24B2\", \"(w)\", \"\\u24B3\", \"(x)\", \"\\u24B4\", \"(y)\", \"\\u24B5\", \"(z)\", \"\\u2A0C\", \"\\u222B\\u222B\\u222B\\u222B\", \"\\u2A74\", \"::=\", \"\\u2A75\", \"==\", \"\\u2A76\", \"===\", \"\\u2E9F\", \"\\u6BCD\", \"\\u2EF3\", \"\\u9F9F\", \"\\u2F00\", \"\\u4E00\", \"\\u2F01\", \"\\u4E28\", \"\\u2F02\", \"\\u4E36\", \"\\u2F03\", \"\\u4E3F\", \"\\u2F04\", \"\\u4E59\", \"\\u2F05\", \"\\u4E85\", \"\\u2F06\", \"\\u4E8C\", \"\\u2F07\", \"\\u4EA0\", \"\\u2F08\", \"\\u4EBA\", \"\\u2F09\", \"\\u513F\", \"\\u2F0A\", \"\\u5165\", \"\\u2F0B\", \"\\u516B\", \"\\u2F0C\", \"\\u5182\", \"\\u2F0D\", \"\\u5196\", \"\\u2F0E\", \"\\u51AB\", \"\\u2F0F\", \"\\u51E0\", \"\\u2F10\", \"\\u51F5\", \"\\u2F11\", \"\\u5200\", \"\\u2F12\", \"\\u529B\", \"\\u2F13\", \"\\u52F9\", \"\\u2F14\", \"\\u5315\", \"\\u2F15\", \"\\u531A\", \"\\u2F16\", \"\\u5338\", \"\\u2F17\", \"\\u5341\", \"\\u2F18\", \"\\u535C\", \"\\u2F19\", \"\\u5369\", \"\\u2F1A\", \"\\u5382\", \"\\u2F1B\", \"\\u53B6\", \"\\u2F1C\", \"\\u53C8\", \"\\u2F1D\", \"\\u53E3\", \"\\u2F1E\", \"\\u56D7\", \"\\u2F1F\", \"\\u571F\", \"\\u2F20\", \"\\u58EB\", \"\\u2F21\", \"\\u5902\", \"\\u2F22\", \"\\u590A\", \"\\u2F23\", \"\\u5915\", \"\\u2F24\", \"\\u5927\", \"\\u2F25\", \"\\u5973\", \"\\u2F26\", \"\\u5B50\", \"\\u2F27\", \"\\u5B80\", \"\\u2F28\", \"\\u5BF8\", \"\\u2F29\", \"\\u5C0F\", \"\\u2F2A\", \"\\u5C22\", \"\\u2F2B\", \"\\u5C38\", \"\\u2F2C\", \"\\u5C6E\", \"\\u2F2D\", \"\\u5C71\", \"\\u2F2E\", \"\\u5DDB\", \"\\u2F2F\", \"\\u5DE5\", \"\\u2F30\", \"\\u5DF1\", \"\\u2F31\", \"\\u5DFE\", \"\\u2F32\", \"\\u5E72\", \"\\u2F33\", \"\\u5E7A\", \"\\u2F34\", \"\\u5E7F\", \"\\u2F35\", \"\\u5EF4\", \"\\u2F36\", \"\\u5EFE\", \"\\u2F37\", \"\\u5F0B\", \"\\u2F38\", \"\\u5F13\", \"\\u2F39\", \"\\u5F50\", \"\\u2F3A\", \"\\u5F61\", \"\\u2F3B\", \"\\u5F73\", \"\\u2F3C\", \"\\u5FC3\", \"\\u2F3D\", \"\\u6208\", \"\\u2F3E\", \"\\u6236\", \"\\u2F3F\", \"\\u624B\", \"\\u2F40\", \"\\u652F\", \"\\u2F41\", \"\\u6534\", \"\\u2F42\", \"\\u6587\", \"\\u2F43\", \"\\u6597\", \"\\u2F44\", \"\\u65A4\", \"\\u2F45\", \"\\u65B9\", \"\\u2F46\", \"\\u65E0\", \"\\u2F47\", \"\\u65E5\", \"\\u2F48\", \"\\u66F0\", \"\\u2F49\", \"\\u6708\", \"\\u2F4A\", \"\\u6728\", \"\\u2F4B\", \"\\u6B20\", \"\\u2F4C\", \"\\u6B62\", \"\\u2F4D\", \"\\u6B79\", \"\\u2F4E\", \"\\u6BB3\", \"\\u2F4F\", \"\\u6BCB\", \"\\u2F50\", \"\\u6BD4\", \"\\u2F51\", \"\\u6BDB\", \"\\u2F52\", \"\\u6C0F\", \"\\u2F53\", \"\\u6C14\", \"\\u2F54\", \"\\u6C34\", \"\\u2F55\", \"\\u706B\", \"\\u2F56\", \"\\u722A\", \"\\u2F57\", \"\\u7236\", \"\\u2F58\", \"\\u723B\", \"\\u2F59\", \"\\u723F\", \"\\u2F5A\", \"\\u7247\", \"\\u2F5B\", \"\\u7259\", \"\\u2F5C\", \"\\u725B\", \"\\u2F5D\", \"\\u72AC\", \"\\u2F5E\", \"\\u7384\", \"\\u2F5F\", \"\\u7389\", \"\\u2F60\", \"\\u74DC\", \"\\u2F61\", \"\\u74E6\", \"\\u2F62\", \"\\u7518\", \"\\u2F63\", \"\\u751F\", \"\\u2F64\", \"\\u7528\", \"\\u2F65\", \"\\u7530\", \"\\u2F66\", \"\\u758B\", \"\\u2F67\", \"\\u7592\", \"\\u2F68\", \"\\u7676\", \"\\u2F69\", \"\\u767D\", \"\\u2F6A\", \"\\u76AE\", \"\\u2F6B\", \"\\u76BF\", \"\\u2F6C\", \"\\u76EE\", \"\\u2F6D\", \"\\u77DB\", \"\\u2F6E\", \"\\u77E2\", \"\\u2F6F\", \"\\u77F3\", \"\\u2F70\", \"\\u793A\", \"\\u2F71\", \"\\u79B8\", \"\\u2F72\", \"\\u79BE\", \"\\u2F73\", \"\\u7A74\", \"\\u2F74\", \"\\u7ACB\", \"\\u2F75\", \"\\u7AF9\", \"\\u2F76\", \"\\u7C73\", \"\\u2F77\", \"\\u7CF8\", \"\\u2F78\", \"\\u7F36\", \"\\u2F79\", \"\\u7F51\", \"\\u2F7A\", \"\\u7F8A\", \"\\u2F7B\", \"\\u7FBD\", \"\\u2F7C\", \"\\u8001\", \"\\u2F7D\", \"\\u800C\", \"\\u2F7E\", \"\\u8012\", \"\\u2F7F\", \"\\u8033\", \"\\u2F80\", \"\\u807F\", \"\\u2F81\", \"\\u8089\", \"\\u2F82\", \"\\u81E3\", \"\\u2F83\", \"\\u81EA\", \"\\u2F84\", \"\\u81F3\", \"\\u2F85\", \"\\u81FC\", \"\\u2F86\", \"\\u820C\", \"\\u2F87\", \"\\u821B\", \"\\u2F88\", \"\\u821F\", \"\\u2F89\", \"\\u826E\", \"\\u2F8A\", \"\\u8272\", \"\\u2F8B\", \"\\u8278\", \"\\u2F8C\", \"\\u864D\", \"\\u2F8D\", \"\\u866B\", \"\\u2F8E\", \"\\u8840\", \"\\u2F8F\", \"\\u884C\", \"\\u2F90\", \"\\u8863\", \"\\u2F91\", \"\\u897E\", \"\\u2F92\", \"\\u898B\", \"\\u2F93\", \"\\u89D2\", \"\\u2F94\", \"\\u8A00\", \"\\u2F95\", \"\\u8C37\", \"\\u2F96\", \"\\u8C46\", \"\\u2F97\", \"\\u8C55\", \"\\u2F98\", \"\\u8C78\", \"\\u2F99\", \"\\u8C9D\", \"\\u2F9A\", \"\\u8D64\", \"\\u2F9B\", \"\\u8D70\", \"\\u2F9C\", \"\\u8DB3\", \"\\u2F9D\", \"\\u8EAB\", \"\\u2F9E\", \"\\u8ECA\", \"\\u2F9F\", \"\\u8F9B\", \"\\u2FA0\", \"\\u8FB0\", \"\\u2FA1\", \"\\u8FB5\", \"\\u2FA2\", \"\\u9091\", \"\\u2FA3\", \"\\u9149\", \"\\u2FA4\", \"\\u91C6\", \"\\u2FA5\", \"\\u91CC\", \"\\u2FA6\", \"\\u91D1\", \"\\u2FA7\", \"\\u9577\", \"\\u2FA8\", \"\\u9580\", \"\\u2FA9\", \"\\u961C\", \"\\u2FAA\", \"\\u96B6\", \"\\u2FAB\", \"\\u96B9\", \"\\u2FAC\", \"\\u96E8\", \"\\u2FAD\", \"\\u9751\", \"\\u2FAE\", \"\\u975E\", \"\\u2FAF\", \"\\u9762\", \"\\u2FB0\", \"\\u9769\", \"\\u2FB1\", \"\\u97CB\", \"\\u2FB2\", \"\\u97ED\", \"\\u2FB3\", \"\\u97F3\", \"\\u2FB4\", \"\\u9801\", \"\\u2FB5\", \"\\u98A8\", \"\\u2FB6\", \"\\u98DB\", \"\\u2FB7\", \"\\u98DF\", \"\\u2FB8\", \"\\u9996\", \"\\u2FB9\", \"\\u9999\", \"\\u2FBA\", \"\\u99AC\", \"\\u2FBB\", \"\\u9AA8\", \"\\u2FBC\", \"\\u9AD8\", \"\\u2FBD\", \"\\u9ADF\", \"\\u2FBE\", \"\\u9B25\", \"\\u2FBF\", \"\\u9B2F\", \"\\u2FC0\", \"\\u9B32\", \"\\u2FC1\", \"\\u9B3C\", \"\\u2FC2\", \"\\u9B5A\", \"\\u2FC3\", \"\\u9CE5\", \"\\u2FC4\", \"\\u9E75\", \"\\u2FC5\", \"\\u9E7F\", \"\\u2FC6\", \"\\u9EA5\", \"\\u2FC7\", \"\\u9EBB\", \"\\u2FC8\", \"\\u9EC3\", \"\\u2FC9\", \"\\u9ECD\", \"\\u2FCA\", \"\\u9ED1\", \"\\u2FCB\", \"\\u9EF9\", \"\\u2FCC\", \"\\u9EFD\", \"\\u2FCD\", \"\\u9F0E\", \"\\u2FCE\", \"\\u9F13\", \"\\u2FCF\", \"\\u9F20\", \"\\u2FD0\", \"\\u9F3B\", \"\\u2FD1\", \"\\u9F4A\", \"\\u2FD2\", \"\\u9F52\", \"\\u2FD3\", \"\\u9F8D\", \"\\u2FD4\", \"\\u9F9C\", \"\\u2FD5\", \"\\u9FA0\", \"\\u3036\", \"\\u3012\", \"\\u3038\", \"\\u5341\", \"\\u3039\", \"\\u5344\", \"\\u303A\", \"\\u5345\", \"\\u309B\", \" \\u3099\", \"\\u309C\", \" \\u309A\", \"\\u3131\", \"\\u1100\", \"\\u3132\", \"\\u1101\", \"\\u3133\", \"\\u11AA\", \"\\u3134\", \"\\u1102\", \"\\u3135\", \"\\u11AC\", \"\\u3136\", \"\\u11AD\", \"\\u3137\", \"\\u1103\", \"\\u3138\", \"\\u1104\", \"\\u3139\", \"\\u1105\", \"\\u313A\", \"\\u11B0\", \"\\u313B\", \"\\u11B1\", \"\\u313C\", \"\\u11B2\", \"\\u313D\", \"\\u11B3\", \"\\u313E\", \"\\u11B4\", \"\\u313F\", \"\\u11B5\", \"\\u3140\", \"\\u111A\", \"\\u3141\", \"\\u1106\", \"\\u3142\", \"\\u1107\", \"\\u3143\", \"\\u1108\", \"\\u3144\", \"\\u1121\", \"\\u3145\", \"\\u1109\", \"\\u3146\", \"\\u110A\", \"\\u3147\", \"\\u110B\", \"\\u3148\", \"\\u110C\", \"\\u3149\", \"\\u110D\", \"\\u314A\", \"\\u110E\", \"\\u314B\", \"\\u110F\", \"\\u314C\", \"\\u1110\", \"\\u314D\", \"\\u1111\", \"\\u314E\", \"\\u1112\", \"\\u314F\", \"\\u1161\", \"\\u3150\", \"\\u1162\", \"\\u3151\", \"\\u1163\", \"\\u3152\", \"\\u1164\", \"\\u3153\", \"\\u1165\", \"\\u3154\", \"\\u1166\", \"\\u3155\", \"\\u1167\", \"\\u3156\", \"\\u1168\", \"\\u3157\", \"\\u1169\", \"\\u3158\", \"\\u116A\", \"\\u3159\", \"\\u116B\", \"\\u315A\", \"\\u116C\", \"\\u315B\", \"\\u116D\", \"\\u315C\", \"\\u116E\", \"\\u315D\", \"\\u116F\", \"\\u315E\", \"\\u1170\", \"\\u315F\", \"\\u1171\", \"\\u3160\", \"\\u1172\", \"\\u3161\", \"\\u1173\", \"\\u3162\", \"\\u1174\", \"\\u3163\", \"\\u1175\", \"\\u3164\", \"\\u1160\", \"\\u3165\", \"\\u1114\", \"\\u3166\", \"\\u1115\", \"\\u3167\", \"\\u11C7\", \"\\u3168\", \"\\u11C8\", \"\\u3169\", \"\\u11CC\", \"\\u316A\", \"\\u11CE\", \"\\u316B\", \"\\u11D3\", \"\\u316C\", \"\\u11D7\", \"\\u316D\", \"\\u11D9\", \"\\u316E\", \"\\u111C\", \"\\u316F\", \"\\u11DD\", \"\\u3170\", \"\\u11DF\", \"\\u3171\", \"\\u111D\", \"\\u3172\", \"\\u111E\", \"\\u3173\", \"\\u1120\", \"\\u3174\", \"\\u1122\", \"\\u3175\", \"\\u1123\", \"\\u3176\", \"\\u1127\", \"\\u3177\", \"\\u1129\", \"\\u3178\", \"\\u112B\", \"\\u3179\", \"\\u112C\", \"\\u317A\", \"\\u112D\", \"\\u317B\", \"\\u112E\", \"\\u317C\", \"\\u112F\", \"\\u317D\", \"\\u1132\", \"\\u317E\", \"\\u1136\", \"\\u317F\", \"\\u1140\", \"\\u3180\", \"\\u1147\", \"\\u3181\", \"\\u114C\", \"\\u3182\", \"\\u11F1\", \"\\u3183\", \"\\u11F2\", \"\\u3184\", \"\\u1157\", \"\\u3185\", \"\\u1158\", \"\\u3186\", \"\\u1159\", \"\\u3187\", \"\\u1184\", \"\\u3188\", \"\\u1185\", \"\\u3189\", \"\\u1188\", \"\\u318A\", \"\\u1191\", \"\\u318B\", \"\\u1192\", \"\\u318C\", \"\\u1194\", \"\\u318D\", \"\\u119E\", \"\\u318E\", \"\\u11A1\", \"\\u3200\", \"(\\u1100)\", \"\\u3201\", \"(\\u1102)\", \"\\u3202\", \"(\\u1103)\", \"\\u3203\", \"(\\u1105)\", \"\\u3204\", \"(\\u1106)\", \"\\u3205\", \"(\\u1107)\", \"\\u3206\", \"(\\u1109)\", \"\\u3207\", \"(\\u110B)\", \"\\u3208\", \"(\\u110C)\", \"\\u3209\", \"(\\u110E)\", \"\\u320A\", \"(\\u110F)\", \"\\u320B\", \"(\\u1110)\", \"\\u320C\", \"(\\u1111)\", \"\\u320D\", \"(\\u1112)\", \"\\u320E\", \"(\\u1100\\u1161)\", \"\\u320F\", \"(\\u1102\\u1161)\", \"\\u3210\", \"(\\u1103\\u1161)\", \"\\u3211\", \"(\\u1105\\u1161)\", \"\\u3212\", \"(\\u1106\\u1161)\", \"\\u3213\", \"(\\u1107\\u1161)\", \"\\u3214\", \"(\\u1109\\u1161)\", \"\\u3215\", \"(\\u110B\\u1161)\", \"\\u3216\", \"(\\u110C\\u1161)\", \"\\u3217\", \"(\\u110E\\u1161)\", \"\\u3218\", \"(\\u110F\\u1161)\", \"\\u3219\", \"(\\u1110\\u1161)\", \"\\u321A\", \"(\\u1111\\u1161)\", \"\\u321B\", \"(\\u1112\\u1161)\", \"\\u321C\", \"(\\u110C\\u116E)\", \"\\u321D\", \"(\\u110B\\u1169\\u110C\\u1165\\u11AB)\", \"\\u321E\", \"(\\u110B\\u1169\\u1112\\u116E)\", \"\\u3220\", \"(\\u4E00)\", \"\\u3221\", \"(\\u4E8C)\", \"\\u3222\", \"(\\u4E09)\", \"\\u3223\", \"(\\u56DB)\", \"\\u3224\", \"(\\u4E94)\", \"\\u3225\", \"(\\u516D)\", \"\\u3226\", \"(\\u4E03)\", \"\\u3227\", \"(\\u516B)\", \"\\u3228\", \"(\\u4E5D)\", \"\\u3229\", \"(\\u5341)\", \"\\u322A\", \"(\\u6708)\", \"\\u322B\", \"(\\u706B)\", \"\\u322C\", \"(\\u6C34)\", \"\\u322D\", \"(\\u6728)\", \"\\u322E\", \"(\\u91D1)\", \"\\u322F\", \"(\\u571F)\", \"\\u3230\", \"(\\u65E5)\", \"\\u3231\", \"(\\u682A)\", \"\\u3232\", \"(\\u6709)\", \"\\u3233\", \"(\\u793E)\", \"\\u3234\", \"(\\u540D)\", \"\\u3235\", \"(\\u7279)\", \"\\u3236\", \"(\\u8CA1)\", \"\\u3237\", \"(\\u795D)\", \"\\u3238\", \"(\\u52B4)\", \"\\u3239\", \"(\\u4EE3)\", \"\\u323A\", \"(\\u547C)\", \"\\u323B\", \"(\\u5B66)\", \"\\u323C\", \"(\\u76E3)\", \"\\u323D\", \"(\\u4F01)\", \"\\u323E\", \"(\\u8CC7)\", \"\\u323F\", \"(\\u5354)\", \"\\u3240\", \"(\\u796D)\", \"\\u3241\", \"(\\u4F11)\", \"\\u3242\", \"(\\u81EA)\", \"\\u3243\", \"(\\u81F3)\", \"\\u32C0\", \"1\\u6708\", \"\\u32C1\", \"2\\u6708\", \"\\u32C2\", \"3\\u6708\", \"\\u32C3\", \"4\\u6708\", \"\\u32C4\", \"5\\u6708\", \"\\u32C5\", \"6\\u6708\", \"\\u32C6\", \"7\\u6708\", \"\\u32C7\", \"8\\u6708\", \"\\u32C8\", \"9\\u6708\", \"\\u32C9\", \"10\\u6708\", \"\\u32CA\", \"11\\u6708\", \"\\u32CB\", \"12\\u6708\", \"\\u3358\", \"0\\u70B9\", \"\\u3359\", \"1\\u70B9\", \"\\u335A\", \"2\\u70B9\", \"\\u335B\", \"3\\u70B9\", \"\\u335C\", \"4\\u70B9\", \"\\u335D\", \"5\\u70B9\", \"\\u335E\", \"6\\u70B9\", \"\\u335F\", \"7\\u70B9\", \"\\u3360\", \"8\\u70B9\", \"\\u3361\", \"9\\u70B9\", \"\\u3362\", \"10\\u70B9\", \"\\u3363\", \"11\\u70B9\", \"\\u3364\", \"12\\u70B9\", \"\\u3365\", \"13\\u70B9\", \"\\u3366\", \"14\\u70B9\", \"\\u3367\", \"15\\u70B9\", \"\\u3368\", \"16\\u70B9\", \"\\u3369\", \"17\\u70B9\", \"\\u336A\", \"18\\u70B9\", \"\\u336B\", \"19\\u70B9\", \"\\u336C\", \"20\\u70B9\", \"\\u336D\", \"21\\u70B9\", \"\\u336E\", \"22\\u70B9\", \"\\u336F\", \"23\\u70B9\", \"\\u3370\", \"24\\u70B9\", \"\\u33E0\", \"1\\u65E5\", \"\\u33E1\", \"2\\u65E5\", \"\\u33E2\", \"3\\u65E5\", \"\\u33E3\", \"4\\u65E5\", \"\\u33E4\", \"5\\u65E5\", \"\\u33E5\", \"6\\u65E5\", \"\\u33E6\", \"7\\u65E5\", \"\\u33E7\", \"8\\u65E5\", \"\\u33E8\", \"9\\u65E5\", \"\\u33E9\", \"10\\u65E5\", \"\\u33EA\", \"11\\u65E5\", \"\\u33EB\", \"12\\u65E5\", \"\\u33EC\", \"13\\u65E5\", \"\\u33ED\", \"14\\u65E5\", \"\\u33EE\", \"15\\u65E5\", \"\\u33EF\", \"16\\u65E5\", \"\\u33F0\", \"17\\u65E5\", \"\\u33F1\", \"18\\u65E5\", \"\\u33F2\", \"19\\u65E5\", \"\\u33F3\", \"20\\u65E5\", \"\\u33F4\", \"21\\u65E5\", \"\\u33F5\", \"22\\u65E5\", \"\\u33F6\", \"23\\u65E5\", \"\\u33F7\", \"24\\u65E5\", \"\\u33F8\", \"25\\u65E5\", \"\\u33F9\", \"26\\u65E5\", \"\\u33FA\", \"27\\u65E5\", \"\\u33FB\", \"28\\u65E5\", \"\\u33FC\", \"29\\u65E5\", \"\\u33FD\", \"30\\u65E5\", \"\\u33FE\", \"31\\u65E5\", \"\\uFB00\", \"ff\", \"\\uFB01\", \"fi\", \"\\uFB02\", \"fl\", \"\\uFB03\", \"ffi\", \"\\uFB04\", \"ffl\", \"\\uFB05\", \"\\u017Ft\", \"\\uFB06\", \"st\", \"\\uFB13\", \"\\u0574\\u0576\", \"\\uFB14\", \"\\u0574\\u0565\", \"\\uFB15\", \"\\u0574\\u056B\", \"\\uFB16\", \"\\u057E\\u0576\", \"\\uFB17\", \"\\u0574\\u056D\", \"\\uFB4F\", \"\\u05D0\\u05DC\", \"\\uFB50\", \"\\u0671\", \"\\uFB51\", \"\\u0671\", \"\\uFB52\", \"\\u067B\", \"\\uFB53\", \"\\u067B\", \"\\uFB54\", \"\\u067B\", \"\\uFB55\", \"\\u067B\", \"\\uFB56\", \"\\u067E\", \"\\uFB57\", \"\\u067E\", \"\\uFB58\", \"\\u067E\", \"\\uFB59\", \"\\u067E\", \"\\uFB5A\", \"\\u0680\", \"\\uFB5B\", \"\\u0680\", \"\\uFB5C\", \"\\u0680\", \"\\uFB5D\", \"\\u0680\", \"\\uFB5E\", \"\\u067A\", \"\\uFB5F\", \"\\u067A\", \"\\uFB60\", \"\\u067A\", \"\\uFB61\", \"\\u067A\", \"\\uFB62\", \"\\u067F\", \"\\uFB63\", \"\\u067F\", \"\\uFB64\", \"\\u067F\", \"\\uFB65\", \"\\u067F\", \"\\uFB66\", \"\\u0679\", \"\\uFB67\", \"\\u0679\", \"\\uFB68\", \"\\u0679\", \"\\uFB69\", \"\\u0679\", \"\\uFB6A\", \"\\u06A4\", \"\\uFB6B\", \"\\u06A4\", \"\\uFB6C\", \"\\u06A4\", \"\\uFB6D\", \"\\u06A4\", \"\\uFB6E\", \"\\u06A6\", \"\\uFB6F\", \"\\u06A6\", \"\\uFB70\", \"\\u06A6\", \"\\uFB71\", \"\\u06A6\", \"\\uFB72\", \"\\u0684\", \"\\uFB73\", \"\\u0684\", \"\\uFB74\", \"\\u0684\", \"\\uFB75\", \"\\u0684\", \"\\uFB76\", \"\\u0683\", \"\\uFB77\", \"\\u0683\", \"\\uFB78\", \"\\u0683\", \"\\uFB79\", \"\\u0683\", \"\\uFB7A\", \"\\u0686\", \"\\uFB7B\", \"\\u0686\", \"\\uFB7C\", \"\\u0686\", \"\\uFB7D\", \"\\u0686\", \"\\uFB7E\", \"\\u0687\", \"\\uFB7F\", \"\\u0687\", \"\\uFB80\", \"\\u0687\", \"\\uFB81\", \"\\u0687\", \"\\uFB82\", \"\\u068D\", \"\\uFB83\", \"\\u068D\", \"\\uFB84\", \"\\u068C\", \"\\uFB85\", \"\\u068C\", \"\\uFB86\", \"\\u068E\", \"\\uFB87\", \"\\u068E\", \"\\uFB88\", \"\\u0688\", \"\\uFB89\", \"\\u0688\", \"\\uFB8A\", \"\\u0698\", \"\\uFB8B\", \"\\u0698\", \"\\uFB8C\", \"\\u0691\", \"\\uFB8D\", \"\\u0691\", \"\\uFB8E\", \"\\u06A9\", \"\\uFB8F\", \"\\u06A9\", \"\\uFB90\", \"\\u06A9\", \"\\uFB91\", \"\\u06A9\", \"\\uFB92\", \"\\u06AF\", \"\\uFB93\", \"\\u06AF\", \"\\uFB94\", \"\\u06AF\", \"\\uFB95\", \"\\u06AF\", \"\\uFB96\", \"\\u06B3\", \"\\uFB97\", \"\\u06B3\", \"\\uFB98\", \"\\u06B3\", \"\\uFB99\", \"\\u06B3\", \"\\uFB9A\", \"\\u06B1\", \"\\uFB9B\", \"\\u06B1\", \"\\uFB9C\", \"\\u06B1\", \"\\uFB9D\", \"\\u06B1\", \"\\uFB9E\", \"\\u06BA\", \"\\uFB9F\", \"\\u06BA\", \"\\uFBA0\", \"\\u06BB\", \"\\uFBA1\", \"\\u06BB\", \"\\uFBA2\", \"\\u06BB\", \"\\uFBA3\", \"\\u06BB\", \"\\uFBA4\", \"\\u06C0\", \"\\uFBA5\", \"\\u06C0\", \"\\uFBA6\", \"\\u06C1\", \"\\uFBA7\", \"\\u06C1\", \"\\uFBA8\", \"\\u06C1\", \"\\uFBA9\", \"\\u06C1\", \"\\uFBAA\", \"\\u06BE\", \"\\uFBAB\", \"\\u06BE\", \"\\uFBAC\", \"\\u06BE\", \"\\uFBAD\", \"\\u06BE\", \"\\uFBAE\", \"\\u06D2\", \"\\uFBAF\", \"\\u06D2\", \"\\uFBB0\", \"\\u06D3\", \"\\uFBB1\", \"\\u06D3\", \"\\uFBD3\", \"\\u06AD\", \"\\uFBD4\", \"\\u06AD\", \"\\uFBD5\", \"\\u06AD\", \"\\uFBD6\", \"\\u06AD\", \"\\uFBD7\", \"\\u06C7\", \"\\uFBD8\", \"\\u06C7\", \"\\uFBD9\", \"\\u06C6\", \"\\uFBDA\", \"\\u06C6\", \"\\uFBDB\", \"\\u06C8\", \"\\uFBDC\", \"\\u06C8\", \"\\uFBDD\", \"\\u0677\", \"\\uFBDE\", \"\\u06CB\", \"\\uFBDF\", \"\\u06CB\", \"\\uFBE0\", \"\\u06C5\", \"\\uFBE1\", \"\\u06C5\", \"\\uFBE2\", \"\\u06C9\", \"\\uFBE3\", \"\\u06C9\", \"\\uFBE4\", \"\\u06D0\", \"\\uFBE5\", \"\\u06D0\", \"\\uFBE6\", \"\\u06D0\", \"\\uFBE7\", \"\\u06D0\", \"\\uFBE8\", \"\\u0649\", \"\\uFBE9\", \"\\u0649\", \"\\uFBEA\", \"\\u0626\\u0627\", \"\\uFBEB\", \"\\u0626\\u0627\", \"\\uFBEC\", \"\\u0626\\u06D5\", \"\\uFBED\", \"\\u0626\\u06D5\", \"\\uFBEE\", \"\\u0626\\u0648\", \"\\uFBEF\", \"\\u0626\\u0648\", \"\\uFBF0\", \"\\u0626\\u06C7\", \"\\uFBF1\", \"\\u0626\\u06C7\", \"\\uFBF2\", \"\\u0626\\u06C6\", \"\\uFBF3\", \"\\u0626\\u06C6\", \"\\uFBF4\", \"\\u0626\\u06C8\", \"\\uFBF5\", \"\\u0626\\u06C8\", \"\\uFBF6\", \"\\u0626\\u06D0\", \"\\uFBF7\", \"\\u0626\\u06D0\", \"\\uFBF8\", \"\\u0626\\u06D0\", \"\\uFBF9\", \"\\u0626\\u0649\", \"\\uFBFA\", \"\\u0626\\u0649\", \"\\uFBFB\", \"\\u0626\\u0649\", \"\\uFBFC\", \"\\u06CC\", \"\\uFBFD\", \"\\u06CC\", \"\\uFBFE\", \"\\u06CC\", \"\\uFBFF\", \"\\u06CC\", \"\\uFC00\", \"\\u0626\\u062C\", \"\\uFC01\", \"\\u0626\\u062D\", \"\\uFC02\", \"\\u0626\\u0645\", \"\\uFC03\", \"\\u0626\\u0649\", \"\\uFC04\", \"\\u0626\\u064A\", \"\\uFC05\", \"\\u0628\\u062C\", \"\\uFC06\", \"\\u0628\\u062D\", \"\\uFC07\", \"\\u0628\\u062E\", \"\\uFC08\", \"\\u0628\\u0645\", \"\\uFC09\", \"\\u0628\\u0649\", \"\\uFC0A\", \"\\u0628\\u064A\", \"\\uFC0B\", \"\\u062A\\u062C\", \"\\uFC0C\", \"\\u062A\\u062D\", \"\\uFC0D\", \"\\u062A\\u062E\", \"\\uFC0E\", \"\\u062A\\u0645\", \"\\uFC0F\", \"\\u062A\\u0649\", \"\\uFC10\", \"\\u062A\\u064A\", \"\\uFC11\", \"\\u062B\\u062C\", \"\\uFC12\", \"\\u062B\\u0645\", \"\\uFC13\", \"\\u062B\\u0649\", \"\\uFC14\", \"\\u062B\\u064A\", \"\\uFC15\", \"\\u062C\\u062D\", \"\\uFC16\", \"\\u062C\\u0645\", \"\\uFC17\", \"\\u062D\\u062C\", \"\\uFC18\", \"\\u062D\\u0645\", \"\\uFC19\", \"\\u062E\\u062C\", \"\\uFC1A\", \"\\u062E\\u062D\", \"\\uFC1B\", \"\\u062E\\u0645\", \"\\uFC1C\", \"\\u0633\\u062C\", \"\\uFC1D\", \"\\u0633\\u062D\", \"\\uFC1E\", \"\\u0633\\u062E\", \"\\uFC1F\", \"\\u0633\\u0645\", \"\\uFC20\", \"\\u0635\\u062D\", \"\\uFC21\", \"\\u0635\\u0645\", \"\\uFC22\", \"\\u0636\\u062C\", \"\\uFC23\", \"\\u0636\\u062D\", \"\\uFC24\", \"\\u0636\\u062E\", \"\\uFC25\", \"\\u0636\\u0645\", \"\\uFC26\", \"\\u0637\\u062D\", \"\\uFC27\", \"\\u0637\\u0645\", \"\\uFC28\", \"\\u0638\\u0645\", \"\\uFC29\", \"\\u0639\\u062C\", \"\\uFC2A\", \"\\u0639\\u0645\", \"\\uFC2B\", \"\\u063A\\u062C\", \"\\uFC2C\", \"\\u063A\\u0645\", \"\\uFC2D\", \"\\u0641\\u062C\", \"\\uFC2E\", \"\\u0641\\u062D\", \"\\uFC2F\", \"\\u0641\\u062E\", \"\\uFC30\", \"\\u0641\\u0645\", \"\\uFC31\", \"\\u0641\\u0649\", \"\\uFC32\", \"\\u0641\\u064A\", \"\\uFC33\", \"\\u0642\\u062D\", \"\\uFC34\", \"\\u0642\\u0645\", \"\\uFC35\", \"\\u0642\\u0649\", \"\\uFC36\", \"\\u0642\\u064A\", \"\\uFC37\", \"\\u0643\\u0627\", \"\\uFC38\", \"\\u0643\\u062C\", \"\\uFC39\", \"\\u0643\\u062D\", \"\\uFC3A\", \"\\u0643\\u062E\", \"\\uFC3B\", \"\\u0643\\u0644\", \"\\uFC3C\", \"\\u0643\\u0645\", \"\\uFC3D\", \"\\u0643\\u0649\", \"\\uFC3E\", \"\\u0643\\u064A\", \"\\uFC3F\", \"\\u0644\\u062C\", \"\\uFC40\", \"\\u0644\\u062D\", \"\\uFC41\", \"\\u0644\\u062E\", \"\\uFC42\", \"\\u0644\\u0645\", \"\\uFC43\", \"\\u0644\\u0649\", \"\\uFC44\", \"\\u0644\\u064A\", \"\\uFC45\", \"\\u0645\\u062C\", \"\\uFC46\", \"\\u0645\\u062D\", \"\\uFC47\", \"\\u0645\\u062E\", \"\\uFC48\", \"\\u0645\\u0645\", \"\\uFC49\", \"\\u0645\\u0649\", \"\\uFC4A\", \"\\u0645\\u064A\", \"\\uFC4B\", \"\\u0646\\u062C\", \"\\uFC4C\", \"\\u0646\\u062D\", \"\\uFC4D\", \"\\u0646\\u062E\", \"\\uFC4E\", \"\\u0646\\u0645\", \"\\uFC4F\", \"\\u0646\\u0649\", \"\\uFC50\", \"\\u0646\\u064A\", \"\\uFC51\", \"\\u0647\\u062C\", \"\\uFC52\", \"\\u0647\\u0645\", \"\\uFC53\", \"\\u0647\\u0649\", \"\\uFC54\", \"\\u0647\\u064A\", \"\\uFC55\", \"\\u064A\\u062C\", \"\\uFC56\", \"\\u064A\\u062D\", \"\\uFC57\", \"\\u064A\\u062E\", \"\\uFC58\", \"\\u064A\\u0645\", \"\\uFC59\", \"\\u064A\\u0649\", \"\\uFC5A\", \"\\u064A\\u064A\", \"\\uFC5B\", \"\\u0630\\u0670\", \"\\uFC5C\", \"\\u0631\\u0670\", \"\\uFC5D\", \"\\u0649\\u0670\", \"\\uFC5E\", \" \\u064C\\u0651\", \"\\uFC5F\", \" \\u064D\\u0651\", \"\\uFC60\", \" \\u064E\\u0651\", \"\\uFC61\", \" \\u064F\\u0651\", \"\\uFC62\", \" \\u0650\\u0651\", \"\\uFC63\", \" \\u0651\\u0670\", \"\\uFC64\", \"\\u0626\\u0631\", \"\\uFC65\", \"\\u0626\\u0632\", \"\\uFC66\", \"\\u0626\\u0645\", \"\\uFC67\", \"\\u0626\\u0646\", \"\\uFC68\", \"\\u0626\\u0649\", \"\\uFC69\", \"\\u0626\\u064A\", \"\\uFC6A\", \"\\u0628\\u0631\", \"\\uFC6B\", \"\\u0628\\u0632\", \"\\uFC6C\", \"\\u0628\\u0645\", \"\\uFC6D\", \"\\u0628\\u0646\", \"\\uFC6E\", \"\\u0628\\u0649\", \"\\uFC6F\", \"\\u0628\\u064A\", \"\\uFC70\", \"\\u062A\\u0631\", \"\\uFC71\", \"\\u062A\\u0632\", \"\\uFC72\", \"\\u062A\\u0645\", \"\\uFC73\", \"\\u062A\\u0646\", \"\\uFC74\", \"\\u062A\\u0649\", \"\\uFC75\", \"\\u062A\\u064A\", \"\\uFC76\", \"\\u062B\\u0631\", \"\\uFC77\", \"\\u062B\\u0632\", \"\\uFC78\", \"\\u062B\\u0645\", \"\\uFC79\", \"\\u062B\\u0646\", \"\\uFC7A\", \"\\u062B\\u0649\", \"\\uFC7B\", \"\\u062B\\u064A\", \"\\uFC7C\", \"\\u0641\\u0649\", \"\\uFC7D\", \"\\u0641\\u064A\", \"\\uFC7E\", \"\\u0642\\u0649\", \"\\uFC7F\", \"\\u0642\\u064A\", \"\\uFC80\", \"\\u0643\\u0627\", \"\\uFC81\", \"\\u0643\\u0644\", \"\\uFC82\", \"\\u0643\\u0645\", \"\\uFC83\", \"\\u0643\\u0649\", \"\\uFC84\", \"\\u0643\\u064A\", \"\\uFC85\", \"\\u0644\\u0645\", \"\\uFC86\", \"\\u0644\\u0649\", \"\\uFC87\", \"\\u0644\\u064A\", \"\\uFC88\", \"\\u0645\\u0627\", \"\\uFC89\", \"\\u0645\\u0645\", \"\\uFC8A\", \"\\u0646\\u0631\", \"\\uFC8B\", \"\\u0646\\u0632\", \"\\uFC8C\", \"\\u0646\\u0645\", \"\\uFC8D\", \"\\u0646\\u0646\", \"\\uFC8E\", \"\\u0646\\u0649\", \"\\uFC8F\", \"\\u0646\\u064A\", \"\\uFC90\", \"\\u0649\\u0670\", \"\\uFC91\", \"\\u064A\\u0631\", \"\\uFC92\", \"\\u064A\\u0632\", \"\\uFC93\", \"\\u064A\\u0645\", \"\\uFC94\", \"\\u064A\\u0646\", \"\\uFC95\", \"\\u064A\\u0649\", \"\\uFC96\", \"\\u064A\\u064A\", \"\\uFC97\", \"\\u0626\\u062C\", \"\\uFC98\", \"\\u0626\\u062D\", \"\\uFC99\", \"\\u0626\\u062E\", \"\\uFC9A\", \"\\u0626\\u0645\", \"\\uFC9B\", \"\\u0626\\u0647\", \"\\uFC9C\", \"\\u0628\\u062C\", \"\\uFC9D\", \"\\u0628\\u062D\", \"\\uFC9E\", \"\\u0628\\u062E\", \"\\uFC9F\", \"\\u0628\\u0645\", \"\\uFCA0\", \"\\u0628\\u0647\", \"\\uFCA1\", \"\\u062A\\u062C\", \"\\uFCA2\", \"\\u062A\\u062D\", \"\\uFCA3\", \"\\u062A\\u062E\", \"\\uFCA4\", \"\\u062A\\u0645\", \"\\uFCA5\", \"\\u062A\\u0647\", \"\\uFCA6\", \"\\u062B\\u0645\", \"\\uFCA7\", \"\\u062C\\u062D\", \"\\uFCA8\", \"\\u062C\\u0645\", \"\\uFCA9\", \"\\u062D\\u062C\", \"\\uFCAA\", \"\\u062D\\u0645\", \"\\uFCAB\", \"\\u062E\\u062C\", \"\\uFCAC\", \"\\u062E\\u0645\", \"\\uFCAD\", \"\\u0633\\u062C\", \"\\uFCAE\", \"\\u0633\\u062D\", \"\\uFCAF\", \"\\u0633\\u062E\", \"\\uFCB0\", \"\\u0633\\u0645\", \"\\uFCB1\", \"\\u0635\\u062D\", \"\\uFCB2\", \"\\u0635\\u062E\", \"\\uFCB3\", \"\\u0635\\u0645\", \"\\uFCB4\", \"\\u0636\\u062C\", \"\\uFCB5\", \"\\u0636\\u062D\", \"\\uFCB6\", \"\\u0636\\u062E\", \"\\uFCB7\", \"\\u0636\\u0645\", \"\\uFCB8\", \"\\u0637\\u062D\", \"\\uFCB9\", \"\\u0638\\u0645\", \"\\uFCBA\", \"\\u0639\\u062C\", \"\\uFCBB\", \"\\u0639\\u0645\", \"\\uFCBC\", \"\\u063A\\u062C\", \"\\uFCBD\", \"\\u063A\\u0645\", \"\\uFCBE\", \"\\u0641\\u062C\", \"\\uFCBF\", \"\\u0641\\u062D\", \"\\uFCC0\", \"\\u0641\\u062E\", \"\\uFCC1\", \"\\u0641\\u0645\", \"\\uFCC2\", \"\\u0642\\u062D\", \"\\uFCC3\", \"\\u0642\\u0645\", \"\\uFCC4\", \"\\u0643\\u062C\", \"\\uFCC5\", \"\\u0643\\u062D\", \"\\uFCC6\", \"\\u0643\\u062E\", \"\\uFCC7\", \"\\u0643\\u0644\", \"\\uFCC8\", \"\\u0643\\u0645\", \"\\uFCC9\", \"\\u0644\\u062C\", \"\\uFCCA\", \"\\u0644\\u062D\", \"\\uFCCB\", \"\\u0644\\u062E\", \"\\uFCCC\", \"\\u0644\\u0645\", \"\\uFCCD\", \"\\u0644\\u0647\", \"\\uFCCE\", \"\\u0645\\u062C\", \"\\uFCCF\", \"\\u0645\\u062D\", \"\\uFCD0\", \"\\u0645\\u062E\", \"\\uFCD1\", \"\\u0645\\u0645\", \"\\uFCD2\", \"\\u0646\\u062C\", \"\\uFCD3\", \"\\u0646\\u062D\", \"\\uFCD4\", \"\\u0646\\u062E\", \"\\uFCD5\", \"\\u0646\\u0645\", \"\\uFCD6\", \"\\u0646\\u0647\", \"\\uFCD7\", \"\\u0647\\u062C\", \"\\uFCD8\", \"\\u0647\\u0645\", \"\\uFCD9\", \"\\u0647\\u0670\", \"\\uFCDA\", \"\\u064A\\u062C\", \"\\uFCDB\", \"\\u064A\\u062D\", \"\\uFCDC\", \"\\u064A\\u062E\", \"\\uFCDD\", \"\\u064A\\u0645\", \"\\uFCDE\", \"\\u064A\\u0647\", \"\\uFCDF\", \"\\u0626\\u0645\", \"\\uFCE0\", \"\\u0626\\u0647\", \"\\uFCE1\", \"\\u0628\\u0645\", \"\\uFCE2\", \"\\u0628\\u0647\", \"\\uFCE3\", \"\\u062A\\u0645\", \"\\uFCE4\", \"\\u062A\\u0647\", \"\\uFCE5\", \"\\u062B\\u0645\", \"\\uFCE6\", \"\\u062B\\u0647\", \"\\uFCE7\", \"\\u0633\\u0645\", \"\\uFCE8\", \"\\u0633\\u0647\", \"\\uFCE9\", \"\\u0634\\u0645\", \"\\uFCEA\", \"\\u0634\\u0647\", \"\\uFCEB\", \"\\u0643\\u0644\", \"\\uFCEC\", \"\\u0643\\u0645\", \"\\uFCED\", \"\\u0644\\u0645\", \"\\uFCEE\", \"\\u0646\\u0645\", \"\\uFCEF\", \"\\u0646\\u0647\", \"\\uFCF0\", \"\\u064A\\u0645\", \"\\uFCF1\", \"\\u064A\\u0647\", \"\\uFCF2\", \"\\u0640\\u064E\\u0651\", \"\\uFCF3\", \"\\u0640\\u064F\\u0651\", \"\\uFCF4\", \"\\u0640\\u0650\\u0651\", \"\\uFCF5\", \"\\u0637\\u0649\", \"\\uFCF6\", \"\\u0637\\u064A\", \"\\uFCF7\", \"\\u0639\\u0649\", \"\\uFCF8\", \"\\u0639\\u064A\", \"\\uFCF9\", \"\\u063A\\u0649\", \"\\uFCFA\", \"\\u063A\\u064A\", \"\\uFCFB\", \"\\u0633\\u0649\", \"\\uFCFC\", \"\\u0633\\u064A\", \"\\uFCFD\", \"\\u0634\\u0649\", \"\\uFCFE\", \"\\u0634\\u064A\", \"\\uFCFF\", \"\\u062D\\u0649\", \"\\uFD00\", \"\\u062D\\u064A\", \"\\uFD01\", \"\\u062C\\u0649\", \"\\uFD02\", \"\\u062C\\u064A\", \"\\uFD03\", \"\\u062E\\u0649\", \"\\uFD04\", \"\\u062E\\u064A\", \"\\uFD05\", \"\\u0635\\u0649\", \"\\uFD06\", \"\\u0635\\u064A\", \"\\uFD07\", \"\\u0636\\u0649\", \"\\uFD08\", \"\\u0636\\u064A\", \"\\uFD09\", \"\\u0634\\u062C\", \"\\uFD0A\", \"\\u0634\\u062D\", \"\\uFD0B\", \"\\u0634\\u062E\", \"\\uFD0C\", \"\\u0634\\u0645\", \"\\uFD0D\", \"\\u0634\\u0631\", \"\\uFD0E\", \"\\u0633\\u0631\", \"\\uFD0F\", \"\\u0635\\u0631\", \"\\uFD10\", \"\\u0636\\u0631\", \"\\uFD11\", \"\\u0637\\u0649\", \"\\uFD12\", \"\\u0637\\u064A\", \"\\uFD13\", \"\\u0639\\u0649\", \"\\uFD14\", \"\\u0639\\u064A\", \"\\uFD15\", \"\\u063A\\u0649\", \"\\uFD16\", \"\\u063A\\u064A\", \"\\uFD17\", \"\\u0633\\u0649\", \"\\uFD18\", \"\\u0633\\u064A\", \"\\uFD19\", \"\\u0634\\u0649\", \"\\uFD1A\", \"\\u0634\\u064A\", \"\\uFD1B\", \"\\u062D\\u0649\", \"\\uFD1C\", \"\\u062D\\u064A\", \"\\uFD1D\", \"\\u062C\\u0649\", \"\\uFD1E\", \"\\u062C\\u064A\", \"\\uFD1F\", \"\\u062E\\u0649\", \"\\uFD20\", \"\\u062E\\u064A\", \"\\uFD21\", \"\\u0635\\u0649\", \"\\uFD22\", \"\\u0635\\u064A\", \"\\uFD23\", \"\\u0636\\u0649\", \"\\uFD24\", \"\\u0636\\u064A\", \"\\uFD25\", \"\\u0634\\u062C\", \"\\uFD26\", \"\\u0634\\u062D\", \"\\uFD27\", \"\\u0634\\u062E\", \"\\uFD28\", \"\\u0634\\u0645\", \"\\uFD29\", \"\\u0634\\u0631\", \"\\uFD2A\", \"\\u0633\\u0631\", \"\\uFD2B\", \"\\u0635\\u0631\", \"\\uFD2C\", \"\\u0636\\u0631\", \"\\uFD2D\", \"\\u0634\\u062C\", \"\\uFD2E\", \"\\u0634\\u062D\", \"\\uFD2F\", \"\\u0634\\u062E\", \"\\uFD30\", \"\\u0634\\u0645\", \"\\uFD31\", \"\\u0633\\u0647\", \"\\uFD32\", \"\\u0634\\u0647\", \"\\uFD33\", \"\\u0637\\u0645\", \"\\uFD34\", \"\\u0633\\u062C\", \"\\uFD35\", \"\\u0633\\u062D\", \"\\uFD36\", \"\\u0633\\u062E\", \"\\uFD37\", \"\\u0634\\u062C\", \"\\uFD38\", \"\\u0634\\u062D\", \"\\uFD39\", \"\\u0634\\u062E\", \"\\uFD3A\", \"\\u0637\\u0645\", \"\\uFD3B\", \"\\u0638\\u0645\", \"\\uFD3C\", \"\\u0627\\u064B\", \"\\uFD3D\", \"\\u0627\\u064B\", \"\\uFD50\", \"\\u062A\\u062C\\u0645\", \"\\uFD51\", \"\\u062A\\u062D\\u062C\", \"\\uFD52\", \"\\u062A\\u062D\\u062C\", \"\\uFD53\", \"\\u062A\\u062D\\u0645\", \"\\uFD54\", \"\\u062A\\u062E\\u0645\", \"\\uFD55\", \"\\u062A\\u0645\\u062C\", \"\\uFD56\", \"\\u062A\\u0645\\u062D\", \"\\uFD57\", \"\\u062A\\u0645\\u062E\", \"\\uFD58\", \"\\u062C\\u0645\\u062D\", \"\\uFD59\", \"\\u062C\\u0645\\u062D\", \"\\uFD5A\", \"\\u062D\\u0645\\u064A\", \"\\uFD5B\", \"\\u062D\\u0645\\u0649\", \"\\uFD5C\", \"\\u0633\\u062D\\u062C\", \"\\uFD5D\", \"\\u0633\\u062C\\u062D\", \"\\uFD5E\", \"\\u0633\\u062C\\u0649\", \"\\uFD5F\", \"\\u0633\\u0645\\u062D\", \"\\uFD60\", \"\\u0633\\u0645\\u062D\", \"\\uFD61\", \"\\u0633\\u0645\\u062C\", \"\\uFD62\", \"\\u0633\\u0645\\u0645\", \"\\uFD63\", \"\\u0633\\u0645\\u0645\", \"\\uFD64\", \"\\u0635\\u062D\\u062D\", \"\\uFD65\", \"\\u0635\\u062D\\u062D\", \"\\uFD66\", \"\\u0635\\u0645\\u0645\", \"\\uFD67\", \"\\u0634\\u062D\\u0645\", \"\\uFD68\", \"\\u0634\\u062D\\u0645\", \"\\uFD69\", \"\\u0634\\u062C\\u064A\", \"\\uFD6A\", \"\\u0634\\u0645\\u062E\", \"\\uFD6B\", \"\\u0634\\u0645\\u062E\", \"\\uFD6C\", \"\\u0634\\u0645\\u0645\", \"\\uFD6D\", \"\\u0634\\u0645\\u0645\", \"\\uFD6E\", \"\\u0636\\u062D\\u0649\", \"\\uFD6F\", \"\\u0636\\u062E\\u0645\", \"\\uFD70\", \"\\u0636\\u062E\\u0645\", \"\\uFD71\", \"\\u0637\\u0645\\u062D\", \"\\uFD72\", \"\\u0637\\u0645\\u062D\", \"\\uFD73\", \"\\u0637\\u0645\\u0645\", \"\\uFD74\", \"\\u0637\\u0645\\u064A\", \"\\uFD75\", \"\\u0639\\u062C\\u0645\", \"\\uFD76\", \"\\u0639\\u0645\\u0645\", \"\\uFD77\", \"\\u0639\\u0645\\u0645\", \"\\uFD78\", \"\\u0639\\u0645\\u0649\", \"\\uFD79\", \"\\u063A\\u0645\\u0645\", \"\\uFD7A\", \"\\u063A\\u0645\\u064A\", \"\\uFD7B\", \"\\u063A\\u0645\\u0649\", \"\\uFD7C\", \"\\u0641\\u062E\\u0645\", \"\\uFD7D\", \"\\u0641\\u062E\\u0645\", \"\\uFD7E\", \"\\u0642\\u0645\\u062D\", \"\\uFD7F\", \"\\u0642\\u0645\\u0645\", \"\\uFD80\", \"\\u0644\\u062D\\u0645\", \"\\uFD81\", \"\\u0644\\u062D\\u064A\", \"\\uFD82\", \"\\u0644\\u062D\\u0649\", \"\\uFD83\", \"\\u0644\\u062C\\u062C\", \"\\uFD84\", \"\\u0644\\u062C\\u062C\", \"\\uFD85\", \"\\u0644\\u062E\\u0645\", \"\\uFD86\", \"\\u0644\\u062E\\u0645\", \"\\uFD87\", \"\\u0644\\u0645\\u062D\", \"\\uFD88\", \"\\u0644\\u0645\\u062D\", \"\\uFD89\", \"\\u0645\\u062D\\u062C\", \"\\uFD8A\", \"\\u0645\\u062D\\u0645\", \"\\uFD8B\", \"\\u0645\\u062D\\u064A\", \"\\uFD8C\", \"\\u0645\\u062C\\u062D\", \"\\uFD8D\", \"\\u0645\\u062C\\u0645\", \"\\uFD8E\", \"\\u0645\\u062E\\u062C\", \"\\uFD8F\", \"\\u0645\\u062E\\u0645\", \"\\uFD92\", \"\\u0645\\u062C\\u062E\", \"\\uFD93\", \"\\u0647\\u0645\\u062C\", \"\\uFD94\", \"\\u0647\\u0645\\u0645\", \"\\uFD95\", \"\\u0646\\u062D\\u0645\", \"\\uFD96\", \"\\u0646\\u062D\\u0649\", \"\\uFD97\", \"\\u0646\\u062C\\u0645\", \"\\uFD98\", \"\\u0646\\u062C\\u0645\", \"\\uFD99\", \"\\u0646\\u062C\\u0649\", \"\\uFD9A\", \"\\u0646\\u0645\\u064A\", \"\\uFD9B\", \"\\u0646\\u0645\\u0649\", \"\\uFD9C\", \"\\u064A\\u0645\\u0645\", \"\\uFD9D\", \"\\u064A\\u0645\\u0645\", \"\\uFD9E\", \"\\u0628\\u062E\\u064A\", \"\\uFD9F\", \"\\u062A\\u062C\\u064A\", \"\\uFDA0\", \"\\u062A\\u062C\\u0649\", \"\\uFDA1\", \"\\u062A\\u062E\\u064A\", \"\\uFDA2\", \"\\u062A\\u062E\\u0649\", \"\\uFDA3\", \"\\u062A\\u0645\\u064A\", \"\\uFDA4\", \"\\u062A\\u0645\\u0649\", \"\\uFDA5\", \"\\u062C\\u0645\\u064A\", \"\\uFDA6\", \"\\u062C\\u062D\\u0649\", \"\\uFDA7\", \"\\u062C\\u0645\\u0649\", \"\\uFDA8\", \"\\u0633\\u062E\\u0649\", \"\\uFDA9\", \"\\u0635\\u062D\\u064A\", \"\\uFDAA\", \"\\u0634\\u062D\\u064A\", \"\\uFDAB\", \"\\u0636\\u062D\\u064A\", \"\\uFDAC\", \"\\u0644\\u062C\\u064A\", \"\\uFDAD\", \"\\u0644\\u0645\\u064A\", \"\\uFDAE\", \"\\u064A\\u062D\\u064A\", \"\\uFDAF\", \"\\u064A\\u062C\\u064A\", \"\\uFDB0\", \"\\u064A\\u0645\\u064A\", \"\\uFDB1\", \"\\u0645\\u0645\\u064A\", \"\\uFDB2\", \"\\u0642\\u0645\\u064A\", \"\\uFDB3\", \"\\u0646\\u062D\\u064A\", \"\\uFDB4\", \"\\u0642\\u0645\\u062D\", \"\\uFDB5\", \"\\u0644\\u062D\\u0645\", \"\\uFDB6\", \"\\u0639\\u0645\\u064A\", \"\\uFDB7\", \"\\u0643\\u0645\\u064A\", \"\\uFDB8\", \"\\u0646\\u062C\\u062D\", \"\\uFDB9\", \"\\u0645\\u062E\\u064A\", \"\\uFDBA\", \"\\u0644\\u062C\\u0645\", \"\\uFDBB\", \"\\u0643\\u0645\\u0645\", \"\\uFDBC\", \"\\u0644\\u062C\\u0645\", \"\\uFDBD\", \"\\u0646\\u062C\\u062D\", \"\\uFDBE\", \"\\u062C\\u062D\\u064A\", \"\\uFDBF\", \"\\u062D\\u062C\\u064A\", \"\\uFDC0\", \"\\u0645\\u062C\\u064A\", \"\\uFDC1\", \"\\u0641\\u0645\\u064A\", \"\\uFDC2\", \"\\u0628\\u062D\\u064A\", \"\\uFDC3\", \"\\u0643\\u0645\\u0645\", \"\\uFDC4\", \"\\u0639\\u062C\\u0645\", \"\\uFDC5\", \"\\u0635\\u0645\\u0645\", \"\\uFDC6\", \"\\u0633\\u062E\\u064A\", \"\\uFDC7\", \"\\u0646\\u062C\\u064A\", \"\\uFE49\", \"\\u203E\", \"\\uFE4A\", \"\\u203E\", \"\\uFE4B\", \"\\u203E\", \"\\uFE4C\", \"\\u203E\", \"\\uFE4D\", \"_\", \"\\uFE4E\", \"_\", \"\\uFE4F\", \"_\", \"\\uFE80\", \"\\u0621\", \"\\uFE81\", \"\\u0622\", \"\\uFE82\", \"\\u0622\", \"\\uFE83\", \"\\u0623\", \"\\uFE84\", \"\\u0623\", \"\\uFE85\", \"\\u0624\", \"\\uFE86\", \"\\u0624\", \"\\uFE87\", \"\\u0625\", \"\\uFE88\", \"\\u0625\", \"\\uFE89\", \"\\u0626\", \"\\uFE8A\", \"\\u0626\", \"\\uFE8B\", \"\\u0626\", \"\\uFE8C\", \"\\u0626\", \"\\uFE8D\", \"\\u0627\", \"\\uFE8E\", \"\\u0627\", \"\\uFE8F\", \"\\u0628\", \"\\uFE90\", \"\\u0628\", \"\\uFE91\", \"\\u0628\", \"\\uFE92\", \"\\u0628\", \"\\uFE93\", \"\\u0629\", \"\\uFE94\", \"\\u0629\", \"\\uFE95\", \"\\u062A\", \"\\uFE96\", \"\\u062A\", \"\\uFE97\", \"\\u062A\", \"\\uFE98\", \"\\u062A\", \"\\uFE99\", \"\\u062B\", \"\\uFE9A\", \"\\u062B\", \"\\uFE9B\", \"\\u062B\", \"\\uFE9C\", \"\\u062B\", \"\\uFE9D\", \"\\u062C\", \"\\uFE9E\", \"\\u062C\", \"\\uFE9F\", \"\\u062C\", \"\\uFEA0\", \"\\u062C\", \"\\uFEA1\", \"\\u062D\", \"\\uFEA2\", \"\\u062D\", \"\\uFEA3\", \"\\u062D\", \"\\uFEA4\", \"\\u062D\", \"\\uFEA5\", \"\\u062E\", \"\\uFEA6\", \"\\u062E\", \"\\uFEA7\", \"\\u062E\", \"\\uFEA8\", \"\\u062E\", \"\\uFEA9\", \"\\u062F\", \"\\uFEAA\", \"\\u062F\", \"\\uFEAB\", \"\\u0630\", \"\\uFEAC\", \"\\u0630\", \"\\uFEAD\", \"\\u0631\", \"\\uFEAE\", \"\\u0631\", \"\\uFEAF\", \"\\u0632\", \"\\uFEB0\", \"\\u0632\", \"\\uFEB1\", \"\\u0633\", \"\\uFEB2\", \"\\u0633\", \"\\uFEB3\", \"\\u0633\", \"\\uFEB4\", \"\\u0633\", \"\\uFEB5\", \"\\u0634\", \"\\uFEB6\", \"\\u0634\", \"\\uFEB7\", \"\\u0634\", \"\\uFEB8\", \"\\u0634\", \"\\uFEB9\", \"\\u0635\", \"\\uFEBA\", \"\\u0635\", \"\\uFEBB\", \"\\u0635\", \"\\uFEBC\", \"\\u0635\", \"\\uFEBD\", \"\\u0636\", \"\\uFEBE\", \"\\u0636\", \"\\uFEBF\", \"\\u0636\", \"\\uFEC0\", \"\\u0636\", \"\\uFEC1\", \"\\u0637\", \"\\uFEC2\", \"\\u0637\", \"\\uFEC3\", \"\\u0637\", \"\\uFEC4\", \"\\u0637\", \"\\uFEC5\", \"\\u0638\", \"\\uFEC6\", \"\\u0638\", \"\\uFEC7\", \"\\u0638\", \"\\uFEC8\", \"\\u0638\", \"\\uFEC9\", \"\\u0639\", \"\\uFECA\", \"\\u0639\", \"\\uFECB\", \"\\u0639\", \"\\uFECC\", \"\\u0639\", \"\\uFECD\", \"\\u063A\", \"\\uFECE\", \"\\u063A\", \"\\uFECF\", \"\\u063A\", \"\\uFED0\", \"\\u063A\", \"\\uFED1\", \"\\u0641\", \"\\uFED2\", \"\\u0641\", \"\\uFED3\", \"\\u0641\", \"\\uFED4\", \"\\u0641\", \"\\uFED5\", \"\\u0642\", \"\\uFED6\", \"\\u0642\", \"\\uFED7\", \"\\u0642\", \"\\uFED8\", \"\\u0642\", \"\\uFED9\", \"\\u0643\", \"\\uFEDA\", \"\\u0643\", \"\\uFEDB\", \"\\u0643\", \"\\uFEDC\", \"\\u0643\", \"\\uFEDD\", \"\\u0644\", \"\\uFEDE\", \"\\u0644\", \"\\uFEDF\", \"\\u0644\", \"\\uFEE0\", \"\\u0644\", \"\\uFEE1\", \"\\u0645\", \"\\uFEE2\", \"\\u0645\", \"\\uFEE3\", \"\\u0645\", \"\\uFEE4\", \"\\u0645\", \"\\uFEE5\", \"\\u0646\", \"\\uFEE6\", \"\\u0646\", \"\\uFEE7\", \"\\u0646\", \"\\uFEE8\", \"\\u0646\", \"\\uFEE9\", \"\\u0647\", \"\\uFEEA\", \"\\u0647\", \"\\uFEEB\", \"\\u0647\", \"\\uFEEC\", \"\\u0647\", \"\\uFEED\", \"\\u0648\", \"\\uFEEE\", \"\\u0648\", \"\\uFEEF\", \"\\u0649\", \"\\uFEF0\", \"\\u0649\", \"\\uFEF1\", \"\\u064A\", \"\\uFEF2\", \"\\u064A\", \"\\uFEF3\", \"\\u064A\", \"\\uFEF4\", \"\\u064A\", \"\\uFEF5\", \"\\u0644\\u0622\", \"\\uFEF6\", \"\\u0644\\u0622\", \"\\uFEF7\", \"\\u0644\\u0623\", \"\\uFEF8\", \"\\u0644\\u0623\", \"\\uFEF9\", \"\\u0644\\u0625\", \"\\uFEFA\", \"\\u0644\\u0625\", \"\\uFEFB\", \"\\u0644\\u0627\", \"\\uFEFC\", \"\\u0644\\u0627\"];\n        });\n        function _reverseIfRtl(chars) {\n          var charsLength = chars.length;\n          if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n            return chars;\n          }\n          var buf = [];\n          for (var ii = charsLength - 1; ii >= 0; ii--) {\n            buf.push(chars[ii]);\n          }\n          return buf.join(\"\");\n        }\n        var SpecialCharRegExp = new RegExp(\"^(\\\\s)|(\\\\p{Mn})|(\\\\p{Cf})$\", \"u\");\n        var CategoryCache = new Map();\n        function _getCharUnicodeCategory(char) {\n          var cachedCategory = CategoryCache.get(char);\n          if (cachedCategory) {\n            return cachedCategory;\n          }\n          var groups = char.match(SpecialCharRegExp);\n          var category = {\n            isWhitespace: !!(groups && groups[1]),\n            isZeroWidthDiacritic: !!(groups && groups[2]),\n            isInvisibleFormatMark: !!(groups && groups[3])\n          };\n          CategoryCache.set(char, category);\n          return category;\n        }\n        function _clearUnicodeCaches() {\n          CategoryCache.clear();\n        }\n\n        /***/\n      }, /* 41 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getSerifFonts = exports.getNonStdFontMap = exports.getGlyphMapForStandardFonts = exports.getFontNameToFileMap = void 0;\n        exports.getStandardFontName = getStandardFontName;\n        exports.getSymbolsFonts = exports.getSupplementalGlyphMapForCalibri = exports.getSupplementalGlyphMapForArialBlack = exports.getStdFontMap = void 0;\n        var _core_utils = __w_pdfjs_require__(6);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var getStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[\"Times-Roman\"] = \"Times-Roman\";\n          t.Helvetica = \"Helvetica\";\n          t.Courier = \"Courier\";\n          t.Symbol = \"Symbol\";\n          t[\"Times-Bold\"] = \"Times-Bold\";\n          t[\"Helvetica-Bold\"] = \"Helvetica-Bold\";\n          t[\"Courier-Bold\"] = \"Courier-Bold\";\n          t.ZapfDingbats = \"ZapfDingbats\";\n          t[\"Times-Italic\"] = \"Times-Italic\";\n          t[\"Helvetica-Oblique\"] = \"Helvetica-Oblique\";\n          t[\"Courier-Oblique\"] = \"Courier-Oblique\";\n          t[\"Times-BoldItalic\"] = \"Times-BoldItalic\";\n          t[\"Helvetica-BoldOblique\"] = \"Helvetica-BoldOblique\";\n          t[\"Courier-BoldOblique\"] = \"Courier-BoldOblique\";\n          t.ArialNarrow = \"Helvetica\";\n          t[\"ArialNarrow-Bold\"] = \"Helvetica-Bold\";\n          t[\"ArialNarrow-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"ArialNarrow-Italic\"] = \"Helvetica-Oblique\";\n          t.ArialBlack = \"Helvetica\";\n          t[\"ArialBlack-Bold\"] = \"Helvetica-Bold\";\n          t[\"ArialBlack-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"ArialBlack-Italic\"] = \"Helvetica-Oblique\";\n          t[\"Arial-Black\"] = \"Helvetica\";\n          t[\"Arial-Black-Bold\"] = \"Helvetica-Bold\";\n          t[\"Arial-Black-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"Arial-Black-Italic\"] = \"Helvetica-Oblique\";\n          t.Arial = \"Helvetica\";\n          t[\"Arial-Bold\"] = \"Helvetica-Bold\";\n          t[\"Arial-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"Arial-Italic\"] = \"Helvetica-Oblique\";\n          t.ArialMT = \"Helvetica\";\n          t[\"Arial-BoldItalicMT\"] = \"Helvetica-BoldOblique\";\n          t[\"Arial-BoldMT\"] = \"Helvetica-Bold\";\n          t[\"Arial-ItalicMT\"] = \"Helvetica-Oblique\";\n          t.ArialUnicodeMS = \"Helvetica\";\n          t[\"ArialUnicodeMS-Bold\"] = \"Helvetica-Bold\";\n          t[\"ArialUnicodeMS-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"ArialUnicodeMS-Italic\"] = \"Helvetica-Oblique\";\n          t[\"Courier-BoldItalic\"] = \"Courier-BoldOblique\";\n          t[\"Courier-Italic\"] = \"Courier-Oblique\";\n          t.CourierNew = \"Courier\";\n          t[\"CourierNew-Bold\"] = \"Courier-Bold\";\n          t[\"CourierNew-BoldItalic\"] = \"Courier-BoldOblique\";\n          t[\"CourierNew-Italic\"] = \"Courier-Oblique\";\n          t[\"CourierNewPS-BoldItalicMT\"] = \"Courier-BoldOblique\";\n          t[\"CourierNewPS-BoldMT\"] = \"Courier-Bold\";\n          t[\"CourierNewPS-ItalicMT\"] = \"Courier-Oblique\";\n          t.CourierNewPSMT = \"Courier\";\n          t[\"Helvetica-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"Helvetica-Italic\"] = \"Helvetica-Oblique\";\n          t[\"Symbol-Bold\"] = \"Symbol\";\n          t[\"Symbol-BoldItalic\"] = \"Symbol\";\n          t[\"Symbol-Italic\"] = \"Symbol\";\n          t.TimesNewRoman = \"Times-Roman\";\n          t[\"TimesNewRoman-Bold\"] = \"Times-Bold\";\n          t[\"TimesNewRoman-BoldItalic\"] = \"Times-BoldItalic\";\n          t[\"TimesNewRoman-Italic\"] = \"Times-Italic\";\n          t.TimesNewRomanPS = \"Times-Roman\";\n          t[\"TimesNewRomanPS-Bold\"] = \"Times-Bold\";\n          t[\"TimesNewRomanPS-BoldItalic\"] = \"Times-BoldItalic\";\n          t[\"TimesNewRomanPS-BoldItalicMT\"] = \"Times-BoldItalic\";\n          t[\"TimesNewRomanPS-BoldMT\"] = \"Times-Bold\";\n          t[\"TimesNewRomanPS-Italic\"] = \"Times-Italic\";\n          t[\"TimesNewRomanPS-ItalicMT\"] = \"Times-Italic\";\n          t.TimesNewRomanPSMT = \"Times-Roman\";\n          t[\"TimesNewRomanPSMT-Bold\"] = \"Times-Bold\";\n          t[\"TimesNewRomanPSMT-BoldItalic\"] = \"Times-BoldItalic\";\n          t[\"TimesNewRomanPSMT-Italic\"] = \"Times-Italic\";\n        });\n        exports.getStdFontMap = getStdFontMap;\n        var getFontNameToFileMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t.Courier = \"FoxitFixed.pfb\";\n          t[\"Courier-Bold\"] = \"FoxitFixedBold.pfb\";\n          t[\"Courier-BoldOblique\"] = \"FoxitFixedBoldItalic.pfb\";\n          t[\"Courier-Oblique\"] = \"FoxitFixedItalic.pfb\";\n          t.Helvetica = \"FoxitSans.pfb\";\n          t[\"Helvetica-Bold\"] = \"FoxitSansBold.pfb\";\n          t[\"Helvetica-BoldOblique\"] = \"FoxitSansBoldItalic.pfb\";\n          t[\"Helvetica-Oblique\"] = \"FoxitSansItalic.pfb\";\n          t[\"Times-Roman\"] = \"FoxitSerif.pfb\";\n          t[\"Times-Bold\"] = \"FoxitSerifBold.pfb\";\n          t[\"Times-BoldItalic\"] = \"FoxitSerifBoldItalic.pfb\";\n          t[\"Times-Italic\"] = \"FoxitSerifItalic.pfb\";\n          t.Symbol = \"FoxitSymbol.pfb\";\n          t.ZapfDingbats = \"FoxitDingbats.pfb\";\n          t[\"LiberationSans-Regular\"] = \"LiberationSans-Regular.ttf\";\n          t[\"LiberationSans-Bold\"] = \"LiberationSans-Bold.ttf\";\n          t[\"LiberationSans-Italic\"] = \"LiberationSans-Italic.ttf\";\n          t[\"LiberationSans-BoldItalic\"] = \"LiberationSans-BoldItalic.ttf\";\n        });\n        exports.getFontNameToFileMap = getFontNameToFileMap;\n        var getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t.Calibri = \"Helvetica\";\n          t[\"Calibri-Bold\"] = \"Helvetica-Bold\";\n          t[\"Calibri-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"Calibri-Italic\"] = \"Helvetica-Oblique\";\n          t.CenturyGothic = \"Helvetica\";\n          t[\"CenturyGothic-Bold\"] = \"Helvetica-Bold\";\n          t[\"CenturyGothic-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"CenturyGothic-Italic\"] = \"Helvetica-Oblique\";\n          t.ComicSansMS = \"Comic Sans MS\";\n          t[\"ComicSansMS-Bold\"] = \"Comic Sans MS-Bold\";\n          t[\"ComicSansMS-BoldItalic\"] = \"Comic Sans MS-BoldItalic\";\n          t[\"ComicSansMS-Italic\"] = \"Comic Sans MS-Italic\";\n          t[\"ItcSymbol-Bold\"] = \"Helvetica-Bold\";\n          t[\"ItcSymbol-BoldItalic\"] = \"Helvetica-BoldOblique\";\n          t[\"ItcSymbol-Book\"] = \"Helvetica\";\n          t[\"ItcSymbol-BookItalic\"] = \"Helvetica-Oblique\";\n          t[\"ItcSymbol-Medium\"] = \"Helvetica\";\n          t[\"ItcSymbol-MediumItalic\"] = \"Helvetica-Oblique\";\n          t.LucidaConsole = \"Courier\";\n          t[\"LucidaConsole-Bold\"] = \"Courier-Bold\";\n          t[\"LucidaConsole-BoldItalic\"] = \"Courier-BoldOblique\";\n          t[\"LucidaConsole-Italic\"] = \"Courier-Oblique\";\n          t[\"LucidaSans-Demi\"] = \"Helvetica-Bold\";\n          t[\"MS-Gothic\"] = \"MS Gothic\";\n          t[\"MS-Gothic-Bold\"] = \"MS Gothic-Bold\";\n          t[\"MS-Gothic-BoldItalic\"] = \"MS Gothic-BoldItalic\";\n          t[\"MS-Gothic-Italic\"] = \"MS Gothic-Italic\";\n          t[\"MS-Mincho\"] = \"MS Mincho\";\n          t[\"MS-Mincho-Bold\"] = \"MS Mincho-Bold\";\n          t[\"MS-Mincho-BoldItalic\"] = \"MS Mincho-BoldItalic\";\n          t[\"MS-Mincho-Italic\"] = \"MS Mincho-Italic\";\n          t[\"MS-PGothic\"] = \"MS PGothic\";\n          t[\"MS-PGothic-Bold\"] = \"MS PGothic-Bold\";\n          t[\"MS-PGothic-BoldItalic\"] = \"MS PGothic-BoldItalic\";\n          t[\"MS-PGothic-Italic\"] = \"MS PGothic-Italic\";\n          t[\"MS-PMincho\"] = \"MS PMincho\";\n          t[\"MS-PMincho-Bold\"] = \"MS PMincho-Bold\";\n          t[\"MS-PMincho-BoldItalic\"] = \"MS PMincho-BoldItalic\";\n          t[\"MS-PMincho-Italic\"] = \"MS PMincho-Italic\";\n          t.NuptialScript = \"Times-Italic\";\n          t.SegoeUISymbol = \"Helvetica\";\n          t.Wingdings = \"ZapfDingbats\";\n          t[\"Wingdings-Regular\"] = \"ZapfDingbats\";\n        });\n        exports.getNonStdFontMap = getNonStdFontMap;\n        var getSerifFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[\"Adobe Jenson\"] = true;\n          t[\"Adobe Text\"] = true;\n          t.Albertus = true;\n          t.Aldus = true;\n          t.Alexandria = true;\n          t.Algerian = true;\n          t[\"American Typewriter\"] = true;\n          t.Antiqua = true;\n          t.Apex = true;\n          t.Arno = true;\n          t.Aster = true;\n          t.Aurora = true;\n          t.Baskerville = true;\n          t.Bell = true;\n          t.Bembo = true;\n          t[\"Bembo Schoolbook\"] = true;\n          t.Benguiat = true;\n          t[\"Berkeley Old Style\"] = true;\n          t[\"Bernhard Modern\"] = true;\n          t[\"Berthold City\"] = true;\n          t.Bodoni = true;\n          t[\"Bauer Bodoni\"] = true;\n          t[\"Book Antiqua\"] = true;\n          t.Bookman = true;\n          t[\"Bordeaux Roman\"] = true;\n          t[\"Californian FB\"] = true;\n          t.Calisto = true;\n          t.Calvert = true;\n          t.Capitals = true;\n          t.Cambria = true;\n          t.Cartier = true;\n          t.Caslon = true;\n          t.Catull = true;\n          t.Centaur = true;\n          t[\"Century Old Style\"] = true;\n          t[\"Century Schoolbook\"] = true;\n          t.Chaparral = true;\n          t[\"Charis SIL\"] = true;\n          t.Cheltenham = true;\n          t[\"Cholla Slab\"] = true;\n          t.Clarendon = true;\n          t.Clearface = true;\n          t.Cochin = true;\n          t.Colonna = true;\n          t[\"Computer Modern\"] = true;\n          t[\"Concrete Roman\"] = true;\n          t.Constantia = true;\n          t[\"Cooper Black\"] = true;\n          t.Corona = true;\n          t.Ecotype = true;\n          t.Egyptienne = true;\n          t.Elephant = true;\n          t.Excelsior = true;\n          t.Fairfield = true;\n          t[\"FF Scala\"] = true;\n          t.Folkard = true;\n          t.Footlight = true;\n          t.FreeSerif = true;\n          t[\"Friz Quadrata\"] = true;\n          t.Garamond = true;\n          t.Gentium = true;\n          t.Georgia = true;\n          t.Gloucester = true;\n          t[\"Goudy Old Style\"] = true;\n          t[\"Goudy Schoolbook\"] = true;\n          t[\"Goudy Pro Font\"] = true;\n          t.Granjon = true;\n          t[\"Guardian Egyptian\"] = true;\n          t.Heather = true;\n          t.Hercules = true;\n          t[\"High Tower Text\"] = true;\n          t.Hiroshige = true;\n          t[\"Hoefler Text\"] = true;\n          t[\"Humana Serif\"] = true;\n          t.Imprint = true;\n          t[\"Ionic No. 5\"] = true;\n          t.Janson = true;\n          t.Joanna = true;\n          t.Korinna = true;\n          t.Lexicon = true;\n          t.LiberationSerif = true;\n          t[\"Liberation Serif\"] = true;\n          t[\"Linux Libertine\"] = true;\n          t.Literaturnaya = true;\n          t.Lucida = true;\n          t[\"Lucida Bright\"] = true;\n          t.Melior = true;\n          t.Memphis = true;\n          t.Miller = true;\n          t.Minion = true;\n          t.Modern = true;\n          t[\"Mona Lisa\"] = true;\n          t[\"Mrs Eaves\"] = true;\n          t[\"MS Serif\"] = true;\n          t[\"Museo Slab\"] = true;\n          t[\"New York\"] = true;\n          t[\"Nimbus Roman\"] = true;\n          t[\"NPS Rawlinson Roadway\"] = true;\n          t.NuptialScript = true;\n          t.Palatino = true;\n          t.Perpetua = true;\n          t.Plantin = true;\n          t[\"Plantin Schoolbook\"] = true;\n          t.Playbill = true;\n          t[\"Poor Richard\"] = true;\n          t[\"Rawlinson Roadway\"] = true;\n          t.Renault = true;\n          t.Requiem = true;\n          t.Rockwell = true;\n          t.Roman = true;\n          t[\"Rotis Serif\"] = true;\n          t.Sabon = true;\n          t.Scala = true;\n          t.Seagull = true;\n          t.Sistina = true;\n          t.Souvenir = true;\n          t.STIX = true;\n          t[\"Stone Informal\"] = true;\n          t[\"Stone Serif\"] = true;\n          t.Sylfaen = true;\n          t.Times = true;\n          t.Trajan = true;\n          t[\"Trinité\"] = true;\n          t[\"Trump Mediaeval\"] = true;\n          t.Utopia = true;\n          t[\"Vale Type\"] = true;\n          t[\"Bitstream Vera\"] = true;\n          t[\"Vera Serif\"] = true;\n          t.Versailles = true;\n          t.Wanted = true;\n          t.Weiss = true;\n          t[\"Wide Latin\"] = true;\n          t.Windsor = true;\n          t.XITS = true;\n        });\n        exports.getSerifFonts = getSerifFonts;\n        var getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t.Dingbats = true;\n          t.Symbol = true;\n          t.ZapfDingbats = true;\n        });\n        exports.getSymbolsFonts = getSymbolsFonts;\n        var getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[2] = 10;\n          t[3] = 32;\n          t[4] = 33;\n          t[5] = 34;\n          t[6] = 35;\n          t[7] = 36;\n          t[8] = 37;\n          t[9] = 38;\n          t[10] = 39;\n          t[11] = 40;\n          t[12] = 41;\n          t[13] = 42;\n          t[14] = 43;\n          t[15] = 44;\n          t[16] = 45;\n          t[17] = 46;\n          t[18] = 47;\n          t[19] = 48;\n          t[20] = 49;\n          t[21] = 50;\n          t[22] = 51;\n          t[23] = 52;\n          t[24] = 53;\n          t[25] = 54;\n          t[26] = 55;\n          t[27] = 56;\n          t[28] = 57;\n          t[29] = 58;\n          t[30] = 894;\n          t[31] = 60;\n          t[32] = 61;\n          t[33] = 62;\n          t[34] = 63;\n          t[35] = 64;\n          t[36] = 65;\n          t[37] = 66;\n          t[38] = 67;\n          t[39] = 68;\n          t[40] = 69;\n          t[41] = 70;\n          t[42] = 71;\n          t[43] = 72;\n          t[44] = 73;\n          t[45] = 74;\n          t[46] = 75;\n          t[47] = 76;\n          t[48] = 77;\n          t[49] = 78;\n          t[50] = 79;\n          t[51] = 80;\n          t[52] = 81;\n          t[53] = 82;\n          t[54] = 83;\n          t[55] = 84;\n          t[56] = 85;\n          t[57] = 86;\n          t[58] = 87;\n          t[59] = 88;\n          t[60] = 89;\n          t[61] = 90;\n          t[62] = 91;\n          t[63] = 92;\n          t[64] = 93;\n          t[65] = 94;\n          t[66] = 95;\n          t[67] = 96;\n          t[68] = 97;\n          t[69] = 98;\n          t[70] = 99;\n          t[71] = 100;\n          t[72] = 101;\n          t[73] = 102;\n          t[74] = 103;\n          t[75] = 104;\n          t[76] = 105;\n          t[77] = 106;\n          t[78] = 107;\n          t[79] = 108;\n          t[80] = 109;\n          t[81] = 110;\n          t[82] = 111;\n          t[83] = 112;\n          t[84] = 113;\n          t[85] = 114;\n          t[86] = 115;\n          t[87] = 116;\n          t[88] = 117;\n          t[89] = 118;\n          t[90] = 119;\n          t[91] = 120;\n          t[92] = 121;\n          t[93] = 122;\n          t[94] = 123;\n          t[95] = 124;\n          t[96] = 125;\n          t[97] = 126;\n          t[98] = 196;\n          t[99] = 197;\n          t[100] = 199;\n          t[101] = 201;\n          t[102] = 209;\n          t[103] = 214;\n          t[104] = 220;\n          t[105] = 225;\n          t[106] = 224;\n          t[107] = 226;\n          t[108] = 228;\n          t[109] = 227;\n          t[110] = 229;\n          t[111] = 231;\n          t[112] = 233;\n          t[113] = 232;\n          t[114] = 234;\n          t[115] = 235;\n          t[116] = 237;\n          t[117] = 236;\n          t[118] = 238;\n          t[119] = 239;\n          t[120] = 241;\n          t[121] = 243;\n          t[122] = 242;\n          t[123] = 244;\n          t[124] = 246;\n          t[125] = 245;\n          t[126] = 250;\n          t[127] = 249;\n          t[128] = 251;\n          t[129] = 252;\n          t[130] = 8224;\n          t[131] = 176;\n          t[132] = 162;\n          t[133] = 163;\n          t[134] = 167;\n          t[135] = 8226;\n          t[136] = 182;\n          t[137] = 223;\n          t[138] = 174;\n          t[139] = 169;\n          t[140] = 8482;\n          t[141] = 180;\n          t[142] = 168;\n          t[143] = 8800;\n          t[144] = 198;\n          t[145] = 216;\n          t[146] = 8734;\n          t[147] = 177;\n          t[148] = 8804;\n          t[149] = 8805;\n          t[150] = 165;\n          t[151] = 181;\n          t[152] = 8706;\n          t[153] = 8721;\n          t[154] = 8719;\n          t[156] = 8747;\n          t[157] = 170;\n          t[158] = 186;\n          t[159] = 8486;\n          t[160] = 230;\n          t[161] = 248;\n          t[162] = 191;\n          t[163] = 161;\n          t[164] = 172;\n          t[165] = 8730;\n          t[166] = 402;\n          t[167] = 8776;\n          t[168] = 8710;\n          t[169] = 171;\n          t[170] = 187;\n          t[171] = 8230;\n          t[200] = 193;\n          t[203] = 205;\n          t[210] = 218;\n          t[223] = 711;\n          t[224] = 321;\n          t[225] = 322;\n          t[226] = 352;\n          t[227] = 353;\n          t[228] = 381;\n          t[229] = 382;\n          t[233] = 221;\n          t[234] = 253;\n          t[252] = 263;\n          t[253] = 268;\n          t[254] = 269;\n          t[258] = 258;\n          t[260] = 260;\n          t[261] = 261;\n          t[265] = 280;\n          t[266] = 281;\n          t[267] = 282;\n          t[268] = 283;\n          t[269] = 313;\n          t[275] = 323;\n          t[276] = 324;\n          t[278] = 328;\n          t[283] = 344;\n          t[284] = 345;\n          t[285] = 346;\n          t[286] = 347;\n          t[292] = 367;\n          t[295] = 377;\n          t[296] = 378;\n          t[298] = 380;\n          t[305] = 963;\n          t[306] = 964;\n          t[307] = 966;\n          t[308] = 8215;\n          t[309] = 8252;\n          t[310] = 8319;\n          t[311] = 8359;\n          t[312] = 8592;\n          t[313] = 8593;\n          t[337] = 9552;\n          t[493] = 1039;\n          t[494] = 1040;\n          t[672] = 1488;\n          t[673] = 1489;\n          t[674] = 1490;\n          t[675] = 1491;\n          t[676] = 1492;\n          t[677] = 1493;\n          t[678] = 1494;\n          t[679] = 1495;\n          t[680] = 1496;\n          t[681] = 1497;\n          t[682] = 1498;\n          t[683] = 1499;\n          t[684] = 1500;\n          t[685] = 1501;\n          t[686] = 1502;\n          t[687] = 1503;\n          t[688] = 1504;\n          t[689] = 1505;\n          t[690] = 1506;\n          t[691] = 1507;\n          t[692] = 1508;\n          t[693] = 1509;\n          t[694] = 1510;\n          t[695] = 1511;\n          t[696] = 1512;\n          t[697] = 1513;\n          t[698] = 1514;\n          t[705] = 1524;\n          t[706] = 8362;\n          t[710] = 64288;\n          t[711] = 64298;\n          t[759] = 1617;\n          t[761] = 1776;\n          t[763] = 1778;\n          t[775] = 1652;\n          t[777] = 1764;\n          t[778] = 1780;\n          t[779] = 1781;\n          t[780] = 1782;\n          t[782] = 771;\n          t[783] = 64726;\n          t[786] = 8363;\n          t[788] = 8532;\n          t[790] = 768;\n          t[791] = 769;\n          t[792] = 768;\n          t[795] = 803;\n          t[797] = 64336;\n          t[798] = 64337;\n          t[799] = 64342;\n          t[800] = 64343;\n          t[801] = 64344;\n          t[802] = 64345;\n          t[803] = 64362;\n          t[804] = 64363;\n          t[805] = 64364;\n          t[2424] = 7821;\n          t[2425] = 7822;\n          t[2426] = 7823;\n          t[2427] = 7824;\n          t[2428] = 7825;\n          t[2429] = 7826;\n          t[2430] = 7827;\n          t[2433] = 7682;\n          t[2678] = 8045;\n          t[2679] = 8046;\n          t[2830] = 1552;\n          t[2838] = 686;\n          t[2840] = 751;\n          t[2842] = 753;\n          t[2843] = 754;\n          t[2844] = 755;\n          t[2846] = 757;\n          t[2856] = 767;\n          t[2857] = 848;\n          t[2858] = 849;\n          t[2862] = 853;\n          t[2863] = 854;\n          t[2864] = 855;\n          t[2865] = 861;\n          t[2866] = 862;\n          t[2906] = 7460;\n          t[2908] = 7462;\n          t[2909] = 7463;\n          t[2910] = 7464;\n          t[2912] = 7466;\n          t[2913] = 7467;\n          t[2914] = 7468;\n          t[2916] = 7470;\n          t[2917] = 7471;\n          t[2918] = 7472;\n          t[2920] = 7474;\n          t[2921] = 7475;\n          t[2922] = 7476;\n          t[2924] = 7478;\n          t[2925] = 7479;\n          t[2926] = 7480;\n          t[2928] = 7482;\n          t[2929] = 7483;\n          t[2930] = 7484;\n          t[2932] = 7486;\n          t[2933] = 7487;\n          t[2934] = 7488;\n          t[2936] = 7490;\n          t[2937] = 7491;\n          t[2938] = 7492;\n          t[2940] = 7494;\n          t[2941] = 7495;\n          t[2942] = 7496;\n          t[2944] = 7498;\n          t[2946] = 7500;\n          t[2948] = 7502;\n          t[2950] = 7504;\n          t[2951] = 7505;\n          t[2952] = 7506;\n          t[2954] = 7508;\n          t[2955] = 7509;\n          t[2956] = 7510;\n          t[2958] = 7512;\n          t[2959] = 7513;\n          t[2960] = 7514;\n          t[2962] = 7516;\n          t[2963] = 7517;\n          t[2964] = 7518;\n          t[2966] = 7520;\n          t[2967] = 7521;\n          t[2968] = 7522;\n          t[2970] = 7524;\n          t[2971] = 7525;\n          t[2972] = 7526;\n          t[2974] = 7528;\n          t[2975] = 7529;\n          t[2976] = 7530;\n          t[2978] = 1537;\n          t[2979] = 1538;\n          t[2980] = 1539;\n          t[2982] = 1549;\n          t[2983] = 1551;\n          t[2984] = 1552;\n          t[2986] = 1554;\n          t[2987] = 1555;\n          t[2988] = 1556;\n          t[2990] = 1623;\n          t[2991] = 1624;\n          t[2995] = 1775;\n          t[2999] = 1791;\n          t[3002] = 64290;\n          t[3003] = 64291;\n          t[3004] = 64292;\n          t[3006] = 64294;\n          t[3007] = 64295;\n          t[3008] = 64296;\n          t[3011] = 1900;\n          t[3014] = 8223;\n          t[3015] = 8244;\n          t[3017] = 7532;\n          t[3018] = 7533;\n          t[3019] = 7534;\n          t[3075] = 7590;\n          t[3076] = 7591;\n          t[3079] = 7594;\n          t[3080] = 7595;\n          t[3083] = 7598;\n          t[3084] = 7599;\n          t[3087] = 7602;\n          t[3088] = 7603;\n          t[3091] = 7606;\n          t[3092] = 7607;\n          t[3095] = 7610;\n          t[3096] = 7611;\n          t[3099] = 7614;\n          t[3100] = 7615;\n          t[3103] = 7618;\n          t[3104] = 7619;\n          t[3107] = 8337;\n          t[3108] = 8338;\n          t[3116] = 1884;\n          t[3119] = 1885;\n          t[3120] = 1885;\n          t[3123] = 1886;\n          t[3124] = 1886;\n          t[3127] = 1887;\n          t[3128] = 1887;\n          t[3131] = 1888;\n          t[3132] = 1888;\n          t[3135] = 1889;\n          t[3136] = 1889;\n          t[3139] = 1890;\n          t[3140] = 1890;\n          t[3143] = 1891;\n          t[3144] = 1891;\n          t[3147] = 1892;\n          t[3148] = 1892;\n          t[3153] = 580;\n          t[3154] = 581;\n          t[3157] = 584;\n          t[3158] = 585;\n          t[3161] = 588;\n          t[3162] = 589;\n          t[3165] = 891;\n          t[3166] = 892;\n          t[3169] = 1274;\n          t[3170] = 1275;\n          t[3173] = 1278;\n          t[3174] = 1279;\n          t[3181] = 7622;\n          t[3182] = 7623;\n          t[3282] = 11799;\n          t[3316] = 578;\n          t[3379] = 42785;\n          t[3393] = 1159;\n          t[3416] = 8377;\n        });\n        exports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;\n        var getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[227] = 322;\n          t[264] = 261;\n          t[291] = 346;\n        });\n        exports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;\n        var getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[1] = 32;\n          t[4] = 65;\n          t[6] = 193;\n          t[17] = 66;\n          t[18] = 67;\n          t[21] = 268;\n          t[24] = 68;\n          t[28] = 69;\n          t[30] = 201;\n          t[32] = 282;\n          t[38] = 70;\n          t[39] = 71;\n          t[44] = 72;\n          t[47] = 73;\n          t[49] = 205;\n          t[58] = 74;\n          t[60] = 75;\n          t[62] = 76;\n          t[68] = 77;\n          t[69] = 78;\n          t[75] = 79;\n          t[87] = 80;\n          t[89] = 81;\n          t[90] = 82;\n          t[92] = 344;\n          t[94] = 83;\n          t[97] = 352;\n          t[100] = 84;\n          t[104] = 85;\n          t[115] = 86;\n          t[116] = 87;\n          t[121] = 88;\n          t[122] = 89;\n          t[124] = 221;\n          t[127] = 90;\n          t[129] = 381;\n          t[258] = 97;\n          t[260] = 225;\n          t[268] = 261;\n          t[271] = 98;\n          t[272] = 99;\n          t[273] = 263;\n          t[275] = 269;\n          t[282] = 100;\n          t[286] = 101;\n          t[288] = 233;\n          t[290] = 283;\n          t[295] = 281;\n          t[296] = 102;\n          t[336] = 103;\n          t[346] = 104;\n          t[349] = 105;\n          t[351] = 237;\n          t[361] = 106;\n          t[364] = 107;\n          t[367] = 108;\n          t[371] = 322;\n          t[373] = 109;\n          t[374] = 110;\n          t[381] = 111;\n          t[383] = 243;\n          t[393] = 112;\n          t[395] = 113;\n          t[396] = 114;\n          t[398] = 345;\n          t[400] = 115;\n          t[401] = 347;\n          t[403] = 353;\n          t[410] = 116;\n          t[437] = 117;\n          t[448] = 118;\n          t[449] = 119;\n          t[454] = 120;\n          t[455] = 121;\n          t[457] = 253;\n          t[460] = 122;\n          t[462] = 382;\n          t[463] = 380;\n          t[853] = 44;\n          t[855] = 58;\n          t[856] = 46;\n          t[876] = 47;\n          t[878] = 45;\n          t[882] = 45;\n          t[894] = 40;\n          t[895] = 41;\n          t[896] = 91;\n          t[897] = 93;\n          t[923] = 64;\n          t[1004] = 48;\n          t[1005] = 49;\n          t[1006] = 50;\n          t[1007] = 51;\n          t[1008] = 52;\n          t[1009] = 53;\n          t[1010] = 54;\n          t[1011] = 55;\n          t[1012] = 56;\n          t[1013] = 57;\n          t[1081] = 37;\n          t[1085] = 43;\n          t[1086] = 45;\n        });\n        exports.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;\n        function getStandardFontName(name) {\n          var fontName = (0, _fonts_utils.normalizeFontName)(name);\n          var stdFontMap = getStdFontMap();\n          return stdFontMap[fontName];\n        }\n\n        /***/\n      }, /* 42 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ToUnicodeMap = exports.IdentityToUnicodeMap = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var ToUnicodeMap = /*#__PURE__*/function () {\n          function ToUnicodeMap() {\n            var cmap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n            _classCallCheck(this, ToUnicodeMap);\n            this._map = cmap;\n          }\n          _createClass(ToUnicodeMap, [{\n            key: \"forEach\",\n            value: function forEach(callback) {\n              for (var charCode in this._map) {\n                callback(charCode, this._map[charCode].charCodeAt(0));\n              }\n            }\n          }, {\n            key: \"has\",\n            value: function has(i) {\n              return this._map[i] !== undefined;\n            }\n          }, {\n            key: \"get\",\n            value: function get(i) {\n              return this._map[i];\n            }\n          }, {\n            key: \"charCodeOf\",\n            value: function charCodeOf(value) {\n              var map = this._map;\n              if (map.length <= 0x10000) {\n                return map.indexOf(value);\n              }\n              for (var charCode in map) {\n                if (map[charCode] === value) {\n                  return charCode | 0;\n                }\n              }\n              return -1;\n            }\n          }, {\n            key: \"amend\",\n            value: function amend(map) {\n              for (var charCode in map) {\n                this._map[charCode] = map[charCode];\n              }\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return this._map.length;\n            }\n          }]);\n          return ToUnicodeMap;\n        }();\n        exports.ToUnicodeMap = ToUnicodeMap;\n        var IdentityToUnicodeMap = /*#__PURE__*/function () {\n          function IdentityToUnicodeMap(firstChar, lastChar) {\n            _classCallCheck(this, IdentityToUnicodeMap);\n            this.firstChar = firstChar;\n            this.lastChar = lastChar;\n          }\n          _createClass(IdentityToUnicodeMap, [{\n            key: \"forEach\",\n            value: function forEach(callback) {\n              for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n                callback(i, i);\n              }\n            }\n          }, {\n            key: \"has\",\n            value: function has(i) {\n              return this.firstChar <= i && i <= this.lastChar;\n            }\n          }, {\n            key: \"get\",\n            value: function get(i) {\n              if (this.firstChar <= i && i <= this.lastChar) {\n                return String.fromCharCode(i);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"charCodeOf\",\n            value: function charCodeOf(v) {\n              return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;\n            }\n          }, {\n            key: \"amend\",\n            value: function amend(map) {\n              (0, _util.unreachable)(\"Should not call amend()\");\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return this.lastChar + 1 - this.firstChar;\n            }\n          }]);\n          return IdentityToUnicodeMap;\n        }();\n        exports.IdentityToUnicodeMap = IdentityToUnicodeMap;\n\n        /***/\n      }, /* 43 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CFFFont = void 0;\n        var _cff_parser = __w_pdfjs_require__(35);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var _util = __w_pdfjs_require__(2);\n        var CFFFont = /*#__PURE__*/function () {\n          function CFFFont(file, properties) {\n            _classCallCheck(this, CFFFont);\n            this.properties = properties;\n            var parser = new _cff_parser.CFFParser(file, properties, _fonts_utils.SEAC_ANALYSIS_ENABLED);\n            this.cff = parser.parse();\n            this.cff.duplicateFirstGlyph();\n            var compiler = new _cff_parser.CFFCompiler(this.cff);\n            this.seacs = this.cff.seacs;\n            try {\n              this.data = compiler.compile();\n            } catch (e) {\n              (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n              this.data = file;\n            }\n            this._createBuiltInEncoding();\n          }\n          _createClass(CFFFont, [{\n            key: \"getCharset\",\n            value: function getCharset() {\n              return this.cff.charset.charset;\n            }\n          }, {\n            key: \"getGlyphMapping\",\n            value: function getGlyphMapping() {\n              var cff = this.cff;\n              var properties = this.properties;\n              var charsets = cff.charset.charset;\n              var charCodeToGlyphId;\n              var glyphId;\n              if (properties.composite) {\n                charCodeToGlyphId = Object.create(null);\n                var charCode;\n                if (cff.isCIDFont) {\n                  for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n                    var cid = charsets[glyphId];\n                    charCode = properties.cMap.charCodeOf(cid);\n                    charCodeToGlyphId[charCode] = glyphId;\n                  }\n                } else {\n                  for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n                    charCode = properties.cMap.charCodeOf(glyphId);\n                    charCodeToGlyphId[charCode] = glyphId;\n                  }\n                }\n                return charCodeToGlyphId;\n              }\n              var encoding = cff.encoding ? cff.encoding.encoding : null;\n              if (properties.isInternalFont) {\n                encoding = properties.defaultEncoding;\n              }\n              charCodeToGlyphId = (0, _fonts_utils.type1FontGlyphMapping)(properties, encoding, charsets);\n              return charCodeToGlyphId;\n            }\n          }, {\n            key: \"hasGlyphId\",\n            value: function hasGlyphId(id) {\n              return this.cff.hasGlyphId(id);\n            }\n          }, {\n            key: \"_createBuiltInEncoding\",\n            value: function _createBuiltInEncoding() {\n              var _this$cff = this.cff,\n                charset = _this$cff.charset,\n                encoding = _this$cff.encoding;\n              if (!charset || !encoding) {\n                return;\n              }\n              var charsets = charset.charset,\n                encodings = encoding.encoding;\n              var map = [];\n              for (var charCode in encodings) {\n                var glyphId = encodings[charCode];\n                if (glyphId >= 0) {\n                  var glyphName = charsets[glyphId];\n                  if (glyphName) {\n                    map[charCode] = glyphName;\n                  }\n                }\n              }\n              if (map.length > 0) {\n                this.properties.builtInEncoding = map;\n              }\n            }\n          }, {\n            key: \"numGlyphs\",\n            get: function get() {\n              return this.cff.charStrings.count;\n            }\n          }]);\n          return CFFFont;\n        }();\n        exports.CFFFont = CFFFont;\n\n        /***/\n      }, /* 44 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontRendererFactory = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _cff_parser = __w_pdfjs_require__(35);\n        var _glyphlist = __w_pdfjs_require__(39);\n        var _encodings = __w_pdfjs_require__(37);\n        var _stream = __w_pdfjs_require__(10);\n        function getUint32(data, offset) {\n          return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n        }\n        function getUint16(data, offset) {\n          return data[offset] << 8 | data[offset + 1];\n        }\n        function getInt16(data, offset) {\n          return (data[offset] << 24 | data[offset + 1] << 16) >> 16;\n        }\n        function getInt8(data, offset) {\n          return data[offset] << 24 >> 24;\n        }\n        function getFloat214(data, offset) {\n          return getInt16(data, offset) / 16384;\n        }\n        function getSubroutineBias(subrs) {\n          var numSubrs = subrs.length;\n          var bias = 32768;\n          if (numSubrs < 1240) {\n            bias = 107;\n          } else if (numSubrs < 33900) {\n            bias = 1131;\n          }\n          return bias;\n        }\n        function parseCmap(data, start, end) {\n          var offset = getUint16(data, start + 2) === 1 ? getUint32(data, start + 8) : getUint32(data, start + 16);\n          var format = getUint16(data, start + offset);\n          var ranges, p, i;\n          if (format === 4) {\n            getUint16(data, start + offset + 2);\n            var segCount = getUint16(data, start + offset + 6) >> 1;\n            p = start + offset + 14;\n            ranges = [];\n            for (i = 0; i < segCount; i++, p += 2) {\n              ranges[i] = {\n                end: getUint16(data, p)\n              };\n            }\n            p += 2;\n            for (i = 0; i < segCount; i++, p += 2) {\n              ranges[i].start = getUint16(data, p);\n            }\n            for (i = 0; i < segCount; i++, p += 2) {\n              ranges[i].idDelta = getUint16(data, p);\n            }\n            for (i = 0; i < segCount; i++, p += 2) {\n              var idOffset = getUint16(data, p);\n              if (idOffset === 0) {\n                continue;\n              }\n              ranges[i].ids = [];\n              for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n                ranges[i].ids[j] = getUint16(data, p + idOffset);\n                idOffset += 2;\n              }\n            }\n            return ranges;\n          } else if (format === 12) {\n            var groups = getUint32(data, start + offset + 12);\n            p = start + offset + 16;\n            ranges = [];\n            for (i = 0; i < groups; i++) {\n              start = getUint32(data, p);\n              ranges.push({\n                start: start,\n                end: getUint32(data, p + 4),\n                idDelta: getUint32(data, p + 8) - start\n              });\n              p += 12;\n            }\n            return ranges;\n          }\n          throw new _util.FormatError(\"unsupported cmap: \".concat(format));\n        }\n        function parseCff(data, start, end, seacAnalysisEnabled) {\n          var properties = {};\n          var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);\n          var cff = parser.parse();\n          return {\n            glyphs: cff.charStrings.objects,\n            subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,\n            gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n            isCFFCIDFont: cff.isCIDFont,\n            fdSelect: cff.fdSelect,\n            fdArray: cff.fdArray\n          };\n        }\n        function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n          var itemSize, itemDecode;\n          if (isGlyphLocationsLong) {\n            itemSize = 4;\n            itemDecode = getUint32;\n          } else {\n            itemSize = 2;\n            itemDecode = function itemDecode(data, offset) {\n              return 2 * getUint16(data, offset);\n            };\n          }\n          var glyphs = [];\n          var startOffset = itemDecode(loca, 0);\n          for (var j = itemSize; j < loca.length; j += itemSize) {\n            var endOffset = itemDecode(loca, j);\n            glyphs.push(glyf.subarray(startOffset, endOffset));\n            startOffset = endOffset;\n          }\n          return glyphs;\n        }\n        function lookupCmap(ranges, unicode) {\n          var code = unicode.codePointAt(0);\n          var gid = 0,\n            l = 0,\n            r = ranges.length - 1;\n          while (l < r) {\n            var c = l + r + 1 >> 1;\n            if (code < ranges[c].start) {\n              r = c - 1;\n            } else {\n              l = c;\n            }\n          }\n          if (ranges[l].start <= code && code <= ranges[l].end) {\n            gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;\n          }\n          return {\n            charCode: code,\n            glyphId: gid\n          };\n        }\n        function compileGlyf(code, cmds, font) {\n          function moveTo(x, y) {\n            cmds.push({\n              cmd: \"moveTo\",\n              args: [x, y]\n            });\n          }\n          function lineTo(x, y) {\n            cmds.push({\n              cmd: \"lineTo\",\n              args: [x, y]\n            });\n          }\n          function quadraticCurveTo(xa, ya, x, y) {\n            cmds.push({\n              cmd: \"quadraticCurveTo\",\n              args: [xa, ya, x, y]\n            });\n          }\n          var i = 0;\n          var numberOfContours = getInt16(code, i);\n          var flags;\n          var x = 0,\n            y = 0;\n          i += 10;\n          if (numberOfContours < 0) {\n            do {\n              flags = getUint16(code, i);\n              var glyphIndex = getUint16(code, i + 2);\n              i += 4;\n              var arg1 = void 0,\n                arg2 = void 0;\n              if (flags & 0x01) {\n                if (flags & 0x02) {\n                  arg1 = getInt16(code, i);\n                  arg2 = getInt16(code, i + 2);\n                } else {\n                  arg1 = getUint16(code, i);\n                  arg2 = getUint16(code, i + 2);\n                }\n                i += 4;\n              } else {\n                if (flags & 0x02) {\n                  arg1 = getInt8(code, i++);\n                  arg2 = getInt8(code, i++);\n                } else {\n                  arg1 = code[i++];\n                  arg2 = code[i++];\n                }\n              }\n              if (flags & 0x02) {\n                x = arg1;\n                y = arg2;\n              } else {\n                x = 0;\n                y = 0;\n              }\n              var scaleX = 1,\n                scaleY = 1,\n                scale01 = 0,\n                scale10 = 0;\n              if (flags & 0x08) {\n                scaleX = scaleY = getFloat214(code, i);\n                i += 2;\n              } else if (flags & 0x40) {\n                scaleX = getFloat214(code, i);\n                scaleY = getFloat214(code, i + 2);\n                i += 4;\n              } else if (flags & 0x80) {\n                scaleX = getFloat214(code, i);\n                scale01 = getFloat214(code, i + 2);\n                scale10 = getFloat214(code, i + 4);\n                scaleY = getFloat214(code, i + 6);\n                i += 8;\n              }\n              var subglyph = font.glyphs[glyphIndex];\n              if (subglyph) {\n                cmds.push({\n                  cmd: \"save\"\n                }, {\n                  cmd: \"transform\",\n                  args: [scaleX, scale01, scale10, scaleY, x, y]\n                });\n                if (!(flags & 0x02)) {}\n                compileGlyf(subglyph, cmds, font);\n                cmds.push({\n                  cmd: \"restore\"\n                });\n              }\n            } while (flags & 0x20);\n          } else {\n            var endPtsOfContours = [];\n            var j, jj;\n            for (j = 0; j < numberOfContours; j++) {\n              endPtsOfContours.push(getUint16(code, i));\n              i += 2;\n            }\n            var instructionLength = getUint16(code, i);\n            i += 2 + instructionLength;\n            var numberOfPoints = endPtsOfContours.at(-1) + 1;\n            var points = [];\n            while (points.length < numberOfPoints) {\n              flags = code[i++];\n              var repeat = 1;\n              if (flags & 0x08) {\n                repeat += code[i++];\n              }\n              while (repeat-- > 0) {\n                points.push({\n                  flags: flags\n                });\n              }\n            }\n            for (j = 0; j < numberOfPoints; j++) {\n              switch (points[j].flags & 0x12) {\n                case 0x00:\n                  x += getInt16(code, i);\n                  i += 2;\n                  break;\n                case 0x02:\n                  x -= code[i++];\n                  break;\n                case 0x12:\n                  x += code[i++];\n                  break;\n              }\n              points[j].x = x;\n            }\n            for (j = 0; j < numberOfPoints; j++) {\n              switch (points[j].flags & 0x24) {\n                case 0x00:\n                  y += getInt16(code, i);\n                  i += 2;\n                  break;\n                case 0x04:\n                  y -= code[i++];\n                  break;\n                case 0x24:\n                  y += code[i++];\n                  break;\n              }\n              points[j].y = y;\n            }\n            var startPoint = 0;\n            for (i = 0; i < numberOfContours; i++) {\n              var endPoint = endPtsOfContours[i];\n              var contour = points.slice(startPoint, endPoint + 1);\n              if (contour[0].flags & 1) {\n                contour.push(contour[0]);\n              } else if (contour.at(-1).flags & 1) {\n                contour.unshift(contour.at(-1));\n              } else {\n                var p = {\n                  flags: 1,\n                  x: (contour[0].x + contour.at(-1).x) / 2,\n                  y: (contour[0].y + contour.at(-1).y) / 2\n                };\n                contour.unshift(p);\n                contour.push(p);\n              }\n              moveTo(contour[0].x, contour[0].y);\n              for (j = 1, jj = contour.length; j < jj; j++) {\n                if (contour[j].flags & 1) {\n                  lineTo(contour[j].x, contour[j].y);\n                } else if (contour[j + 1].flags & 1) {\n                  quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);\n                  j++;\n                } else {\n                  quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);\n                }\n              }\n              startPoint = endPoint + 1;\n            }\n          }\n        }\n        function compileCharString(charStringCode, cmds, font, glyphId) {\n          function moveTo(x, y) {\n            cmds.push({\n              cmd: \"moveTo\",\n              args: [x, y]\n            });\n          }\n          function lineTo(x, y) {\n            cmds.push({\n              cmd: \"lineTo\",\n              args: [x, y]\n            });\n          }\n          function bezierCurveTo(x1, y1, x2, y2, x, y) {\n            cmds.push({\n              cmd: \"bezierCurveTo\",\n              args: [x1, y1, x2, y2, x, y]\n            });\n          }\n          var stack = [];\n          var x = 0,\n            y = 0;\n          var stems = 0;\n          function parse(code) {\n            var i = 0;\n            while (i < code.length) {\n              var stackClean = false;\n              var v = code[i++];\n              var xa = void 0,\n                xb = void 0,\n                ya = void 0,\n                yb = void 0,\n                y1 = void 0,\n                y2 = void 0,\n                y3 = void 0,\n                n = void 0,\n                subrCode = void 0;\n              switch (v) {\n                case 1:\n                  stems += stack.length >> 1;\n                  stackClean = true;\n                  break;\n                case 3:\n                  stems += stack.length >> 1;\n                  stackClean = true;\n                  break;\n                case 4:\n                  y += stack.pop();\n                  moveTo(x, y);\n                  stackClean = true;\n                  break;\n                case 5:\n                  while (stack.length > 0) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    lineTo(x, y);\n                  }\n                  break;\n                case 6:\n                  while (stack.length > 0) {\n                    x += stack.shift();\n                    lineTo(x, y);\n                    if (stack.length === 0) {\n                      break;\n                    }\n                    y += stack.shift();\n                    lineTo(x, y);\n                  }\n                  break;\n                case 7:\n                  while (stack.length > 0) {\n                    y += stack.shift();\n                    lineTo(x, y);\n                    if (stack.length === 0) {\n                      break;\n                    }\n                    x += stack.shift();\n                    lineTo(x, y);\n                  }\n                  break;\n                case 8:\n                  while (stack.length > 0) {\n                    xa = x + stack.shift();\n                    ya = y + stack.shift();\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb + stack.shift();\n                    y = yb + stack.shift();\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  break;\n                case 10:\n                  n = stack.pop();\n                  subrCode = null;\n                  if (font.isCFFCIDFont) {\n                    var fdIndex = font.fdSelect.getFDIndex(glyphId);\n                    if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                      var fontDict = font.fdArray[fdIndex];\n                      var subrs = void 0;\n                      if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                        subrs = fontDict.privateDict.subrsIndex.objects;\n                      }\n                      if (subrs) {\n                        n += getSubroutineBias(subrs);\n                        subrCode = subrs[n];\n                      }\n                    } else {\n                      (0, _util.warn)(\"Invalid fd index for glyph index.\");\n                    }\n                  } else {\n                    subrCode = font.subrs[n + font.subrsBias];\n                  }\n                  if (subrCode) {\n                    parse(subrCode);\n                  }\n                  break;\n                case 11:\n                  return;\n                case 12:\n                  v = code[i++];\n                  switch (v) {\n                    case 34:\n                      xa = x + stack.shift();\n                      xb = xa + stack.shift();\n                      y1 = y + stack.shift();\n                      x = xb + stack.shift();\n                      bezierCurveTo(xa, y, xb, y1, x, y1);\n                      xa = x + stack.shift();\n                      xb = xa + stack.shift();\n                      x = xb + stack.shift();\n                      bezierCurveTo(xa, y1, xb, y, x, y);\n                      break;\n                    case 35:\n                      xa = x + stack.shift();\n                      ya = y + stack.shift();\n                      xb = xa + stack.shift();\n                      yb = ya + stack.shift();\n                      x = xb + stack.shift();\n                      y = yb + stack.shift();\n                      bezierCurveTo(xa, ya, xb, yb, x, y);\n                      xa = x + stack.shift();\n                      ya = y + stack.shift();\n                      xb = xa + stack.shift();\n                      yb = ya + stack.shift();\n                      x = xb + stack.shift();\n                      y = yb + stack.shift();\n                      bezierCurveTo(xa, ya, xb, yb, x, y);\n                      stack.pop();\n                      break;\n                    case 36:\n                      xa = x + stack.shift();\n                      y1 = y + stack.shift();\n                      xb = xa + stack.shift();\n                      y2 = y1 + stack.shift();\n                      x = xb + stack.shift();\n                      bezierCurveTo(xa, y1, xb, y2, x, y2);\n                      xa = x + stack.shift();\n                      xb = xa + stack.shift();\n                      y3 = y2 + stack.shift();\n                      x = xb + stack.shift();\n                      bezierCurveTo(xa, y2, xb, y3, x, y);\n                      break;\n                    case 37:\n                      var x0 = x,\n                        y0 = y;\n                      xa = x + stack.shift();\n                      ya = y + stack.shift();\n                      xb = xa + stack.shift();\n                      yb = ya + stack.shift();\n                      x = xb + stack.shift();\n                      y = yb + stack.shift();\n                      bezierCurveTo(xa, ya, xb, yb, x, y);\n                      xa = x + stack.shift();\n                      ya = y + stack.shift();\n                      xb = xa + stack.shift();\n                      yb = ya + stack.shift();\n                      x = xb;\n                      y = yb;\n                      if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                        x += stack.shift();\n                      } else {\n                        y += stack.shift();\n                      }\n                      bezierCurveTo(xa, ya, xb, yb, x, y);\n                      break;\n                    default:\n                      throw new _util.FormatError(\"unknown operator: 12 \".concat(v));\n                  }\n                  break;\n                case 14:\n                  if (stack.length >= 4) {\n                    var achar = stack.pop();\n                    var bchar = stack.pop();\n                    y = stack.pop();\n                    x = stack.pop();\n                    cmds.push({\n                      cmd: \"save\"\n                    }, {\n                      cmd: \"translate\",\n                      args: [x, y]\n                    });\n                    var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));\n                    compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n                    cmds.push({\n                      cmd: \"restore\"\n                    });\n                    cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));\n                    compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n                  }\n                  return;\n                case 18:\n                  stems += stack.length >> 1;\n                  stackClean = true;\n                  break;\n                case 19:\n                  stems += stack.length >> 1;\n                  i += stems + 7 >> 3;\n                  stackClean = true;\n                  break;\n                case 20:\n                  stems += stack.length >> 1;\n                  i += stems + 7 >> 3;\n                  stackClean = true;\n                  break;\n                case 21:\n                  y += stack.pop();\n                  x += stack.pop();\n                  moveTo(x, y);\n                  stackClean = true;\n                  break;\n                case 22:\n                  x += stack.pop();\n                  moveTo(x, y);\n                  stackClean = true;\n                  break;\n                case 23:\n                  stems += stack.length >> 1;\n                  stackClean = true;\n                  break;\n                case 24:\n                  while (stack.length > 2) {\n                    xa = x + stack.shift();\n                    ya = y + stack.shift();\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb + stack.shift();\n                    y = yb + stack.shift();\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  x += stack.shift();\n                  y += stack.shift();\n                  lineTo(x, y);\n                  break;\n                case 25:\n                  while (stack.length > 6) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    lineTo(x, y);\n                  }\n                  xa = x + stack.shift();\n                  ya = y + stack.shift();\n                  xb = xa + stack.shift();\n                  yb = ya + stack.shift();\n                  x = xb + stack.shift();\n                  y = yb + stack.shift();\n                  bezierCurveTo(xa, ya, xb, yb, x, y);\n                  break;\n                case 26:\n                  if (stack.length % 2) {\n                    x += stack.shift();\n                  }\n                  while (stack.length > 0) {\n                    xa = x;\n                    ya = y + stack.shift();\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb;\n                    y = yb + stack.shift();\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  break;\n                case 27:\n                  if (stack.length % 2) {\n                    y += stack.shift();\n                  }\n                  while (stack.length > 0) {\n                    xa = x + stack.shift();\n                    ya = y;\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb + stack.shift();\n                    y = yb;\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  break;\n                case 28:\n                  stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);\n                  i += 2;\n                  break;\n                case 29:\n                  n = stack.pop() + font.gsubrsBias;\n                  subrCode = font.gsubrs[n];\n                  if (subrCode) {\n                    parse(subrCode);\n                  }\n                  break;\n                case 30:\n                  while (stack.length > 0) {\n                    xa = x;\n                    ya = y + stack.shift();\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb + stack.shift();\n                    y = yb + (stack.length === 1 ? stack.shift() : 0);\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                    if (stack.length === 0) {\n                      break;\n                    }\n                    xa = x + stack.shift();\n                    ya = y;\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    y = yb + stack.shift();\n                    x = xb + (stack.length === 1 ? stack.shift() : 0);\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  break;\n                case 31:\n                  while (stack.length > 0) {\n                    xa = x + stack.shift();\n                    ya = y;\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    y = yb + stack.shift();\n                    x = xb + (stack.length === 1 ? stack.shift() : 0);\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                    if (stack.length === 0) {\n                      break;\n                    }\n                    xa = x;\n                    ya = y + stack.shift();\n                    xb = xa + stack.shift();\n                    yb = ya + stack.shift();\n                    x = xb + stack.shift();\n                    y = yb + (stack.length === 1 ? stack.shift() : 0);\n                    bezierCurveTo(xa, ya, xb, yb, x, y);\n                  }\n                  break;\n                default:\n                  if (v < 32) {\n                    throw new _util.FormatError(\"unknown operator: \".concat(v));\n                  }\n                  if (v < 247) {\n                    stack.push(v - 139);\n                  } else if (v < 251) {\n                    stack.push((v - 247) * 256 + code[i++] + 108);\n                  } else if (v < 255) {\n                    stack.push(-(v - 251) * 256 - code[i++] - 108);\n                  } else {\n                    stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);\n                    i += 4;\n                  }\n                  break;\n              }\n              if (stackClean) {\n                stack.length = 0;\n              }\n            }\n          }\n          parse(charStringCode);\n        }\n        var NOOP = [];\n        var CompiledFont = /*#__PURE__*/function () {\n          function CompiledFont(fontMatrix) {\n            _classCallCheck(this, CompiledFont);\n            if (this.constructor === CompiledFont) {\n              (0, _util.unreachable)(\"Cannot initialize CompiledFont.\");\n            }\n            this.fontMatrix = fontMatrix;\n            this.compiledGlyphs = Object.create(null);\n            this.compiledCharCodeToGlyphId = Object.create(null);\n          }\n          _createClass(CompiledFont, [{\n            key: \"getPathJs\",\n            value: function getPathJs(unicode) {\n              var _lookupCmap = lookupCmap(this.cmap, unicode),\n                charCode = _lookupCmap.charCode,\n                glyphId = _lookupCmap.glyphId;\n              var fn = this.compiledGlyphs[glyphId];\n              if (!fn) {\n                try {\n                  fn = this.compileGlyph(this.glyphs[glyphId], glyphId);\n                  this.compiledGlyphs[glyphId] = fn;\n                } catch (ex) {\n                  this.compiledGlyphs[glyphId] = NOOP;\n                  if (this.compiledCharCodeToGlyphId[charCode] === undefined) {\n                    this.compiledCharCodeToGlyphId[charCode] = glyphId;\n                  }\n                  throw ex;\n                }\n              }\n              if (this.compiledCharCodeToGlyphId[charCode] === undefined) {\n                this.compiledCharCodeToGlyphId[charCode] = glyphId;\n              }\n              return fn;\n            }\n          }, {\n            key: \"compileGlyph\",\n            value: function compileGlyph(code, glyphId) {\n              if (!code || code.length === 0 || code[0] === 14) {\n                return NOOP;\n              }\n              var fontMatrix = this.fontMatrix;\n              if (this.isCFFCIDFont) {\n                var fdIndex = this.fdSelect.getFDIndex(glyphId);\n                if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n                  var fontDict = this.fdArray[fdIndex];\n                  fontMatrix = fontDict.getByName(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX;\n                } else {\n                  (0, _util.warn)(\"Invalid fd index for glyph index.\");\n                }\n              }\n              var cmds = [{\n                cmd: \"save\"\n              }, {\n                cmd: \"transform\",\n                args: fontMatrix.slice()\n              }, {\n                cmd: \"scale\",\n                args: [\"size\", \"-size\"]\n              }];\n              this.compileGlyphImpl(code, cmds, glyphId);\n              cmds.push({\n                cmd: \"restore\"\n              });\n              return cmds;\n            }\n          }, {\n            key: \"compileGlyphImpl\",\n            value: function compileGlyphImpl() {\n              (0, _util.unreachable)(\"Children classes should implement this.\");\n            }\n          }, {\n            key: \"hasBuiltPath\",\n            value: function hasBuiltPath(unicode) {\n              var _lookupCmap2 = lookupCmap(this.cmap, unicode),\n                charCode = _lookupCmap2.charCode,\n                glyphId = _lookupCmap2.glyphId;\n              return this.compiledGlyphs[glyphId] !== undefined && this.compiledCharCodeToGlyphId[charCode] !== undefined;\n            }\n          }]);\n          return CompiledFont;\n        }();\n        var TrueTypeCompiled = /*#__PURE__*/function (_CompiledFont) {\n          _inherits(TrueTypeCompiled, _CompiledFont);\n          function TrueTypeCompiled(glyphs, cmap, fontMatrix) {\n            var _this80;\n            _classCallCheck(this, TrueTypeCompiled);\n            _this80 = _possibleConstructorReturn(this, _getPrototypeOf(TrueTypeCompiled).call(this, fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]));\n            _this80.glyphs = glyphs;\n            _this80.cmap = cmap;\n            return _this80;\n          }\n          _createClass(TrueTypeCompiled, [{\n            key: \"compileGlyphImpl\",\n            value: function compileGlyphImpl(code, cmds) {\n              compileGlyf(code, cmds, this);\n            }\n          }]);\n          return TrueTypeCompiled;\n        }(CompiledFont);\n        var Type2Compiled = /*#__PURE__*/function (_CompiledFont2) {\n          _inherits(Type2Compiled, _CompiledFont2);\n          function Type2Compiled(cffInfo, cmap, fontMatrix, glyphNameMap) {\n            var _this81;\n            _classCallCheck(this, Type2Compiled);\n            _this81 = _possibleConstructorReturn(this, _getPrototypeOf(Type2Compiled).call(this, fontMatrix || [0.001, 0, 0, 0.001, 0, 0]));\n            _this81.glyphs = cffInfo.glyphs;\n            _this81.gsubrs = cffInfo.gsubrs || [];\n            _this81.subrs = cffInfo.subrs || [];\n            _this81.cmap = cmap;\n            _this81.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();\n            _this81.gsubrsBias = getSubroutineBias(_this81.gsubrs);\n            _this81.subrsBias = getSubroutineBias(_this81.subrs);\n            _this81.isCFFCIDFont = cffInfo.isCFFCIDFont;\n            _this81.fdSelect = cffInfo.fdSelect;\n            _this81.fdArray = cffInfo.fdArray;\n            return _this81;\n          }\n          _createClass(Type2Compiled, [{\n            key: \"compileGlyphImpl\",\n            value: function compileGlyphImpl(code, cmds, glyphId) {\n              compileCharString(code, cmds, this, glyphId);\n            }\n          }]);\n          return Type2Compiled;\n        }(CompiledFont);\n        var FontRendererFactory = /*#__PURE__*/function () {\n          function FontRendererFactory() {\n            _classCallCheck(this, FontRendererFactory);\n          }\n          _createClass(FontRendererFactory, null, [{\n            key: \"create\",\n            value: function create(font, seacAnalysisEnabled) {\n              var data = new Uint8Array(font.data);\n              var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n              var numTables = getUint16(data, 4);\n              for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n                var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));\n                var offset = getUint32(data, p + 8);\n                var length = getUint32(data, p + 12);\n                switch (tag) {\n                  case \"cmap\":\n                    cmap = parseCmap(data, offset, offset + length);\n                    break;\n                  case \"glyf\":\n                    glyf = data.subarray(offset, offset + length);\n                    break;\n                  case \"loca\":\n                    loca = data.subarray(offset, offset + length);\n                    break;\n                  case \"head\":\n                    unitsPerEm = getUint16(data, offset + 18);\n                    indexToLocFormat = getUint16(data, offset + 50);\n                    break;\n                  case \"CFF \":\n                    cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n                    break;\n                }\n              }\n              if (glyf) {\n                var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n                return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);\n              }\n              return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n            }\n          }]);\n          return FontRendererFactory;\n        }();\n        exports.FontRendererFactory = FontRendererFactory;\n\n        /***/\n      }, /* 45 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getMetrics = exports.getFontBasicMetrics = void 0;\n        var _core_utils = __w_pdfjs_require__(6);\n        var getMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t.Courier = 600;\n          t[\"Courier-Bold\"] = 600;\n          t[\"Courier-BoldOblique\"] = 600;\n          t[\"Courier-Oblique\"] = 600;\n          t.Helvetica = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 278;\n            t.exclam = 278;\n            t.quotedbl = 355;\n            t.numbersign = 556;\n            t.dollar = 556;\n            t.percent = 889;\n            t.ampersand = 667;\n            t.quoteright = 222;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 389;\n            t.plus = 584;\n            t.comma = 278;\n            t.hyphen = 333;\n            t.period = 278;\n            t.slash = 278;\n            t.zero = 556;\n            t.one = 556;\n            t.two = 556;\n            t.three = 556;\n            t.four = 556;\n            t.five = 556;\n            t.six = 556;\n            t.seven = 556;\n            t.eight = 556;\n            t.nine = 556;\n            t.colon = 278;\n            t.semicolon = 278;\n            t.less = 584;\n            t.equal = 584;\n            t.greater = 584;\n            t.question = 556;\n            t.at = 1015;\n            t.A = 667;\n            t.B = 667;\n            t.C = 722;\n            t.D = 722;\n            t.E = 667;\n            t.F = 611;\n            t.G = 778;\n            t.H = 722;\n            t.I = 278;\n            t.J = 500;\n            t.K = 667;\n            t.L = 556;\n            t.M = 833;\n            t.N = 722;\n            t.O = 778;\n            t.P = 667;\n            t.Q = 778;\n            t.R = 722;\n            t.S = 667;\n            t.T = 611;\n            t.U = 722;\n            t.V = 667;\n            t.W = 944;\n            t.X = 667;\n            t.Y = 667;\n            t.Z = 611;\n            t.bracketleft = 278;\n            t.backslash = 278;\n            t.bracketright = 278;\n            t.asciicircum = 469;\n            t.underscore = 556;\n            t.quoteleft = 222;\n            t.a = 556;\n            t.b = 556;\n            t.c = 500;\n            t.d = 556;\n            t.e = 556;\n            t.f = 278;\n            t.g = 556;\n            t.h = 556;\n            t.i = 222;\n            t.j = 222;\n            t.k = 500;\n            t.l = 222;\n            t.m = 833;\n            t.n = 556;\n            t.o = 556;\n            t.p = 556;\n            t.q = 556;\n            t.r = 333;\n            t.s = 500;\n            t.t = 278;\n            t.u = 556;\n            t.v = 500;\n            t.w = 722;\n            t.x = 500;\n            t.y = 500;\n            t.z = 500;\n            t.braceleft = 334;\n            t.bar = 260;\n            t.braceright = 334;\n            t.asciitilde = 584;\n            t.exclamdown = 333;\n            t.cent = 556;\n            t.sterling = 556;\n            t.fraction = 167;\n            t.yen = 556;\n            t.florin = 556;\n            t.section = 556;\n            t.currency = 556;\n            t.quotesingle = 191;\n            t.quotedblleft = 333;\n            t.guillemotleft = 556;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 500;\n            t.fl = 500;\n            t.endash = 556;\n            t.dagger = 556;\n            t.daggerdbl = 556;\n            t.periodcentered = 278;\n            t.paragraph = 537;\n            t.bullet = 350;\n            t.quotesinglbase = 222;\n            t.quotedblbase = 333;\n            t.quotedblright = 333;\n            t.guillemotright = 556;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 611;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 1000;\n            t.ordfeminine = 370;\n            t.Lslash = 556;\n            t.Oslash = 778;\n            t.OE = 1000;\n            t.ordmasculine = 365;\n            t.ae = 889;\n            t.dotlessi = 278;\n            t.lslash = 222;\n            t.oslash = 611;\n            t.oe = 944;\n            t.germandbls = 611;\n            t.Idieresis = 278;\n            t.eacute = 556;\n            t.abreve = 556;\n            t.uhungarumlaut = 556;\n            t.ecaron = 556;\n            t.Ydieresis = 667;\n            t.divide = 584;\n            t.Yacute = 667;\n            t.Acircumflex = 667;\n            t.aacute = 556;\n            t.Ucircumflex = 722;\n            t.yacute = 500;\n            t.scommaaccent = 500;\n            t.ecircumflex = 556;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 556;\n            t.Uacute = 722;\n            t.uogonek = 556;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 737;\n            t.Emacron = 667;\n            t.ccaron = 500;\n            t.aring = 556;\n            t.Ncommaaccent = 722;\n            t.lacute = 222;\n            t.agrave = 556;\n            t.Tcommaaccent = 611;\n            t.Cacute = 722;\n            t.atilde = 556;\n            t.Edotaccent = 667;\n            t.scaron = 500;\n            t.scedilla = 500;\n            t.iacute = 278;\n            t.lozenge = 471;\n            t.Rcaron = 722;\n            t.Gcommaaccent = 778;\n            t.ucircumflex = 556;\n            t.acircumflex = 556;\n            t.Amacron = 667;\n            t.rcaron = 333;\n            t.ccedilla = 500;\n            t.Zdotaccent = 611;\n            t.Thorn = 667;\n            t.Omacron = 778;\n            t.Racute = 722;\n            t.Sacute = 667;\n            t.dcaron = 643;\n            t.Umacron = 722;\n            t.uring = 556;\n            t.threesuperior = 333;\n            t.Ograve = 778;\n            t.Agrave = 667;\n            t.Abreve = 667;\n            t.multiply = 584;\n            t.uacute = 556;\n            t.Tcaron = 611;\n            t.partialdiff = 476;\n            t.ydieresis = 500;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 556;\n            t.edieresis = 556;\n            t.cacute = 500;\n            t.nacute = 556;\n            t.umacron = 556;\n            t.Ncaron = 722;\n            t.Iacute = 278;\n            t.plusminus = 584;\n            t.brokenbar = 260;\n            t.registered = 737;\n            t.Gbreve = 778;\n            t.Idotaccent = 278;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 333;\n            t.omacron = 556;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 722;\n            t.lcommaaccent = 222;\n            t.tcaron = 317;\n            t.eogonek = 556;\n            t.Uogonek = 722;\n            t.Aacute = 667;\n            t.Adieresis = 667;\n            t.egrave = 556;\n            t.zacute = 500;\n            t.iogonek = 222;\n            t.Oacute = 778;\n            t.oacute = 556;\n            t.amacron = 556;\n            t.sacute = 500;\n            t.idieresis = 278;\n            t.Ocircumflex = 778;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 556;\n            t.twosuperior = 333;\n            t.Odieresis = 778;\n            t.mu = 556;\n            t.igrave = 278;\n            t.ohungarumlaut = 556;\n            t.Eogonek = 667;\n            t.dcroat = 556;\n            t.threequarters = 834;\n            t.Scedilla = 667;\n            t.lcaron = 299;\n            t.Kcommaaccent = 667;\n            t.Lacute = 556;\n            t.trademark = 1000;\n            t.edotaccent = 556;\n            t.Igrave = 278;\n            t.Imacron = 278;\n            t.Lcaron = 556;\n            t.onehalf = 834;\n            t.lessequal = 549;\n            t.ocircumflex = 556;\n            t.ntilde = 556;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 556;\n            t.gbreve = 556;\n            t.onequarter = 834;\n            t.Scaron = 667;\n            t.Scommaaccent = 667;\n            t.Ohungarumlaut = 778;\n            t.degree = 400;\n            t.ograve = 556;\n            t.Ccaron = 722;\n            t.ugrave = 556;\n            t.radical = 453;\n            t.Dcaron = 722;\n            t.rcommaaccent = 333;\n            t.Ntilde = 722;\n            t.otilde = 556;\n            t.Rcommaaccent = 722;\n            t.Lcommaaccent = 556;\n            t.Atilde = 667;\n            t.Aogonek = 667;\n            t.Aring = 667;\n            t.Otilde = 778;\n            t.zdotaccent = 500;\n            t.Ecaron = 667;\n            t.Iogonek = 278;\n            t.kcommaaccent = 500;\n            t.minus = 584;\n            t.Icircumflex = 278;\n            t.ncaron = 556;\n            t.tcommaaccent = 278;\n            t.logicalnot = 584;\n            t.odieresis = 556;\n            t.udieresis = 556;\n            t.notequal = 549;\n            t.gcommaaccent = 556;\n            t.eth = 556;\n            t.zcaron = 500;\n            t.ncommaaccent = 556;\n            t.onesuperior = 333;\n            t.imacron = 278;\n            t.Euro = 556;\n          });\n          t[\"Helvetica-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 278;\n            t.exclam = 333;\n            t.quotedbl = 474;\n            t.numbersign = 556;\n            t.dollar = 556;\n            t.percent = 889;\n            t.ampersand = 722;\n            t.quoteright = 278;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 389;\n            t.plus = 584;\n            t.comma = 278;\n            t.hyphen = 333;\n            t.period = 278;\n            t.slash = 278;\n            t.zero = 556;\n            t.one = 556;\n            t.two = 556;\n            t.three = 556;\n            t.four = 556;\n            t.five = 556;\n            t.six = 556;\n            t.seven = 556;\n            t.eight = 556;\n            t.nine = 556;\n            t.colon = 333;\n            t.semicolon = 333;\n            t.less = 584;\n            t.equal = 584;\n            t.greater = 584;\n            t.question = 611;\n            t.at = 975;\n            t.A = 722;\n            t.B = 722;\n            t.C = 722;\n            t.D = 722;\n            t.E = 667;\n            t.F = 611;\n            t.G = 778;\n            t.H = 722;\n            t.I = 278;\n            t.J = 556;\n            t.K = 722;\n            t.L = 611;\n            t.M = 833;\n            t.N = 722;\n            t.O = 778;\n            t.P = 667;\n            t.Q = 778;\n            t.R = 722;\n            t.S = 667;\n            t.T = 611;\n            t.U = 722;\n            t.V = 667;\n            t.W = 944;\n            t.X = 667;\n            t.Y = 667;\n            t.Z = 611;\n            t.bracketleft = 333;\n            t.backslash = 278;\n            t.bracketright = 333;\n            t.asciicircum = 584;\n            t.underscore = 556;\n            t.quoteleft = 278;\n            t.a = 556;\n            t.b = 611;\n            t.c = 556;\n            t.d = 611;\n            t.e = 556;\n            t.f = 333;\n            t.g = 611;\n            t.h = 611;\n            t.i = 278;\n            t.j = 278;\n            t.k = 556;\n            t.l = 278;\n            t.m = 889;\n            t.n = 611;\n            t.o = 611;\n            t.p = 611;\n            t.q = 611;\n            t.r = 389;\n            t.s = 556;\n            t.t = 333;\n            t.u = 611;\n            t.v = 556;\n            t.w = 778;\n            t.x = 556;\n            t.y = 556;\n            t.z = 500;\n            t.braceleft = 389;\n            t.bar = 280;\n            t.braceright = 389;\n            t.asciitilde = 584;\n            t.exclamdown = 333;\n            t.cent = 556;\n            t.sterling = 556;\n            t.fraction = 167;\n            t.yen = 556;\n            t.florin = 556;\n            t.section = 556;\n            t.currency = 556;\n            t.quotesingle = 238;\n            t.quotedblleft = 500;\n            t.guillemotleft = 556;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 611;\n            t.fl = 611;\n            t.endash = 556;\n            t.dagger = 556;\n            t.daggerdbl = 556;\n            t.periodcentered = 278;\n            t.paragraph = 556;\n            t.bullet = 350;\n            t.quotesinglbase = 278;\n            t.quotedblbase = 500;\n            t.quotedblright = 500;\n            t.guillemotright = 556;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 611;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 1000;\n            t.ordfeminine = 370;\n            t.Lslash = 611;\n            t.Oslash = 778;\n            t.OE = 1000;\n            t.ordmasculine = 365;\n            t.ae = 889;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 611;\n            t.oe = 944;\n            t.germandbls = 611;\n            t.Idieresis = 278;\n            t.eacute = 556;\n            t.abreve = 556;\n            t.uhungarumlaut = 611;\n            t.ecaron = 556;\n            t.Ydieresis = 667;\n            t.divide = 584;\n            t.Yacute = 667;\n            t.Acircumflex = 722;\n            t.aacute = 556;\n            t.Ucircumflex = 722;\n            t.yacute = 556;\n            t.scommaaccent = 556;\n            t.ecircumflex = 556;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 556;\n            t.Uacute = 722;\n            t.uogonek = 611;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 737;\n            t.Emacron = 667;\n            t.ccaron = 556;\n            t.aring = 556;\n            t.Ncommaaccent = 722;\n            t.lacute = 278;\n            t.agrave = 556;\n            t.Tcommaaccent = 611;\n            t.Cacute = 722;\n            t.atilde = 556;\n            t.Edotaccent = 667;\n            t.scaron = 556;\n            t.scedilla = 556;\n            t.iacute = 278;\n            t.lozenge = 494;\n            t.Rcaron = 722;\n            t.Gcommaaccent = 778;\n            t.ucircumflex = 611;\n            t.acircumflex = 556;\n            t.Amacron = 722;\n            t.rcaron = 389;\n            t.ccedilla = 556;\n            t.Zdotaccent = 611;\n            t.Thorn = 667;\n            t.Omacron = 778;\n            t.Racute = 722;\n            t.Sacute = 667;\n            t.dcaron = 743;\n            t.Umacron = 722;\n            t.uring = 611;\n            t.threesuperior = 333;\n            t.Ograve = 778;\n            t.Agrave = 722;\n            t.Abreve = 722;\n            t.multiply = 584;\n            t.uacute = 611;\n            t.Tcaron = 611;\n            t.partialdiff = 494;\n            t.ydieresis = 556;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 556;\n            t.edieresis = 556;\n            t.cacute = 556;\n            t.nacute = 611;\n            t.umacron = 611;\n            t.Ncaron = 722;\n            t.Iacute = 278;\n            t.plusminus = 584;\n            t.brokenbar = 280;\n            t.registered = 737;\n            t.Gbreve = 778;\n            t.Idotaccent = 278;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 389;\n            t.omacron = 611;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 722;\n            t.lcommaaccent = 278;\n            t.tcaron = 389;\n            t.eogonek = 556;\n            t.Uogonek = 722;\n            t.Aacute = 722;\n            t.Adieresis = 722;\n            t.egrave = 556;\n            t.zacute = 500;\n            t.iogonek = 278;\n            t.Oacute = 778;\n            t.oacute = 611;\n            t.amacron = 556;\n            t.sacute = 556;\n            t.idieresis = 278;\n            t.Ocircumflex = 778;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 611;\n            t.twosuperior = 333;\n            t.Odieresis = 778;\n            t.mu = 611;\n            t.igrave = 278;\n            t.ohungarumlaut = 611;\n            t.Eogonek = 667;\n            t.dcroat = 611;\n            t.threequarters = 834;\n            t.Scedilla = 667;\n            t.lcaron = 400;\n            t.Kcommaaccent = 722;\n            t.Lacute = 611;\n            t.trademark = 1000;\n            t.edotaccent = 556;\n            t.Igrave = 278;\n            t.Imacron = 278;\n            t.Lcaron = 611;\n            t.onehalf = 834;\n            t.lessequal = 549;\n            t.ocircumflex = 611;\n            t.ntilde = 611;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 556;\n            t.gbreve = 611;\n            t.onequarter = 834;\n            t.Scaron = 667;\n            t.Scommaaccent = 667;\n            t.Ohungarumlaut = 778;\n            t.degree = 400;\n            t.ograve = 611;\n            t.Ccaron = 722;\n            t.ugrave = 611;\n            t.radical = 549;\n            t.Dcaron = 722;\n            t.rcommaaccent = 389;\n            t.Ntilde = 722;\n            t.otilde = 611;\n            t.Rcommaaccent = 722;\n            t.Lcommaaccent = 611;\n            t.Atilde = 722;\n            t.Aogonek = 722;\n            t.Aring = 722;\n            t.Otilde = 778;\n            t.zdotaccent = 500;\n            t.Ecaron = 667;\n            t.Iogonek = 278;\n            t.kcommaaccent = 556;\n            t.minus = 584;\n            t.Icircumflex = 278;\n            t.ncaron = 611;\n            t.tcommaaccent = 333;\n            t.logicalnot = 584;\n            t.odieresis = 611;\n            t.udieresis = 611;\n            t.notequal = 549;\n            t.gcommaaccent = 611;\n            t.eth = 611;\n            t.zcaron = 500;\n            t.ncommaaccent = 611;\n            t.onesuperior = 333;\n            t.imacron = 278;\n            t.Euro = 556;\n          });\n          t[\"Helvetica-BoldOblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 278;\n            t.exclam = 333;\n            t.quotedbl = 474;\n            t.numbersign = 556;\n            t.dollar = 556;\n            t.percent = 889;\n            t.ampersand = 722;\n            t.quoteright = 278;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 389;\n            t.plus = 584;\n            t.comma = 278;\n            t.hyphen = 333;\n            t.period = 278;\n            t.slash = 278;\n            t.zero = 556;\n            t.one = 556;\n            t.two = 556;\n            t.three = 556;\n            t.four = 556;\n            t.five = 556;\n            t.six = 556;\n            t.seven = 556;\n            t.eight = 556;\n            t.nine = 556;\n            t.colon = 333;\n            t.semicolon = 333;\n            t.less = 584;\n            t.equal = 584;\n            t.greater = 584;\n            t.question = 611;\n            t.at = 975;\n            t.A = 722;\n            t.B = 722;\n            t.C = 722;\n            t.D = 722;\n            t.E = 667;\n            t.F = 611;\n            t.G = 778;\n            t.H = 722;\n            t.I = 278;\n            t.J = 556;\n            t.K = 722;\n            t.L = 611;\n            t.M = 833;\n            t.N = 722;\n            t.O = 778;\n            t.P = 667;\n            t.Q = 778;\n            t.R = 722;\n            t.S = 667;\n            t.T = 611;\n            t.U = 722;\n            t.V = 667;\n            t.W = 944;\n            t.X = 667;\n            t.Y = 667;\n            t.Z = 611;\n            t.bracketleft = 333;\n            t.backslash = 278;\n            t.bracketright = 333;\n            t.asciicircum = 584;\n            t.underscore = 556;\n            t.quoteleft = 278;\n            t.a = 556;\n            t.b = 611;\n            t.c = 556;\n            t.d = 611;\n            t.e = 556;\n            t.f = 333;\n            t.g = 611;\n            t.h = 611;\n            t.i = 278;\n            t.j = 278;\n            t.k = 556;\n            t.l = 278;\n            t.m = 889;\n            t.n = 611;\n            t.o = 611;\n            t.p = 611;\n            t.q = 611;\n            t.r = 389;\n            t.s = 556;\n            t.t = 333;\n            t.u = 611;\n            t.v = 556;\n            t.w = 778;\n            t.x = 556;\n            t.y = 556;\n            t.z = 500;\n            t.braceleft = 389;\n            t.bar = 280;\n            t.braceright = 389;\n            t.asciitilde = 584;\n            t.exclamdown = 333;\n            t.cent = 556;\n            t.sterling = 556;\n            t.fraction = 167;\n            t.yen = 556;\n            t.florin = 556;\n            t.section = 556;\n            t.currency = 556;\n            t.quotesingle = 238;\n            t.quotedblleft = 500;\n            t.guillemotleft = 556;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 611;\n            t.fl = 611;\n            t.endash = 556;\n            t.dagger = 556;\n            t.daggerdbl = 556;\n            t.periodcentered = 278;\n            t.paragraph = 556;\n            t.bullet = 350;\n            t.quotesinglbase = 278;\n            t.quotedblbase = 500;\n            t.quotedblright = 500;\n            t.guillemotright = 556;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 611;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 1000;\n            t.ordfeminine = 370;\n            t.Lslash = 611;\n            t.Oslash = 778;\n            t.OE = 1000;\n            t.ordmasculine = 365;\n            t.ae = 889;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 611;\n            t.oe = 944;\n            t.germandbls = 611;\n            t.Idieresis = 278;\n            t.eacute = 556;\n            t.abreve = 556;\n            t.uhungarumlaut = 611;\n            t.ecaron = 556;\n            t.Ydieresis = 667;\n            t.divide = 584;\n            t.Yacute = 667;\n            t.Acircumflex = 722;\n            t.aacute = 556;\n            t.Ucircumflex = 722;\n            t.yacute = 556;\n            t.scommaaccent = 556;\n            t.ecircumflex = 556;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 556;\n            t.Uacute = 722;\n            t.uogonek = 611;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 737;\n            t.Emacron = 667;\n            t.ccaron = 556;\n            t.aring = 556;\n            t.Ncommaaccent = 722;\n            t.lacute = 278;\n            t.agrave = 556;\n            t.Tcommaaccent = 611;\n            t.Cacute = 722;\n            t.atilde = 556;\n            t.Edotaccent = 667;\n            t.scaron = 556;\n            t.scedilla = 556;\n            t.iacute = 278;\n            t.lozenge = 494;\n            t.Rcaron = 722;\n            t.Gcommaaccent = 778;\n            t.ucircumflex = 611;\n            t.acircumflex = 556;\n            t.Amacron = 722;\n            t.rcaron = 389;\n            t.ccedilla = 556;\n            t.Zdotaccent = 611;\n            t.Thorn = 667;\n            t.Omacron = 778;\n            t.Racute = 722;\n            t.Sacute = 667;\n            t.dcaron = 743;\n            t.Umacron = 722;\n            t.uring = 611;\n            t.threesuperior = 333;\n            t.Ograve = 778;\n            t.Agrave = 722;\n            t.Abreve = 722;\n            t.multiply = 584;\n            t.uacute = 611;\n            t.Tcaron = 611;\n            t.partialdiff = 494;\n            t.ydieresis = 556;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 556;\n            t.edieresis = 556;\n            t.cacute = 556;\n            t.nacute = 611;\n            t.umacron = 611;\n            t.Ncaron = 722;\n            t.Iacute = 278;\n            t.plusminus = 584;\n            t.brokenbar = 280;\n            t.registered = 737;\n            t.Gbreve = 778;\n            t.Idotaccent = 278;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 389;\n            t.omacron = 611;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 722;\n            t.lcommaaccent = 278;\n            t.tcaron = 389;\n            t.eogonek = 556;\n            t.Uogonek = 722;\n            t.Aacute = 722;\n            t.Adieresis = 722;\n            t.egrave = 556;\n            t.zacute = 500;\n            t.iogonek = 278;\n            t.Oacute = 778;\n            t.oacute = 611;\n            t.amacron = 556;\n            t.sacute = 556;\n            t.idieresis = 278;\n            t.Ocircumflex = 778;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 611;\n            t.twosuperior = 333;\n            t.Odieresis = 778;\n            t.mu = 611;\n            t.igrave = 278;\n            t.ohungarumlaut = 611;\n            t.Eogonek = 667;\n            t.dcroat = 611;\n            t.threequarters = 834;\n            t.Scedilla = 667;\n            t.lcaron = 400;\n            t.Kcommaaccent = 722;\n            t.Lacute = 611;\n            t.trademark = 1000;\n            t.edotaccent = 556;\n            t.Igrave = 278;\n            t.Imacron = 278;\n            t.Lcaron = 611;\n            t.onehalf = 834;\n            t.lessequal = 549;\n            t.ocircumflex = 611;\n            t.ntilde = 611;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 556;\n            t.gbreve = 611;\n            t.onequarter = 834;\n            t.Scaron = 667;\n            t.Scommaaccent = 667;\n            t.Ohungarumlaut = 778;\n            t.degree = 400;\n            t.ograve = 611;\n            t.Ccaron = 722;\n            t.ugrave = 611;\n            t.radical = 549;\n            t.Dcaron = 722;\n            t.rcommaaccent = 389;\n            t.Ntilde = 722;\n            t.otilde = 611;\n            t.Rcommaaccent = 722;\n            t.Lcommaaccent = 611;\n            t.Atilde = 722;\n            t.Aogonek = 722;\n            t.Aring = 722;\n            t.Otilde = 778;\n            t.zdotaccent = 500;\n            t.Ecaron = 667;\n            t.Iogonek = 278;\n            t.kcommaaccent = 556;\n            t.minus = 584;\n            t.Icircumflex = 278;\n            t.ncaron = 611;\n            t.tcommaaccent = 333;\n            t.logicalnot = 584;\n            t.odieresis = 611;\n            t.udieresis = 611;\n            t.notequal = 549;\n            t.gcommaaccent = 611;\n            t.eth = 611;\n            t.zcaron = 500;\n            t.ncommaaccent = 611;\n            t.onesuperior = 333;\n            t.imacron = 278;\n            t.Euro = 556;\n          });\n          t[\"Helvetica-Oblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 278;\n            t.exclam = 278;\n            t.quotedbl = 355;\n            t.numbersign = 556;\n            t.dollar = 556;\n            t.percent = 889;\n            t.ampersand = 667;\n            t.quoteright = 222;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 389;\n            t.plus = 584;\n            t.comma = 278;\n            t.hyphen = 333;\n            t.period = 278;\n            t.slash = 278;\n            t.zero = 556;\n            t.one = 556;\n            t.two = 556;\n            t.three = 556;\n            t.four = 556;\n            t.five = 556;\n            t.six = 556;\n            t.seven = 556;\n            t.eight = 556;\n            t.nine = 556;\n            t.colon = 278;\n            t.semicolon = 278;\n            t.less = 584;\n            t.equal = 584;\n            t.greater = 584;\n            t.question = 556;\n            t.at = 1015;\n            t.A = 667;\n            t.B = 667;\n            t.C = 722;\n            t.D = 722;\n            t.E = 667;\n            t.F = 611;\n            t.G = 778;\n            t.H = 722;\n            t.I = 278;\n            t.J = 500;\n            t.K = 667;\n            t.L = 556;\n            t.M = 833;\n            t.N = 722;\n            t.O = 778;\n            t.P = 667;\n            t.Q = 778;\n            t.R = 722;\n            t.S = 667;\n            t.T = 611;\n            t.U = 722;\n            t.V = 667;\n            t.W = 944;\n            t.X = 667;\n            t.Y = 667;\n            t.Z = 611;\n            t.bracketleft = 278;\n            t.backslash = 278;\n            t.bracketright = 278;\n            t.asciicircum = 469;\n            t.underscore = 556;\n            t.quoteleft = 222;\n            t.a = 556;\n            t.b = 556;\n            t.c = 500;\n            t.d = 556;\n            t.e = 556;\n            t.f = 278;\n            t.g = 556;\n            t.h = 556;\n            t.i = 222;\n            t.j = 222;\n            t.k = 500;\n            t.l = 222;\n            t.m = 833;\n            t.n = 556;\n            t.o = 556;\n            t.p = 556;\n            t.q = 556;\n            t.r = 333;\n            t.s = 500;\n            t.t = 278;\n            t.u = 556;\n            t.v = 500;\n            t.w = 722;\n            t.x = 500;\n            t.y = 500;\n            t.z = 500;\n            t.braceleft = 334;\n            t.bar = 260;\n            t.braceright = 334;\n            t.asciitilde = 584;\n            t.exclamdown = 333;\n            t.cent = 556;\n            t.sterling = 556;\n            t.fraction = 167;\n            t.yen = 556;\n            t.florin = 556;\n            t.section = 556;\n            t.currency = 556;\n            t.quotesingle = 191;\n            t.quotedblleft = 333;\n            t.guillemotleft = 556;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 500;\n            t.fl = 500;\n            t.endash = 556;\n            t.dagger = 556;\n            t.daggerdbl = 556;\n            t.periodcentered = 278;\n            t.paragraph = 537;\n            t.bullet = 350;\n            t.quotesinglbase = 222;\n            t.quotedblbase = 333;\n            t.quotedblright = 333;\n            t.guillemotright = 556;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 611;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 1000;\n            t.ordfeminine = 370;\n            t.Lslash = 556;\n            t.Oslash = 778;\n            t.OE = 1000;\n            t.ordmasculine = 365;\n            t.ae = 889;\n            t.dotlessi = 278;\n            t.lslash = 222;\n            t.oslash = 611;\n            t.oe = 944;\n            t.germandbls = 611;\n            t.Idieresis = 278;\n            t.eacute = 556;\n            t.abreve = 556;\n            t.uhungarumlaut = 556;\n            t.ecaron = 556;\n            t.Ydieresis = 667;\n            t.divide = 584;\n            t.Yacute = 667;\n            t.Acircumflex = 667;\n            t.aacute = 556;\n            t.Ucircumflex = 722;\n            t.yacute = 500;\n            t.scommaaccent = 500;\n            t.ecircumflex = 556;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 556;\n            t.Uacute = 722;\n            t.uogonek = 556;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 737;\n            t.Emacron = 667;\n            t.ccaron = 500;\n            t.aring = 556;\n            t.Ncommaaccent = 722;\n            t.lacute = 222;\n            t.agrave = 556;\n            t.Tcommaaccent = 611;\n            t.Cacute = 722;\n            t.atilde = 556;\n            t.Edotaccent = 667;\n            t.scaron = 500;\n            t.scedilla = 500;\n            t.iacute = 278;\n            t.lozenge = 471;\n            t.Rcaron = 722;\n            t.Gcommaaccent = 778;\n            t.ucircumflex = 556;\n            t.acircumflex = 556;\n            t.Amacron = 667;\n            t.rcaron = 333;\n            t.ccedilla = 500;\n            t.Zdotaccent = 611;\n            t.Thorn = 667;\n            t.Omacron = 778;\n            t.Racute = 722;\n            t.Sacute = 667;\n            t.dcaron = 643;\n            t.Umacron = 722;\n            t.uring = 556;\n            t.threesuperior = 333;\n            t.Ograve = 778;\n            t.Agrave = 667;\n            t.Abreve = 667;\n            t.multiply = 584;\n            t.uacute = 556;\n            t.Tcaron = 611;\n            t.partialdiff = 476;\n            t.ydieresis = 500;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 556;\n            t.edieresis = 556;\n            t.cacute = 500;\n            t.nacute = 556;\n            t.umacron = 556;\n            t.Ncaron = 722;\n            t.Iacute = 278;\n            t.plusminus = 584;\n            t.brokenbar = 260;\n            t.registered = 737;\n            t.Gbreve = 778;\n            t.Idotaccent = 278;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 333;\n            t.omacron = 556;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 722;\n            t.lcommaaccent = 222;\n            t.tcaron = 317;\n            t.eogonek = 556;\n            t.Uogonek = 722;\n            t.Aacute = 667;\n            t.Adieresis = 667;\n            t.egrave = 556;\n            t.zacute = 500;\n            t.iogonek = 222;\n            t.Oacute = 778;\n            t.oacute = 556;\n            t.amacron = 556;\n            t.sacute = 500;\n            t.idieresis = 278;\n            t.Ocircumflex = 778;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 556;\n            t.twosuperior = 333;\n            t.Odieresis = 778;\n            t.mu = 556;\n            t.igrave = 278;\n            t.ohungarumlaut = 556;\n            t.Eogonek = 667;\n            t.dcroat = 556;\n            t.threequarters = 834;\n            t.Scedilla = 667;\n            t.lcaron = 299;\n            t.Kcommaaccent = 667;\n            t.Lacute = 556;\n            t.trademark = 1000;\n            t.edotaccent = 556;\n            t.Igrave = 278;\n            t.Imacron = 278;\n            t.Lcaron = 556;\n            t.onehalf = 834;\n            t.lessequal = 549;\n            t.ocircumflex = 556;\n            t.ntilde = 556;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 556;\n            t.gbreve = 556;\n            t.onequarter = 834;\n            t.Scaron = 667;\n            t.Scommaaccent = 667;\n            t.Ohungarumlaut = 778;\n            t.degree = 400;\n            t.ograve = 556;\n            t.Ccaron = 722;\n            t.ugrave = 556;\n            t.radical = 453;\n            t.Dcaron = 722;\n            t.rcommaaccent = 333;\n            t.Ntilde = 722;\n            t.otilde = 556;\n            t.Rcommaaccent = 722;\n            t.Lcommaaccent = 556;\n            t.Atilde = 667;\n            t.Aogonek = 667;\n            t.Aring = 667;\n            t.Otilde = 778;\n            t.zdotaccent = 500;\n            t.Ecaron = 667;\n            t.Iogonek = 278;\n            t.kcommaaccent = 500;\n            t.minus = 584;\n            t.Icircumflex = 278;\n            t.ncaron = 556;\n            t.tcommaaccent = 278;\n            t.logicalnot = 584;\n            t.odieresis = 556;\n            t.udieresis = 556;\n            t.notequal = 549;\n            t.gcommaaccent = 556;\n            t.eth = 556;\n            t.zcaron = 500;\n            t.ncommaaccent = 556;\n            t.onesuperior = 333;\n            t.imacron = 278;\n            t.Euro = 556;\n          });\n          t.Symbol = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 250;\n            t.exclam = 333;\n            t.universal = 713;\n            t.numbersign = 500;\n            t.existential = 549;\n            t.percent = 833;\n            t.ampersand = 778;\n            t.suchthat = 439;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asteriskmath = 500;\n            t.plus = 549;\n            t.comma = 250;\n            t.minus = 549;\n            t.period = 250;\n            t.slash = 278;\n            t.zero = 500;\n            t.one = 500;\n            t.two = 500;\n            t.three = 500;\n            t.four = 500;\n            t.five = 500;\n            t.six = 500;\n            t.seven = 500;\n            t.eight = 500;\n            t.nine = 500;\n            t.colon = 278;\n            t.semicolon = 278;\n            t.less = 549;\n            t.equal = 549;\n            t.greater = 549;\n            t.question = 444;\n            t.congruent = 549;\n            t.Alpha = 722;\n            t.Beta = 667;\n            t.Chi = 722;\n            t.Delta = 612;\n            t.Epsilon = 611;\n            t.Phi = 763;\n            t.Gamma = 603;\n            t.Eta = 722;\n            t.Iota = 333;\n            t.theta1 = 631;\n            t.Kappa = 722;\n            t.Lambda = 686;\n            t.Mu = 889;\n            t.Nu = 722;\n            t.Omicron = 722;\n            t.Pi = 768;\n            t.Theta = 741;\n            t.Rho = 556;\n            t.Sigma = 592;\n            t.Tau = 611;\n            t.Upsilon = 690;\n            t.sigma1 = 439;\n            t.Omega = 768;\n            t.Xi = 645;\n            t.Psi = 795;\n            t.Zeta = 611;\n            t.bracketleft = 333;\n            t.therefore = 863;\n            t.bracketright = 333;\n            t.perpendicular = 658;\n            t.underscore = 500;\n            t.radicalex = 500;\n            t.alpha = 631;\n            t.beta = 549;\n            t.chi = 549;\n            t.delta = 494;\n            t.epsilon = 439;\n            t.phi = 521;\n            t.gamma = 411;\n            t.eta = 603;\n            t.iota = 329;\n            t.phi1 = 603;\n            t.kappa = 549;\n            t.lambda = 549;\n            t.mu = 576;\n            t.nu = 521;\n            t.omicron = 549;\n            t.pi = 549;\n            t.theta = 521;\n            t.rho = 549;\n            t.sigma = 603;\n            t.tau = 439;\n            t.upsilon = 576;\n            t.omega1 = 713;\n            t.omega = 686;\n            t.xi = 493;\n            t.psi = 686;\n            t.zeta = 494;\n            t.braceleft = 480;\n            t.bar = 200;\n            t.braceright = 480;\n            t.similar = 549;\n            t.Euro = 750;\n            t.Upsilon1 = 620;\n            t.minute = 247;\n            t.lessequal = 549;\n            t.fraction = 167;\n            t.infinity = 713;\n            t.florin = 500;\n            t.club = 753;\n            t.diamond = 753;\n            t.heart = 753;\n            t.spade = 753;\n            t.arrowboth = 1042;\n            t.arrowleft = 987;\n            t.arrowup = 603;\n            t.arrowright = 987;\n            t.arrowdown = 603;\n            t.degree = 400;\n            t.plusminus = 549;\n            t.second = 411;\n            t.greaterequal = 549;\n            t.multiply = 549;\n            t.proportional = 713;\n            t.partialdiff = 494;\n            t.bullet = 460;\n            t.divide = 549;\n            t.notequal = 549;\n            t.equivalence = 549;\n            t.approxequal = 549;\n            t.ellipsis = 1000;\n            t.arrowvertex = 603;\n            t.arrowhorizex = 1000;\n            t.carriagereturn = 658;\n            t.aleph = 823;\n            t.Ifraktur = 686;\n            t.Rfraktur = 795;\n            t.weierstrass = 987;\n            t.circlemultiply = 768;\n            t.circleplus = 768;\n            t.emptyset = 823;\n            t.intersection = 768;\n            t.union = 768;\n            t.propersuperset = 713;\n            t.reflexsuperset = 713;\n            t.notsubset = 713;\n            t.propersubset = 713;\n            t.reflexsubset = 713;\n            t.element = 713;\n            t.notelement = 713;\n            t.angle = 768;\n            t.gradient = 713;\n            t.registerserif = 790;\n            t.copyrightserif = 790;\n            t.trademarkserif = 890;\n            t.product = 823;\n            t.radical = 549;\n            t.dotmath = 250;\n            t.logicalnot = 713;\n            t.logicaland = 603;\n            t.logicalor = 603;\n            t.arrowdblboth = 1042;\n            t.arrowdblleft = 987;\n            t.arrowdblup = 603;\n            t.arrowdblright = 987;\n            t.arrowdbldown = 603;\n            t.lozenge = 494;\n            t.angleleft = 329;\n            t.registersans = 790;\n            t.copyrightsans = 790;\n            t.trademarksans = 786;\n            t.summation = 713;\n            t.parenlefttp = 384;\n            t.parenleftex = 384;\n            t.parenleftbt = 384;\n            t.bracketlefttp = 384;\n            t.bracketleftex = 384;\n            t.bracketleftbt = 384;\n            t.bracelefttp = 494;\n            t.braceleftmid = 494;\n            t.braceleftbt = 494;\n            t.braceex = 494;\n            t.angleright = 329;\n            t.integral = 274;\n            t.integraltp = 686;\n            t.integralex = 686;\n            t.integralbt = 686;\n            t.parenrighttp = 384;\n            t.parenrightex = 384;\n            t.parenrightbt = 384;\n            t.bracketrighttp = 384;\n            t.bracketrightex = 384;\n            t.bracketrightbt = 384;\n            t.bracerighttp = 494;\n            t.bracerightmid = 494;\n            t.bracerightbt = 494;\n            t.apple = 790;\n          });\n          t[\"Times-Roman\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 250;\n            t.exclam = 333;\n            t.quotedbl = 408;\n            t.numbersign = 500;\n            t.dollar = 500;\n            t.percent = 833;\n            t.ampersand = 778;\n            t.quoteright = 333;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 500;\n            t.plus = 564;\n            t.comma = 250;\n            t.hyphen = 333;\n            t.period = 250;\n            t.slash = 278;\n            t.zero = 500;\n            t.one = 500;\n            t.two = 500;\n            t.three = 500;\n            t.four = 500;\n            t.five = 500;\n            t.six = 500;\n            t.seven = 500;\n            t.eight = 500;\n            t.nine = 500;\n            t.colon = 278;\n            t.semicolon = 278;\n            t.less = 564;\n            t.equal = 564;\n            t.greater = 564;\n            t.question = 444;\n            t.at = 921;\n            t.A = 722;\n            t.B = 667;\n            t.C = 667;\n            t.D = 722;\n            t.E = 611;\n            t.F = 556;\n            t.G = 722;\n            t.H = 722;\n            t.I = 333;\n            t.J = 389;\n            t.K = 722;\n            t.L = 611;\n            t.M = 889;\n            t.N = 722;\n            t.O = 722;\n            t.P = 556;\n            t.Q = 722;\n            t.R = 667;\n            t.S = 556;\n            t.T = 611;\n            t.U = 722;\n            t.V = 722;\n            t.W = 944;\n            t.X = 722;\n            t.Y = 722;\n            t.Z = 611;\n            t.bracketleft = 333;\n            t.backslash = 278;\n            t.bracketright = 333;\n            t.asciicircum = 469;\n            t.underscore = 500;\n            t.quoteleft = 333;\n            t.a = 444;\n            t.b = 500;\n            t.c = 444;\n            t.d = 500;\n            t.e = 444;\n            t.f = 333;\n            t.g = 500;\n            t.h = 500;\n            t.i = 278;\n            t.j = 278;\n            t.k = 500;\n            t.l = 278;\n            t.m = 778;\n            t.n = 500;\n            t.o = 500;\n            t.p = 500;\n            t.q = 500;\n            t.r = 333;\n            t.s = 389;\n            t.t = 278;\n            t.u = 500;\n            t.v = 500;\n            t.w = 722;\n            t.x = 500;\n            t.y = 500;\n            t.z = 444;\n            t.braceleft = 480;\n            t.bar = 200;\n            t.braceright = 480;\n            t.asciitilde = 541;\n            t.exclamdown = 333;\n            t.cent = 500;\n            t.sterling = 500;\n            t.fraction = 167;\n            t.yen = 500;\n            t.florin = 500;\n            t.section = 500;\n            t.currency = 500;\n            t.quotesingle = 180;\n            t.quotedblleft = 444;\n            t.guillemotleft = 500;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 556;\n            t.fl = 556;\n            t.endash = 500;\n            t.dagger = 500;\n            t.daggerdbl = 500;\n            t.periodcentered = 250;\n            t.paragraph = 453;\n            t.bullet = 350;\n            t.quotesinglbase = 333;\n            t.quotedblbase = 444;\n            t.quotedblright = 444;\n            t.guillemotright = 500;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 444;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 889;\n            t.ordfeminine = 276;\n            t.Lslash = 611;\n            t.Oslash = 722;\n            t.OE = 889;\n            t.ordmasculine = 310;\n            t.ae = 667;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 500;\n            t.oe = 722;\n            t.germandbls = 500;\n            t.Idieresis = 333;\n            t.eacute = 444;\n            t.abreve = 444;\n            t.uhungarumlaut = 500;\n            t.ecaron = 444;\n            t.Ydieresis = 722;\n            t.divide = 564;\n            t.Yacute = 722;\n            t.Acircumflex = 722;\n            t.aacute = 444;\n            t.Ucircumflex = 722;\n            t.yacute = 500;\n            t.scommaaccent = 389;\n            t.ecircumflex = 444;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 444;\n            t.Uacute = 722;\n            t.uogonek = 500;\n            t.Edieresis = 611;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 760;\n            t.Emacron = 611;\n            t.ccaron = 444;\n            t.aring = 444;\n            t.Ncommaaccent = 722;\n            t.lacute = 278;\n            t.agrave = 444;\n            t.Tcommaaccent = 611;\n            t.Cacute = 667;\n            t.atilde = 444;\n            t.Edotaccent = 611;\n            t.scaron = 389;\n            t.scedilla = 389;\n            t.iacute = 278;\n            t.lozenge = 471;\n            t.Rcaron = 667;\n            t.Gcommaaccent = 722;\n            t.ucircumflex = 500;\n            t.acircumflex = 444;\n            t.Amacron = 722;\n            t.rcaron = 333;\n            t.ccedilla = 444;\n            t.Zdotaccent = 611;\n            t.Thorn = 556;\n            t.Omacron = 722;\n            t.Racute = 667;\n            t.Sacute = 556;\n            t.dcaron = 588;\n            t.Umacron = 722;\n            t.uring = 500;\n            t.threesuperior = 300;\n            t.Ograve = 722;\n            t.Agrave = 722;\n            t.Abreve = 722;\n            t.multiply = 564;\n            t.uacute = 500;\n            t.Tcaron = 611;\n            t.partialdiff = 476;\n            t.ydieresis = 500;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 611;\n            t.adieresis = 444;\n            t.edieresis = 444;\n            t.cacute = 444;\n            t.nacute = 500;\n            t.umacron = 500;\n            t.Ncaron = 722;\n            t.Iacute = 333;\n            t.plusminus = 564;\n            t.brokenbar = 200;\n            t.registered = 760;\n            t.Gbreve = 722;\n            t.Idotaccent = 333;\n            t.summation = 600;\n            t.Egrave = 611;\n            t.racute = 333;\n            t.omacron = 500;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 667;\n            t.lcommaaccent = 278;\n            t.tcaron = 326;\n            t.eogonek = 444;\n            t.Uogonek = 722;\n            t.Aacute = 722;\n            t.Adieresis = 722;\n            t.egrave = 444;\n            t.zacute = 444;\n            t.iogonek = 278;\n            t.Oacute = 722;\n            t.oacute = 500;\n            t.amacron = 444;\n            t.sacute = 389;\n            t.idieresis = 278;\n            t.Ocircumflex = 722;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 500;\n            t.twosuperior = 300;\n            t.Odieresis = 722;\n            t.mu = 500;\n            t.igrave = 278;\n            t.ohungarumlaut = 500;\n            t.Eogonek = 611;\n            t.dcroat = 500;\n            t.threequarters = 750;\n            t.Scedilla = 556;\n            t.lcaron = 344;\n            t.Kcommaaccent = 722;\n            t.Lacute = 611;\n            t.trademark = 980;\n            t.edotaccent = 444;\n            t.Igrave = 333;\n            t.Imacron = 333;\n            t.Lcaron = 611;\n            t.onehalf = 750;\n            t.lessequal = 549;\n            t.ocircumflex = 500;\n            t.ntilde = 500;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 611;\n            t.emacron = 444;\n            t.gbreve = 500;\n            t.onequarter = 750;\n            t.Scaron = 556;\n            t.Scommaaccent = 556;\n            t.Ohungarumlaut = 722;\n            t.degree = 400;\n            t.ograve = 500;\n            t.Ccaron = 667;\n            t.ugrave = 500;\n            t.radical = 453;\n            t.Dcaron = 722;\n            t.rcommaaccent = 333;\n            t.Ntilde = 722;\n            t.otilde = 500;\n            t.Rcommaaccent = 667;\n            t.Lcommaaccent = 611;\n            t.Atilde = 722;\n            t.Aogonek = 722;\n            t.Aring = 722;\n            t.Otilde = 722;\n            t.zdotaccent = 444;\n            t.Ecaron = 611;\n            t.Iogonek = 333;\n            t.kcommaaccent = 500;\n            t.minus = 564;\n            t.Icircumflex = 333;\n            t.ncaron = 500;\n            t.tcommaaccent = 278;\n            t.logicalnot = 564;\n            t.odieresis = 500;\n            t.udieresis = 500;\n            t.notequal = 549;\n            t.gcommaaccent = 500;\n            t.eth = 500;\n            t.zcaron = 444;\n            t.ncommaaccent = 500;\n            t.onesuperior = 300;\n            t.imacron = 278;\n            t.Euro = 500;\n          });\n          t[\"Times-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 250;\n            t.exclam = 333;\n            t.quotedbl = 555;\n            t.numbersign = 500;\n            t.dollar = 500;\n            t.percent = 1000;\n            t.ampersand = 833;\n            t.quoteright = 333;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 500;\n            t.plus = 570;\n            t.comma = 250;\n            t.hyphen = 333;\n            t.period = 250;\n            t.slash = 278;\n            t.zero = 500;\n            t.one = 500;\n            t.two = 500;\n            t.three = 500;\n            t.four = 500;\n            t.five = 500;\n            t.six = 500;\n            t.seven = 500;\n            t.eight = 500;\n            t.nine = 500;\n            t.colon = 333;\n            t.semicolon = 333;\n            t.less = 570;\n            t.equal = 570;\n            t.greater = 570;\n            t.question = 500;\n            t.at = 930;\n            t.A = 722;\n            t.B = 667;\n            t.C = 722;\n            t.D = 722;\n            t.E = 667;\n            t.F = 611;\n            t.G = 778;\n            t.H = 778;\n            t.I = 389;\n            t.J = 500;\n            t.K = 778;\n            t.L = 667;\n            t.M = 944;\n            t.N = 722;\n            t.O = 778;\n            t.P = 611;\n            t.Q = 778;\n            t.R = 722;\n            t.S = 556;\n            t.T = 667;\n            t.U = 722;\n            t.V = 722;\n            t.W = 1000;\n            t.X = 722;\n            t.Y = 722;\n            t.Z = 667;\n            t.bracketleft = 333;\n            t.backslash = 278;\n            t.bracketright = 333;\n            t.asciicircum = 581;\n            t.underscore = 500;\n            t.quoteleft = 333;\n            t.a = 500;\n            t.b = 556;\n            t.c = 444;\n            t.d = 556;\n            t.e = 444;\n            t.f = 333;\n            t.g = 500;\n            t.h = 556;\n            t.i = 278;\n            t.j = 333;\n            t.k = 556;\n            t.l = 278;\n            t.m = 833;\n            t.n = 556;\n            t.o = 500;\n            t.p = 556;\n            t.q = 556;\n            t.r = 444;\n            t.s = 389;\n            t.t = 333;\n            t.u = 556;\n            t.v = 500;\n            t.w = 722;\n            t.x = 500;\n            t.y = 500;\n            t.z = 444;\n            t.braceleft = 394;\n            t.bar = 220;\n            t.braceright = 394;\n            t.asciitilde = 520;\n            t.exclamdown = 333;\n            t.cent = 500;\n            t.sterling = 500;\n            t.fraction = 167;\n            t.yen = 500;\n            t.florin = 500;\n            t.section = 500;\n            t.currency = 500;\n            t.quotesingle = 278;\n            t.quotedblleft = 500;\n            t.guillemotleft = 500;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 556;\n            t.fl = 556;\n            t.endash = 500;\n            t.dagger = 500;\n            t.daggerdbl = 500;\n            t.periodcentered = 250;\n            t.paragraph = 540;\n            t.bullet = 350;\n            t.quotesinglbase = 333;\n            t.quotedblbase = 500;\n            t.quotedblright = 500;\n            t.guillemotright = 500;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 500;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 1000;\n            t.ordfeminine = 300;\n            t.Lslash = 667;\n            t.Oslash = 778;\n            t.OE = 1000;\n            t.ordmasculine = 330;\n            t.ae = 722;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 500;\n            t.oe = 722;\n            t.germandbls = 556;\n            t.Idieresis = 389;\n            t.eacute = 444;\n            t.abreve = 500;\n            t.uhungarumlaut = 556;\n            t.ecaron = 444;\n            t.Ydieresis = 722;\n            t.divide = 570;\n            t.Yacute = 722;\n            t.Acircumflex = 722;\n            t.aacute = 500;\n            t.Ucircumflex = 722;\n            t.yacute = 500;\n            t.scommaaccent = 389;\n            t.ecircumflex = 444;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 500;\n            t.Uacute = 722;\n            t.uogonek = 556;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 747;\n            t.Emacron = 667;\n            t.ccaron = 444;\n            t.aring = 500;\n            t.Ncommaaccent = 722;\n            t.lacute = 278;\n            t.agrave = 500;\n            t.Tcommaaccent = 667;\n            t.Cacute = 722;\n            t.atilde = 500;\n            t.Edotaccent = 667;\n            t.scaron = 389;\n            t.scedilla = 389;\n            t.iacute = 278;\n            t.lozenge = 494;\n            t.Rcaron = 722;\n            t.Gcommaaccent = 778;\n            t.ucircumflex = 556;\n            t.acircumflex = 500;\n            t.Amacron = 722;\n            t.rcaron = 444;\n            t.ccedilla = 444;\n            t.Zdotaccent = 667;\n            t.Thorn = 611;\n            t.Omacron = 778;\n            t.Racute = 722;\n            t.Sacute = 556;\n            t.dcaron = 672;\n            t.Umacron = 722;\n            t.uring = 556;\n            t.threesuperior = 300;\n            t.Ograve = 778;\n            t.Agrave = 722;\n            t.Abreve = 722;\n            t.multiply = 570;\n            t.uacute = 556;\n            t.Tcaron = 667;\n            t.partialdiff = 494;\n            t.ydieresis = 500;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 500;\n            t.edieresis = 444;\n            t.cacute = 444;\n            t.nacute = 556;\n            t.umacron = 556;\n            t.Ncaron = 722;\n            t.Iacute = 389;\n            t.plusminus = 570;\n            t.brokenbar = 220;\n            t.registered = 747;\n            t.Gbreve = 778;\n            t.Idotaccent = 389;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 444;\n            t.omacron = 500;\n            t.Zacute = 667;\n            t.Zcaron = 667;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 722;\n            t.lcommaaccent = 278;\n            t.tcaron = 416;\n            t.eogonek = 444;\n            t.Uogonek = 722;\n            t.Aacute = 722;\n            t.Adieresis = 722;\n            t.egrave = 444;\n            t.zacute = 444;\n            t.iogonek = 278;\n            t.Oacute = 778;\n            t.oacute = 500;\n            t.amacron = 500;\n            t.sacute = 389;\n            t.idieresis = 278;\n            t.Ocircumflex = 778;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 556;\n            t.twosuperior = 300;\n            t.Odieresis = 778;\n            t.mu = 556;\n            t.igrave = 278;\n            t.ohungarumlaut = 500;\n            t.Eogonek = 667;\n            t.dcroat = 556;\n            t.threequarters = 750;\n            t.Scedilla = 556;\n            t.lcaron = 394;\n            t.Kcommaaccent = 778;\n            t.Lacute = 667;\n            t.trademark = 1000;\n            t.edotaccent = 444;\n            t.Igrave = 389;\n            t.Imacron = 389;\n            t.Lcaron = 667;\n            t.onehalf = 750;\n            t.lessequal = 549;\n            t.ocircumflex = 500;\n            t.ntilde = 556;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 444;\n            t.gbreve = 500;\n            t.onequarter = 750;\n            t.Scaron = 556;\n            t.Scommaaccent = 556;\n            t.Ohungarumlaut = 778;\n            t.degree = 400;\n            t.ograve = 500;\n            t.Ccaron = 722;\n            t.ugrave = 556;\n            t.radical = 549;\n            t.Dcaron = 722;\n            t.rcommaaccent = 444;\n            t.Ntilde = 722;\n            t.otilde = 500;\n            t.Rcommaaccent = 722;\n            t.Lcommaaccent = 667;\n            t.Atilde = 722;\n            t.Aogonek = 722;\n            t.Aring = 722;\n            t.Otilde = 778;\n            t.zdotaccent = 444;\n            t.Ecaron = 667;\n            t.Iogonek = 389;\n            t.kcommaaccent = 556;\n            t.minus = 570;\n            t.Icircumflex = 389;\n            t.ncaron = 556;\n            t.tcommaaccent = 333;\n            t.logicalnot = 570;\n            t.odieresis = 500;\n            t.udieresis = 556;\n            t.notequal = 549;\n            t.gcommaaccent = 500;\n            t.eth = 500;\n            t.zcaron = 444;\n            t.ncommaaccent = 556;\n            t.onesuperior = 300;\n            t.imacron = 278;\n            t.Euro = 500;\n          });\n          t[\"Times-BoldItalic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 250;\n            t.exclam = 389;\n            t.quotedbl = 555;\n            t.numbersign = 500;\n            t.dollar = 500;\n            t.percent = 833;\n            t.ampersand = 778;\n            t.quoteright = 333;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 500;\n            t.plus = 570;\n            t.comma = 250;\n            t.hyphen = 333;\n            t.period = 250;\n            t.slash = 278;\n            t.zero = 500;\n            t.one = 500;\n            t.two = 500;\n            t.three = 500;\n            t.four = 500;\n            t.five = 500;\n            t.six = 500;\n            t.seven = 500;\n            t.eight = 500;\n            t.nine = 500;\n            t.colon = 333;\n            t.semicolon = 333;\n            t.less = 570;\n            t.equal = 570;\n            t.greater = 570;\n            t.question = 500;\n            t.at = 832;\n            t.A = 667;\n            t.B = 667;\n            t.C = 667;\n            t.D = 722;\n            t.E = 667;\n            t.F = 667;\n            t.G = 722;\n            t.H = 778;\n            t.I = 389;\n            t.J = 500;\n            t.K = 667;\n            t.L = 611;\n            t.M = 889;\n            t.N = 722;\n            t.O = 722;\n            t.P = 611;\n            t.Q = 722;\n            t.R = 667;\n            t.S = 556;\n            t.T = 611;\n            t.U = 722;\n            t.V = 667;\n            t.W = 889;\n            t.X = 667;\n            t.Y = 611;\n            t.Z = 611;\n            t.bracketleft = 333;\n            t.backslash = 278;\n            t.bracketright = 333;\n            t.asciicircum = 570;\n            t.underscore = 500;\n            t.quoteleft = 333;\n            t.a = 500;\n            t.b = 500;\n            t.c = 444;\n            t.d = 500;\n            t.e = 444;\n            t.f = 333;\n            t.g = 500;\n            t.h = 556;\n            t.i = 278;\n            t.j = 278;\n            t.k = 500;\n            t.l = 278;\n            t.m = 778;\n            t.n = 556;\n            t.o = 500;\n            t.p = 500;\n            t.q = 500;\n            t.r = 389;\n            t.s = 389;\n            t.t = 278;\n            t.u = 556;\n            t.v = 444;\n            t.w = 667;\n            t.x = 500;\n            t.y = 444;\n            t.z = 389;\n            t.braceleft = 348;\n            t.bar = 220;\n            t.braceright = 348;\n            t.asciitilde = 570;\n            t.exclamdown = 389;\n            t.cent = 500;\n            t.sterling = 500;\n            t.fraction = 167;\n            t.yen = 500;\n            t.florin = 500;\n            t.section = 500;\n            t.currency = 500;\n            t.quotesingle = 278;\n            t.quotedblleft = 500;\n            t.guillemotleft = 500;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 556;\n            t.fl = 556;\n            t.endash = 500;\n            t.dagger = 500;\n            t.daggerdbl = 500;\n            t.periodcentered = 250;\n            t.paragraph = 500;\n            t.bullet = 350;\n            t.quotesinglbase = 333;\n            t.quotedblbase = 500;\n            t.quotedblright = 500;\n            t.guillemotright = 500;\n            t.ellipsis = 1000;\n            t.perthousand = 1000;\n            t.questiondown = 500;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 1000;\n            t.AE = 944;\n            t.ordfeminine = 266;\n            t.Lslash = 611;\n            t.Oslash = 722;\n            t.OE = 944;\n            t.ordmasculine = 300;\n            t.ae = 722;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 500;\n            t.oe = 722;\n            t.germandbls = 500;\n            t.Idieresis = 389;\n            t.eacute = 444;\n            t.abreve = 500;\n            t.uhungarumlaut = 556;\n            t.ecaron = 444;\n            t.Ydieresis = 611;\n            t.divide = 570;\n            t.Yacute = 611;\n            t.Acircumflex = 667;\n            t.aacute = 500;\n            t.Ucircumflex = 722;\n            t.yacute = 444;\n            t.scommaaccent = 389;\n            t.ecircumflex = 444;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 500;\n            t.Uacute = 722;\n            t.uogonek = 556;\n            t.Edieresis = 667;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 747;\n            t.Emacron = 667;\n            t.ccaron = 444;\n            t.aring = 500;\n            t.Ncommaaccent = 722;\n            t.lacute = 278;\n            t.agrave = 500;\n            t.Tcommaaccent = 611;\n            t.Cacute = 667;\n            t.atilde = 500;\n            t.Edotaccent = 667;\n            t.scaron = 389;\n            t.scedilla = 389;\n            t.iacute = 278;\n            t.lozenge = 494;\n            t.Rcaron = 667;\n            t.Gcommaaccent = 722;\n            t.ucircumflex = 556;\n            t.acircumflex = 500;\n            t.Amacron = 667;\n            t.rcaron = 389;\n            t.ccedilla = 444;\n            t.Zdotaccent = 611;\n            t.Thorn = 611;\n            t.Omacron = 722;\n            t.Racute = 667;\n            t.Sacute = 556;\n            t.dcaron = 608;\n            t.Umacron = 722;\n            t.uring = 556;\n            t.threesuperior = 300;\n            t.Ograve = 722;\n            t.Agrave = 667;\n            t.Abreve = 667;\n            t.multiply = 570;\n            t.uacute = 556;\n            t.Tcaron = 611;\n            t.partialdiff = 494;\n            t.ydieresis = 444;\n            t.Nacute = 722;\n            t.icircumflex = 278;\n            t.Ecircumflex = 667;\n            t.adieresis = 500;\n            t.edieresis = 444;\n            t.cacute = 444;\n            t.nacute = 556;\n            t.umacron = 556;\n            t.Ncaron = 722;\n            t.Iacute = 389;\n            t.plusminus = 570;\n            t.brokenbar = 220;\n            t.registered = 747;\n            t.Gbreve = 722;\n            t.Idotaccent = 389;\n            t.summation = 600;\n            t.Egrave = 667;\n            t.racute = 389;\n            t.omacron = 500;\n            t.Zacute = 611;\n            t.Zcaron = 611;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 667;\n            t.lcommaaccent = 278;\n            t.tcaron = 366;\n            t.eogonek = 444;\n            t.Uogonek = 722;\n            t.Aacute = 667;\n            t.Adieresis = 667;\n            t.egrave = 444;\n            t.zacute = 389;\n            t.iogonek = 278;\n            t.Oacute = 722;\n            t.oacute = 500;\n            t.amacron = 500;\n            t.sacute = 389;\n            t.idieresis = 278;\n            t.Ocircumflex = 722;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 500;\n            t.twosuperior = 300;\n            t.Odieresis = 722;\n            t.mu = 576;\n            t.igrave = 278;\n            t.ohungarumlaut = 500;\n            t.Eogonek = 667;\n            t.dcroat = 500;\n            t.threequarters = 750;\n            t.Scedilla = 556;\n            t.lcaron = 382;\n            t.Kcommaaccent = 667;\n            t.Lacute = 611;\n            t.trademark = 1000;\n            t.edotaccent = 444;\n            t.Igrave = 389;\n            t.Imacron = 389;\n            t.Lcaron = 611;\n            t.onehalf = 750;\n            t.lessequal = 549;\n            t.ocircumflex = 500;\n            t.ntilde = 556;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 667;\n            t.emacron = 444;\n            t.gbreve = 500;\n            t.onequarter = 750;\n            t.Scaron = 556;\n            t.Scommaaccent = 556;\n            t.Ohungarumlaut = 722;\n            t.degree = 400;\n            t.ograve = 500;\n            t.Ccaron = 667;\n            t.ugrave = 556;\n            t.radical = 549;\n            t.Dcaron = 722;\n            t.rcommaaccent = 389;\n            t.Ntilde = 722;\n            t.otilde = 500;\n            t.Rcommaaccent = 667;\n            t.Lcommaaccent = 611;\n            t.Atilde = 667;\n            t.Aogonek = 667;\n            t.Aring = 667;\n            t.Otilde = 722;\n            t.zdotaccent = 389;\n            t.Ecaron = 667;\n            t.Iogonek = 389;\n            t.kcommaaccent = 500;\n            t.minus = 606;\n            t.Icircumflex = 389;\n            t.ncaron = 556;\n            t.tcommaaccent = 278;\n            t.logicalnot = 606;\n            t.odieresis = 500;\n            t.udieresis = 556;\n            t.notequal = 549;\n            t.gcommaaccent = 500;\n            t.eth = 500;\n            t.zcaron = 389;\n            t.ncommaaccent = 556;\n            t.onesuperior = 300;\n            t.imacron = 278;\n            t.Euro = 500;\n          });\n          t[\"Times-Italic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 250;\n            t.exclam = 333;\n            t.quotedbl = 420;\n            t.numbersign = 500;\n            t.dollar = 500;\n            t.percent = 833;\n            t.ampersand = 778;\n            t.quoteright = 333;\n            t.parenleft = 333;\n            t.parenright = 333;\n            t.asterisk = 500;\n            t.plus = 675;\n            t.comma = 250;\n            t.hyphen = 333;\n            t.period = 250;\n            t.slash = 278;\n            t.zero = 500;\n            t.one = 500;\n            t.two = 500;\n            t.three = 500;\n            t.four = 500;\n            t.five = 500;\n            t.six = 500;\n            t.seven = 500;\n            t.eight = 500;\n            t.nine = 500;\n            t.colon = 333;\n            t.semicolon = 333;\n            t.less = 675;\n            t.equal = 675;\n            t.greater = 675;\n            t.question = 500;\n            t.at = 920;\n            t.A = 611;\n            t.B = 611;\n            t.C = 667;\n            t.D = 722;\n            t.E = 611;\n            t.F = 611;\n            t.G = 722;\n            t.H = 722;\n            t.I = 333;\n            t.J = 444;\n            t.K = 667;\n            t.L = 556;\n            t.M = 833;\n            t.N = 667;\n            t.O = 722;\n            t.P = 611;\n            t.Q = 722;\n            t.R = 611;\n            t.S = 500;\n            t.T = 556;\n            t.U = 722;\n            t.V = 611;\n            t.W = 833;\n            t.X = 611;\n            t.Y = 556;\n            t.Z = 556;\n            t.bracketleft = 389;\n            t.backslash = 278;\n            t.bracketright = 389;\n            t.asciicircum = 422;\n            t.underscore = 500;\n            t.quoteleft = 333;\n            t.a = 500;\n            t.b = 500;\n            t.c = 444;\n            t.d = 500;\n            t.e = 444;\n            t.f = 278;\n            t.g = 500;\n            t.h = 500;\n            t.i = 278;\n            t.j = 278;\n            t.k = 444;\n            t.l = 278;\n            t.m = 722;\n            t.n = 500;\n            t.o = 500;\n            t.p = 500;\n            t.q = 500;\n            t.r = 389;\n            t.s = 389;\n            t.t = 278;\n            t.u = 500;\n            t.v = 444;\n            t.w = 667;\n            t.x = 444;\n            t.y = 444;\n            t.z = 389;\n            t.braceleft = 400;\n            t.bar = 275;\n            t.braceright = 400;\n            t.asciitilde = 541;\n            t.exclamdown = 389;\n            t.cent = 500;\n            t.sterling = 500;\n            t.fraction = 167;\n            t.yen = 500;\n            t.florin = 500;\n            t.section = 500;\n            t.currency = 500;\n            t.quotesingle = 214;\n            t.quotedblleft = 556;\n            t.guillemotleft = 500;\n            t.guilsinglleft = 333;\n            t.guilsinglright = 333;\n            t.fi = 500;\n            t.fl = 500;\n            t.endash = 500;\n            t.dagger = 500;\n            t.daggerdbl = 500;\n            t.periodcentered = 250;\n            t.paragraph = 523;\n            t.bullet = 350;\n            t.quotesinglbase = 333;\n            t.quotedblbase = 556;\n            t.quotedblright = 556;\n            t.guillemotright = 500;\n            t.ellipsis = 889;\n            t.perthousand = 1000;\n            t.questiondown = 500;\n            t.grave = 333;\n            t.acute = 333;\n            t.circumflex = 333;\n            t.tilde = 333;\n            t.macron = 333;\n            t.breve = 333;\n            t.dotaccent = 333;\n            t.dieresis = 333;\n            t.ring = 333;\n            t.cedilla = 333;\n            t.hungarumlaut = 333;\n            t.ogonek = 333;\n            t.caron = 333;\n            t.emdash = 889;\n            t.AE = 889;\n            t.ordfeminine = 276;\n            t.Lslash = 556;\n            t.Oslash = 722;\n            t.OE = 944;\n            t.ordmasculine = 310;\n            t.ae = 667;\n            t.dotlessi = 278;\n            t.lslash = 278;\n            t.oslash = 500;\n            t.oe = 667;\n            t.germandbls = 500;\n            t.Idieresis = 333;\n            t.eacute = 444;\n            t.abreve = 500;\n            t.uhungarumlaut = 500;\n            t.ecaron = 444;\n            t.Ydieresis = 556;\n            t.divide = 675;\n            t.Yacute = 556;\n            t.Acircumflex = 611;\n            t.aacute = 500;\n            t.Ucircumflex = 722;\n            t.yacute = 444;\n            t.scommaaccent = 389;\n            t.ecircumflex = 444;\n            t.Uring = 722;\n            t.Udieresis = 722;\n            t.aogonek = 500;\n            t.Uacute = 722;\n            t.uogonek = 500;\n            t.Edieresis = 611;\n            t.Dcroat = 722;\n            t.commaaccent = 250;\n            t.copyright = 760;\n            t.Emacron = 611;\n            t.ccaron = 444;\n            t.aring = 500;\n            t.Ncommaaccent = 667;\n            t.lacute = 278;\n            t.agrave = 500;\n            t.Tcommaaccent = 556;\n            t.Cacute = 667;\n            t.atilde = 500;\n            t.Edotaccent = 611;\n            t.scaron = 389;\n            t.scedilla = 389;\n            t.iacute = 278;\n            t.lozenge = 471;\n            t.Rcaron = 611;\n            t.Gcommaaccent = 722;\n            t.ucircumflex = 500;\n            t.acircumflex = 500;\n            t.Amacron = 611;\n            t.rcaron = 389;\n            t.ccedilla = 444;\n            t.Zdotaccent = 556;\n            t.Thorn = 611;\n            t.Omacron = 722;\n            t.Racute = 611;\n            t.Sacute = 500;\n            t.dcaron = 544;\n            t.Umacron = 722;\n            t.uring = 500;\n            t.threesuperior = 300;\n            t.Ograve = 722;\n            t.Agrave = 611;\n            t.Abreve = 611;\n            t.multiply = 675;\n            t.uacute = 500;\n            t.Tcaron = 556;\n            t.partialdiff = 476;\n            t.ydieresis = 444;\n            t.Nacute = 667;\n            t.icircumflex = 278;\n            t.Ecircumflex = 611;\n            t.adieresis = 500;\n            t.edieresis = 444;\n            t.cacute = 444;\n            t.nacute = 500;\n            t.umacron = 500;\n            t.Ncaron = 667;\n            t.Iacute = 333;\n            t.plusminus = 675;\n            t.brokenbar = 275;\n            t.registered = 760;\n            t.Gbreve = 722;\n            t.Idotaccent = 333;\n            t.summation = 600;\n            t.Egrave = 611;\n            t.racute = 389;\n            t.omacron = 500;\n            t.Zacute = 556;\n            t.Zcaron = 556;\n            t.greaterequal = 549;\n            t.Eth = 722;\n            t.Ccedilla = 667;\n            t.lcommaaccent = 278;\n            t.tcaron = 300;\n            t.eogonek = 444;\n            t.Uogonek = 722;\n            t.Aacute = 611;\n            t.Adieresis = 611;\n            t.egrave = 444;\n            t.zacute = 389;\n            t.iogonek = 278;\n            t.Oacute = 722;\n            t.oacute = 500;\n            t.amacron = 500;\n            t.sacute = 389;\n            t.idieresis = 278;\n            t.Ocircumflex = 722;\n            t.Ugrave = 722;\n            t.Delta = 612;\n            t.thorn = 500;\n            t.twosuperior = 300;\n            t.Odieresis = 722;\n            t.mu = 500;\n            t.igrave = 278;\n            t.ohungarumlaut = 500;\n            t.Eogonek = 611;\n            t.dcroat = 500;\n            t.threequarters = 750;\n            t.Scedilla = 500;\n            t.lcaron = 300;\n            t.Kcommaaccent = 667;\n            t.Lacute = 556;\n            t.trademark = 980;\n            t.edotaccent = 444;\n            t.Igrave = 333;\n            t.Imacron = 333;\n            t.Lcaron = 611;\n            t.onehalf = 750;\n            t.lessequal = 549;\n            t.ocircumflex = 500;\n            t.ntilde = 500;\n            t.Uhungarumlaut = 722;\n            t.Eacute = 611;\n            t.emacron = 444;\n            t.gbreve = 500;\n            t.onequarter = 750;\n            t.Scaron = 500;\n            t.Scommaaccent = 500;\n            t.Ohungarumlaut = 722;\n            t.degree = 400;\n            t.ograve = 500;\n            t.Ccaron = 667;\n            t.ugrave = 500;\n            t.radical = 453;\n            t.Dcaron = 722;\n            t.rcommaaccent = 389;\n            t.Ntilde = 667;\n            t.otilde = 500;\n            t.Rcommaaccent = 611;\n            t.Lcommaaccent = 556;\n            t.Atilde = 611;\n            t.Aogonek = 611;\n            t.Aring = 611;\n            t.Otilde = 722;\n            t.zdotaccent = 389;\n            t.Ecaron = 611;\n            t.Iogonek = 333;\n            t.kcommaaccent = 444;\n            t.minus = 675;\n            t.Icircumflex = 333;\n            t.ncaron = 500;\n            t.tcommaaccent = 278;\n            t.logicalnot = 675;\n            t.odieresis = 500;\n            t.udieresis = 500;\n            t.notequal = 549;\n            t.gcommaaccent = 500;\n            t.eth = 500;\n            t.zcaron = 389;\n            t.ncommaaccent = 500;\n            t.onesuperior = 300;\n            t.imacron = 278;\n            t.Euro = 500;\n          });\n          t.ZapfDingbats = (0, _core_utils.getLookupTableFactory)(function (t) {\n            t.space = 278;\n            t.a1 = 974;\n            t.a2 = 961;\n            t.a202 = 974;\n            t.a3 = 980;\n            t.a4 = 719;\n            t.a5 = 789;\n            t.a119 = 790;\n            t.a118 = 791;\n            t.a117 = 690;\n            t.a11 = 960;\n            t.a12 = 939;\n            t.a13 = 549;\n            t.a14 = 855;\n            t.a15 = 911;\n            t.a16 = 933;\n            t.a105 = 911;\n            t.a17 = 945;\n            t.a18 = 974;\n            t.a19 = 755;\n            t.a20 = 846;\n            t.a21 = 762;\n            t.a22 = 761;\n            t.a23 = 571;\n            t.a24 = 677;\n            t.a25 = 763;\n            t.a26 = 760;\n            t.a27 = 759;\n            t.a28 = 754;\n            t.a6 = 494;\n            t.a7 = 552;\n            t.a8 = 537;\n            t.a9 = 577;\n            t.a10 = 692;\n            t.a29 = 786;\n            t.a30 = 788;\n            t.a31 = 788;\n            t.a32 = 790;\n            t.a33 = 793;\n            t.a34 = 794;\n            t.a35 = 816;\n            t.a36 = 823;\n            t.a37 = 789;\n            t.a38 = 841;\n            t.a39 = 823;\n            t.a40 = 833;\n            t.a41 = 816;\n            t.a42 = 831;\n            t.a43 = 923;\n            t.a44 = 744;\n            t.a45 = 723;\n            t.a46 = 749;\n            t.a47 = 790;\n            t.a48 = 792;\n            t.a49 = 695;\n            t.a50 = 776;\n            t.a51 = 768;\n            t.a52 = 792;\n            t.a53 = 759;\n            t.a54 = 707;\n            t.a55 = 708;\n            t.a56 = 682;\n            t.a57 = 701;\n            t.a58 = 826;\n            t.a59 = 815;\n            t.a60 = 789;\n            t.a61 = 789;\n            t.a62 = 707;\n            t.a63 = 687;\n            t.a64 = 696;\n            t.a65 = 689;\n            t.a66 = 786;\n            t.a67 = 787;\n            t.a68 = 713;\n            t.a69 = 791;\n            t.a70 = 785;\n            t.a71 = 791;\n            t.a72 = 873;\n            t.a73 = 761;\n            t.a74 = 762;\n            t.a203 = 762;\n            t.a75 = 759;\n            t.a204 = 759;\n            t.a76 = 892;\n            t.a77 = 892;\n            t.a78 = 788;\n            t.a79 = 784;\n            t.a81 = 438;\n            t.a82 = 138;\n            t.a83 = 277;\n            t.a84 = 415;\n            t.a97 = 392;\n            t.a98 = 392;\n            t.a99 = 668;\n            t.a100 = 668;\n            t.a89 = 390;\n            t.a90 = 390;\n            t.a93 = 317;\n            t.a94 = 317;\n            t.a91 = 276;\n            t.a92 = 276;\n            t.a205 = 509;\n            t.a85 = 509;\n            t.a206 = 410;\n            t.a86 = 410;\n            t.a87 = 234;\n            t.a88 = 234;\n            t.a95 = 334;\n            t.a96 = 334;\n            t.a101 = 732;\n            t.a102 = 544;\n            t.a103 = 544;\n            t.a104 = 910;\n            t.a106 = 667;\n            t.a107 = 760;\n            t.a108 = 760;\n            t.a112 = 776;\n            t.a111 = 595;\n            t.a110 = 694;\n            t.a109 = 626;\n            t.a120 = 788;\n            t.a121 = 788;\n            t.a122 = 788;\n            t.a123 = 788;\n            t.a124 = 788;\n            t.a125 = 788;\n            t.a126 = 788;\n            t.a127 = 788;\n            t.a128 = 788;\n            t.a129 = 788;\n            t.a130 = 788;\n            t.a131 = 788;\n            t.a132 = 788;\n            t.a133 = 788;\n            t.a134 = 788;\n            t.a135 = 788;\n            t.a136 = 788;\n            t.a137 = 788;\n            t.a138 = 788;\n            t.a139 = 788;\n            t.a140 = 788;\n            t.a141 = 788;\n            t.a142 = 788;\n            t.a143 = 788;\n            t.a144 = 788;\n            t.a145 = 788;\n            t.a146 = 788;\n            t.a147 = 788;\n            t.a148 = 788;\n            t.a149 = 788;\n            t.a150 = 788;\n            t.a151 = 788;\n            t.a152 = 788;\n            t.a153 = 788;\n            t.a154 = 788;\n            t.a155 = 788;\n            t.a156 = 788;\n            t.a157 = 788;\n            t.a158 = 788;\n            t.a159 = 788;\n            t.a160 = 894;\n            t.a161 = 838;\n            t.a163 = 1016;\n            t.a164 = 458;\n            t.a196 = 748;\n            t.a165 = 924;\n            t.a192 = 748;\n            t.a166 = 918;\n            t.a167 = 927;\n            t.a168 = 928;\n            t.a169 = 928;\n            t.a170 = 834;\n            t.a171 = 873;\n            t.a172 = 828;\n            t.a173 = 924;\n            t.a162 = 924;\n            t.a174 = 917;\n            t.a175 = 930;\n            t.a176 = 931;\n            t.a177 = 463;\n            t.a178 = 883;\n            t.a179 = 836;\n            t.a193 = 836;\n            t.a180 = 867;\n            t.a199 = 867;\n            t.a181 = 696;\n            t.a200 = 696;\n            t.a182 = 874;\n            t.a201 = 874;\n            t.a183 = 760;\n            t.a184 = 946;\n            t.a197 = 771;\n            t.a185 = 865;\n            t.a194 = 771;\n            t.a198 = 888;\n            t.a186 = 967;\n            t.a195 = 888;\n            t.a187 = 831;\n            t.a188 = 873;\n            t.a189 = 927;\n            t.a190 = 970;\n            t.a191 = 918;\n          });\n        });\n        exports.getMetrics = getMetrics;\n        var getFontBasicMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t.Courier = {\n            ascent: 629,\n            descent: -157,\n            capHeight: 562,\n            xHeight: -426\n          };\n          t[\"Courier-Bold\"] = {\n            ascent: 629,\n            descent: -157,\n            capHeight: 562,\n            xHeight: 439\n          };\n          t[\"Courier-Oblique\"] = {\n            ascent: 629,\n            descent: -157,\n            capHeight: 562,\n            xHeight: 426\n          };\n          t[\"Courier-BoldOblique\"] = {\n            ascent: 629,\n            descent: -157,\n            capHeight: 562,\n            xHeight: 426\n          };\n          t.Helvetica = {\n            ascent: 718,\n            descent: -207,\n            capHeight: 718,\n            xHeight: 523\n          };\n          t[\"Helvetica-Bold\"] = {\n            ascent: 718,\n            descent: -207,\n            capHeight: 718,\n            xHeight: 532\n          };\n          t[\"Helvetica-Oblique\"] = {\n            ascent: 718,\n            descent: -207,\n            capHeight: 718,\n            xHeight: 523\n          };\n          t[\"Helvetica-BoldOblique\"] = {\n            ascent: 718,\n            descent: -207,\n            capHeight: 718,\n            xHeight: 532\n          };\n          t[\"Times-Roman\"] = {\n            ascent: 683,\n            descent: -217,\n            capHeight: 662,\n            xHeight: 450\n          };\n          t[\"Times-Bold\"] = {\n            ascent: 683,\n            descent: -217,\n            capHeight: 676,\n            xHeight: 461\n          };\n          t[\"Times-Italic\"] = {\n            ascent: 683,\n            descent: -217,\n            capHeight: 653,\n            xHeight: 441\n          };\n          t[\"Times-BoldItalic\"] = {\n            ascent: 683,\n            descent: -217,\n            capHeight: 669,\n            xHeight: 462\n          };\n          t.Symbol = {\n            ascent: Math.NaN,\n            descent: Math.NaN,\n            capHeight: Math.NaN,\n            xHeight: Math.NaN\n          };\n          t.ZapfDingbats = {\n            ascent: Math.NaN,\n            descent: Math.NaN,\n            capHeight: Math.NaN,\n            xHeight: Math.NaN\n          };\n        });\n        exports.getFontBasicMetrics = getFontBasicMetrics;\n\n        /***/\n      }, /* 46 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlyfTable = void 0;\n        var ON_CURVE_POINT = 1 << 0;\n        var X_SHORT_VECTOR = 1 << 1;\n        var Y_SHORT_VECTOR = 1 << 2;\n        var REPEAT_FLAG = 1 << 3;\n        var X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR = 1 << 4;\n        var Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR = 1 << 5;\n        var OVERLAP_SIMPLE = 1 << 6;\n        var ARG_1_AND_2_ARE_WORDS = 1 << 0;\n        var ARGS_ARE_XY_VALUES = 1 << 1;\n        var WE_HAVE_A_SCALE = 1 << 3;\n        var MORE_COMPONENTS = 1 << 5;\n        var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\n        var WE_HAVE_A_TWO_BY_TWO = 1 << 7;\n        var WE_HAVE_INSTRUCTIONS = 1 << 8;\n        var GlyfTable = /*#__PURE__*/function () {\n          function GlyfTable(_ref59) {\n            var glyfTable = _ref59.glyfTable,\n              isGlyphLocationsLong = _ref59.isGlyphLocationsLong,\n              locaTable = _ref59.locaTable,\n              numGlyphs = _ref59.numGlyphs;\n            _classCallCheck(this, GlyfTable);\n            this.glyphs = [];\n            var loca = new DataView(locaTable.buffer, locaTable.byteOffset, locaTable.byteLength);\n            var glyf = new DataView(glyfTable.buffer, glyfTable.byteOffset, glyfTable.byteLength);\n            var offsetSize = isGlyphLocationsLong ? 4 : 2;\n            var prev = isGlyphLocationsLong ? loca.getUint32(0) : 2 * loca.getUint16(0);\n            var pos = 0;\n            for (var i = 0; i < numGlyphs; i++) {\n              pos += offsetSize;\n              var next = isGlyphLocationsLong ? loca.getUint32(pos) : 2 * loca.getUint16(pos);\n              if (next === prev) {\n                this.glyphs.push(new Glyph({}));\n                continue;\n              }\n              var glyph = Glyph.parse(prev, glyf);\n              this.glyphs.push(glyph);\n              prev = next;\n            }\n          }\n          _createClass(GlyfTable, [{\n            key: \"getSize\",\n            value: function getSize() {\n              return this.glyphs.reduce(function (a, g) {\n                var size = g.getSize();\n                return a + (size + 3 & ~3);\n              }, 0);\n            }\n          }, {\n            key: \"write\",\n            value: function write() {\n              var totalSize = this.getSize();\n              var glyfTable = new DataView(new ArrayBuffer(totalSize));\n              var isLocationLong = totalSize > 0x1fffe;\n              var offsetSize = isLocationLong ? 4 : 2;\n              var locaTable = new DataView(new ArrayBuffer((this.glyphs.length + 1) * offsetSize));\n              if (isLocationLong) {\n                locaTable.setUint32(0, 0);\n              } else {\n                locaTable.setUint16(0, 0);\n              }\n              var pos = 0;\n              var locaIndex = 0;\n              var _iterator82 = _createForOfIteratorHelper(this.glyphs),\n                _step82;\n              try {\n                for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {\n                  var glyph = _step82.value;\n                  pos += glyph.write(pos, glyfTable);\n                  pos = pos + 3 & ~3;\n                  locaIndex += offsetSize;\n                  if (isLocationLong) {\n                    locaTable.setUint32(locaIndex, pos);\n                  } else {\n                    locaTable.setUint16(locaIndex, pos >> 1);\n                  }\n                }\n              } catch (err) {\n                _iterator82.e(err);\n              } finally {\n                _iterator82.f();\n              }\n              return {\n                isLocationLong: isLocationLong,\n                loca: new Uint8Array(locaTable.buffer),\n                glyf: new Uint8Array(glyfTable.buffer)\n              };\n            }\n          }, {\n            key: \"scale\",\n            value: function scale(factors) {\n              for (var i = 0, ii = this.glyphs.length; i < ii; i++) {\n                this.glyphs[i].scale(factors[i]);\n              }\n            }\n          }]);\n          return GlyfTable;\n        }();\n        exports.GlyfTable = GlyfTable;\n        var Glyph = /*#__PURE__*/function () {\n          function Glyph(_ref60) {\n            var _ref60$header = _ref60.header,\n              header = _ref60$header === void 0 ? null : _ref60$header,\n              _ref60$simple = _ref60.simple,\n              simple = _ref60$simple === void 0 ? null : _ref60$simple,\n              _ref60$composites = _ref60.composites,\n              composites = _ref60$composites === void 0 ? null : _ref60$composites;\n            _classCallCheck(this, Glyph);\n            this.header = header;\n            this.simple = simple;\n            this.composites = composites;\n          }\n          _createClass(Glyph, [{\n            key: \"getSize\",\n            value: function getSize() {\n              if (!this.header) {\n                return 0;\n              }\n              var size = this.simple ? this.simple.getSize() : this.composites.reduce(function (a, c) {\n                return a + c.getSize();\n              }, 0);\n              return this.header.getSize() + size;\n            }\n          }, {\n            key: \"write\",\n            value: function write(pos, buf) {\n              if (!this.header) {\n                return 0;\n              }\n              var spos = pos;\n              pos += this.header.write(pos, buf);\n              if (this.simple) {\n                pos += this.simple.write(pos, buf);\n              } else {\n                var _iterator83 = _createForOfIteratorHelper(this.composites),\n                  _step83;\n                try {\n                  for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {\n                    var composite = _step83.value;\n                    pos += composite.write(pos, buf);\n                  }\n                } catch (err) {\n                  _iterator83.e(err);\n                } finally {\n                  _iterator83.f();\n                }\n              }\n              return pos - spos;\n            }\n          }, {\n            key: \"scale\",\n            value: function scale(factor) {\n              if (!this.header) {\n                return;\n              }\n              var xMiddle = (this.header.xMin + this.header.xMax) / 2;\n              this.header.scale(xMiddle, factor);\n              if (this.simple) {\n                this.simple.scale(xMiddle, factor);\n              } else {\n                var _iterator84 = _createForOfIteratorHelper(this.composites),\n                  _step84;\n                try {\n                  for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {\n                    var composite = _step84.value;\n                    composite.scale(xMiddle, factor);\n                  }\n                } catch (err) {\n                  _iterator84.e(err);\n                } finally {\n                  _iterator84.f();\n                }\n              }\n            }\n          }], [{\n            key: \"parse\",\n            value: function parse(pos, glyf) {\n              var _GlyphHeader$parse = GlyphHeader.parse(pos, glyf),\n                _GlyphHeader$parse2 = _slicedToArray(_GlyphHeader$parse, 2),\n                read = _GlyphHeader$parse2[0],\n                header = _GlyphHeader$parse2[1];\n              pos += read;\n              if (header.numberOfContours < 0) {\n                var composites = [];\n                while (true) {\n                  var _CompositeGlyph$parse = CompositeGlyph.parse(pos, glyf),\n                    _CompositeGlyph$parse2 = _slicedToArray(_CompositeGlyph$parse, 2),\n                    n = _CompositeGlyph$parse2[0],\n                    composite = _CompositeGlyph$parse2[1];\n                  pos += n;\n                  composites.push(composite);\n                  if (!(composite.flags & MORE_COMPONENTS)) {\n                    break;\n                  }\n                }\n                return new Glyph({\n                  header: header,\n                  composites: composites\n                });\n              }\n              var simple = SimpleGlyph.parse(pos, glyf, header.numberOfContours);\n              return new Glyph({\n                header: header,\n                simple: simple\n              });\n            }\n          }]);\n          return Glyph;\n        }();\n        var GlyphHeader = /*#__PURE__*/function () {\n          function GlyphHeader(_ref61) {\n            var numberOfContours = _ref61.numberOfContours,\n              xMin = _ref61.xMin,\n              yMin = _ref61.yMin,\n              xMax = _ref61.xMax,\n              yMax = _ref61.yMax;\n            _classCallCheck(this, GlyphHeader);\n            this.numberOfContours = numberOfContours;\n            this.xMin = xMin;\n            this.yMin = yMin;\n            this.xMax = xMax;\n            this.yMax = yMax;\n          }\n          _createClass(GlyphHeader, [{\n            key: \"getSize\",\n            value: function getSize() {\n              return 10;\n            }\n          }, {\n            key: \"write\",\n            value: function write(pos, buf) {\n              buf.setInt16(pos, this.numberOfContours);\n              buf.setInt16(pos + 2, this.xMin);\n              buf.setInt16(pos + 4, this.yMin);\n              buf.setInt16(pos + 6, this.xMax);\n              buf.setInt16(pos + 8, this.yMax);\n              return 10;\n            }\n          }, {\n            key: \"scale\",\n            value: function scale(x, factor) {\n              this.xMin = Math.round(x + (this.xMin - x) * factor);\n              this.xMax = Math.round(x + (this.xMax - x) * factor);\n            }\n          }], [{\n            key: \"parse\",\n            value: function parse(pos, glyf) {\n              return [10, new GlyphHeader({\n                numberOfContours: glyf.getInt16(pos),\n                xMin: glyf.getInt16(pos + 2),\n                yMin: glyf.getInt16(pos + 4),\n                xMax: glyf.getInt16(pos + 6),\n                yMax: glyf.getInt16(pos + 8)\n              })];\n            }\n          }]);\n          return GlyphHeader;\n        }();\n        var Contour = function Contour(_ref62) {\n          var flags = _ref62.flags,\n            xCoordinates = _ref62.xCoordinates,\n            yCoordinates = _ref62.yCoordinates;\n          _classCallCheck(this, Contour);\n          this.xCoordinates = xCoordinates;\n          this.yCoordinates = yCoordinates;\n          this.flags = flags;\n        };\n        var SimpleGlyph = /*#__PURE__*/function () {\n          function SimpleGlyph(_ref63) {\n            var contours = _ref63.contours,\n              instructions = _ref63.instructions;\n            _classCallCheck(this, SimpleGlyph);\n            this.contours = contours;\n            this.instructions = instructions;\n          }\n          _createClass(SimpleGlyph, [{\n            key: \"getSize\",\n            value: function getSize() {\n              var size = this.contours.length * 2 + 2 + this.instructions.length;\n              var lastX = 0;\n              var lastY = 0;\n              var _iterator85 = _createForOfIteratorHelper(this.contours),\n                _step85;\n              try {\n                for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {\n                  var contour = _step85.value;\n                  size += contour.flags.length;\n                  for (var i = 0, ii = contour.xCoordinates.length; i < ii; i++) {\n                    var x = contour.xCoordinates[i];\n                    var y = contour.yCoordinates[i];\n                    var abs = Math.abs(x - lastX);\n                    if (abs > 255) {\n                      size += 2;\n                    } else if (abs > 0) {\n                      size += 1;\n                    }\n                    lastX = x;\n                    abs = Math.abs(y - lastY);\n                    if (abs > 255) {\n                      size += 2;\n                    } else if (abs > 0) {\n                      size += 1;\n                    }\n                    lastY = y;\n                  }\n                }\n              } catch (err) {\n                _iterator85.e(err);\n              } finally {\n                _iterator85.f();\n              }\n              return size;\n            }\n          }, {\n            key: \"write\",\n            value: function write(pos, buf) {\n              var spos = pos;\n              var xCoordinates = [];\n              var yCoordinates = [];\n              var flags = [];\n              var lastX = 0;\n              var lastY = 0;\n              var _iterator86 = _createForOfIteratorHelper(this.contours),\n                _step86;\n              try {\n                for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {\n                  var contour = _step86.value;\n                  for (var _i40 = 0, _ii6 = contour.xCoordinates.length; _i40 < _ii6; _i40++) {\n                    var _flag3 = contour.flags[_i40];\n                    var _x118 = contour.xCoordinates[_i40];\n                    var delta = _x118 - lastX;\n                    if (delta === 0) {\n                      _flag3 |= X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR;\n                      xCoordinates.push(0);\n                    } else {\n                      var abs = Math.abs(delta);\n                      if (abs <= 255) {\n                        _flag3 |= delta >= 0 ? X_SHORT_VECTOR | X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR : X_SHORT_VECTOR;\n                        xCoordinates.push(abs);\n                      } else {\n                        xCoordinates.push(delta);\n                      }\n                    }\n                    lastX = _x118;\n                    var _y = contour.yCoordinates[_i40];\n                    delta = _y - lastY;\n                    if (delta === 0) {\n                      _flag3 |= Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR;\n                      yCoordinates.push(0);\n                    } else {\n                      var _abs = Math.abs(delta);\n                      if (_abs <= 255) {\n                        _flag3 |= delta >= 0 ? Y_SHORT_VECTOR | Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR : Y_SHORT_VECTOR;\n                        yCoordinates.push(_abs);\n                      } else {\n                        yCoordinates.push(delta);\n                      }\n                    }\n                    lastY = _y;\n                    flags.push(_flag3);\n                  }\n                  buf.setUint16(pos, xCoordinates.length - 1);\n                  pos += 2;\n                }\n              } catch (err) {\n                _iterator86.e(err);\n              } finally {\n                _iterator86.f();\n              }\n              buf.setUint16(pos, this.instructions.length);\n              pos += 2;\n              if (this.instructions.length) {\n                new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);\n                pos += this.instructions.length;\n              }\n              for (var _i38 = 0, _flags = flags; _i38 < _flags.length; _i38++) {\n                var flag = _flags[_i38];\n                buf.setUint8(pos++, flag);\n              }\n              for (var i = 0, ii = xCoordinates.length; i < ii; i++) {\n                var x = xCoordinates[i];\n                var _flag = flags[i];\n                if (_flag & X_SHORT_VECTOR) {\n                  buf.setUint8(pos++, x);\n                } else if (!(_flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR)) {\n                  buf.setInt16(pos, x);\n                  pos += 2;\n                }\n              }\n              for (var _i39 = 0, _ii5 = yCoordinates.length; _i39 < _ii5; _i39++) {\n                var y = yCoordinates[_i39];\n                var _flag2 = flags[_i39];\n                if (_flag2 & Y_SHORT_VECTOR) {\n                  buf.setUint8(pos++, y);\n                } else if (!(_flag2 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR)) {\n                  buf.setInt16(pos, y);\n                  pos += 2;\n                }\n              }\n              return pos - spos;\n            }\n          }, {\n            key: \"scale\",\n            value: function scale(x, factor) {\n              var _iterator87 = _createForOfIteratorHelper(this.contours),\n                _step87;\n              try {\n                for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {\n                  var contour = _step87.value;\n                  if (contour.xCoordinates.length === 0) {\n                    continue;\n                  }\n                  for (var i = 0, ii = contour.xCoordinates.length; i < ii; i++) {\n                    contour.xCoordinates[i] = Math.round(x + (contour.xCoordinates[i] - x) * factor);\n                  }\n                }\n              } catch (err) {\n                _iterator87.e(err);\n              } finally {\n                _iterator87.f();\n              }\n            }\n          }], [{\n            key: \"parse\",\n            value: function parse(pos, glyf, numberOfContours) {\n              var endPtsOfContours = [];\n              for (var i = 0; i < numberOfContours; i++) {\n                var endPt = glyf.getUint16(pos);\n                pos += 2;\n                endPtsOfContours.push(endPt);\n              }\n              var numberOfPt = endPtsOfContours[numberOfContours - 1] + 1;\n              var instructionLength = glyf.getUint16(pos);\n              pos += 2;\n              var instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);\n              pos += instructionLength;\n              var flags = [];\n              for (var _i41 = 0; _i41 < numberOfPt; pos++, _i41++) {\n                var flag = glyf.getUint8(pos);\n                flags.push(flag);\n                if (flag & REPEAT_FLAG) {\n                  var count = glyf.getUint8(++pos);\n                  flag ^= REPEAT_FLAG;\n                  for (var m = 0; m < count; m++) {\n                    flags.push(flag);\n                  }\n                  _i41 += count;\n                }\n              }\n              var allXCoordinates = [];\n              var xCoordinates = [];\n              var yCoordinates = [];\n              var pointFlags = [];\n              var contours = [];\n              var endPtsOfContoursIndex = 0;\n              var lastCoordinate = 0;\n              for (var _i42 = 0; _i42 < numberOfPt; _i42++) {\n                var _flag4 = flags[_i42];\n                if (_flag4 & X_SHORT_VECTOR) {\n                  var x = glyf.getUint8(pos++);\n                  lastCoordinate += _flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR ? x : -x;\n                  xCoordinates.push(lastCoordinate);\n                } else if (_flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR) {\n                  xCoordinates.push(lastCoordinate);\n                } else {\n                  lastCoordinate += glyf.getInt16(pos);\n                  pos += 2;\n                  xCoordinates.push(lastCoordinate);\n                }\n                if (endPtsOfContours[endPtsOfContoursIndex] === _i42) {\n                  endPtsOfContoursIndex++;\n                  allXCoordinates.push(xCoordinates);\n                  xCoordinates = [];\n                }\n              }\n              lastCoordinate = 0;\n              endPtsOfContoursIndex = 0;\n              for (var _i43 = 0; _i43 < numberOfPt; _i43++) {\n                var _flag5 = flags[_i43];\n                if (_flag5 & Y_SHORT_VECTOR) {\n                  var y = glyf.getUint8(pos++);\n                  lastCoordinate += _flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR ? y : -y;\n                  yCoordinates.push(lastCoordinate);\n                } else if (_flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR) {\n                  yCoordinates.push(lastCoordinate);\n                } else {\n                  lastCoordinate += glyf.getInt16(pos);\n                  pos += 2;\n                  yCoordinates.push(lastCoordinate);\n                }\n                pointFlags.push(_flag5 & ON_CURVE_POINT | _flag5 & OVERLAP_SIMPLE);\n                if (endPtsOfContours[endPtsOfContoursIndex] === _i43) {\n                  xCoordinates = allXCoordinates[endPtsOfContoursIndex];\n                  endPtsOfContoursIndex++;\n                  contours.push(new Contour({\n                    flags: pointFlags,\n                    xCoordinates: xCoordinates,\n                    yCoordinates: yCoordinates\n                  }));\n                  yCoordinates = [];\n                  pointFlags = [];\n                }\n              }\n              return new SimpleGlyph({\n                contours: contours,\n                instructions: instructions\n              });\n            }\n          }]);\n          return SimpleGlyph;\n        }();\n        var CompositeGlyph = /*#__PURE__*/function () {\n          function CompositeGlyph(_ref64) {\n            var flags = _ref64.flags,\n              glyphIndex = _ref64.glyphIndex,\n              argument1 = _ref64.argument1,\n              argument2 = _ref64.argument2,\n              transf = _ref64.transf,\n              instructions = _ref64.instructions;\n            _classCallCheck(this, CompositeGlyph);\n            this.flags = flags;\n            this.glyphIndex = glyphIndex;\n            this.argument1 = argument1;\n            this.argument2 = argument2;\n            this.transf = transf;\n            this.instructions = instructions;\n          }\n          _createClass(CompositeGlyph, [{\n            key: \"getSize\",\n            value: function getSize() {\n              var size = 2 + 2 + this.transf.length * 2;\n              if (this.flags & WE_HAVE_INSTRUCTIONS) {\n                size += 2 + this.instructions.length;\n              }\n              size += 2;\n              if (this.flags & 2) {\n                if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {\n                  size += 2;\n                }\n              } else {\n                if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {\n                  size += 2;\n                }\n              }\n              return size;\n            }\n          }, {\n            key: \"write\",\n            value: function write(pos, buf) {\n              var spos = pos;\n              if (this.flags & ARGS_ARE_XY_VALUES) {\n                if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {\n                  this.flags |= ARG_1_AND_2_ARE_WORDS;\n                }\n              } else {\n                if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {\n                  this.flags |= ARG_1_AND_2_ARE_WORDS;\n                }\n              }\n              buf.setUint16(pos, this.flags);\n              buf.setUint16(pos + 2, this.glyphIndex);\n              pos += 4;\n              if (this.flags & ARG_1_AND_2_ARE_WORDS) {\n                if (this.flags & ARGS_ARE_XY_VALUES) {\n                  buf.setInt16(pos, this.argument1);\n                  buf.setInt16(pos + 2, this.argument2);\n                } else {\n                  buf.setUint16(pos, this.argument1);\n                  buf.setUint16(pos + 2, this.argument2);\n                }\n                pos += 4;\n              } else {\n                buf.setUint8(pos, this.argument1);\n                buf.setUint8(pos + 1, this.argument2);\n                pos += 2;\n              }\n              if (this.flags & WE_HAVE_INSTRUCTIONS) {\n                buf.setUint16(pos, this.instructions.length);\n                pos += 2;\n                if (this.instructions.length) {\n                  new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);\n                  pos += this.instructions.length;\n                }\n              }\n              return pos - spos;\n            }\n          }, {\n            key: \"scale\",\n            value: function scale(x, factor) {}\n          }], [{\n            key: \"parse\",\n            value: function parse(pos, glyf) {\n              var spos = pos;\n              var transf = [];\n              var flags = glyf.getUint16(pos);\n              var glyphIndex = glyf.getUint16(pos + 2);\n              pos += 4;\n              var argument1, argument2;\n              if (flags & ARG_1_AND_2_ARE_WORDS) {\n                if (flags & ARGS_ARE_XY_VALUES) {\n                  argument1 = glyf.getInt16(pos);\n                  argument2 = glyf.getInt16(pos + 2);\n                } else {\n                  argument1 = glyf.getUint16(pos);\n                  argument2 = glyf.getUint16(pos + 2);\n                }\n                pos += 4;\n                flags ^= ARG_1_AND_2_ARE_WORDS;\n              } else {\n                if (flags & ARGS_ARE_XY_VALUES) {\n                  argument1 = glyf.getInt8(pos);\n                  argument2 = glyf.getInt8(pos + 1);\n                } else {\n                  argument1 = glyf.getUint8(pos);\n                  argument2 = glyf.getUint8(pos + 1);\n                }\n                pos += 2;\n              }\n              if (flags & WE_HAVE_A_SCALE) {\n                transf.push(glyf.getUint16(pos));\n                pos += 2;\n              } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n                transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2));\n                pos += 4;\n              } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n                transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2), glyf.getUint16(pos + 4), glyf.getUint16(pos + 6));\n                pos += 8;\n              }\n              var instructions = null;\n              if (flags & WE_HAVE_INSTRUCTIONS) {\n                var instructionLength = glyf.getUint16(pos);\n                pos += 2;\n                instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);\n                pos += instructionLength;\n              }\n              return [pos - spos, new CompositeGlyph({\n                flags: flags,\n                glyphIndex: glyphIndex,\n                argument1: argument1,\n                argument2: argument2,\n                transf: transf,\n                instructions: instructions\n              })];\n            }\n          }]);\n          return CompositeGlyph;\n        }();\n        /***/\n      }, /* 47 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OpenTypeFileBuilder = void 0;\n        var _core_utils = __w_pdfjs_require__(6);\n        var _util = __w_pdfjs_require__(2);\n        function writeInt16(dest, offset, num) {\n          dest[offset] = num >> 8 & 0xff;\n          dest[offset + 1] = num & 0xff;\n        }\n        function writeInt32(dest, offset, num) {\n          dest[offset] = num >> 24 & 0xff;\n          dest[offset + 1] = num >> 16 & 0xff;\n          dest[offset + 2] = num >> 8 & 0xff;\n          dest[offset + 3] = num & 0xff;\n        }\n        function writeData(dest, offset, data) {\n          if (data instanceof Uint8Array) {\n            dest.set(data, offset);\n          } else if (typeof data === \"string\") {\n            for (var i = 0, ii = data.length; i < ii; i++) {\n              dest[offset++] = data.charCodeAt(i) & 0xff;\n            }\n          } else {\n            for (var _i44 = 0, _ii7 = data.length; _i44 < _ii7; _i44++) {\n              dest[offset++] = data[_i44] & 0xff;\n            }\n          }\n        }\n        var OTF_HEADER_SIZE = 12;\n        var OTF_TABLE_ENTRY_SIZE = 16;\n        var OpenTypeFileBuilder = /*#__PURE__*/function () {\n          function OpenTypeFileBuilder(sfnt) {\n            _classCallCheck(this, OpenTypeFileBuilder);\n            this.sfnt = sfnt;\n            this.tables = Object.create(null);\n          }\n          _createClass(OpenTypeFileBuilder, [{\n            key: \"toArray\",\n            value: function toArray() {\n              var sfnt = this.sfnt;\n              var tables = this.tables;\n              var tablesNames = Object.keys(tables);\n              tablesNames.sort();\n              var numTables = tablesNames.length;\n              var i, j, jj, table, tableName;\n              var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n              var tableOffsets = [offset];\n              for (i = 0; i < numTables; i++) {\n                table = tables[tablesNames[i]];\n                var paddedLength = (table.length + 3 & ~3) >>> 0;\n                offset += paddedLength;\n                tableOffsets.push(offset);\n              }\n              var file = new Uint8Array(offset);\n              for (i = 0; i < numTables; i++) {\n                table = tables[tablesNames[i]];\n                writeData(file, tableOffsets[i], table);\n              }\n              if (sfnt === \"true\") {\n                sfnt = (0, _util.string32)(0x00010000);\n              }\n              file[0] = sfnt.charCodeAt(0) & 0xff;\n              file[1] = sfnt.charCodeAt(1) & 0xff;\n              file[2] = sfnt.charCodeAt(2) & 0xff;\n              file[3] = sfnt.charCodeAt(3) & 0xff;\n              writeInt16(file, 4, numTables);\n              var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n              writeInt16(file, 6, searchParams.range);\n              writeInt16(file, 8, searchParams.entry);\n              writeInt16(file, 10, searchParams.rangeShift);\n              offset = OTF_HEADER_SIZE;\n              for (i = 0; i < numTables; i++) {\n                tableName = tablesNames[i];\n                file[offset] = tableName.charCodeAt(0) & 0xff;\n                file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n                file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n                file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n                var checksum = 0;\n                for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n                  var quad = (0, _core_utils.readUint32)(file, j);\n                  checksum = checksum + quad >>> 0;\n                }\n                writeInt32(file, offset + 4, checksum);\n                writeInt32(file, offset + 8, tableOffsets[i]);\n                writeInt32(file, offset + 12, tables[tableName].length);\n                offset += OTF_TABLE_ENTRY_SIZE;\n              }\n              return file;\n            }\n          }, {\n            key: \"addTable\",\n            value: function addTable(tag, data) {\n              if (tag in this.tables) {\n                throw new Error(\"Table \" + tag + \" already exists\");\n              }\n              this.tables[tag] = data;\n            }\n          }], [{\n            key: \"getSearchParams\",\n            value: function getSearchParams(entriesCount, entrySize) {\n              var maxPower2 = 1,\n                log2 = 0;\n              while ((maxPower2 ^ entriesCount) > maxPower2) {\n                maxPower2 <<= 1;\n                log2++;\n              }\n              var searchRange = maxPower2 * entrySize;\n              return {\n                range: searchRange,\n                entry: log2,\n                rangeShift: entrySize * entriesCount - searchRange\n              };\n            }\n          }]);\n          return OpenTypeFileBuilder;\n        }();\n        exports.OpenTypeFileBuilder = OpenTypeFileBuilder;\n\n        /***/\n      }, /* 48 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Type1Font = void 0;\n        var _cff_parser = __w_pdfjs_require__(35);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _stream = __w_pdfjs_require__(10);\n        var _type1_parser = __w_pdfjs_require__(49);\n        var _util = __w_pdfjs_require__(2);\n        function findBlock(streamBytes, signature, startIndex) {\n          var streamBytesLength = streamBytes.length;\n          var signatureLength = signature.length;\n          var scanLength = streamBytesLength - signatureLength;\n          var i = startIndex,\n            found = false;\n          while (i < scanLength) {\n            var j = 0;\n            while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n              j++;\n            }\n            if (j >= signatureLength) {\n              i += j;\n              while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {\n                i++;\n              }\n              found = true;\n              break;\n            }\n            i++;\n          }\n          return {\n            found: found,\n            length: i\n          };\n        }\n        function getHeaderBlock(stream, suggestedLength) {\n          var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n          var streamStartPos = stream.pos;\n          var headerBytes, headerBytesLength, block;\n          try {\n            headerBytes = stream.getBytes(suggestedLength);\n            headerBytesLength = headerBytes.length;\n          } catch (ex) {}\n          if (headerBytesLength === suggestedLength) {\n            block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);\n            if (block.found && block.length === suggestedLength) {\n              return {\n                stream: new _stream.Stream(headerBytes),\n                length: suggestedLength\n              };\n            }\n          }\n          (0, _util.warn)('Invalid \"Length1\" property in Type1 font -- trying to recover.');\n          stream.pos = streamStartPos;\n          var SCAN_BLOCK_LENGTH = 2048;\n          var actualLength;\n          while (true) {\n            var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n            block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n            if (block.length === 0) {\n              break;\n            }\n            stream.pos += block.length;\n            if (block.found) {\n              actualLength = stream.pos - streamStartPos;\n              break;\n            }\n          }\n          stream.pos = streamStartPos;\n          if (actualLength) {\n            return {\n              stream: new _stream.Stream(stream.getBytes(actualLength)),\n              length: actualLength\n            };\n          }\n          (0, _util.warn)('Unable to recover \"Length1\" property in Type1 font -- using as is.');\n          return {\n            stream: new _stream.Stream(stream.getBytes(suggestedLength)),\n            length: suggestedLength\n          };\n        }\n        function getEexecBlock(stream, suggestedLength) {\n          var eexecBytes = stream.getBytes();\n          return {\n            stream: new _stream.Stream(eexecBytes),\n            length: eexecBytes.length\n          };\n        }\n        var Type1Font = /*#__PURE__*/function () {\n          function Type1Font(name, file, properties) {\n            _classCallCheck(this, Type1Font);\n            var PFB_HEADER_SIZE = 6;\n            var headerBlockLength = properties.length1;\n            var eexecBlockLength = properties.length2;\n            var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n            var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n            if (pfbHeaderPresent) {\n              file.skip(PFB_HEADER_SIZE);\n              headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n            }\n            var headerBlock = getHeaderBlock(file, headerBlockLength);\n            var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, _fonts_utils.SEAC_ANALYSIS_ENABLED);\n            headerBlockParser.extractFontHeader(properties);\n            if (pfbHeaderPresent) {\n              pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n              eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n            }\n            var eexecBlock = getEexecBlock(file, eexecBlockLength);\n            var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, _fonts_utils.SEAC_ANALYSIS_ENABLED);\n            var data = eexecBlockParser.extractFontProgram(properties);\n            for (var key in data.properties) {\n              properties[key] = data.properties[key];\n            }\n            var charstrings = data.charstrings;\n            var type2Charstrings = this.getType2Charstrings(charstrings);\n            var subrs = this.getType2Subrs(data.subrs);\n            this.charstrings = charstrings;\n            this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);\n            this.seacs = this.getSeacs(data.charstrings);\n          }\n          _createClass(Type1Font, [{\n            key: \"getCharset\",\n            value: function getCharset() {\n              var charset = [\".notdef\"];\n              var _iterator88 = _createForOfIteratorHelper(this.charstrings),\n                _step88;\n              try {\n                for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {\n                  var glyphName = _step88.value.glyphName;\n                  charset.push(glyphName);\n                }\n              } catch (err) {\n                _iterator88.e(err);\n              } finally {\n                _iterator88.f();\n              }\n              return charset;\n            }\n          }, {\n            key: \"getGlyphMapping\",\n            value: function getGlyphMapping(properties) {\n              var charstrings = this.charstrings;\n              if (properties.composite) {\n                var charCodeToGlyphId = Object.create(null);\n                for (var _glyphId = 0, charstringsLen = charstrings.length; _glyphId < charstringsLen; _glyphId++) {\n                  var charCode = properties.cMap.charCodeOf(_glyphId);\n                  charCodeToGlyphId[charCode] = _glyphId + 1;\n                }\n                return charCodeToGlyphId;\n              }\n              var glyphNames = [\".notdef\"];\n              var builtInEncoding, glyphId;\n              for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n                glyphNames.push(charstrings[glyphId].glyphName);\n              }\n              var encoding = properties.builtInEncoding;\n              if (encoding) {\n                builtInEncoding = Object.create(null);\n                for (var _charCode4 in encoding) {\n                  glyphId = glyphNames.indexOf(encoding[_charCode4]);\n                  if (glyphId >= 0) {\n                    builtInEncoding[_charCode4] = glyphId;\n                  }\n                }\n              }\n              return (0, _fonts_utils.type1FontGlyphMapping)(properties, builtInEncoding, glyphNames);\n            }\n          }, {\n            key: \"hasGlyphId\",\n            value: function hasGlyphId(id) {\n              if (id < 0 || id >= this.numGlyphs) {\n                return false;\n              }\n              if (id === 0) {\n                return true;\n              }\n              var glyph = this.charstrings[id - 1];\n              return glyph.charstring.length > 0;\n            }\n          }, {\n            key: \"getSeacs\",\n            value: function getSeacs(charstrings) {\n              var seacMap = [];\n              for (var i = 0, ii = charstrings.length; i < ii; i++) {\n                var charstring = charstrings[i];\n                if (charstring.seac) {\n                  seacMap[i + 1] = charstring.seac;\n                }\n              }\n              return seacMap;\n            }\n          }, {\n            key: \"getType2Charstrings\",\n            value: function getType2Charstrings(type1Charstrings) {\n              var type2Charstrings = [];\n              for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n                type2Charstrings.push(type1Charstrings[i].charstring);\n              }\n              return type2Charstrings;\n            }\n          }, {\n            key: \"getType2Subrs\",\n            value: function getType2Subrs(type1Subrs) {\n              var bias = 0;\n              var count = type1Subrs.length;\n              if (count < 1133) {\n                bias = 107;\n              } else if (count < 33769) {\n                bias = 1131;\n              } else {\n                bias = 32768;\n              }\n              var type2Subrs = [];\n              var i;\n              for (i = 0; i < bias; i++) {\n                type2Subrs.push([0x0b]);\n              }\n              for (i = 0; i < count; i++) {\n                type2Subrs.push(type1Subrs[i]);\n              }\n              return type2Subrs;\n            }\n          }, {\n            key: \"wrap\",\n            value: function wrap(name, glyphs, charstrings, subrs, properties) {\n              var cff = new _cff_parser.CFF();\n              cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);\n              cff.names = [name];\n              var topDict = new _cff_parser.CFFTopDict();\n              topDict.setByName(\"version\", 391);\n              topDict.setByName(\"Notice\", 392);\n              topDict.setByName(\"FullName\", 393);\n              topDict.setByName(\"FamilyName\", 394);\n              topDict.setByName(\"Weight\", 395);\n              topDict.setByName(\"Encoding\", null);\n              topDict.setByName(\"FontMatrix\", properties.fontMatrix);\n              topDict.setByName(\"FontBBox\", properties.bbox);\n              topDict.setByName(\"charset\", null);\n              topDict.setByName(\"CharStrings\", null);\n              topDict.setByName(\"Private\", null);\n              cff.topDict = topDict;\n              var strings = new _cff_parser.CFFStrings();\n              strings.add(\"Version 0.11\");\n              strings.add(\"See original notice\");\n              strings.add(name);\n              strings.add(name);\n              strings.add(\"Medium\");\n              cff.strings = strings;\n              cff.globalSubrIndex = new _cff_parser.CFFIndex();\n              var count = glyphs.length;\n              var charsetArray = [\".notdef\"];\n              var i, ii;\n              for (i = 0; i < count; i++) {\n                var glyphName = charstrings[i].glyphName;\n                var index = _cff_parser.CFFStandardStrings.indexOf(glyphName);\n                if (index === -1) {\n                  strings.add(glyphName);\n                }\n                charsetArray.push(glyphName);\n              }\n              cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);\n              var charStringsIndex = new _cff_parser.CFFIndex();\n              charStringsIndex.add([0x8b, 0x0e]);\n              for (i = 0; i < count; i++) {\n                charStringsIndex.add(glyphs[i]);\n              }\n              cff.charStrings = charStringsIndex;\n              var privateDict = new _cff_parser.CFFPrivateDict();\n              privateDict.setByName(\"Subrs\", null);\n              var fields = [\"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StemSnapH\", \"StemSnapV\", \"BlueShift\", \"BlueFuzz\", \"BlueScale\", \"LanguageGroup\", \"ExpansionFactor\", \"ForceBold\", \"StdHW\", \"StdVW\"];\n              for (i = 0, ii = fields.length; i < ii; i++) {\n                var field = fields[i];\n                if (!(field in properties.privateData)) {\n                  continue;\n                }\n                var value = properties.privateData[field];\n                if (Array.isArray(value)) {\n                  for (var j = value.length - 1; j > 0; j--) {\n                    value[j] -= value[j - 1];\n                  }\n                }\n                privateDict.setByName(field, value);\n              }\n              cff.topDict.privateDict = privateDict;\n              var subrIndex = new _cff_parser.CFFIndex();\n              for (i = 0, ii = subrs.length; i < ii; i++) {\n                subrIndex.add(subrs[i]);\n              }\n              privateDict.subrsIndex = subrIndex;\n              var compiler = new _cff_parser.CFFCompiler(cff);\n              return compiler.compile();\n            }\n          }, {\n            key: \"numGlyphs\",\n            get: function get() {\n              return this.charstrings.length + 1;\n            }\n          }]);\n          return Type1Font;\n        }();\n        exports.Type1Font = Type1Font;\n\n        /***/\n      }, /* 49 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Type1Parser = void 0;\n        var _encodings = __w_pdfjs_require__(37);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _stream = __w_pdfjs_require__(10);\n        var _util = __w_pdfjs_require__(2);\n        var HINTING_ENABLED = false;\n        var COMMAND_MAP = {\n          hstem: [1],\n          vstem: [3],\n          vmoveto: [4],\n          rlineto: [5],\n          hlineto: [6],\n          vlineto: [7],\n          rrcurveto: [8],\n          callsubr: [10],\n          flex: [12, 35],\n          drop: [12, 18],\n          endchar: [14],\n          rmoveto: [21],\n          hmoveto: [22],\n          vhcurveto: [30],\n          hvcurveto: [31]\n        };\n        var Type1CharString = /*#__PURE__*/function () {\n          function Type1CharString() {\n            _classCallCheck(this, Type1CharString);\n            this.width = 0;\n            this.lsb = 0;\n            this.flexing = false;\n            this.output = [];\n            this.stack = [];\n          }\n          _createClass(Type1CharString, [{\n            key: \"convert\",\n            value: function convert(encoded, subrs, seacAnalysisEnabled) {\n              var count = encoded.length;\n              var error = false;\n              var wx, sbx, subrNumber;\n              for (var i = 0; i < count; i++) {\n                var value = encoded[i];\n                if (value < 32) {\n                  if (value === 12) {\n                    value = (value << 8) + encoded[++i];\n                  }\n                  switch (value) {\n                    case 1:\n                      if (!HINTING_ENABLED) {\n                        this.stack = [];\n                        break;\n                      }\n                      error = this.executeCommand(2, COMMAND_MAP.hstem);\n                      break;\n                    case 3:\n                      if (!HINTING_ENABLED) {\n                        this.stack = [];\n                        break;\n                      }\n                      error = this.executeCommand(2, COMMAND_MAP.vstem);\n                      break;\n                    case 4:\n                      if (this.flexing) {\n                        if (this.stack.length < 1) {\n                          error = true;\n                          break;\n                        }\n                        var dy = this.stack.pop();\n                        this.stack.push(0, dy);\n                        break;\n                      }\n                      error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n                      break;\n                    case 5:\n                      error = this.executeCommand(2, COMMAND_MAP.rlineto);\n                      break;\n                    case 6:\n                      error = this.executeCommand(1, COMMAND_MAP.hlineto);\n                      break;\n                    case 7:\n                      error = this.executeCommand(1, COMMAND_MAP.vlineto);\n                      break;\n                    case 8:\n                      error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n                      break;\n                    case 9:\n                      this.stack = [];\n                      break;\n                    case 10:\n                      if (this.stack.length < 1) {\n                        error = true;\n                        break;\n                      }\n                      subrNumber = this.stack.pop();\n                      if (!subrs[subrNumber]) {\n                        error = true;\n                        break;\n                      }\n                      error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);\n                      break;\n                    case 11:\n                      return error;\n                    case 13:\n                      if (this.stack.length < 2) {\n                        error = true;\n                        break;\n                      }\n                      wx = this.stack.pop();\n                      sbx = this.stack.pop();\n                      this.lsb = sbx;\n                      this.width = wx;\n                      this.stack.push(wx, sbx);\n                      error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n                      break;\n                    case 14:\n                      this.output.push(COMMAND_MAP.endchar[0]);\n                      break;\n                    case 21:\n                      if (this.flexing) {\n                        break;\n                      }\n                      error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n                      break;\n                    case 22:\n                      if (this.flexing) {\n                        this.stack.push(0);\n                        break;\n                      }\n                      error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n                      break;\n                    case 30:\n                      error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n                      break;\n                    case 31:\n                      error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n                      break;\n                    case (12 << 8) + 0:\n                      this.stack = [];\n                      break;\n                    case (12 << 8) + 1:\n                      if (!HINTING_ENABLED) {\n                        this.stack = [];\n                        break;\n                      }\n                      error = this.executeCommand(2, COMMAND_MAP.vstem);\n                      break;\n                    case (12 << 8) + 2:\n                      if (!HINTING_ENABLED) {\n                        this.stack = [];\n                        break;\n                      }\n                      error = this.executeCommand(2, COMMAND_MAP.hstem);\n                      break;\n                    case (12 << 8) + 6:\n                      if (seacAnalysisEnabled) {\n                        var asb = this.stack.at(-5);\n                        this.seac = this.stack.splice(-4, 4);\n                        this.seac[0] += this.lsb - asb;\n                        error = this.executeCommand(0, COMMAND_MAP.endchar);\n                      } else {\n                        error = this.executeCommand(4, COMMAND_MAP.endchar);\n                      }\n                      break;\n                    case (12 << 8) + 7:\n                      if (this.stack.length < 4) {\n                        error = true;\n                        break;\n                      }\n                      this.stack.pop();\n                      wx = this.stack.pop();\n                      var sby = this.stack.pop();\n                      sbx = this.stack.pop();\n                      this.lsb = sbx;\n                      this.width = wx;\n                      this.stack.push(wx, sbx, sby);\n                      error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n                      break;\n                    case (12 << 8) + 12:\n                      if (this.stack.length < 2) {\n                        error = true;\n                        break;\n                      }\n                      var num2 = this.stack.pop();\n                      var num1 = this.stack.pop();\n                      this.stack.push(num1 / num2);\n                      break;\n                    case (12 << 8) + 16:\n                      if (this.stack.length < 2) {\n                        error = true;\n                        break;\n                      }\n                      subrNumber = this.stack.pop();\n                      var numArgs = this.stack.pop();\n                      if (subrNumber === 0 && numArgs === 3) {\n                        var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                        this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);\n                        error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                        this.flexing = false;\n                        this.stack.push(flexArgs[15], flexArgs[16]);\n                      } else if (subrNumber === 1 && numArgs === 0) {\n                        this.flexing = true;\n                      }\n                      break;\n                    case (12 << 8) + 17:\n                      break;\n                    case (12 << 8) + 33:\n                      this.stack = [];\n                      break;\n                    default:\n                      (0, _util.warn)('Unknown type 1 charstring command of \"' + value + '\"');\n                      break;\n                  }\n                  if (error) {\n                    break;\n                  }\n                  continue;\n                } else if (value <= 246) {\n                  value -= 139;\n                } else if (value <= 250) {\n                  value = (value - 247) * 256 + encoded[++i] + 108;\n                } else if (value <= 254) {\n                  value = -((value - 251) * 256) - encoded[++i] - 108;\n                } else {\n                  value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;\n                }\n                this.stack.push(value);\n              }\n              return error;\n            }\n          }, {\n            key: \"executeCommand\",\n            value: function executeCommand(howManyArgs, command, keepStack) {\n              var _this$output;\n              var stackLength = this.stack.length;\n              if (howManyArgs > stackLength) {\n                return true;\n              }\n              var start = stackLength - howManyArgs;\n              for (var i = start; i < stackLength; i++) {\n                var value = this.stack[i];\n                if (Number.isInteger(value)) {\n                  this.output.push(28, value >> 8 & 0xff, value & 0xff);\n                } else {\n                  value = 65536 * value | 0;\n                  this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n                }\n              }\n              (_this$output = this.output).push.apply(_this$output, _toConsumableArray(command));\n              if (keepStack) {\n                this.stack.splice(start, howManyArgs);\n              } else {\n                this.stack.length = 0;\n              }\n              return false;\n            }\n          }]);\n          return Type1CharString;\n        }();\n        var EEXEC_ENCRYPT_KEY = 55665;\n        var CHAR_STRS_ENCRYPT_KEY = 4330;\n        function isHexDigit(code) {\n          return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;\n        }\n        function decrypt(data, key, discardNumber) {\n          if (discardNumber >= data.length) {\n            return new Uint8Array(0);\n          }\n          var c1 = 52845,\n            c2 = 22719;\n          var r = key | 0,\n            i,\n            j;\n          for (i = 0; i < discardNumber; i++) {\n            r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;\n          }\n          var count = data.length - discardNumber;\n          var decrypted = new Uint8Array(count);\n          for (i = discardNumber, j = 0; j < count; i++, j++) {\n            var value = data[i];\n            decrypted[j] = value ^ r >> 8;\n            r = (value + r) * c1 + c2 & (1 << 16) - 1;\n          }\n          return decrypted;\n        }\n        function decryptAscii(data, key, discardNumber) {\n          var c1 = 52845,\n            c2 = 22719;\n          var r = key | 0;\n          var count = data.length,\n            maybeLength = count >>> 1;\n          var decrypted = new Uint8Array(maybeLength);\n          var i, j;\n          for (i = 0, j = 0; i < count; i++) {\n            var digit1 = data[i];\n            if (!isHexDigit(digit1)) {\n              continue;\n            }\n            i++;\n            var digit2 = void 0;\n            while (i < count && !isHexDigit(digit2 = data[i])) {\n              i++;\n            }\n            if (i < count) {\n              var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n              decrypted[j++] = value ^ r >> 8;\n              r = (value + r) * c1 + c2 & (1 << 16) - 1;\n            }\n          }\n          return decrypted.slice(discardNumber, j);\n        }\n        function isSpecial(c) {\n          return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;\n        }\n        var Type1Parser = /*#__PURE__*/function () {\n          function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n            _classCallCheck(this, Type1Parser);\n            if (encrypted) {\n              var data = stream.getBytes();\n              var isBinary = !((isHexDigit(data[0]) || (0, _core_utils.isWhiteSpace)(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));\n              stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));\n            }\n            this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n            this.stream = stream;\n            this.nextChar();\n          }\n          _createClass(Type1Parser, [{\n            key: \"readNumberArray\",\n            value: function readNumberArray() {\n              this.getToken();\n              var array = [];\n              while (true) {\n                var token = this.getToken();\n                if (token === null || token === \"]\" || token === \"}\") {\n                  break;\n                }\n                array.push(parseFloat(token || 0));\n              }\n              return array;\n            }\n          }, {\n            key: \"readNumber\",\n            value: function readNumber() {\n              var token = this.getToken();\n              return parseFloat(token || 0);\n            }\n          }, {\n            key: \"readInt\",\n            value: function readInt() {\n              var token = this.getToken();\n              return parseInt(token || 0, 10) | 0;\n            }\n          }, {\n            key: \"readBoolean\",\n            value: function readBoolean() {\n              var token = this.getToken();\n              return token === \"true\" ? 1 : 0;\n            }\n          }, {\n            key: \"nextChar\",\n            value: function nextChar() {\n              return this.currentChar = this.stream.getByte();\n            }\n          }, {\n            key: \"prevChar\",\n            value: function prevChar() {\n              this.stream.skip(-2);\n              return this.currentChar = this.stream.getByte();\n            }\n          }, {\n            key: \"getToken\",\n            value: function getToken() {\n              var comment = false;\n              var ch = this.currentChar;\n              while (true) {\n                if (ch === -1) {\n                  return null;\n                }\n                if (comment) {\n                  if (ch === 0x0a || ch === 0x0d) {\n                    comment = false;\n                  }\n                } else if (ch === 0x25) {\n                  comment = true;\n                } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n                  break;\n                }\n                ch = this.nextChar();\n              }\n              if (isSpecial(ch)) {\n                this.nextChar();\n                return String.fromCharCode(ch);\n              }\n              var token = \"\";\n              do {\n                token += String.fromCharCode(ch);\n                ch = this.nextChar();\n              } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));\n              return token;\n            }\n          }, {\n            key: \"readCharStrings\",\n            value: function readCharStrings(bytes, lenIV) {\n              if (lenIV === -1) {\n                return bytes;\n              }\n              return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n            }\n          }, {\n            key: \"extractFontProgram\",\n            value: function extractFontProgram(properties) {\n              var stream = this.stream;\n              var subrs = [],\n                charstrings = [];\n              var privateData = Object.create(null);\n              privateData.lenIV = 4;\n              var program = {\n                subrs: [],\n                charstrings: [],\n                properties: {\n                  privateData: privateData\n                }\n              };\n              var token, length, data, lenIV;\n              while ((token = this.getToken()) !== null) {\n                if (token !== \"/\") {\n                  continue;\n                }\n                token = this.getToken();\n                switch (token) {\n                  case \"CharStrings\":\n                    this.getToken();\n                    this.getToken();\n                    this.getToken();\n                    this.getToken();\n                    while (true) {\n                      token = this.getToken();\n                      if (token === null || token === \"end\") {\n                        break;\n                      }\n                      if (token !== \"/\") {\n                        continue;\n                      }\n                      var glyph = this.getToken();\n                      length = this.readInt();\n                      this.getToken();\n                      data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n                      lenIV = program.properties.privateData.lenIV;\n                      var encoded = this.readCharStrings(data, lenIV);\n                      this.nextChar();\n                      token = this.getToken();\n                      if (token === \"noaccess\") {\n                        this.getToken();\n                      } else if (token === \"/\") {\n                        this.prevChar();\n                      }\n                      charstrings.push({\n                        glyph: glyph,\n                        encoded: encoded\n                      });\n                    }\n                    break;\n                  case \"Subrs\":\n                    this.readInt();\n                    this.getToken();\n                    while (this.getToken() === \"dup\") {\n                      var index = this.readInt();\n                      length = this.readInt();\n                      this.getToken();\n                      data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n                      lenIV = program.properties.privateData.lenIV;\n                      var _encoded = this.readCharStrings(data, lenIV);\n                      this.nextChar();\n                      token = this.getToken();\n                      if (token === \"noaccess\") {\n                        this.getToken();\n                      }\n                      subrs[index] = _encoded;\n                    }\n                    break;\n                  case \"BlueValues\":\n                  case \"OtherBlues\":\n                  case \"FamilyBlues\":\n                  case \"FamilyOtherBlues\":\n                    var blueArray = this.readNumberArray();\n                    if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {\n                      program.properties.privateData[token] = blueArray;\n                    }\n                    break;\n                  case \"StemSnapH\":\n                  case \"StemSnapV\":\n                    program.properties.privateData[token] = this.readNumberArray();\n                    break;\n                  case \"StdHW\":\n                  case \"StdVW\":\n                    program.properties.privateData[token] = this.readNumberArray()[0];\n                    break;\n                  case \"BlueShift\":\n                  case \"lenIV\":\n                  case \"BlueFuzz\":\n                  case \"BlueScale\":\n                  case \"LanguageGroup\":\n                  case \"ExpansionFactor\":\n                    program.properties.privateData[token] = this.readNumber();\n                    break;\n                  case \"ForceBold\":\n                    program.properties.privateData[token] = this.readBoolean();\n                    break;\n                }\n              }\n              for (var _i45 = 0, _charstrings = charstrings; _i45 < _charstrings.length; _i45++) {\n                var _charstrings$_i = _charstrings[_i45],\n                  _encoded2 = _charstrings$_i.encoded,\n                  _glyph2 = _charstrings$_i.glyph;\n                var charString = new Type1CharString();\n                var error = charString.convert(_encoded2, subrs, this.seacAnalysisEnabled);\n                var output = charString.output;\n                if (error) {\n                  output = [14];\n                }\n                var charStringObject = {\n                  glyphName: _glyph2,\n                  charstring: output,\n                  width: charString.width,\n                  lsb: charString.lsb,\n                  seac: charString.seac\n                };\n                if (_glyph2 === \".notdef\") {\n                  program.charstrings.unshift(charStringObject);\n                } else {\n                  program.charstrings.push(charStringObject);\n                }\n                if (properties.builtInEncoding) {\n                  var _index = properties.builtInEncoding.indexOf(_glyph2);\n                  if (_index > -1 && properties.widths[_index] === undefined && _index >= properties.firstChar && _index <= properties.lastChar) {\n                    properties.widths[_index] = charString.width;\n                  }\n                }\n              }\n              return program;\n            }\n          }, {\n            key: \"extractFontHeader\",\n            value: function extractFontHeader(properties) {\n              var token;\n              while ((token = this.getToken()) !== null) {\n                if (token !== \"/\") {\n                  continue;\n                }\n                token = this.getToken();\n                switch (token) {\n                  case \"FontMatrix\":\n                    var matrix = this.readNumberArray();\n                    properties.fontMatrix = matrix;\n                    break;\n                  case \"Encoding\":\n                    var encodingArg = this.getToken();\n                    var encoding = void 0;\n                    if (!/^\\d+$/.test(encodingArg)) {\n                      encoding = (0, _encodings.getEncoding)(encodingArg);\n                    } else {\n                      encoding = [];\n                      var size = parseInt(encodingArg, 10) | 0;\n                      this.getToken();\n                      for (var j = 0; j < size; j++) {\n                        token = this.getToken();\n                        while (token !== \"dup\" && token !== \"def\") {\n                          token = this.getToken();\n                          if (token === null) {\n                            return;\n                          }\n                        }\n                        if (token === \"def\") {\n                          break;\n                        }\n                        var index = this.readInt();\n                        this.getToken();\n                        var glyph = this.getToken();\n                        encoding[index] = glyph;\n                        this.getToken();\n                      }\n                    }\n                    properties.builtInEncoding = encoding;\n                    break;\n                  case \"FontBBox\":\n                    var fontBBox = this.readNumberArray();\n                    properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n                    properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n                    properties.ascentScaled = true;\n                    break;\n                }\n              }\n            }\n          }]);\n          return Type1Parser;\n        }();\n        exports.Type1Parser = Type1Parser;\n\n        /***/\n      }, /* 50 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Pattern = void 0;\n        exports.getTilingPatternIR = getTilingPatternIR;\n        var _util = __w_pdfjs_require__(2);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _core_utils = __w_pdfjs_require__(6);\n        var ShadingType = {\n          FUNCTION_BASED: 1,\n          AXIAL: 2,\n          RADIAL: 3,\n          FREE_FORM_MESH: 4,\n          LATTICE_FORM_MESH: 5,\n          COONS_PATCH_MESH: 6,\n          TENSOR_PATCH_MESH: 7\n        };\n        var Pattern = /*#__PURE__*/function () {\n          function Pattern() {\n            _classCallCheck(this, Pattern);\n            (0, _util.unreachable)(\"Cannot initialize Pattern.\");\n          }\n          _createClass(Pattern, null, [{\n            key: \"parseShading\",\n            value: function parseShading(shading, xref, res, handler, pdfFunctionFactory, localColorSpaceCache) {\n              var dict = shading instanceof _base_stream.BaseStream ? shading.dict : shading;\n              var type = dict.get(\"ShadingType\");\n              try {\n                switch (type) {\n                  case ShadingType.AXIAL:\n                  case ShadingType.RADIAL:\n                    return new RadialAxialShading(dict, xref, res, pdfFunctionFactory, localColorSpaceCache);\n                  case ShadingType.FREE_FORM_MESH:\n                  case ShadingType.LATTICE_FORM_MESH:\n                  case ShadingType.COONS_PATCH_MESH:\n                  case ShadingType.TENSOR_PATCH_MESH:\n                    return new MeshShading(shading, xref, res, pdfFunctionFactory, localColorSpaceCache);\n                  default:\n                    throw new _util.FormatError(\"Unsupported ShadingType: \" + type);\n                }\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.shadingPattern\n                });\n                (0, _util.warn)(ex);\n                return new DummyShading();\n              }\n            }\n          }]);\n          return Pattern;\n        }();\n        exports.Pattern = Pattern;\n        var BaseShading = /*#__PURE__*/function () {\n          _createClass(BaseShading, null, [{\n            key: \"SMALL_NUMBER\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"SMALL_NUMBER\", 1e-6);\n            }\n          }]);\n          function BaseShading() {\n            _classCallCheck(this, BaseShading);\n            if (this.constructor === BaseShading) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShading.\");\n            }\n          }\n          _createClass(BaseShading, [{\n            key: \"getIR\",\n            value: function getIR() {\n              (0, _util.unreachable)(\"Abstract method `getIR` called.\");\n            }\n          }]);\n          return BaseShading;\n        }();\n        var RadialAxialShading = /*#__PURE__*/function (_BaseShading) {\n          _inherits(RadialAxialShading, _BaseShading);\n          function RadialAxialShading(dict, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n            var _this82;\n            _classCallCheck(this, RadialAxialShading);\n            _this82 = _possibleConstructorReturn(this, _getPrototypeOf(RadialAxialShading).call(this));\n            _this82.coordsArr = dict.getArray(\"Coords\");\n            _this82.shadingType = dict.get(\"ShadingType\");\n            var cs = _colorspace.ColorSpace.parse({\n              cs: dict.getRaw(\"CS\") || dict.getRaw(\"ColorSpace\"),\n              xref: xref,\n              resources: resources,\n              pdfFunctionFactory: pdfFunctionFactory,\n              localColorSpaceCache: localColorSpaceCache\n            });\n            var bbox = dict.getArray(\"BBox\");\n            if (Array.isArray(bbox) && bbox.length === 4) {\n              _this82.bbox = _util.Util.normalizeRect(bbox);\n            } else {\n              _this82.bbox = null;\n            }\n            var t0 = 0.0,\n              t1 = 1.0;\n            if (dict.has(\"Domain\")) {\n              var domainArr = dict.getArray(\"Domain\");\n              t0 = domainArr[0];\n              t1 = domainArr[1];\n            }\n            var extendStart = false,\n              extendEnd = false;\n            if (dict.has(\"Extend\")) {\n              var extendArr = dict.getArray(\"Extend\");\n              extendStart = extendArr[0];\n              extendEnd = extendArr[1];\n            }\n            if (_this82.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {\n              var _this82$coordsArr = _slicedToArray(_this82.coordsArr, 6),\n                x1 = _this82$coordsArr[0],\n                y1 = _this82$coordsArr[1],\n                r1 = _this82$coordsArr[2],\n                x2 = _this82$coordsArr[3],\n                y2 = _this82$coordsArr[4],\n                r2 = _this82$coordsArr[5];\n              var distance = Math.hypot(x1 - x2, y1 - y2);\n              if (r1 <= r2 + distance && r2 <= r1 + distance) {\n                (0, _util.warn)(\"Unsupported radial gradient.\");\n              }\n            }\n            _this82.extendStart = extendStart;\n            _this82.extendEnd = extendEnd;\n            var fnObj = dict.getRaw(\"Function\");\n            var fn = pdfFunctionFactory.createFromArray(fnObj);\n            var NUMBER_OF_SAMPLES = 10;\n            var step = (t1 - t0) / NUMBER_OF_SAMPLES;\n            var colorStops = _this82.colorStops = [];\n            if (t0 >= t1 || step <= 0) {\n              (0, _util.info)(\"Bad shading domain.\");\n              return _possibleConstructorReturn(_this82);\n            }\n            var color = new Float32Array(cs.numComps),\n              ratio = new Float32Array(1);\n            var rgbColor;\n            for (var i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n              ratio[0] = t0 + i * step;\n              fn(ratio, 0, color, 0);\n              rgbColor = cs.getRgb(color, 0);\n              var cssColor = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n              colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n            }\n            var background = \"transparent\";\n            if (dict.has(\"Background\")) {\n              rgbColor = cs.getRgb(dict.get(\"Background\"), 0);\n              background = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n            }\n            if (!extendStart) {\n              colorStops.unshift([0, background]);\n              colorStops[1][0] += BaseShading.SMALL_NUMBER;\n            }\n            if (!extendEnd) {\n              colorStops.at(-1)[0] -= BaseShading.SMALL_NUMBER;\n              colorStops.push([1, background]);\n            }\n            _this82.colorStops = colorStops;\n            return _this82;\n          }\n          _createClass(RadialAxialShading, [{\n            key: \"getIR\",\n            value: function getIR() {\n              var coordsArr = this.coordsArr;\n              var shadingType = this.shadingType;\n              var type, p0, p1, r0, r1;\n              if (shadingType === ShadingType.AXIAL) {\n                p0 = [coordsArr[0], coordsArr[1]];\n                p1 = [coordsArr[2], coordsArr[3]];\n                r0 = null;\n                r1 = null;\n                type = \"axial\";\n              } else if (shadingType === ShadingType.RADIAL) {\n                p0 = [coordsArr[0], coordsArr[1]];\n                p1 = [coordsArr[3], coordsArr[4]];\n                r0 = coordsArr[2];\n                r1 = coordsArr[5];\n                type = \"radial\";\n              } else {\n                (0, _util.unreachable)(\"getPattern type unknown: \".concat(shadingType));\n              }\n              return [\"RadialAxial\", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n            }\n          }]);\n          return RadialAxialShading;\n        }(BaseShading);\n        var MeshStreamReader = /*#__PURE__*/function () {\n          function MeshStreamReader(stream, context) {\n            _classCallCheck(this, MeshStreamReader);\n            this.stream = stream;\n            this.context = context;\n            this.buffer = 0;\n            this.bufferLength = 0;\n            var numComps = context.numComps;\n            this.tmpCompsBuf = new Float32Array(numComps);\n            var csNumComps = context.colorSpace.numComps;\n            this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;\n          }\n          _createClass(MeshStreamReader, [{\n            key: \"readBits\",\n            value: function readBits(n) {\n              var buffer = this.buffer;\n              var bufferLength = this.bufferLength;\n              if (n === 32) {\n                if (bufferLength === 0) {\n                  return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;\n                }\n                buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();\n                var nextByte = this.stream.getByte();\n                this.buffer = nextByte & (1 << bufferLength) - 1;\n                return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;\n              }\n              if (n === 8 && bufferLength === 0) {\n                return this.stream.getByte();\n              }\n              while (bufferLength < n) {\n                buffer = buffer << 8 | this.stream.getByte();\n                bufferLength += 8;\n              }\n              bufferLength -= n;\n              this.bufferLength = bufferLength;\n              this.buffer = buffer & (1 << bufferLength) - 1;\n              return buffer >> bufferLength;\n            }\n          }, {\n            key: \"align\",\n            value: function align() {\n              this.buffer = 0;\n              this.bufferLength = 0;\n            }\n          }, {\n            key: \"readFlag\",\n            value: function readFlag() {\n              return this.readBits(this.context.bitsPerFlag);\n            }\n          }, {\n            key: \"readCoordinate\",\n            value: function readCoordinate() {\n              var bitsPerCoordinate = this.context.bitsPerCoordinate;\n              var xi = this.readBits(bitsPerCoordinate);\n              var yi = this.readBits(bitsPerCoordinate);\n              var decode = this.context.decode;\n              var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;\n              return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];\n            }\n          }, {\n            key: \"readComponents\",\n            value: function readComponents() {\n              var numComps = this.context.numComps;\n              var bitsPerComponent = this.context.bitsPerComponent;\n              var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;\n              var decode = this.context.decode;\n              var components = this.tmpCompsBuf;\n              for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n                var ci = this.readBits(bitsPerComponent);\n                components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n              }\n              var color = this.tmpCsCompsBuf;\n              if (this.context.colorFn) {\n                this.context.colorFn(components, 0, color, 0);\n              }\n              return this.context.colorSpace.getRgb(color, 0);\n            }\n          }, {\n            key: \"hasData\",\n            get: function get() {\n              if (this.stream.end) {\n                return this.stream.pos < this.stream.end;\n              }\n              if (this.bufferLength > 0) {\n                return true;\n              }\n              var nextByte = this.stream.getByte();\n              if (nextByte < 0) {\n                return false;\n              }\n              this.buffer = nextByte;\n              this.bufferLength = 8;\n              return true;\n            }\n          }]);\n          return MeshStreamReader;\n        }();\n        var getB = function getBClosure() {\n          function buildB(count) {\n            var lut = [];\n            for (var i = 0; i <= count; i++) {\n              var t = i / count,\n                t_ = 1 - t;\n              lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));\n            }\n            return lut;\n          }\n          var cache = [];\n          return function (count) {\n            if (!cache[count]) {\n              cache[count] = buildB(count);\n            }\n            return cache[count];\n          };\n        }();\n        var MeshShading = /*#__PURE__*/function (_BaseShading2) {\n          _inherits(MeshShading, _BaseShading2);\n          _createClass(MeshShading, null, [{\n            key: \"MIN_SPLIT_PATCH_CHUNKS_AMOUNT\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MIN_SPLIT_PATCH_CHUNKS_AMOUNT\", 3);\n            }\n          }, {\n            key: \"MAX_SPLIT_PATCH_CHUNKS_AMOUNT\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MAX_SPLIT_PATCH_CHUNKS_AMOUNT\", 20);\n            }\n          }, {\n            key: \"TRIANGLE_DENSITY\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"TRIANGLE_DENSITY\", 20);\n            }\n          }]);\n          function MeshShading(stream, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n            var _this83;\n            _classCallCheck(this, MeshShading);\n            _this83 = _possibleConstructorReturn(this, _getPrototypeOf(MeshShading).call(this));\n            if (!(stream instanceof _base_stream.BaseStream)) {\n              throw new _util.FormatError(\"Mesh data is not a stream\");\n            }\n            var dict = stream.dict;\n            _this83.shadingType = dict.get(\"ShadingType\");\n            var bbox = dict.getArray(\"BBox\");\n            if (Array.isArray(bbox) && bbox.length === 4) {\n              _this83.bbox = _util.Util.normalizeRect(bbox);\n            } else {\n              _this83.bbox = null;\n            }\n            var cs = _colorspace.ColorSpace.parse({\n              cs: dict.getRaw(\"CS\") || dict.getRaw(\"ColorSpace\"),\n              xref: xref,\n              resources: resources,\n              pdfFunctionFactory: pdfFunctionFactory,\n              localColorSpaceCache: localColorSpaceCache\n            });\n            _this83.background = dict.has(\"Background\") ? cs.getRgb(dict.get(\"Background\"), 0) : null;\n            var fnObj = dict.getRaw(\"Function\");\n            var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n            _this83.coords = [];\n            _this83.colors = [];\n            _this83.figures = [];\n            var decodeContext = {\n              bitsPerCoordinate: dict.get(\"BitsPerCoordinate\"),\n              bitsPerComponent: dict.get(\"BitsPerComponent\"),\n              bitsPerFlag: dict.get(\"BitsPerFlag\"),\n              decode: dict.getArray(\"Decode\"),\n              colorFn: fn,\n              colorSpace: cs,\n              numComps: fn ? 1 : cs.numComps\n            };\n            var reader = new MeshStreamReader(stream, decodeContext);\n            var patchMesh = false;\n            switch (_this83.shadingType) {\n              case ShadingType.FREE_FORM_MESH:\n                _this83._decodeType4Shading(reader);\n                break;\n              case ShadingType.LATTICE_FORM_MESH:\n                var verticesPerRow = dict.get(\"VerticesPerRow\") | 0;\n                if (verticesPerRow < 2) {\n                  throw new _util.FormatError(\"Invalid VerticesPerRow\");\n                }\n                _this83._decodeType5Shading(reader, verticesPerRow);\n                break;\n              case ShadingType.COONS_PATCH_MESH:\n                _this83._decodeType6Shading(reader);\n                patchMesh = true;\n                break;\n              case ShadingType.TENSOR_PATCH_MESH:\n                _this83._decodeType7Shading(reader);\n                patchMesh = true;\n                break;\n              default:\n                (0, _util.unreachable)(\"Unsupported mesh type.\");\n                break;\n            }\n            if (patchMesh) {\n              _this83._updateBounds();\n              for (var i = 0, ii = _this83.figures.length; i < ii; i++) {\n                _this83._buildFigureFromPatch(i);\n              }\n            }\n            _this83._updateBounds();\n            _this83._packData();\n            return _this83;\n          }\n          _createClass(MeshShading, [{\n            key: \"_decodeType4Shading\",\n            value: function _decodeType4Shading(reader) {\n              var coords = this.coords;\n              var colors = this.colors;\n              var operators = [];\n              var ps = [];\n              var verticesLeft = 0;\n              while (reader.hasData) {\n                var f = reader.readFlag();\n                var coord = reader.readCoordinate();\n                var color = reader.readComponents();\n                if (verticesLeft === 0) {\n                  if (!(0 <= f && f <= 2)) {\n                    throw new _util.FormatError(\"Unknown type4 flag\");\n                  }\n                  switch (f) {\n                    case 0:\n                      verticesLeft = 3;\n                      break;\n                    case 1:\n                      ps.push(ps.at(-2), ps.at(-1));\n                      verticesLeft = 1;\n                      break;\n                    case 2:\n                      ps.push(ps.at(-3), ps.at(-1));\n                      verticesLeft = 1;\n                      break;\n                  }\n                  operators.push(f);\n                }\n                ps.push(coords.length);\n                coords.push(coord);\n                colors.push(color);\n                verticesLeft--;\n                reader.align();\n              }\n              this.figures.push({\n                type: \"triangles\",\n                coords: new Int32Array(ps),\n                colors: new Int32Array(ps)\n              });\n            }\n          }, {\n            key: \"_decodeType5Shading\",\n            value: function _decodeType5Shading(reader, verticesPerRow) {\n              var coords = this.coords;\n              var colors = this.colors;\n              var ps = [];\n              while (reader.hasData) {\n                var coord = reader.readCoordinate();\n                var color = reader.readComponents();\n                ps.push(coords.length);\n                coords.push(coord);\n                colors.push(color);\n              }\n              this.figures.push({\n                type: \"lattice\",\n                coords: new Int32Array(ps),\n                colors: new Int32Array(ps),\n                verticesPerRow: verticesPerRow\n              });\n            }\n          }, {\n            key: \"_decodeType6Shading\",\n            value: function _decodeType6Shading(reader) {\n              var coords = this.coords;\n              var colors = this.colors;\n              var ps = new Int32Array(16);\n              var cs = new Int32Array(4);\n              while (reader.hasData) {\n                var f = reader.readFlag();\n                if (!(0 <= f && f <= 3)) {\n                  throw new _util.FormatError(\"Unknown type6 flag\");\n                }\n                var pi = coords.length;\n                for (var i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n                  coords.push(reader.readCoordinate());\n                }\n                var ci = colors.length;\n                for (var _i46 = 0, _ii8 = f !== 0 ? 2 : 4; _i46 < _ii8; _i46++) {\n                  colors.push(reader.readComponents());\n                }\n                var tmp1 = void 0,\n                  tmp2 = void 0,\n                  tmp3 = void 0,\n                  tmp4 = void 0;\n                switch (f) {\n                  case 0:\n                    ps[12] = pi + 3;\n                    ps[13] = pi + 4;\n                    ps[14] = pi + 5;\n                    ps[15] = pi + 6;\n                    ps[8] = pi + 2;\n                    ps[11] = pi + 7;\n                    ps[4] = pi + 1;\n                    ps[7] = pi + 8;\n                    ps[0] = pi;\n                    ps[1] = pi + 11;\n                    ps[2] = pi + 10;\n                    ps[3] = pi + 9;\n                    cs[2] = ci + 1;\n                    cs[3] = ci + 2;\n                    cs[0] = ci;\n                    cs[1] = ci + 3;\n                    break;\n                  case 1:\n                    tmp1 = ps[12];\n                    tmp2 = ps[13];\n                    tmp3 = ps[14];\n                    tmp4 = ps[15];\n                    ps[12] = tmp4;\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = tmp3;\n                    ps[11] = pi + 3;\n                    ps[4] = tmp2;\n                    ps[7] = pi + 4;\n                    ps[0] = tmp1;\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    tmp1 = cs[2];\n                    tmp2 = cs[3];\n                    cs[2] = tmp2;\n                    cs[3] = ci;\n                    cs[0] = tmp1;\n                    cs[1] = ci + 1;\n                    break;\n                  case 2:\n                    tmp1 = ps[15];\n                    tmp2 = ps[11];\n                    ps[12] = ps[3];\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = ps[7];\n                    ps[11] = pi + 3;\n                    ps[4] = tmp2;\n                    ps[7] = pi + 4;\n                    ps[0] = tmp1;\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    tmp1 = cs[3];\n                    cs[2] = cs[1];\n                    cs[3] = ci;\n                    cs[0] = tmp1;\n                    cs[1] = ci + 1;\n                    break;\n                  case 3:\n                    ps[12] = ps[0];\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = ps[1];\n                    ps[11] = pi + 3;\n                    ps[4] = ps[2];\n                    ps[7] = pi + 4;\n                    ps[0] = ps[3];\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    cs[2] = cs[0];\n                    cs[3] = ci;\n                    cs[0] = cs[1];\n                    cs[1] = ci + 1;\n                    break;\n                }\n                ps[5] = coords.length;\n                coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);\n                ps[6] = coords.length;\n                coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);\n                ps[9] = coords.length;\n                coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);\n                ps[10] = coords.length;\n                coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);\n                this.figures.push({\n                  type: \"patch\",\n                  coords: new Int32Array(ps),\n                  colors: new Int32Array(cs)\n                });\n              }\n            }\n          }, {\n            key: \"_decodeType7Shading\",\n            value: function _decodeType7Shading(reader) {\n              var coords = this.coords;\n              var colors = this.colors;\n              var ps = new Int32Array(16);\n              var cs = new Int32Array(4);\n              while (reader.hasData) {\n                var f = reader.readFlag();\n                if (!(0 <= f && f <= 3)) {\n                  throw new _util.FormatError(\"Unknown type7 flag\");\n                }\n                var pi = coords.length;\n                for (var i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n                  coords.push(reader.readCoordinate());\n                }\n                var ci = colors.length;\n                for (var _i47 = 0, _ii9 = f !== 0 ? 2 : 4; _i47 < _ii9; _i47++) {\n                  colors.push(reader.readComponents());\n                }\n                var tmp1 = void 0,\n                  tmp2 = void 0,\n                  tmp3 = void 0,\n                  tmp4 = void 0;\n                switch (f) {\n                  case 0:\n                    ps[12] = pi + 3;\n                    ps[13] = pi + 4;\n                    ps[14] = pi + 5;\n                    ps[15] = pi + 6;\n                    ps[8] = pi + 2;\n                    ps[9] = pi + 13;\n                    ps[10] = pi + 14;\n                    ps[11] = pi + 7;\n                    ps[4] = pi + 1;\n                    ps[5] = pi + 12;\n                    ps[6] = pi + 15;\n                    ps[7] = pi + 8;\n                    ps[0] = pi;\n                    ps[1] = pi + 11;\n                    ps[2] = pi + 10;\n                    ps[3] = pi + 9;\n                    cs[2] = ci + 1;\n                    cs[3] = ci + 2;\n                    cs[0] = ci;\n                    cs[1] = ci + 3;\n                    break;\n                  case 1:\n                    tmp1 = ps[12];\n                    tmp2 = ps[13];\n                    tmp3 = ps[14];\n                    tmp4 = ps[15];\n                    ps[12] = tmp4;\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = tmp3;\n                    ps[9] = pi + 9;\n                    ps[10] = pi + 10;\n                    ps[11] = pi + 3;\n                    ps[4] = tmp2;\n                    ps[5] = pi + 8;\n                    ps[6] = pi + 11;\n                    ps[7] = pi + 4;\n                    ps[0] = tmp1;\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    tmp1 = cs[2];\n                    tmp2 = cs[3];\n                    cs[2] = tmp2;\n                    cs[3] = ci;\n                    cs[0] = tmp1;\n                    cs[1] = ci + 1;\n                    break;\n                  case 2:\n                    tmp1 = ps[15];\n                    tmp2 = ps[11];\n                    ps[12] = ps[3];\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = ps[7];\n                    ps[9] = pi + 9;\n                    ps[10] = pi + 10;\n                    ps[11] = pi + 3;\n                    ps[4] = tmp2;\n                    ps[5] = pi + 8;\n                    ps[6] = pi + 11;\n                    ps[7] = pi + 4;\n                    ps[0] = tmp1;\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    tmp1 = cs[3];\n                    cs[2] = cs[1];\n                    cs[3] = ci;\n                    cs[0] = tmp1;\n                    cs[1] = ci + 1;\n                    break;\n                  case 3:\n                    ps[12] = ps[0];\n                    ps[13] = pi + 0;\n                    ps[14] = pi + 1;\n                    ps[15] = pi + 2;\n                    ps[8] = ps[1];\n                    ps[9] = pi + 9;\n                    ps[10] = pi + 10;\n                    ps[11] = pi + 3;\n                    ps[4] = ps[2];\n                    ps[5] = pi + 8;\n                    ps[6] = pi + 11;\n                    ps[7] = pi + 4;\n                    ps[0] = ps[3];\n                    ps[1] = pi + 7;\n                    ps[2] = pi + 6;\n                    ps[3] = pi + 5;\n                    cs[2] = cs[0];\n                    cs[3] = ci;\n                    cs[0] = cs[1];\n                    cs[1] = ci + 1;\n                    break;\n                }\n                this.figures.push({\n                  type: \"patch\",\n                  coords: new Int32Array(ps),\n                  colors: new Int32Array(cs)\n                });\n              }\n            }\n          }, {\n            key: \"_buildFigureFromPatch\",\n            value: function _buildFigureFromPatch(index) {\n              var figure = this.figures[index];\n              (0, _util.assert)(figure.type === \"patch\", \"Unexpected patch mesh figure\");\n              var coords = this.coords,\n                colors = this.colors;\n              var pi = figure.coords;\n              var ci = figure.colors;\n              var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n              var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n              var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n              var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n              var splitXBy = Math.ceil((figureMaxX - figureMinX) * MeshShading.TRIANGLE_DENSITY / (this.bounds[2] - this.bounds[0]));\n              splitXBy = Math.max(MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));\n              var splitYBy = Math.ceil((figureMaxY - figureMinY) * MeshShading.TRIANGLE_DENSITY / (this.bounds[3] - this.bounds[1]));\n              splitYBy = Math.max(MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));\n              var verticesPerRow = splitXBy + 1;\n              var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n              var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n              var k = 0;\n              var cl = new Uint8Array(3),\n                cr = new Uint8Array(3);\n              var c0 = colors[ci[0]],\n                c1 = colors[ci[1]],\n                c2 = colors[ci[2]],\n                c3 = colors[ci[3]];\n              var bRow = getB(splitYBy),\n                bCol = getB(splitXBy);\n              for (var row = 0; row <= splitYBy; row++) {\n                cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;\n                cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;\n                cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;\n                cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;\n                cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;\n                cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;\n                for (var col = 0; col <= splitXBy; col++, k++) {\n                  if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {\n                    continue;\n                  }\n                  var x = 0,\n                    y = 0;\n                  var q = 0;\n                  for (var i = 0; i <= 3; i++) {\n                    for (var j = 0; j <= 3; j++, q++) {\n                      var m = bRow[row][i] * bCol[col][j];\n                      x += coords[pi[q]][0] * m;\n                      y += coords[pi[q]][1] * m;\n                    }\n                  }\n                  figureCoords[k] = coords.length;\n                  coords.push([x, y]);\n                  figureColors[k] = colors.length;\n                  var newColor = new Uint8Array(3);\n                  newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;\n                  newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;\n                  newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;\n                  colors.push(newColor);\n                }\n              }\n              figureCoords[0] = pi[0];\n              figureColors[0] = ci[0];\n              figureCoords[splitXBy] = pi[3];\n              figureColors[splitXBy] = ci[1];\n              figureCoords[verticesPerRow * splitYBy] = pi[12];\n              figureColors[verticesPerRow * splitYBy] = ci[2];\n              figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n              figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n              this.figures[index] = {\n                type: \"lattice\",\n                coords: figureCoords,\n                colors: figureColors,\n                verticesPerRow: verticesPerRow\n              };\n            }\n          }, {\n            key: \"_updateBounds\",\n            value: function _updateBounds() {\n              var minX = this.coords[0][0],\n                minY = this.coords[0][1],\n                maxX = minX,\n                maxY = minY;\n              for (var i = 1, ii = this.coords.length; i < ii; i++) {\n                var x = this.coords[i][0],\n                  y = this.coords[i][1];\n                minX = minX > x ? x : minX;\n                minY = minY > y ? y : minY;\n                maxX = maxX < x ? x : maxX;\n                maxY = maxY < y ? y : maxY;\n              }\n              this.bounds = [minX, minY, maxX, maxY];\n            }\n          }, {\n            key: \"_packData\",\n            value: function _packData() {\n              var i, ii, j, jj;\n              var coords = this.coords;\n              var coordsPacked = new Float32Array(coords.length * 2);\n              for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n                var xy = coords[i];\n                coordsPacked[j++] = xy[0];\n                coordsPacked[j++] = xy[1];\n              }\n              this.coords = coordsPacked;\n              var colors = this.colors;\n              var colorsPacked = new Uint8Array(colors.length * 3);\n              for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n                var c = colors[i];\n                colorsPacked[j++] = c[0];\n                colorsPacked[j++] = c[1];\n                colorsPacked[j++] = c[2];\n              }\n              this.colors = colorsPacked;\n              var figures = this.figures;\n              for (i = 0, ii = figures.length; i < ii; i++) {\n                var figure = figures[i],\n                  ps = figure.coords,\n                  cs = figure.colors;\n                for (j = 0, jj = ps.length; j < jj; j++) {\n                  ps[j] *= 2;\n                  cs[j] *= 3;\n                }\n              }\n            }\n          }, {\n            key: \"getIR\",\n            value: function getIR() {\n              return [\"Mesh\", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.bbox, this.background];\n            }\n          }]);\n          return MeshShading;\n        }(BaseShading);\n        var DummyShading = /*#__PURE__*/function (_BaseShading3) {\n          _inherits(DummyShading, _BaseShading3);\n          function DummyShading() {\n            _classCallCheck(this, DummyShading);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DummyShading).apply(this, arguments));\n          }\n          _createClass(DummyShading, [{\n            key: \"getIR\",\n            value: function getIR() {\n              return [\"Dummy\"];\n            }\n          }]);\n          return DummyShading;\n        }(BaseShading);\n        function getTilingPatternIR(operatorList, dict, color) {\n          var matrix = dict.getArray(\"Matrix\");\n          var bbox = _util.Util.normalizeRect(dict.getArray(\"BBox\"));\n          var xstep = dict.get(\"XStep\");\n          var ystep = dict.get(\"YStep\");\n          var paintType = dict.get(\"PaintType\");\n          var tilingType = dict.get(\"TilingType\");\n          if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n            throw new _util.FormatError(\"Invalid getTilingPatternIR /BBox array: [\".concat(bbox, \"].\"));\n          }\n          return [\"TilingPattern\", color, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];\n        }\n\n        /***/\n      }, /* 51 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getXfaFontDict = getXfaFontDict;\n        exports.getXfaFontName = getXfaFontName;\n        var _calibri_factors = __w_pdfjs_require__(52);\n        var _primitives = __w_pdfjs_require__(5);\n        var _helvetica_factors = __w_pdfjs_require__(53);\n        var _liberationsans_widths = __w_pdfjs_require__(54);\n        var _myriadpro_factors = __w_pdfjs_require__(55);\n        var _segoeui_factors = __w_pdfjs_require__(56);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _fonts_utils = __w_pdfjs_require__(38);\n        var getXFAFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n          t[\"MyriadPro-Regular\"] = t[\"PdfJS-Fallback-Regular\"] = {\n            name: \"LiberationSans-Regular\",\n            factors: _myriadpro_factors.MyriadProRegularFactors,\n            baseWidths: _liberationsans_widths.LiberationSansRegularWidths,\n            baseMapping: _liberationsans_widths.LiberationSansRegularMapping,\n            metrics: _myriadpro_factors.MyriadProRegularMetrics\n          };\n          t[\"MyriadPro-Bold\"] = t[\"PdfJS-Fallback-Bold\"] = {\n            name: \"LiberationSans-Bold\",\n            factors: _myriadpro_factors.MyriadProBoldFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldMapping,\n            metrics: _myriadpro_factors.MyriadProBoldMetrics\n          };\n          t[\"MyriadPro-It\"] = t[\"MyriadPro-Italic\"] = t[\"PdfJS-Fallback-Italic\"] = {\n            name: \"LiberationSans-Italic\",\n            factors: _myriadpro_factors.MyriadProItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansItalicMapping,\n            metrics: _myriadpro_factors.MyriadProItalicMetrics\n          };\n          t[\"MyriadPro-BoldIt\"] = t[\"MyriadPro-BoldItalic\"] = t[\"PdfJS-Fallback-BoldItalic\"] = {\n            name: \"LiberationSans-BoldItalic\",\n            factors: _myriadpro_factors.MyriadProBoldItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,\n            metrics: _myriadpro_factors.MyriadProBoldItalicMetrics\n          };\n          t.ArialMT = t.Arial = t[\"Arial-Regular\"] = {\n            name: \"LiberationSans-Regular\",\n            baseWidths: _liberationsans_widths.LiberationSansRegularWidths,\n            baseMapping: _liberationsans_widths.LiberationSansRegularMapping\n          };\n          t[\"Arial-BoldMT\"] = t[\"Arial-Bold\"] = {\n            name: \"LiberationSans-Bold\",\n            baseWidths: _liberationsans_widths.LiberationSansBoldWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldMapping\n          };\n          t[\"Arial-ItalicMT\"] = t[\"Arial-Italic\"] = {\n            name: \"LiberationSans-Italic\",\n            baseWidths: _liberationsans_widths.LiberationSansItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansItalicMapping\n          };\n          t[\"Arial-BoldItalicMT\"] = t[\"Arial-BoldItalic\"] = {\n            name: \"LiberationSans-BoldItalic\",\n            baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping\n          };\n          t[\"Calibri-Regular\"] = {\n            name: \"LiberationSans-Regular\",\n            factors: _calibri_factors.CalibriRegularFactors,\n            baseWidths: _liberationsans_widths.LiberationSansRegularWidths,\n            baseMapping: _liberationsans_widths.LiberationSansRegularMapping,\n            metrics: _calibri_factors.CalibriRegularMetrics\n          };\n          t[\"Calibri-Bold\"] = {\n            name: \"LiberationSans-Bold\",\n            factors: _calibri_factors.CalibriBoldFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldMapping,\n            metrics: _calibri_factors.CalibriBoldMetrics\n          };\n          t[\"Calibri-Italic\"] = {\n            name: \"LiberationSans-Italic\",\n            factors: _calibri_factors.CalibriItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansItalicMapping,\n            metrics: _calibri_factors.CalibriItalicMetrics\n          };\n          t[\"Calibri-BoldItalic\"] = {\n            name: \"LiberationSans-BoldItalic\",\n            factors: _calibri_factors.CalibriBoldItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,\n            metrics: _calibri_factors.CalibriBoldItalicMetrics\n          };\n          t[\"Segoeui-Regular\"] = {\n            name: \"LiberationSans-Regular\",\n            factors: _segoeui_factors.SegoeuiRegularFactors,\n            baseWidths: _liberationsans_widths.LiberationSansRegularWidths,\n            baseMapping: _liberationsans_widths.LiberationSansRegularMapping,\n            metrics: _segoeui_factors.SegoeuiRegularMetrics\n          };\n          t[\"Segoeui-Bold\"] = {\n            name: \"LiberationSans-Bold\",\n            factors: _segoeui_factors.SegoeuiBoldFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldMapping,\n            metrics: _segoeui_factors.SegoeuiBoldMetrics\n          };\n          t[\"Segoeui-Italic\"] = {\n            name: \"LiberationSans-Italic\",\n            factors: _segoeui_factors.SegoeuiItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansItalicMapping,\n            metrics: _segoeui_factors.SegoeuiItalicMetrics\n          };\n          t[\"Segoeui-BoldItalic\"] = {\n            name: \"LiberationSans-BoldItalic\",\n            factors: _segoeui_factors.SegoeuiBoldItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,\n            metrics: _segoeui_factors.SegoeuiBoldItalicMetrics\n          };\n          t[\"Helvetica-Regular\"] = t.Helvetica = {\n            name: \"LiberationSans-Regular\",\n            factors: _helvetica_factors.HelveticaRegularFactors,\n            baseWidths: _liberationsans_widths.LiberationSansRegularWidths,\n            baseMapping: _liberationsans_widths.LiberationSansRegularMapping,\n            metrics: _helvetica_factors.HelveticaRegularMetrics\n          };\n          t[\"Helvetica-Bold\"] = {\n            name: \"LiberationSans-Bold\",\n            factors: _helvetica_factors.HelveticaBoldFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldMapping,\n            metrics: _helvetica_factors.HelveticaBoldMetrics\n          };\n          t[\"Helvetica-Italic\"] = {\n            name: \"LiberationSans-Italic\",\n            factors: _helvetica_factors.HelveticaItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansItalicMapping,\n            metrics: _helvetica_factors.HelveticaItalicMetrics\n          };\n          t[\"Helvetica-BoldItalic\"] = {\n            name: \"LiberationSans-BoldItalic\",\n            factors: _helvetica_factors.HelveticaBoldItalicFactors,\n            baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,\n            baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,\n            metrics: _helvetica_factors.HelveticaBoldItalicMetrics\n          };\n        });\n        function getXfaFontName(name) {\n          var fontName = (0, _fonts_utils.normalizeFontName)(name);\n          var fontMap = getXFAFontMap();\n          return fontMap[fontName];\n        }\n        function getXfaFontWidths(name) {\n          var info = getXfaFontName(name);\n          if (!info) {\n            return null;\n          }\n          var baseWidths = info.baseWidths,\n            baseMapping = info.baseMapping,\n            factors = info.factors;\n          var rescaledBaseWidths;\n          if (!factors) {\n            rescaledBaseWidths = baseWidths;\n          } else {\n            rescaledBaseWidths = baseWidths.map(function (w, i) {\n              return w * factors[i];\n            });\n          }\n          var currentCode = -2;\n          var currentArray;\n          var newWidths = [];\n          var _iterator89 = _createForOfIteratorHelper(baseMapping.map(function (charUnicode, index) {\n              return [charUnicode, index];\n            }).sort(function (_ref65, _ref66) {\n              var _ref67 = _slicedToArray(_ref65, 1),\n                unicode1 = _ref67[0];\n              var _ref68 = _slicedToArray(_ref66, 1),\n                unicode2 = _ref68[0];\n              return unicode1 - unicode2;\n            })),\n            _step89;\n          try {\n            for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {\n              var _step89$value = _slicedToArray(_step89.value, 2),\n                unicode = _step89$value[0],\n                glyphIndex = _step89$value[1];\n              if (unicode === -1) {\n                continue;\n              }\n              if (unicode === currentCode + 1) {\n                currentArray.push(rescaledBaseWidths[glyphIndex]);\n                currentCode += 1;\n              } else {\n                currentCode = unicode;\n                currentArray = [rescaledBaseWidths[glyphIndex]];\n                newWidths.push(unicode, currentArray);\n              }\n            }\n          } catch (err) {\n            _iterator89.e(err);\n          } finally {\n            _iterator89.f();\n          }\n          return newWidths;\n        }\n        function getXfaFontDict(name) {\n          var widths = getXfaFontWidths(name);\n          var dict = new _primitives.Dict(null);\n          dict.set(\"BaseFont\", _primitives.Name.get(name));\n          dict.set(\"Type\", _primitives.Name.get(\"Font\"));\n          dict.set(\"Subtype\", _primitives.Name.get(\"CIDFontType2\"));\n          dict.set(\"Encoding\", _primitives.Name.get(\"Identity-H\"));\n          dict.set(\"CIDToGIDMap\", _primitives.Name.get(\"Identity\"));\n          dict.set(\"W\", widths);\n          dict.set(\"FirstChar\", widths[0]);\n          dict.set(\"LastChar\", widths.at(-2) + widths.at(-1).length - 1);\n          var descriptor = new _primitives.Dict(null);\n          dict.set(\"FontDescriptor\", descriptor);\n          var systemInfo = new _primitives.Dict(null);\n          systemInfo.set(\"Ordering\", \"Identity\");\n          systemInfo.set(\"Registry\", \"Adobe\");\n          systemInfo.set(\"Supplement\", 0);\n          dict.set(\"CIDSystemInfo\", systemInfo);\n          return dict;\n        }\n\n        /***/\n      }, /* 52 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CalibriRegularMetrics = exports.CalibriRegularFactors = exports.CalibriItalicMetrics = exports.CalibriItalicFactors = exports.CalibriBoldMetrics = exports.CalibriBoldItalicMetrics = exports.CalibriBoldItalicFactors = exports.CalibriBoldFactors = void 0;\n        var CalibriBoldFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.54657, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.73293, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943, 0.79795, 0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017, 0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284, 0.89552, 0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518, 0.95015, 0.77618, 0.8785, 0.88401, 0.91916, 0.86304, 0.88401, 0.91488, 0.8785, 0.8801, 0.8785, 0.8785, 0.91343, 0.7173, 1.04106, 0.8785, 0.85075, 0.95794, 0.82616, 0.85162, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.12401, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.9121, 0.86943, 0.86943, 0.86943, 0.86943, 0.86943, 0.85284, 0.87508, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801, 0.8801, 0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785, 0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762, 0.83908, 0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.87289, 0.83016, 0.88506, 0.93125, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.81921, 0.77618, 0.81921, 0.77618, 0.81921, 0.77618, 1, 1, 0.87356, 0.8785, 0.91075, 0.89608, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926, 0.88175, 0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785, 0.87802, 0.88656, 0.8785, 0.86943, 0.8801, 0.86943, 0.8801, 0.86943, 0.8801, 0.87402, 0.89291, 0.77958, 0.91343, 1, 1, 0.77958, 0.91343, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794, 0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539, 0.8715, 0.87508, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70674, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.06303, 0.83908, 0.80352, 0.57184, 0.6965, 0.56289, 0.82001, 0.56029, 0.81235, 1.02988, 0.83908, 0.7762, 0.68156, 0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958, 0.75727, 0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795, 0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896, 0.95958, 0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211, 0.96108, 0.8936, 0.84021, 0.87842, 0.96399, 0.79109, 0.89049, 1.00813, 1.02988, 0.86077, 0.87445, 0.92099, 0.84723, 0.86513, 0.8801, 0.75638, 0.85714, 0.78216, 0.79586, 0.87965, 0.94211, 0.97747, 0.78287, 0.97926, 0.84971, 1.02988, 0.94211, 0.8801, 0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90518, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1, 1, 1, 1, 1, 1, 0.96017, 0.95794, 0.96017, 0.95794, 0.96017, 0.95794, 0.77892, 0.85162, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.92794, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133, 0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.CalibriBoldFactors = CalibriBoldFactors;\n        var CalibriBoldMetrics = {\n          lineHeight: 1.2207,\n          lineGap: 0.2207\n        };\n        exports.CalibriBoldMetrics = CalibriBoldMetrics;\n        var CalibriBoldItalicFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.56239, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.71805, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938, 0.79795, 0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068, 0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284, 0.89552, 0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323, 0.95015, 0.86411, 0.86331, 0.88401, 0.91916, 0.86304, 0.88401, 0.9039, 0.86331, 0.86331, 0.86411, 0.86411, 0.90464, 0.70852, 1.04106, 0.86331, 0.84372, 0.95794, 0.82616, 0.84548, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.19129, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.71805, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.90872, 0.85938, 0.85938, 0.85938, 0.85938, 0.85938, 0.85284, 0.87068, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331, 0.86331, 0.86331, 0.86331, 0.84548, 0.86411, 0.84548, 0.83908, 0.94908, 0.83908, 0.94908, 0.83908, 0.94908, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.87289, 0.79538, 0.88506, 0.92726, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.81921, 0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356, 0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.77312, 0.91926, 0.88175, 0.70823, 0.94903, 0.90872, 0.86331, 1, 1, 0.90872, 0.86331, 0.86906, 0.88116, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.87402, 0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.96068, 0.95794, 0.77892, 0.84548, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.94908, 0.77539, 0.85887, 0.87068, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70088, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387, 0.83908, 0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346, 1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257, 0.87356, 0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872, 0.74889, 0.85938, 0.87891, 0.79795, 0.7957, 0.81055, 0.77892, 0.97447, 0.82577, 0.97466, 0.87179, 0.95958, 0.77892, 0.94252, 0.95612, 0.8753, 1.02988, 0.92733, 0.94252, 0.87411, 0.84021, 0.8728, 0.95612, 0.74081, 0.8753, 1.02189, 1.02988, 0.84814, 0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344, 0.87581, 0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452, 0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1, 1, 0.96068, 0.95794, 0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972, 0.83406, 0.91133, 0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90616, 1.81055, 0.90527, 1.81055, 1.3107, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.CalibriBoldItalicFactors = CalibriBoldItalicFactors;\n        var CalibriBoldItalicMetrics = {\n          lineHeight: 1.2207,\n          lineGap: 0.2207\n        };\n        exports.CalibriBoldItalicMetrics = CalibriBoldItalicMetrics;\n        var CalibriItalicFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39543, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.72346, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118, 0.77452, 0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309, 0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139, 0.89552, 0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865, 1.09842, 0.9245, 0.9245, 1.03297, 1.07692, 0.90918, 1.03297, 0.94959, 0.9245, 0.92274, 0.9245, 0.9245, 1.02933, 0.77832, 1.20562, 0.9245, 0.8916, 0.98986, 0.86621, 0.89453, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.72346, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89249, 0.84118, 0.84118, 0.84118, 0.84118, 0.84118, 0.85284, 0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843, 0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274, 0.92274, 0.92274, 0.90747, 0.86651, 0.9245, 0.9245, 0.9245, 0.9245, 0.89453, 0.9245, 0.89453, 0.8675, 0.9245, 0.8675, 0.9245, 0.8675, 0.9245, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.85193, 0.8875, 0.86477, 0.99034, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245, 0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.9375, 0.98156, 0.93407, 0.77261, 1.11429, 0.89249, 0.9245, 1, 1, 0.89249, 0.9245, 0.92534, 0.86698, 0.9245, 0.84118, 0.92274, 0.84118, 0.92274, 0.84118, 0.92274, 0.8667, 0.86291, 0.75186, 1.02933, 1, 1, 0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776, 1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309, 0.98986, 0.7306, 0.89453, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.9245, 0.76318, 0.84843, 0.84557, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192, 0.7363, 0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552, 0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685, 0.77892, 0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984, 0.77452, 0.76466, 0.79776, 0.7306, 0.90782, 0.77818, 0.903, 0.87291, 0.90685, 0.7306, 0.99058, 1.03667, 0.94635, 1.23516, 0.9849, 0.99058, 0.92393, 0.8916, 0.942, 1.03667, 0.75026, 0.94635, 1.0297, 1.23516, 0.90918, 0.94048, 0.98217, 0.89746, 0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178, 1.03525, 0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849, 0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85865, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986, 0.94309, 0.98986, 0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133, 0.83437, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90572, 1.81055, 0.90749, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85284, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.CalibriItalicFactors = CalibriItalicFactors;\n        var CalibriItalicMetrics = {\n          lineHeight: 1.2207,\n          lineGap: 0.2207\n        };\n        exports.CalibriItalicMetrics = CalibriItalicMetrics;\n        var CalibriRegularFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39016, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.73834, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122, 0.77452, 0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258, 0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139, 0.89552, 0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464, 1.09842, 0.84636, 0.94469, 1.03297, 1.07692, 0.90918, 1.03297, 0.95897, 0.94469, 0.9482, 0.94469, 0.94469, 1.04692, 0.78223, 1.20562, 0.94469, 0.90332, 0.98986, 0.86621, 0.90527, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.08707, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.73834, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89385, 0.85122, 0.85122, 0.85122, 0.85122, 0.85122, 0.85284, 0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482, 0.9482, 0.9482, 0.9482, 0.90747, 0.86651, 0.94469, 0.94469, 0.94469, 0.94469, 0.90527, 0.94469, 0.90527, 0.8675, 0.86128, 0.8675, 0.86128, 0.8675, 0.86128, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.85193, 0.92454, 0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636, 0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469, 0.90872, 0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77741, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.90452, 0.98156, 1.11842, 0.77261, 1.11429, 0.89385, 0.94469, 1, 1, 0.89385, 0.94469, 0.95877, 0.86901, 0.94469, 0.85122, 0.9482, 0.85122, 0.9482, 0.85122, 0.9482, 0.8667, 0.90016, 0.75186, 1.04692, 1, 1, 0.75186, 1.04692, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1, 0.79776, 0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.86128, 0.76318, 0.8693, 0.85311, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67742, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.86686, 0.90861, 0.62267, 0.74359, 0.65649, 0.85498, 0.56963, 0.88254, 1.23516, 0.8675, 0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275, 0.85122, 0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122, 0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818, 0.89772, 0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576, 1.23516, 0.99018, 0.98142, 0.9236, 0.89258, 0.94035, 1.02191, 0.78848, 0.96576, 0.9561, 1.23516, 0.90918, 0.92578, 0.95424, 0.89746, 0.83969, 0.9482, 0.80113, 0.89442, 0.85208, 0.86155, 0.98022, 0.99018, 1.00452, 0.81209, 0.99247, 0.89181, 1.23516, 0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96766, 1, 1, 1, 1, 1, 1, 0.94258, 0.98986, 0.94258, 0.98986, 0.94258, 0.98986, 0.7306, 0.90527, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133, 0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334, 1.08065, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.CalibriRegularFactors = CalibriRegularFactors;\n        var CalibriRegularMetrics = {\n          lineHeight: 1.2207,\n          lineGap: 0.2207\n        };\n        exports.CalibriRegularMetrics = CalibriRegularMetrics;\n\n        /***/\n      }, /* 53 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.HelveticaRegularMetrics = exports.HelveticaRegularFactors = exports.HelveticaItalicMetrics = exports.HelveticaItalicFactors = exports.HelveticaBoldMetrics = exports.HelveticaBoldItalicMetrics = exports.HelveticaBoldItalicFactors = exports.HelveticaBoldFactors = void 0;\n        var HelveticaBoldFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.03374, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.03828, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036, 0.99973, 1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026, 1.00001, 1.00024, 1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041, 0.99962, 1.00026, 1.0006, 0.99995, 1.00041, 0.99942, 0.99973, 0.99927, 1.00082, 0.99902, 1.00026, 1.00087, 1.0006, 1.00069, 0.99973, 0.99867, 0.99973, 0.9993, 1.00026, 1.00049, 1.00056, 1, 0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945, 1.00032, 1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008, 0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973, 1.00023, 1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977, 1.00035, 0.99977, 1.00019, 0.99944, 1.00001, 1.00021, 0.99926, 1.00035, 1.00035, 0.99942, 1.00048, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.99989, 1.00057, 1.00001, 0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1, 1.00035, 0.9994, 0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119, 1.00037, 0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996, 1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052, 0.99973, 1, 0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1, 1.00041, 0.99955, 1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119, 0.99955, 0.99973, 1.0006, 0.99911, 1.0006, 1.00026, 0.99972, 1.00026, 0.99902, 1.00041, 0.99973, 0.99999, 1, 1, 1.00038, 1.0005, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.HelveticaBoldFactors = HelveticaBoldFactors;\n        var HelveticaBoldMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.HelveticaBoldMetrics = HelveticaBoldMetrics;\n        var HelveticaBoldItalicFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.0044, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.01011, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972, 0.99981, 0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026, 1.00001, 0.99968, 1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981, 1.00101, 1.00026, 1.0006, 0.99948, 0.99981, 1.00064, 0.99973, 0.99942, 1.00101, 1.00061, 1.00026, 1.00069, 1.0006, 1.00014, 0.99973, 1.01322, 0.99973, 1.00065, 1.00026, 1.00012, 0.99923, 1, 1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007, 0.99943, 1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001, 1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973, 0.99978, 1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967, 0.99977, 0.99999, 0.99977, 1.00038, 0.99977, 1.00001, 0.99973, 1.00066, 0.99967, 0.99967, 1.00041, 0.99998, 0.99999, 0.99977, 1.00022, 0.99967, 1.00001, 0.99977, 1.00026, 0.99964, 1.00031, 1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1, 0.99999, 1.00035, 1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058, 0.99973, 0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989, 1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998, 0.99973, 1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994, 0.99996, 1, 1.00042, 1.00044, 1.00029, 1.00023, 0.99973, 0.99973, 1.00026, 0.99949, 1.00002, 0.99973, 1.0006, 1.0006, 1.0006, 0.99975, 1.00026, 1.00026, 1.00032, 0.98685, 0.99973, 1.00026, 1, 1, 0.99966, 1.00044, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1, 1.00049, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.HelveticaBoldItalicFactors = HelveticaBoldItalicFactors;\n        var HelveticaBoldItalicMetrics = {\n          lineHeight: 1.35,\n          lineGap: 0.2\n        };\n        exports.HelveticaBoldItalicMetrics = HelveticaBoldItalicMetrics;\n        var HelveticaItalicFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 0.99946, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.89547, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00001, 1, 1.00054, 0.99977, 1.00084, 1.00007, 0.99973, 1.00013, 0.99924, 1.00001, 1.00001, 0.99945, 0.91221, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054, 1.00001, 1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006, 1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945, 0.99949, 1, 1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924, 1, 0.99962, 1.01487, 1, 1.0005, 0.99973, 1.00012, 1.00043, 1, 0.99995, 0.99994, 1.00036, 0.99947, 1.00019, 1.00063, 1.00025, 0.99924, 1.00036, 0.99973, 1.00036, 1.00025, 1.00001, 1.00001, 1.00027, 1.0001, 1.00068, 1.00001, 1.0006, 1.0006, 1, 1.00008, 0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051, 1.00001, 1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038, 0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022, 1.00054, 1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001, 0.99993, 0.9995, 0.99955, 1.00016, 0.99978, 0.99974, 1.00019, 1.00022, 0.99955, 1.00053, 0.99973, 1.00089, 1.00005, 0.99967, 1.00048, 0.99973, 1.00002, 1.00034, 0.99973, 0.99973, 0.99964, 1.00006, 1.00066, 0.99947, 0.99973, 0.98894, 0.99973, 1, 0.44898, 1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991, 0.99985, 1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973, 0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983, 1.00044, 0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962, 0.99895, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925, 0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00049, 1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 1.00003, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.HelveticaItalicFactors = HelveticaItalicFactors;\n        var HelveticaItalicMetrics = {\n          lineHeight: 1.35,\n          lineGap: 0.2\n        };\n        exports.HelveticaItalicMetrics = HelveticaItalicMetrics;\n        var HelveticaRegularFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 1.00019, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.84533, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99928, 1, 0.99977, 1.00013, 1.00055, 0.99947, 0.99945, 0.99941, 0.99924, 1.00001, 1.00001, 1.0004, 0.91621, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977, 1.00001, 0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006, 1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978, 0.99966, 1, 1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924, 1, 1, 0.96499, 1, 1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997, 0.99995, 1.00023, 0.99933, 1.00019, 1.00015, 1.00031, 0.99924, 1.00023, 0.99973, 1.00023, 1.00031, 1.00001, 0.99928, 1.00029, 1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1, 0.99988, 0.99975, 1, 1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962, 1.00001, 1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035, 1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074, 1.00054, 1.00053, 1.00063, 0.99971, 0.99962, 1.00035, 0.99975, 0.99977, 0.99973, 1.00043, 0.99953, 1.0007, 0.99915, 0.99973, 1.00008, 0.99892, 1.00073, 1.00073, 1.00114, 0.99915, 1.00073, 0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998, 1, 1.0003, 1, 1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001, 0.9995, 1, 1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924, 1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1, 0.99955, 1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.HelveticaRegularFactors = HelveticaRegularFactors;\n        var HelveticaRegularMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.HelveticaRegularMetrics = HelveticaRegularMetrics;\n\n        /***/\n      }, /* 54 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.LiberationSansRegularWidths = exports.LiberationSansRegularMapping = exports.LiberationSansItalicWidths = exports.LiberationSansItalicMapping = exports.LiberationSansBoldWidths = exports.LiberationSansBoldMapping = exports.LiberationSansBoldItalicWidths = exports.LiberationSansBoldItalicMapping = void 0;\n        var LiberationSansBoldWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 785, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 385, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 465, 722, 333, 853, 906, 474, 825, 927, 838, 278, 722, 722, 601, 719, 667, 611, 722, 778, 278, 722, 667, 833, 722, 644, 778, 722, 667, 600, 611, 667, 821, 667, 809, 802, 278, 667, 615, 451, 611, 278, 582, 615, 610, 556, 606, 475, 460, 611, 541, 278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684, 446, 582, 715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567, 711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722, 719, 722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722, 778, 719, 667, 722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870, 979, 719, 711, 1031, 719, 556, 618, 615, 417, 635, 556, 709, 497, 615, 615, 500, 635, 740, 604, 611, 604, 611, 556, 490, 556, 875, 556, 615, 581, 833, 844, 729, 854, 615, 552, 854, 583, 556, 556, 611, 417, 552, 556, 278, 281, 278, 969, 906, 611, 500, 615, 556, 604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1094, 556, 885, 489, 1115, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];\n        exports.LiberationSansBoldWidths = LiberationSansBoldWidths;\n        var LiberationSansBoldMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        exports.LiberationSansBoldMapping = LiberationSansBoldMapping;\n        var LiberationSansBoldItalicWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 782, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 396, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 722, 333, 854, 906, 473, 844, 930, 847, 278, 722, 722, 610, 671, 667, 611, 722, 778, 278, 722, 667, 833, 722, 657, 778, 718, 667, 590, 611, 667, 822, 667, 829, 781, 278, 667, 620, 479, 611, 278, 591, 620, 621, 556, 610, 479, 492, 611, 558, 278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664, 409, 591, 704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614, 719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722, 708, 722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722, 778, 719, 667, 722, 611, 677, 781, 667, 729, 708, 979, 989, 854, 1000, 708, 719, 1042, 729, 556, 619, 604, 534, 618, 556, 736, 510, 611, 611, 507, 622, 740, 604, 611, 611, 611, 556, 889, 556, 885, 556, 646, 583, 889, 935, 707, 854, 594, 552, 865, 589, 556, 556, 611, 469, 563, 556, 278, 278, 278, 969, 906, 611, 507, 619, 556, 611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1104, 556, 885, 516, 1146, 1000, 768, 600, 834, 834, 834, 834, 999, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];\n        exports.LiberationSansBoldItalicWidths = LiberationSansBoldItalicWidths;\n        var LiberationSansBoldItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        exports.LiberationSansBoldItalicMapping = LiberationSansBoldItalicMapping;\n        var LiberationSansItalicWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 733, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 281, 556, 400, 556, 222, 722, 556, 722, 556, 722, 556, 615, 723, 556, 778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 789, 846, 389, 794, 865, 775, 222, 667, 667, 570, 671, 667, 611, 722, 778, 278, 667, 667, 833, 722, 648, 778, 725, 667, 600, 611, 667, 837, 667, 831, 761, 278, 667, 570, 439, 555, 222, 550, 570, 571, 500, 556, 439, 463, 555, 542, 222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603, 374, 550, 652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544, 708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667, 651, 667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722, 778, 725, 667, 722, 611, 639, 795, 667, 727, 673, 920, 923, 805, 886, 651, 694, 1022, 682, 556, 562, 522, 493, 553, 556, 688, 465, 556, 556, 472, 564, 686, 550, 556, 556, 556, 500, 833, 500, 835, 500, 572, 518, 830, 851, 621, 736, 526, 492, 752, 534, 556, 556, 556, 378, 496, 500, 222, 222, 222, 910, 828, 556, 472, 565, 500, 556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1083, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 998, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 584, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];\n        exports.LiberationSansItalicWidths = LiberationSansItalicWidths;\n        var LiberationSansItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        exports.LiberationSansItalicMapping = LiberationSansItalicMapping;\n        var LiberationSansRegularWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 735, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 292, 556, 334, 556, 222, 722, 556, 722, 556, 722, 556, 604, 723, 556, 778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 784, 838, 384, 774, 855, 752, 222, 667, 667, 551, 668, 667, 611, 722, 778, 278, 667, 668, 833, 722, 650, 778, 722, 667, 618, 611, 667, 798, 667, 835, 748, 278, 667, 578, 446, 556, 222, 547, 578, 575, 500, 557, 446, 441, 556, 556, 222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617, 395, 547, 648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542, 719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667, 656, 667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722, 778, 719, 667, 722, 611, 635, 760, 667, 740, 667, 917, 938, 792, 885, 656, 719, 1010, 722, 556, 573, 531, 365, 583, 556, 669, 458, 559, 559, 438, 583, 688, 552, 556, 542, 556, 500, 458, 500, 823, 500, 573, 521, 802, 823, 625, 719, 521, 510, 750, 542, 556, 556, 556, 365, 510, 500, 222, 278, 222, 906, 812, 556, 438, 559, 500, 552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1073, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];\n        exports.LiberationSansRegularWidths = LiberationSansRegularWidths;\n        var LiberationSansRegularMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        exports.LiberationSansRegularMapping = LiberationSansRegularMapping;\n\n        /***/\n      }, /* 55 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MyriadProRegularMetrics = exports.MyriadProRegularFactors = exports.MyriadProItalicMetrics = exports.MyriadProItalicFactors = exports.MyriadProBoldMetrics = exports.MyriadProBoldItalicMetrics = exports.MyriadProBoldItalicFactors = exports.MyriadProBoldFactors = void 0;\n        var MyriadProBoldFactors = [1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793, 0.9897, 0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058, 0.93582, 0.96694, 0.93582, 1.19137, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.72851, 0.78966, 0.90838, 0.83637, 0.82391, 0.96376, 0.80061, 0.86275, 0.8768, 0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156, 0.95546, 0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438, 0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777, 0.94292, 1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093, 0.97571, 0.94938, 1.024, 0.9577, 0.95933, 0.98621, 1.0474, 0.97455, 0.98981, 0.9672, 0.95933, 0.9446, 0.97898, 0.97407, 0.97646, 0.78036, 1.10208, 0.95442, 0.95298, 0.97579, 0.9332, 0.94039, 0.938, 0.80687, 1.01149, 0.80687, 1.02058, 0.80479, 0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872, 0.90088, 0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022, 1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686, 0.8361, 0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.868, 0.82391, 0.80061, 0.80061, 0.80061, 0.80061, 1.0258, 1.0258, 1.0258, 1.0258, 0.97484, 0.95546, 0.92179, 0.92179, 0.92179, 0.92179, 0.92179, 1.02058, 0.92179, 0.94438, 0.94438, 0.94438, 0.94438, 0.90406, 0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938, 0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446, 0.9446, 0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442, 0.95442, 0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938, 0.90838, 0.94938, 0.90838, 0.94938, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.96376, 0.84313, 0.97484, 0.97571, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.8768, 0.9577, 0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933, 0.97069, 0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474, 1, 1, 0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655, 0.73903, 0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933, 0.8271, 0.95417, 0.95933, 0.92179, 0.9446, 0.92179, 0.9446, 0.92179, 0.9446, 0.936, 0.91964, 0.82114, 0.97646, 1, 1, 0.82114, 0.97646, 0.8096, 0.78036, 0.8096, 0.78036, 1, 1, 0.8096, 0.78036, 1, 1, 0.89713, 0.77452, 0.89713, 1.10208, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406, 0.94039, 0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793, 0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713, 1.10208, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90989, 0.9358, 0.91945, 0.83181, 0.75261, 0.87992, 0.82976, 0.96034, 0.83689, 0.97268, 1.0078, 0.90838, 0.83637, 0.8019, 0.90157, 0.80061, 0.9446, 0.95407, 0.92436, 1.0258, 0.85022, 0.97153, 1.0156, 0.95546, 0.89192, 0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704, 0.95638, 0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373, 0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498, 0.98607, 0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314, 0.95617, 0.91701, 1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832, 1.0128, 0.95871, 0.99394, 0.87548, 0.96361, 0.86774, 1.0078, 0.95871, 0.9446, 0.95871, 0.86774, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579, 0.90406, 0.94039, 0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582, 0.93582, 1, 0.908, 0.908, 0.918, 0.94219, 0.94219, 0.96544, 1, 1.285, 1, 1, 0.81079, 0.81079, 1, 1, 0.74854, 1, 1, 1, 1, 0.99793, 1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1, 1, 1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.MyriadProBoldFactors = MyriadProBoldFactors;\n        var MyriadProBoldMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.MyriadProBoldMetrics = MyriadProBoldMetrics;\n        var MyriadProBoldItalicFactors = [1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276, 0.97733, 0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058, 0.93582, 0.96694, 0.93582, 1.17337, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.71541, 0.76813, 0.85576, 0.80591, 0.80729, 0.94299, 0.77512, 0.83655, 0.86523, 0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558, 0.92222, 0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699, 0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296, 0.94292, 1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216, 0.91677, 0.90083, 0.98796, 0.9135, 0.92168, 0.95381, 0.98981, 0.95298, 0.95381, 0.93459, 0.92168, 0.91513, 0.92004, 0.91677, 0.95077, 0.748, 1.04502, 0.91677, 0.92061, 0.94236, 0.89544, 0.89364, 0.9, 0.80687, 0.8578, 0.80687, 1.02058, 0.80779, 0.97276, 0.97276, 0.97276, 0.97276, 0.8578, 0.99973, 1.18616, 0.91339, 1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022, 1.08595, 1, 1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711, 0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512, 0.77512, 0.77512, 0.98621, 0.98621, 0.98621, 0.98621, 0.95961, 0.92222, 0.90637, 0.90637, 0.90637, 0.90637, 0.90637, 1.02058, 0.90251, 0.90699, 0.90699, 0.90699, 0.90699, 0.85458, 0.83659, 0.94951, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083, 0.95381, 0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513, 0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677, 0.91677, 0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613, 0.85576, 0.99613, 0.85576, 0.99613, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.94299, 0.76783, 0.95961, 0.91677, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.86523, 0.9135, 0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168, 0.92222, 0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743, 0.98981, 1, 1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894, 0.79726, 0.74321, 0.81691, 1.0006, 0.92222, 0.92168, 1, 1, 0.92222, 0.92168, 0.79464, 0.92098, 0.92168, 0.90637, 0.91513, 0.90637, 0.91513, 0.90637, 0.91513, 0.909, 0.87514, 0.80729, 0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748, 0.76463, 0.748, 1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275, 1.04502, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236, 0.85458, 0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531, 0.9, 1, 0.97276, 0.85576, 0.99613, 0.845, 0.85811, 0.90251, 0.91677, 1, 1, 0.86275, 1.04502, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.00899, 1.30628, 0.85576, 0.80178, 0.66862, 0.7927, 0.69323, 0.88127, 0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805, 0.94729, 0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655, 0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523, 0.86275, 0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621, 0.83509, 0.92886, 0.91324, 0.92168, 0.95381, 0.90646, 0.92886, 0.90557, 0.86847, 0.90276, 0.91324, 0.86842, 0.92168, 0.99531, 0.95381, 0.9224, 0.85408, 0.92699, 0.86847, 1.0051, 0.91513, 0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646, 0.97355, 0.81539, 0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646, 0.85923, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236, 0.9154, 0.94236, 0.85458, 0.89364, 0.96694, 1, 0.89903, 1, 1, 1, 0.91782, 0.91782, 0.91782, 1, 0.896, 0.896, 0.896, 0.9332, 0.9332, 0.95973, 1, 1.26, 1, 1, 0.80479, 0.80178, 1, 1, 0.85633, 1, 1, 1, 1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058, 1.03493, 1.05486, 1, 1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.MyriadProBoldItalicFactors = MyriadProBoldItalicFactors;\n        var MyriadProBoldItalicMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.MyriadProBoldItalicMetrics = MyriadProBoldItalicMetrics;\n        var MyriadProItalicFactors = [1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465, 0.86936, 0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058, 0.75945, 0.9219, 0.75945, 1.17337, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.75945, 0.75945, 1.02058, 1.02058, 1.02058, 0.69046, 0.70926, 0.85158, 0.77812, 0.76852, 0.89591, 0.70466, 0.76125, 0.80094, 0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637, 0.87514, 0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991, 0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417, 1.0222, 1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846, 0.94399, 0.81453, 1.0186, 0.94219, 0.96017, 1.03075, 1.02175, 0.912, 1.03075, 0.96998, 0.96017, 0.93859, 0.94399, 0.94399, 0.95493, 0.746, 1.12658, 0.94578, 0.91, 0.979, 0.882, 0.882, 0.83, 0.85034, 0.83537, 0.85034, 1.02058, 0.70869, 0.88465, 0.88465, 0.88465, 0.88465, 0.83537, 0.90083, 1.15012, 0.9161, 0.94565, 0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1, 1, 1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005, 0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466, 0.70466, 0.83864, 0.83864, 0.83864, 0.83864, 0.90561, 0.87514, 0.8588, 0.8588, 0.8588, 0.8588, 0.8588, 1.02058, 0.85751, 0.85991, 0.85991, 0.85991, 0.85991, 0.77512, 0.76013, 0.88075, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.8075, 0.846, 0.81453, 0.81453, 0.81453, 0.81453, 0.82424, 0.82424, 0.82424, 0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578, 0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859, 0.85158, 0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.89591, 0.8544, 0.90561, 0.94399, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.80094, 0.94219, 0.80094, 0.94219, 0.80094, 0.94219, 1, 1, 0.86822, 0.96017, 0.86822, 0.96017, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 1.03075, 0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912, 0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266, 0.80553, 1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017, 0.86865, 0.87396, 0.96017, 0.8588, 0.93859, 0.8588, 0.93859, 0.8588, 0.93859, 0.867, 0.84759, 0.72421, 0.95493, 1, 1, 0.72421, 0.95493, 0.69866, 0.746, 0.69866, 0.746, 1, 1, 0.69866, 0.746, 1, 1, 0.77598, 0.88417, 0.77598, 1.12658, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.87832, 0.979, 0.77512, 0.882, 0.77512, 0.8562, 0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465, 0.85158, 0.93859, 0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658, 1.15012, 1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012, 1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646, 0.65351, 0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812, 0.76449, 0.88836, 0.70466, 0.8562, 0.86822, 0.8588, 0.83864, 0.77212, 0.85308, 0.93637, 0.87514, 0.82352, 0.8588, 0.85701, 0.76013, 0.89058, 0.77598, 0.8156, 0.82565, 0.78112, 0.77899, 0.89386, 0.83864, 0.8156, 0.9486, 0.92388, 0.96186, 1.03075, 0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388, 0.84596, 0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88, 0.93559, 0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969, 0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123, 0.86799, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87832, 0.979, 0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1, 0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027, 1.027, 0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572, 0.73572, 1, 1, 0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948, 0.75187, 1.02058, 0.98391, 1.02119, 1, 1, 1.06233, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.MyriadProItalicFactors = MyriadProItalicFactors;\n        var MyriadProItalicMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.MyriadProItalicMetrics = MyriadProItalicMetrics;\n        var MyriadProRegularFactors = [1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241, 0.89073, 0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058, 0.74505, 0.9219, 0.74505, 1.23456, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.74505, 0.74505, 1.02058, 1.02058, 1.02058, 0.73002, 0.72601, 0.91755, 0.8126, 0.80314, 0.92222, 0.73764, 0.79726, 0.83051, 0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518, 0.91115, 0.8858, 0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591, 0.83659, 0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222, 1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411, 0.90083, 1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938, 1.06226, 1.00119, 0.99793, 0.98714, 1.0231, 1.01231, 0.98196, 0.792, 1.19137, 0.99074, 0.962, 1.01915, 0.926, 0.942, 0.856, 0.85034, 0.92006, 0.85034, 1.02058, 0.69067, 0.92241, 0.92241, 0.92241, 0.92241, 0.92006, 0.9332, 0.90088, 0.91882, 0.93484, 0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1, 1, 0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339, 0.91009, 0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.788, 0.80314, 0.73764, 0.73764, 0.73764, 0.73764, 0.86023, 0.86023, 0.86023, 0.86023, 0.92915, 0.91115, 0.8858, 0.8858, 0.8858, 0.8858, 0.8858, 1.02058, 0.8858, 0.89591, 0.89591, 0.89591, 0.89591, 0.8111, 0.79611, 0.89713, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86936, 0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224, 0.84224, 0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714, 0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074, 0.99074, 0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667, 0.91755, 0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.92222, 0.93372, 0.92915, 1.01411, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.83051, 1.00512, 0.83051, 1.00512, 0.83051, 1.00512, 1, 1, 0.90284, 0.99793, 0.90976, 0.99793, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 1.05326, 0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938, 0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441, 0.85588, 1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793, 0.91887, 0.90991, 0.99793, 0.8858, 0.98714, 0.8858, 0.98714, 0.8858, 0.98714, 0.894, 0.91434, 0.74498, 0.98196, 1, 1, 0.74498, 0.98196, 0.73914, 0.792, 0.73914, 0.792, 1, 1, 0.73914, 0.792, 1, 1, 0.81363, 0.904, 0.81363, 1.19137, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89633, 1.01915, 0.8111, 0.942, 0.8111, 0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241, 0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363, 1.19137, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90388, 1.03901, 0.92138, 0.78105, 0.7154, 0.86169, 0.80513, 0.94007, 0.82528, 0.98612, 1.06226, 0.91755, 0.8126, 0.81884, 0.92819, 0.73764, 0.90531, 0.90284, 0.8858, 0.86023, 0.8126, 0.91172, 0.96518, 0.91115, 0.83089, 0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157, 0.89992, 0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699, 0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088, 0.98699, 0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944, 0.95978, 0.938, 0.96705, 0.98714, 0.80442, 0.98972, 1, 0.89762, 1.04552, 0.95817, 0.99007, 0.87064, 0.91879, 0.88888, 1.06226, 0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89633, 1.01915, 0.89633, 1.01915, 0.89633, 1.01915, 0.8111, 0.942, 0.9219, 1, 0.89903, 1, 1, 1, 0.93173, 0.93173, 0.93173, 1, 1.06304, 1.06304, 1.06904, 0.89903, 0.89903, 0.80549, 1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1, 0.72458, 1, 1, 1, 1, 0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119, 1, 1, 1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.MyriadProRegularFactors = MyriadProRegularFactors;\n        var MyriadProRegularMetrics = {\n          lineHeight: 1.2,\n          lineGap: 0.2\n        };\n        exports.MyriadProRegularMetrics = MyriadProRegularMetrics;\n\n        /***/\n      }, /* 56 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SegoeuiRegularMetrics = exports.SegoeuiRegularFactors = exports.SegoeuiItalicMetrics = exports.SegoeuiItalicFactors = exports.SegoeuiBoldMetrics = exports.SegoeuiBoldItalicMetrics = exports.SegoeuiBoldItalicFactors = exports.SegoeuiBoldFactors = void 0;\n        var SegoeuiBoldFactors = [1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424, 0.97529, 1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107, 0.9754, 1.21408, 0.9754, 1.59578, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 0.81378, 0.81378, 1.2107, 1.2107, 1.2107, 0.71703, 0.97847, 0.97363, 0.88776, 0.8641, 1.02096, 0.79795, 0.85132, 0.914, 1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889, 1.09398, 0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1, 1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085, 1.2107, 0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359, 0.97278, 1.15103, 1.01359, 0.98561, 1.02285, 1.02285, 1.00527, 1.02285, 1.0302, 0.99041, 1.0008, 1.01519, 1.01359, 1.02258, 0.79104, 1.16862, 0.99041, 0.97454, 1.02511, 0.99298, 0.96752, 0.95801, 0.94856, 1.16579, 0.94856, 1.2107, 0.9824, 1.03424, 1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622, 1.10818, 1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408, 1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866, 1.04478, 1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.93506, 0.8641, 0.79795, 0.79795, 0.79795, 0.79795, 1.1406, 1.1406, 1.1406, 1.1406, 1.02096, 1.09398, 0.97426, 0.97426, 0.97426, 0.97426, 0.97426, 1.2107, 0.97489, 1.00135, 1.00135, 1.00135, 1.00135, 0.90996, 0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278, 1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1, 1, 1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752, 1.01519, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 1.02096, 1.03057, 1.02096, 1.03517, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.914, 1.01359, 0.914, 1.01359, 0.914, 1.01359, 1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693, 1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693, 1.13005, 1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692, 1.09251, 0.99041, 0.97489, 1.0008, 0.97489, 1.0008, 0.97489, 1.0008, 0.93994, 0.97931, 0.90399, 1.02258, 1, 1, 0.90399, 1.02258, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 1, 1, 0.95923, 1.07034, 0.95923, 1.16862, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511, 0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801, 0.99361, 0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506, 0.93136, 0.97489, 1.0008, 1, 1, 0.95923, 1.16862, 1.15103, 1.15103, 1.01173, 1.03959, 0.75953, 0.81378, 0.79912, 1.15103, 1.21994, 0.95161, 0.87815, 1.01149, 0.81525, 0.7676, 0.98167, 1.01134, 1.02546, 0.84097, 1.03089, 1.18102, 0.97363, 0.88776, 0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489, 1.1406, 0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595, 0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112, 0.95493, 1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102, 1.06628, 1.03574, 1.0192, 1.01932, 1.00886, 0.97531, 1.0106, 1.0008, 1.13189, 1.18102, 1.02277, 0.98683, 1.0016, 0.99561, 1.07237, 1.0008, 0.90434, 0.99921, 0.93803, 0.8965, 1.23085, 1.06628, 1.04983, 0.96268, 1.0499, 0.98439, 1.18102, 1.06628, 1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.02065, 1, 1, 1, 1, 1, 1, 1.06467, 1.02511, 1.06467, 1.02511, 1.06467, 1.02511, 0.90996, 0.96752, 1, 1.21408, 0.89903, 1, 1, 0.75155, 1.04394, 1.04394, 1.04394, 1.04394, 0.98633, 0.98633, 0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503, 1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749, 1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21172, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.SegoeuiBoldFactors = SegoeuiBoldFactors;\n        var SegoeuiBoldMetrics = {\n          lineHeight: 1.33008,\n          lineGap: 0\n        };\n        exports.SegoeuiBoldMetrics = SegoeuiBoldMetrics;\n        var SegoeuiBoldItalicFactors = [1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639, 1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754, 1.21261, 0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 0.81378, 0.81378, 1.21237, 1.21237, 1.21237, 0.73541, 0.97847, 0.97363, 0.89723, 0.87897, 1.0426, 0.79429, 0.85292, 0.91149, 1.05815, 1.1406, 0.79631, 0.90128, 0.83853, 1.04396, 1.10615, 0.97552, 0.94436, 0.97552, 0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817, 0.91142, 0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818, 1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042, 0.97922, 1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922, 0.94165, 0.97042, 0.97042, 1.0276, 0.78929, 1.1261, 0.97922, 0.95874, 1.02197, 0.98507, 0.96752, 0.97168, 0.95107, 1.16579, 0.95107, 1.21237, 1.03959, 1.036, 1.036, 1, 1.036, 1.16579, 0.87357, 1.31818, 1.18754, 1.26781, 1.05356, 1.21237, 1.18622, 0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1, 0.91484, 0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574, 1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429, 1.1406, 1.1406, 1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552, 0.97552, 0.97552, 0.97552, 1.21237, 0.97552, 1.00135, 1.00135, 1.00135, 1.00135, 0.91142, 0.94436, 0.98721, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 0.96705, 0.83055, 0.93503, 0.93503, 0.93503, 0.93503, 1.14236, 1.14236, 1.14236, 1.14236, 0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165, 0.94165, 1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752, 0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363, 1.06585, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 1.0426, 1.0033, 1.0426, 0.97042, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.91149, 0.97042, 0.91149, 0.97042, 0.91149, 0.97042, 1, 1, 1.05815, 0.97922, 1.05815, 0.97922, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1, 1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853, 0.90418, 0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615, 0.97922, 1.01034, 1.10466, 0.97922, 0.97552, 0.94165, 0.97552, 0.94165, 0.97552, 0.94165, 0.91602, 0.91981, 0.88641, 1.0276, 1, 1, 0.88641, 1.0276, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 1, 1, 0.96083, 1.05403, 0.95923, 1.16862, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.06777, 1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361, 0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585, 0.94385, 0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 0.95161, 1.27126, 1.00811, 0.83284, 0.77702, 0.99137, 0.95253, 1.0347, 0.86142, 1.07205, 1.14236, 0.97363, 0.89723, 0.86869, 1.09818, 0.79429, 0.99361, 1.05815, 0.97552, 1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918, 0.97552, 1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817, 1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639, 1.14236, 1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898, 0.95134, 1.00639, 1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1, 1.08578, 0.94165, 0.99314, 0.98387, 0.93028, 0.93377, 1.35125, 1.07514, 1.10687, 0.93491, 1.04232, 1.00351, 1.14236, 1.07514, 0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96609, 1, 1, 1, 1, 1, 1, 1.06777, 1.02197, 1.06777, 1.02197, 1.06777, 1.02197, 0.91142, 0.96752, 1, 1.21261, 0.89903, 1, 1, 0.75155, 1.04745, 1.04745, 1.04745, 1.04394, 0.98633, 0.98633, 0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327, 1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574, 1.15574, 1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1, 1, 1.16798, 1, 0.96085, 0.90068, 1.21237, 1.18416, 1.13904, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21339, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.SegoeuiBoldItalicFactors = SegoeuiBoldItalicFactors;\n        var SegoeuiBoldItalicMetrics = {\n          lineHeight: 1.33008,\n          lineGap: 0\n        };\n        exports.SegoeuiBoldItalicMetrics = SegoeuiBoldItalicMetrics;\n        var SegoeuiItalicFactors = [1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927, 0.92586, 1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308, 0.78383, 1.20088, 0.78383, 1.42531, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78383, 0.78383, 1.17308, 1.17308, 1.17308, 0.77349, 0.94565, 0.94729, 0.85944, 0.88506, 0.9858, 0.74817, 0.80016, 0.88449, 0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183, 1.03989, 0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402, 0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016, 1.0949, 1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207, 0.97454, 0.87533, 1.06151, 0.97454, 1.00176, 1.16484, 1.08132, 0.98047, 1.16484, 1.02989, 1.01054, 0.96225, 0.97454, 0.97454, 1.06598, 0.79004, 1.16344, 1.00351, 0.94629, 0.9973, 0.91016, 0.96777, 0.9043, 0.91082, 0.92481, 0.91082, 1.17308, 0.95748, 0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839, 1.23393, 1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822, 1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971, 1.22326, 0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.85498, 0.88506, 0.74817, 0.74817, 0.74817, 0.74817, 0.95782, 0.95782, 0.95782, 0.95782, 0.9858, 1.03989, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.17308, 0.96924, 0.95402, 0.95402, 0.95402, 0.95402, 0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533, 0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054, 0.96225, 0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761, 1.00351, 1.00351, 1.00351, 1.00351, 0.96777, 0.97454, 0.96777, 0.94729, 0.97454, 0.94729, 0.97454, 0.94729, 0.97454, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.9858, 0.95391, 0.9858, 0.97454, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1, 0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146, 0.84421, 1.12761, 0.69238, 1.08132, 1, 1, 0.98047, 0.83231, 1.16484, 1, 1, 0.84723, 1.04861, 0.84723, 0.78755, 0.83231, 1.23736, 1.03989, 1.01054, 1, 1, 1.03989, 1.01054, 0.9857, 1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225, 0.96924, 0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595, 1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.98448, 0.9973, 0.83089, 0.96777, 0.83089, 0.93285, 0.9043, 0.93285, 0.9043, 0.93285, 0.9043, 1.31868, 0.96927, 0.94729, 0.97454, 0.85498, 0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883, 0.84171, 0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944, 0.82791, 0.9607, 0.74817, 0.93285, 0.98039, 0.96924, 0.95782, 0.89898, 0.98316, 0.98183, 1.03989, 0.78614, 0.96924, 0.97642, 0.86237, 0.86075, 0.86091, 0.83089, 0.90082, 0.8858, 0.97296, 1.01284, 0.95782, 0.83089, 1.0976, 1.04, 1.03342, 1.2, 1.0675, 1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364, 1.03342, 1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225, 0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826, 0.99821, 1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326, 0.74817, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87533, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1, 1, 0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945, 0.94945, 0.94945, 1.12317, 1.12317, 1.12317, 0.67603, 0.67603, 1.15621, 0.73584, 1.21191, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87709, 0.96927, 1.01473, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836, 1.09836, 1.01522, 0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622, 1.96791, 1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.17984, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.SegoeuiItalicFactors = SegoeuiItalicFactors;\n        var SegoeuiItalicMetrics = {\n          lineHeight: 1.33008,\n          lineGap: 0\n        };\n        exports.SegoeuiItalicMetrics = SegoeuiItalicMetrics;\n        var SegoeuiRegularFactors = [1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927, 0.92037, 1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714, 0.78032, 1.20088, 0.78032, 1.40246, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78032, 0.78032, 1.1714, 1.1714, 1.1714, 0.80597, 0.94084, 0.96706, 0.85944, 0.85734, 0.97093, 0.75842, 0.79936, 0.88198, 0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796, 1.03584, 0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132, 0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638, 1.08612, 1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383, 1.05882, 0.9403, 1.12654, 1.05882, 1.01756, 1.09011, 1.09011, 0.99414, 1.09011, 1.034, 1.01756, 1.05356, 1.05707, 1.05882, 1.04399, 0.84863, 1.21968, 1.01756, 0.95801, 1.00068, 0.91797, 0.96777, 0.9043, 0.90351, 0.92105, 0.90351, 1.1714, 0.85337, 0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597, 1.2434, 1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261, 1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584, 1.05425, 1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.86035, 0.85734, 0.75842, 0.75842, 0.75842, 0.75842, 0.95782, 0.95782, 0.95782, 0.95782, 0.97093, 1.03584, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.1714, 0.96924, 0.95132, 0.95132, 0.95132, 0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403, 0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756, 1.05356, 1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923, 1.01756, 1.01756, 1.01756, 1.01756, 0.96777, 1.05707, 0.96777, 0.96706, 0.91484, 0.96706, 0.91484, 0.96706, 0.91484, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.97093, 1.0969, 0.97093, 1.05882, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1, 0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717, 0.84784, 1.11551, 0.71387, 1.09011, 1, 1, 0.99414, 0.84636, 1.09011, 1, 1, 0.84636, 1.0536, 0.84636, 0.94298, 0.84636, 1.23297, 1.03584, 1.01756, 1, 1, 1.03584, 1.01756, 1.00323, 1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356, 0.96924, 1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826, 1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.98965, 1.00068, 0.8287, 0.96777, 0.8287, 0.93365, 0.9043, 0.93365, 0.9043, 0.93365, 0.9043, 1.08571, 0.96927, 0.96706, 0.91484, 0.86035, 0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968, 1.11437, 1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173, 0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366, 0.98601, 1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944, 0.85638, 0.96491, 0.75842, 0.93365, 0.9831, 0.96924, 0.95782, 0.86969, 0.94152, 1.07796, 1.03584, 0.78437, 0.96924, 0.98715, 0.83968, 0.83491, 0.85771, 0.8287, 0.94492, 0.88433, 0.9287, 1.0098, 0.95782, 0.8287, 1.0625, 0.98248, 1.03424, 1.2, 1.01071, 1.0625, 0.95246, 1.03809, 1.04912, 0.98248, 1.00221, 1.03424, 1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176, 0.99346, 1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071, 1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356, 1.01071, 1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03719, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04021, 1, 1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068, 0.98965, 1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196, 0.67428, 0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927, 1.01518, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.10539, 1.10539, 1.11358, 1.06967, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86507, 1.1714, 1.18416, 1.14589, 0.69825, 0.97622, 1.9697, 1.24822, 1.24822, 1.17238, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10938, 1.10938, 1, 1, 1, 1.05425, 1.09971, 1.09971, 1.09971, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n        exports.SegoeuiRegularFactors = SegoeuiRegularFactors;\n        var SegoeuiRegularMetrics = {\n          lineHeight: 1.33008,\n          lineGap: 0\n        };\n        exports.SegoeuiRegularMetrics = SegoeuiRegularMetrics;\n\n        /***/\n      }, /* 57 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PostScriptEvaluator = exports.PostScriptCompiler = exports.PDFFunctionFactory = void 0;\n        exports.isPDFFunction = isPDFFunction;\n        var _primitives = __w_pdfjs_require__(5);\n        var _util = __w_pdfjs_require__(2);\n        var _ps_parser = __w_pdfjs_require__(58);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _image_utils = __w_pdfjs_require__(59);\n        var PDFFunctionFactory = /*#__PURE__*/function () {\n          function PDFFunctionFactory(_ref69) {\n            var xref = _ref69.xref,\n              _ref69$isEvalSupporte = _ref69.isEvalSupported,\n              isEvalSupported = _ref69$isEvalSupporte === void 0 ? true : _ref69$isEvalSupporte;\n            _classCallCheck(this, PDFFunctionFactory);\n            this.xref = xref;\n            this.isEvalSupported = isEvalSupported !== false;\n          }\n          _createClass(PDFFunctionFactory, [{\n            key: \"create\",\n            value: function create(fn) {\n              var cachedFunction = this.getCached(fn);\n              if (cachedFunction) {\n                return cachedFunction;\n              }\n              var parsedFunction = PDFFunction.parse({\n                xref: this.xref,\n                isEvalSupported: this.isEvalSupported,\n                fn: fn instanceof _primitives.Ref ? this.xref.fetch(fn) : fn\n              });\n              this._cache(fn, parsedFunction);\n              return parsedFunction;\n            }\n          }, {\n            key: \"createFromArray\",\n            value: function createFromArray(fnObj) {\n              var cachedFunction = this.getCached(fnObj);\n              if (cachedFunction) {\n                return cachedFunction;\n              }\n              var parsedFunction = PDFFunction.parseArray({\n                xref: this.xref,\n                isEvalSupported: this.isEvalSupported,\n                fnObj: fnObj instanceof _primitives.Ref ? this.xref.fetch(fnObj) : fnObj\n              });\n              this._cache(fnObj, parsedFunction);\n              return parsedFunction;\n            }\n          }, {\n            key: \"getCached\",\n            value: function getCached(cacheKey) {\n              var fnRef;\n              if (cacheKey instanceof _primitives.Ref) {\n                fnRef = cacheKey;\n              } else if (cacheKey instanceof _primitives.Dict) {\n                fnRef = cacheKey.objId;\n              } else if (cacheKey instanceof _base_stream.BaseStream) {\n                fnRef = cacheKey.dict && cacheKey.dict.objId;\n              }\n              if (fnRef) {\n                var localFunction = this._localFunctionCache.getByRef(fnRef);\n                if (localFunction) {\n                  return localFunction;\n                }\n              }\n              return null;\n            }\n          }, {\n            key: \"_cache\",\n            value: function _cache(cacheKey, parsedFunction) {\n              if (!parsedFunction) {\n                throw new Error('PDFFunctionFactory._cache - expected \"parsedFunction\" argument.');\n              }\n              var fnRef;\n              if (cacheKey instanceof _primitives.Ref) {\n                fnRef = cacheKey;\n              } else if (cacheKey instanceof _primitives.Dict) {\n                fnRef = cacheKey.objId;\n              } else if (cacheKey instanceof _base_stream.BaseStream) {\n                fnRef = cacheKey.dict && cacheKey.dict.objId;\n              }\n              if (fnRef) {\n                this._localFunctionCache.set(null, fnRef, parsedFunction);\n              }\n            }\n          }, {\n            key: \"_localFunctionCache\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"_localFunctionCache\", new _image_utils.LocalFunctionCache());\n            }\n          }]);\n          return PDFFunctionFactory;\n        }();\n        exports.PDFFunctionFactory = PDFFunctionFactory;\n        function toNumberArray(arr) {\n          if (!Array.isArray(arr)) {\n            return null;\n          }\n          var length = arr.length;\n          for (var i = 0; i < length; i++) {\n            if (typeof arr[i] !== \"number\") {\n              var result = new Array(length);\n              for (var j = 0; j < length; j++) {\n                result[j] = +arr[j];\n              }\n              return result;\n            }\n          }\n          return arr;\n        }\n        var PDFFunction = /*#__PURE__*/function () {\n          function PDFFunction() {\n            _classCallCheck(this, PDFFunction);\n          }\n          _createClass(PDFFunction, null, [{\n            key: \"getSampleArray\",\n            value: function getSampleArray(size, outputSize, bps, stream) {\n              var i, ii;\n              var length = 1;\n              for (i = 0, ii = size.length; i < ii; i++) {\n                length *= size[i];\n              }\n              length *= outputSize;\n              var array = new Array(length);\n              var codeSize = 0;\n              var codeBuf = 0;\n              var sampleMul = 1.0 / (Math.pow(2.0, bps) - 1);\n              var strBytes = stream.getBytes((length * bps + 7) / 8);\n              var strIdx = 0;\n              for (i = 0; i < length; i++) {\n                while (codeSize < bps) {\n                  codeBuf <<= 8;\n                  codeBuf |= strBytes[strIdx++];\n                  codeSize += 8;\n                }\n                codeSize -= bps;\n                array[i] = (codeBuf >> codeSize) * sampleMul;\n                codeBuf &= (1 << codeSize) - 1;\n              }\n              return array;\n            }\n          }, {\n            key: \"parse\",\n            value: function parse(_ref70) {\n              var xref = _ref70.xref,\n                isEvalSupported = _ref70.isEvalSupported,\n                fn = _ref70.fn;\n              var dict = fn.dict || fn;\n              var typeNum = dict.get(\"FunctionType\");\n              switch (typeNum) {\n                case 0:\n                  return this.constructSampled({\n                    xref: xref,\n                    isEvalSupported: isEvalSupported,\n                    fn: fn,\n                    dict: dict\n                  });\n                case 1:\n                  break;\n                case 2:\n                  return this.constructInterpolated({\n                    xref: xref,\n                    isEvalSupported: isEvalSupported,\n                    dict: dict\n                  });\n                case 3:\n                  return this.constructStiched({\n                    xref: xref,\n                    isEvalSupported: isEvalSupported,\n                    dict: dict\n                  });\n                case 4:\n                  return this.constructPostScript({\n                    xref: xref,\n                    isEvalSupported: isEvalSupported,\n                    fn: fn,\n                    dict: dict\n                  });\n              }\n              throw new _util.FormatError(\"Unknown type of function\");\n            }\n          }, {\n            key: \"parseArray\",\n            value: function parseArray(_ref71) {\n              var xref = _ref71.xref,\n                isEvalSupported = _ref71.isEvalSupported,\n                fnObj = _ref71.fnObj;\n              if (!Array.isArray(fnObj)) {\n                return this.parse({\n                  xref: xref,\n                  isEvalSupported: isEvalSupported,\n                  fn: fnObj\n                });\n              }\n              var fnArray = [];\n              for (var j = 0, jj = fnObj.length; j < jj; j++) {\n                fnArray.push(this.parse({\n                  xref: xref,\n                  isEvalSupported: isEvalSupported,\n                  fn: xref.fetchIfRef(fnObj[j])\n                }));\n              }\n              return function (src, srcOffset, dest, destOffset) {\n                for (var i = 0, ii = fnArray.length; i < ii; i++) {\n                  fnArray[i](src, srcOffset, dest, destOffset + i);\n                }\n              };\n            }\n          }, {\n            key: \"constructSampled\",\n            value: function constructSampled(_ref72) {\n              var xref = _ref72.xref,\n                isEvalSupported = _ref72.isEvalSupported,\n                fn = _ref72.fn,\n                dict = _ref72.dict;\n              function toMultiArray(arr) {\n                var inputLength = arr.length;\n                var out = [];\n                var index = 0;\n                for (var i = 0; i < inputLength; i += 2) {\n                  out[index++] = [arr[i], arr[i + 1]];\n                }\n                return out;\n              }\n              function interpolate(x, xmin, xmax, ymin, ymax) {\n                return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n              }\n              var domain = toNumberArray(dict.getArray(\"Domain\"));\n              var range = toNumberArray(dict.getArray(\"Range\"));\n              if (!domain || !range) {\n                throw new _util.FormatError(\"No domain or range\");\n              }\n              var inputSize = domain.length / 2;\n              var outputSize = range.length / 2;\n              domain = toMultiArray(domain);\n              range = toMultiArray(range);\n              var size = toNumberArray(dict.getArray(\"Size\"));\n              var bps = dict.get(\"BitsPerSample\");\n              var order = dict.get(\"Order\") || 1;\n              if (order !== 1) {\n                (0, _util.info)(\"No support for cubic spline interpolation: \" + order);\n              }\n              var encode = toNumberArray(dict.getArray(\"Encode\"));\n              if (!encode) {\n                encode = [];\n                for (var i = 0; i < inputSize; ++i) {\n                  encode.push([0, size[i] - 1]);\n                }\n              } else {\n                encode = toMultiArray(encode);\n              }\n              var decode = toNumberArray(dict.getArray(\"Decode\"));\n              if (!decode) {\n                decode = range;\n              } else {\n                decode = toMultiArray(decode);\n              }\n              var samples = this.getSampleArray(size, outputSize, bps, fn);\n              return function constructSampledFn(src, srcOffset, dest, destOffset) {\n                var cubeVertices = 1 << inputSize;\n                var cubeN = new Float64Array(cubeVertices);\n                var cubeVertex = new Uint32Array(cubeVertices);\n                var i, j;\n                for (j = 0; j < cubeVertices; j++) {\n                  cubeN[j] = 1;\n                }\n                var k = outputSize,\n                  pos = 1;\n                for (i = 0; i < inputSize; ++i) {\n                  var domain_2i = domain[i][0];\n                  var domain_2i_1 = domain[i][1];\n                  var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);\n                  var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);\n                  var size_i = size[i];\n                  e = Math.min(Math.max(e, 0), size_i - 1);\n                  var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;\n                  var n0 = e0 + 1 - e;\n                  var n1 = e - e0;\n                  var offset0 = e0 * k;\n                  var offset1 = offset0 + k;\n                  for (j = 0; j < cubeVertices; j++) {\n                    if (j & pos) {\n                      cubeN[j] *= n1;\n                      cubeVertex[j] += offset1;\n                    } else {\n                      cubeN[j] *= n0;\n                      cubeVertex[j] += offset0;\n                    }\n                  }\n                  k *= size_i;\n                  pos <<= 1;\n                }\n                for (j = 0; j < outputSize; ++j) {\n                  var rj = 0;\n                  for (i = 0; i < cubeVertices; i++) {\n                    rj += samples[cubeVertex[i] + j] * cubeN[i];\n                  }\n                  rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n                  dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);\n                }\n              };\n            }\n          }, {\n            key: \"constructInterpolated\",\n            value: function constructInterpolated(_ref73) {\n              var xref = _ref73.xref,\n                isEvalSupported = _ref73.isEvalSupported,\n                dict = _ref73.dict;\n              var c0 = toNumberArray(dict.getArray(\"C0\")) || [0];\n              var c1 = toNumberArray(dict.getArray(\"C1\")) || [1];\n              var n = dict.get(\"N\");\n              var diff = [];\n              for (var i = 0, ii = c0.length; i < ii; ++i) {\n                diff.push(c1[i] - c0[i]);\n              }\n              var length = diff.length;\n              return function constructInterpolatedFn(src, srcOffset, dest, destOffset) {\n                var x = n === 1 ? src[srcOffset] : Math.pow(src[srcOffset], n);\n                for (var j = 0; j < length; ++j) {\n                  dest[destOffset + j] = c0[j] + x * diff[j];\n                }\n              };\n            }\n          }, {\n            key: \"constructStiched\",\n            value: function constructStiched(_ref74) {\n              var xref = _ref74.xref,\n                isEvalSupported = _ref74.isEvalSupported,\n                dict = _ref74.dict;\n              var domain = toNumberArray(dict.getArray(\"Domain\"));\n              if (!domain) {\n                throw new _util.FormatError(\"No domain\");\n              }\n              var inputSize = domain.length / 2;\n              if (inputSize !== 1) {\n                throw new _util.FormatError(\"Bad domain for stiched function\");\n              }\n              var fnRefs = dict.get(\"Functions\");\n              var fns = [];\n              for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n                fns.push(this.parse({\n                  xref: xref,\n                  isEvalSupported: isEvalSupported,\n                  fn: xref.fetchIfRef(fnRefs[i])\n                }));\n              }\n              var bounds = toNumberArray(dict.getArray(\"Bounds\"));\n              var encode = toNumberArray(dict.getArray(\"Encode\"));\n              var tmpBuf = new Float32Array(1);\n              return function constructStichedFn(src, srcOffset, dest, destOffset) {\n                var clip = function constructStichedFromIRClip(v, min, max) {\n                  if (v > max) {\n                    v = max;\n                  } else if (v < min) {\n                    v = min;\n                  }\n                  return v;\n                };\n                var v = clip(src[srcOffset], domain[0], domain[1]);\n                var length = bounds.length;\n                var i;\n                for (i = 0; i < length; ++i) {\n                  if (v < bounds[i]) {\n                    break;\n                  }\n                }\n                var dmin = domain[0];\n                if (i > 0) {\n                  dmin = bounds[i - 1];\n                }\n                var dmax = domain[1];\n                if (i < bounds.length) {\n                  dmax = bounds[i];\n                }\n                var rmin = encode[2 * i];\n                var rmax = encode[2 * i + 1];\n                tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);\n                fns[i](tmpBuf, 0, dest, destOffset);\n              };\n            }\n          }, {\n            key: \"constructPostScript\",\n            value: function constructPostScript(_ref75) {\n              var xref = _ref75.xref,\n                isEvalSupported = _ref75.isEvalSupported,\n                fn = _ref75.fn,\n                dict = _ref75.dict;\n              var domain = toNumberArray(dict.getArray(\"Domain\"));\n              var range = toNumberArray(dict.getArray(\"Range\"));\n              if (!domain) {\n                throw new _util.FormatError(\"No domain.\");\n              }\n              if (!range) {\n                throw new _util.FormatError(\"No range.\");\n              }\n              var lexer = new _ps_parser.PostScriptLexer(fn);\n              var parser = new _ps_parser.PostScriptParser(lexer);\n              var code = parser.parse();\n              if (isEvalSupported && _util.FeatureTest.isEvalSupported) {\n                var compiled = new PostScriptCompiler().compile(code, domain, range);\n                if (compiled) {\n                  return new Function(\"src\", \"srcOffset\", \"dest\", \"destOffset\", compiled);\n                }\n              }\n              (0, _util.info)(\"Unable to compile PS function\");\n              var numOutputs = range.length >> 1;\n              var numInputs = domain.length >> 1;\n              var evaluator = new PostScriptEvaluator(code);\n              var cache = Object.create(null);\n              var MAX_CACHE_SIZE = 2048 * 4;\n              var cache_available = MAX_CACHE_SIZE;\n              var tmpBuf = new Float32Array(numInputs);\n              return function constructPostScriptFn(src, srcOffset, dest, destOffset) {\n                var i, value;\n                var key = \"\";\n                var input = tmpBuf;\n                for (i = 0; i < numInputs; i++) {\n                  value = src[srcOffset + i];\n                  input[i] = value;\n                  key += value + \"_\";\n                }\n                var cachedValue = cache[key];\n                if (cachedValue !== undefined) {\n                  dest.set(cachedValue, destOffset);\n                  return;\n                }\n                var output = new Float32Array(numOutputs);\n                var stack = evaluator.execute(input);\n                var stackIndex = stack.length - numOutputs;\n                for (i = 0; i < numOutputs; i++) {\n                  value = stack[stackIndex + i];\n                  var bound = range[i * 2];\n                  if (value < bound) {\n                    value = bound;\n                  } else {\n                    bound = range[i * 2 + 1];\n                    if (value > bound) {\n                      value = bound;\n                    }\n                  }\n                  output[i] = value;\n                }\n                if (cache_available > 0) {\n                  cache_available--;\n                  cache[key] = output;\n                }\n                dest.set(output, destOffset);\n              };\n            }\n          }]);\n          return PDFFunction;\n        }();\n        function isPDFFunction(v) {\n          var fnDict;\n          if (typeof v !== \"object\") {\n            return false;\n          } else if (v instanceof _primitives.Dict) {\n            fnDict = v;\n          } else if (v instanceof _base_stream.BaseStream) {\n            fnDict = v.dict;\n          } else {\n            return false;\n          }\n          return fnDict.has(\"FunctionType\");\n        }\n        var PostScriptStack = /*#__PURE__*/function () {\n          _createClass(PostScriptStack, null, [{\n            key: \"MAX_STACK_SIZE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MAX_STACK_SIZE\", 100);\n            }\n          }]);\n          function PostScriptStack(initialStack) {\n            _classCallCheck(this, PostScriptStack);\n            this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);\n          }\n          _createClass(PostScriptStack, [{\n            key: \"push\",\n            value: function push(value) {\n              if (this.stack.length >= PostScriptStack.MAX_STACK_SIZE) {\n                throw new Error(\"PostScript function stack overflow.\");\n              }\n              this.stack.push(value);\n            }\n          }, {\n            key: \"pop\",\n            value: function pop() {\n              if (this.stack.length <= 0) {\n                throw new Error(\"PostScript function stack underflow.\");\n              }\n              return this.stack.pop();\n            }\n          }, {\n            key: \"copy\",\n            value: function copy(n) {\n              if (this.stack.length + n >= PostScriptStack.MAX_STACK_SIZE) {\n                throw new Error(\"PostScript function stack overflow.\");\n              }\n              var stack = this.stack;\n              for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n                stack.push(stack[i]);\n              }\n            }\n          }, {\n            key: \"index\",\n            value: function index(n) {\n              this.push(this.stack[this.stack.length - n - 1]);\n            }\n          }, {\n            key: \"roll\",\n            value: function roll(n, p) {\n              var stack = this.stack;\n              var l = stack.length - n;\n              var r = stack.length - 1;\n              var c = l + (p - Math.floor(p / n) * n);\n              for (var i = l, j = r; i < j; i++, j--) {\n                var t = stack[i];\n                stack[i] = stack[j];\n                stack[j] = t;\n              }\n              for (var _i48 = l, _j2 = c - 1; _i48 < _j2; _i48++, _j2--) {\n                var _t = stack[_i48];\n                stack[_i48] = stack[_j2];\n                stack[_j2] = _t;\n              }\n              for (var _i49 = c, _j3 = r; _i49 < _j3; _i49++, _j3--) {\n                var _t2 = stack[_i49];\n                stack[_i49] = stack[_j3];\n                stack[_j3] = _t2;\n              }\n            }\n          }]);\n          return PostScriptStack;\n        }();\n        var PostScriptEvaluator = /*#__PURE__*/function () {\n          function PostScriptEvaluator(operators) {\n            _classCallCheck(this, PostScriptEvaluator);\n            this.operators = operators;\n          }\n          _createClass(PostScriptEvaluator, [{\n            key: \"execute\",\n            value: function execute(initialStack) {\n              var stack = new PostScriptStack(initialStack);\n              var counter = 0;\n              var operators = this.operators;\n              var length = operators.length;\n              var operator, a, b;\n              while (counter < length) {\n                operator = operators[counter++];\n                if (typeof operator === \"number\") {\n                  stack.push(operator);\n                  continue;\n                }\n                switch (operator) {\n                  case \"jz\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    if (!a) {\n                      counter = b;\n                    }\n                    break;\n                  case \"j\":\n                    a = stack.pop();\n                    counter = a;\n                    break;\n                  case \"abs\":\n                    a = stack.pop();\n                    stack.push(Math.abs(a));\n                    break;\n                  case \"add\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a + b);\n                    break;\n                  case \"and\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                      stack.push(a && b);\n                    } else {\n                      stack.push(a & b);\n                    }\n                    break;\n                  case \"atan\":\n                    a = stack.pop();\n                    stack.push(Math.atan(a));\n                    break;\n                  case \"bitshift\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    if (a > 0) {\n                      stack.push(a << b);\n                    } else {\n                      stack.push(a >> b);\n                    }\n                    break;\n                  case \"ceiling\":\n                    a = stack.pop();\n                    stack.push(Math.ceil(a));\n                    break;\n                  case \"copy\":\n                    a = stack.pop();\n                    stack.copy(a);\n                    break;\n                  case \"cos\":\n                    a = stack.pop();\n                    stack.push(Math.cos(a));\n                    break;\n                  case \"cvi\":\n                    a = stack.pop() | 0;\n                    stack.push(a);\n                    break;\n                  case \"cvr\":\n                    break;\n                  case \"div\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a / b);\n                    break;\n                  case \"dup\":\n                    stack.copy(1);\n                    break;\n                  case \"eq\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a === b);\n                    break;\n                  case \"exch\":\n                    stack.roll(2, 1);\n                    break;\n                  case \"exp\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(Math.pow(a, b));\n                    break;\n                  case \"false\":\n                    stack.push(false);\n                    break;\n                  case \"floor\":\n                    a = stack.pop();\n                    stack.push(Math.floor(a));\n                    break;\n                  case \"ge\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a >= b);\n                    break;\n                  case \"gt\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a > b);\n                    break;\n                  case \"idiv\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a / b | 0);\n                    break;\n                  case \"index\":\n                    a = stack.pop();\n                    stack.index(a);\n                    break;\n                  case \"le\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a <= b);\n                    break;\n                  case \"ln\":\n                    a = stack.pop();\n                    stack.push(Math.log(a));\n                    break;\n                  case \"log\":\n                    a = stack.pop();\n                    stack.push(Math.log(a) / Math.LN10);\n                    break;\n                  case \"lt\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a < b);\n                    break;\n                  case \"mod\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a % b);\n                    break;\n                  case \"mul\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a * b);\n                    break;\n                  case \"ne\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a !== b);\n                    break;\n                  case \"neg\":\n                    a = stack.pop();\n                    stack.push(-a);\n                    break;\n                  case \"not\":\n                    a = stack.pop();\n                    if (typeof a === \"boolean\") {\n                      stack.push(!a);\n                    } else {\n                      stack.push(~a);\n                    }\n                    break;\n                  case \"or\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                      stack.push(a || b);\n                    } else {\n                      stack.push(a | b);\n                    }\n                    break;\n                  case \"pop\":\n                    stack.pop();\n                    break;\n                  case \"roll\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.roll(a, b);\n                    break;\n                  case \"round\":\n                    a = stack.pop();\n                    stack.push(Math.round(a));\n                    break;\n                  case \"sin\":\n                    a = stack.pop();\n                    stack.push(Math.sin(a));\n                    break;\n                  case \"sqrt\":\n                    a = stack.pop();\n                    stack.push(Math.sqrt(a));\n                    break;\n                  case \"sub\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(a - b);\n                    break;\n                  case \"true\":\n                    stack.push(true);\n                    break;\n                  case \"truncate\":\n                    a = stack.pop();\n                    a = a < 0 ? Math.ceil(a) : Math.floor(a);\n                    stack.push(a);\n                    break;\n                  case \"xor\":\n                    b = stack.pop();\n                    a = stack.pop();\n                    if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                      stack.push(a !== b);\n                    } else {\n                      stack.push(a ^ b);\n                    }\n                    break;\n                  default:\n                    throw new _util.FormatError(\"Unknown operator \".concat(operator));\n                }\n              }\n              return stack.stack;\n            }\n          }]);\n          return PostScriptEvaluator;\n        }();\n        exports.PostScriptEvaluator = PostScriptEvaluator;\n        var AstNode = /*#__PURE__*/function () {\n          function AstNode(type) {\n            _classCallCheck(this, AstNode);\n            this.type = type;\n          }\n          _createClass(AstNode, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              (0, _util.unreachable)(\"abstract method\");\n            }\n          }]);\n          return AstNode;\n        }();\n        var AstArgument = /*#__PURE__*/function (_AstNode) {\n          _inherits(AstArgument, _AstNode);\n          function AstArgument(index, min, max) {\n            var _this84;\n            _classCallCheck(this, AstArgument);\n            _this84 = _possibleConstructorReturn(this, _getPrototypeOf(AstArgument).call(this, \"args\"));\n            _this84.index = index;\n            _this84.min = min;\n            _this84.max = max;\n            return _this84;\n          }\n          _createClass(AstArgument, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitArgument(this);\n            }\n          }]);\n          return AstArgument;\n        }(AstNode);\n        var AstLiteral = /*#__PURE__*/function (_AstNode2) {\n          _inherits(AstLiteral, _AstNode2);\n          function AstLiteral(number) {\n            var _this85;\n            _classCallCheck(this, AstLiteral);\n            _this85 = _possibleConstructorReturn(this, _getPrototypeOf(AstLiteral).call(this, \"literal\"));\n            _this85.number = number;\n            _this85.min = number;\n            _this85.max = number;\n            return _this85;\n          }\n          _createClass(AstLiteral, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitLiteral(this);\n            }\n          }]);\n          return AstLiteral;\n        }(AstNode);\n        var AstBinaryOperation = /*#__PURE__*/function (_AstNode3) {\n          _inherits(AstBinaryOperation, _AstNode3);\n          function AstBinaryOperation(op, arg1, arg2, min, max) {\n            var _this86;\n            _classCallCheck(this, AstBinaryOperation);\n            _this86 = _possibleConstructorReturn(this, _getPrototypeOf(AstBinaryOperation).call(this, \"binary\"));\n            _this86.op = op;\n            _this86.arg1 = arg1;\n            _this86.arg2 = arg2;\n            _this86.min = min;\n            _this86.max = max;\n            return _this86;\n          }\n          _createClass(AstBinaryOperation, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitBinaryOperation(this);\n            }\n          }]);\n          return AstBinaryOperation;\n        }(AstNode);\n        var AstMin = /*#__PURE__*/function (_AstNode4) {\n          _inherits(AstMin, _AstNode4);\n          function AstMin(arg, max) {\n            var _this87;\n            _classCallCheck(this, AstMin);\n            _this87 = _possibleConstructorReturn(this, _getPrototypeOf(AstMin).call(this, \"max\"));\n            _this87.arg = arg;\n            _this87.min = arg.min;\n            _this87.max = max;\n            return _this87;\n          }\n          _createClass(AstMin, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitMin(this);\n            }\n          }]);\n          return AstMin;\n        }(AstNode);\n        var AstVariable = /*#__PURE__*/function (_AstNode5) {\n          _inherits(AstVariable, _AstNode5);\n          function AstVariable(index, min, max) {\n            var _this88;\n            _classCallCheck(this, AstVariable);\n            _this88 = _possibleConstructorReturn(this, _getPrototypeOf(AstVariable).call(this, \"var\"));\n            _this88.index = index;\n            _this88.min = min;\n            _this88.max = max;\n            return _this88;\n          }\n          _createClass(AstVariable, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitVariable(this);\n            }\n          }]);\n          return AstVariable;\n        }(AstNode);\n        var AstVariableDefinition = /*#__PURE__*/function (_AstNode6) {\n          _inherits(AstVariableDefinition, _AstNode6);\n          function AstVariableDefinition(variable, arg) {\n            var _this89;\n            _classCallCheck(this, AstVariableDefinition);\n            _this89 = _possibleConstructorReturn(this, _getPrototypeOf(AstVariableDefinition).call(this, \"definition\"));\n            _this89.variable = variable;\n            _this89.arg = arg;\n            return _this89;\n          }\n          _createClass(AstVariableDefinition, [{\n            key: \"visit\",\n            value: function visit(visitor) {\n              visitor.visitVariableDefinition(this);\n            }\n          }]);\n          return AstVariableDefinition;\n        }(AstNode);\n        var ExpressionBuilderVisitor = /*#__PURE__*/function () {\n          function ExpressionBuilderVisitor() {\n            _classCallCheck(this, ExpressionBuilderVisitor);\n            this.parts = [];\n          }\n          _createClass(ExpressionBuilderVisitor, [{\n            key: \"visitArgument\",\n            value: function visitArgument(arg) {\n              this.parts.push(\"Math.max(\", arg.min, \", Math.min(\", arg.max, \", src[srcOffset + \", arg.index, \"]))\");\n            }\n          }, {\n            key: \"visitVariable\",\n            value: function visitVariable(variable) {\n              this.parts.push(\"v\", variable.index);\n            }\n          }, {\n            key: \"visitLiteral\",\n            value: function visitLiteral(literal) {\n              this.parts.push(literal.number);\n            }\n          }, {\n            key: \"visitBinaryOperation\",\n            value: function visitBinaryOperation(operation) {\n              this.parts.push(\"(\");\n              operation.arg1.visit(this);\n              this.parts.push(\" \", operation.op, \" \");\n              operation.arg2.visit(this);\n              this.parts.push(\")\");\n            }\n          }, {\n            key: \"visitVariableDefinition\",\n            value: function visitVariableDefinition(definition) {\n              this.parts.push(\"var \");\n              definition.variable.visit(this);\n              this.parts.push(\" = \");\n              definition.arg.visit(this);\n              this.parts.push(\";\");\n            }\n          }, {\n            key: \"visitMin\",\n            value: function visitMin(max) {\n              this.parts.push(\"Math.min(\");\n              max.arg.visit(this);\n              this.parts.push(\", \", max.max, \")\");\n            }\n          }, {\n            key: \"toString\",\n            value: function toString() {\n              return this.parts.join(\"\");\n            }\n          }]);\n          return ExpressionBuilderVisitor;\n        }();\n        function buildAddOperation(num1, num2) {\n          if (num2.type === \"literal\" && num2.number === 0) {\n            return num1;\n          }\n          if (num1.type === \"literal\" && num1.number === 0) {\n            return num2;\n          }\n          if (num2.type === \"literal\" && num1.type === \"literal\") {\n            return new AstLiteral(num1.number + num2.number);\n          }\n          return new AstBinaryOperation(\"+\", num1, num2, num1.min + num2.min, num1.max + num2.max);\n        }\n        function buildMulOperation(num1, num2) {\n          if (num2.type === \"literal\") {\n            if (num2.number === 0) {\n              return new AstLiteral(0);\n            } else if (num2.number === 1) {\n              return num1;\n            } else if (num1.type === \"literal\") {\n              return new AstLiteral(num1.number * num2.number);\n            }\n          }\n          if (num1.type === \"literal\") {\n            if (num1.number === 0) {\n              return new AstLiteral(0);\n            } else if (num1.number === 1) {\n              return num2;\n            }\n          }\n          var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n          var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n          return new AstBinaryOperation(\"*\", num1, num2, min, max);\n        }\n        function buildSubOperation(num1, num2) {\n          if (num2.type === \"literal\") {\n            if (num2.number === 0) {\n              return num1;\n            } else if (num1.type === \"literal\") {\n              return new AstLiteral(num1.number - num2.number);\n            }\n          }\n          if (num2.type === \"binary\" && num2.op === \"-\" && num1.type === \"literal\" && num1.number === 1 && num2.arg1.type === \"literal\" && num2.arg1.number === 1) {\n            return num2.arg2;\n          }\n          return new AstBinaryOperation(\"-\", num1, num2, num1.min - num2.max, num1.max - num2.min);\n        }\n        function buildMinOperation(num1, max) {\n          if (num1.min >= max) {\n            return new AstLiteral(max);\n          } else if (num1.max <= max) {\n            return num1;\n          }\n          return new AstMin(num1, max);\n        }\n        var PostScriptCompiler = /*#__PURE__*/function () {\n          function PostScriptCompiler() {\n            _classCallCheck(this, PostScriptCompiler);\n          }\n          _createClass(PostScriptCompiler, [{\n            key: \"compile\",\n            value: function compile(code, domain, range) {\n              var stack = [];\n              var instructions = [];\n              var inputSize = domain.length >> 1,\n                outputSize = range.length >> 1;\n              var lastRegister = 0;\n              var n, j;\n              var num1, num2, ast1, ast2, tmpVar, item;\n              for (var i = 0; i < inputSize; i++) {\n                stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n              }\n              for (var _i50 = 0, ii = code.length; _i50 < ii; _i50++) {\n                item = code[_i50];\n                if (typeof item === \"number\") {\n                  stack.push(new AstLiteral(item));\n                  continue;\n                }\n                switch (item) {\n                  case \"add\":\n                    if (stack.length < 2) {\n                      return null;\n                    }\n                    num2 = stack.pop();\n                    num1 = stack.pop();\n                    stack.push(buildAddOperation(num1, num2));\n                    break;\n                  case \"cvr\":\n                    if (stack.length < 1) {\n                      return null;\n                    }\n                    break;\n                  case \"mul\":\n                    if (stack.length < 2) {\n                      return null;\n                    }\n                    num2 = stack.pop();\n                    num1 = stack.pop();\n                    stack.push(buildMulOperation(num1, num2));\n                    break;\n                  case \"sub\":\n                    if (stack.length < 2) {\n                      return null;\n                    }\n                    num2 = stack.pop();\n                    num1 = stack.pop();\n                    stack.push(buildSubOperation(num1, num2));\n                    break;\n                  case \"exch\":\n                    if (stack.length < 2) {\n                      return null;\n                    }\n                    ast1 = stack.pop();\n                    ast2 = stack.pop();\n                    stack.push(ast1, ast2);\n                    break;\n                  case \"pop\":\n                    if (stack.length < 1) {\n                      return null;\n                    }\n                    stack.pop();\n                    break;\n                  case \"index\":\n                    if (stack.length < 1) {\n                      return null;\n                    }\n                    num1 = stack.pop();\n                    if (num1.type !== \"literal\") {\n                      return null;\n                    }\n                    n = num1.number;\n                    if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n                      return null;\n                    }\n                    ast1 = stack[stack.length - n - 1];\n                    if (ast1.type === \"literal\" || ast1.type === \"var\") {\n                      stack.push(ast1);\n                      break;\n                    }\n                    tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n                    stack[stack.length - n - 1] = tmpVar;\n                    stack.push(tmpVar);\n                    instructions.push(new AstVariableDefinition(tmpVar, ast1));\n                    break;\n                  case \"dup\":\n                    if (stack.length < 1) {\n                      return null;\n                    }\n                    if (typeof code[_i50 + 1] === \"number\" && code[_i50 + 2] === \"gt\" && code[_i50 + 3] === _i50 + 7 && code[_i50 + 4] === \"jz\" && code[_i50 + 5] === \"pop\" && code[_i50 + 6] === code[_i50 + 1]) {\n                      num1 = stack.pop();\n                      stack.push(buildMinOperation(num1, code[_i50 + 1]));\n                      _i50 += 6;\n                      break;\n                    }\n                    ast1 = stack.at(-1);\n                    if (ast1.type === \"literal\" || ast1.type === \"var\") {\n                      stack.push(ast1);\n                      break;\n                    }\n                    tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n                    stack[stack.length - 1] = tmpVar;\n                    stack.push(tmpVar);\n                    instructions.push(new AstVariableDefinition(tmpVar, ast1));\n                    break;\n                  case \"roll\":\n                    if (stack.length < 2) {\n                      return null;\n                    }\n                    num2 = stack.pop();\n                    num1 = stack.pop();\n                    if (num2.type !== \"literal\" || num1.type !== \"literal\") {\n                      return null;\n                    }\n                    j = num2.number;\n                    n = num1.number;\n                    if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {\n                      return null;\n                    }\n                    j = (j % n + n) % n;\n                    if (j === 0) {\n                      break;\n                    }\n                    Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));\n                    break;\n                  default:\n                    return null;\n                }\n              }\n              if (stack.length !== outputSize) {\n                return null;\n              }\n              var result = [];\n              for (var _i51 = 0, _instructions = instructions; _i51 < _instructions.length; _i51++) {\n                var instruction = _instructions[_i51];\n                var statementBuilder = new ExpressionBuilderVisitor();\n                instruction.visit(statementBuilder);\n                result.push(statementBuilder.toString());\n              }\n              for (var _i52 = 0, _ii10 = stack.length; _i52 < _ii10; _i52++) {\n                var expr = stack[_i52],\n                  _statementBuilder = new ExpressionBuilderVisitor();\n                expr.visit(_statementBuilder);\n                var min = range[_i52 * 2],\n                  max = range[_i52 * 2 + 1];\n                var out = [_statementBuilder.toString()];\n                if (min > expr.min) {\n                  out.unshift(\"Math.max(\", min, \", \");\n                  out.push(\")\");\n                }\n                if (max < expr.max) {\n                  out.unshift(\"Math.min(\", max, \", \");\n                  out.push(\")\");\n                }\n                out.unshift(\"dest[destOffset + \", _i52, \"] = \");\n                out.push(\";\");\n                result.push(out.join(\"\"));\n              }\n              return result.join(\"\\n\");\n            }\n          }]);\n          return PostScriptCompiler;\n        }();\n        exports.PostScriptCompiler = PostScriptCompiler;\n\n        /***/\n      }, /* 58 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PostScriptParser = exports.PostScriptLexer = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _core_utils = __w_pdfjs_require__(6);\n        var PostScriptParser = /*#__PURE__*/function () {\n          function PostScriptParser(lexer) {\n            _classCallCheck(this, PostScriptParser);\n            this.lexer = lexer;\n            this.operators = [];\n            this.token = null;\n            this.prev = null;\n          }\n          _createClass(PostScriptParser, [{\n            key: \"nextToken\",\n            value: function nextToken() {\n              this.prev = this.token;\n              this.token = this.lexer.getToken();\n            }\n          }, {\n            key: \"accept\",\n            value: function accept(type) {\n              if (this.token.type === type) {\n                this.nextToken();\n                return true;\n              }\n              return false;\n            }\n          }, {\n            key: \"expect\",\n            value: function expect(type) {\n              if (this.accept(type)) {\n                return true;\n              }\n              throw new _util.FormatError(\"Unexpected symbol: found \".concat(this.token.type, \" expected \").concat(type, \".\"));\n            }\n          }, {\n            key: \"parse\",\n            value: function parse() {\n              this.nextToken();\n              this.expect(PostScriptTokenTypes.LBRACE);\n              this.parseBlock();\n              this.expect(PostScriptTokenTypes.RBRACE);\n              return this.operators;\n            }\n          }, {\n            key: \"parseBlock\",\n            value: function parseBlock() {\n              while (true) {\n                if (this.accept(PostScriptTokenTypes.NUMBER)) {\n                  this.operators.push(this.prev.value);\n                } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n                  this.operators.push(this.prev.value);\n                } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n                  this.parseCondition();\n                } else {\n                  return;\n                }\n              }\n            }\n          }, {\n            key: \"parseCondition\",\n            value: function parseCondition() {\n              var conditionLocation = this.operators.length;\n              this.operators.push(null, null);\n              this.parseBlock();\n              this.expect(PostScriptTokenTypes.RBRACE);\n              if (this.accept(PostScriptTokenTypes.IF)) {\n                this.operators[conditionLocation] = this.operators.length;\n                this.operators[conditionLocation + 1] = \"jz\";\n              } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n                var jumpLocation = this.operators.length;\n                this.operators.push(null, null);\n                var endOfTrue = this.operators.length;\n                this.parseBlock();\n                this.expect(PostScriptTokenTypes.RBRACE);\n                this.expect(PostScriptTokenTypes.IFELSE);\n                this.operators[jumpLocation] = this.operators.length;\n                this.operators[jumpLocation + 1] = \"j\";\n                this.operators[conditionLocation] = endOfTrue;\n                this.operators[conditionLocation + 1] = \"jz\";\n              } else {\n                throw new _util.FormatError(\"PS Function: error parsing conditional.\");\n              }\n            }\n          }]);\n          return PostScriptParser;\n        }();\n        exports.PostScriptParser = PostScriptParser;\n        var PostScriptTokenTypes = {\n          LBRACE: 0,\n          RBRACE: 1,\n          NUMBER: 2,\n          OPERATOR: 3,\n          IF: 4,\n          IFELSE: 5\n        };\n        var PostScriptToken = /*#__PURE__*/function () {\n          _createClass(PostScriptToken, null, [{\n            key: \"opCache\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"opCache\", Object.create(null));\n            }\n          }]);\n          function PostScriptToken(type, value) {\n            _classCallCheck(this, PostScriptToken);\n            this.type = type;\n            this.value = value;\n          }\n          _createClass(PostScriptToken, null, [{\n            key: \"getOperator\",\n            value: function getOperator(op) {\n              var opValue = PostScriptToken.opCache[op];\n              if (opValue) {\n                return opValue;\n              }\n              return PostScriptToken.opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);\n            }\n          }, {\n            key: \"LBRACE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"LBRACE\", new PostScriptToken(PostScriptTokenTypes.LBRACE, \"{\"));\n            }\n          }, {\n            key: \"RBRACE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"RBRACE\", new PostScriptToken(PostScriptTokenTypes.RBRACE, \"}\"));\n            }\n          }, {\n            key: \"IF\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"IF\", new PostScriptToken(PostScriptTokenTypes.IF, \"IF\"));\n            }\n          }, {\n            key: \"IFELSE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"IFELSE\", new PostScriptToken(PostScriptTokenTypes.IFELSE, \"IFELSE\"));\n            }\n          }]);\n          return PostScriptToken;\n        }();\n        var PostScriptLexer = /*#__PURE__*/function () {\n          function PostScriptLexer(stream) {\n            _classCallCheck(this, PostScriptLexer);\n            this.stream = stream;\n            this.nextChar();\n            this.strBuf = [];\n          }\n          _createClass(PostScriptLexer, [{\n            key: \"nextChar\",\n            value: function nextChar() {\n              return this.currentChar = this.stream.getByte();\n            }\n          }, {\n            key: \"getToken\",\n            value: function getToken() {\n              var comment = false;\n              var ch = this.currentChar;\n              while (true) {\n                if (ch < 0) {\n                  return _primitives.EOF;\n                }\n                if (comment) {\n                  if (ch === 0x0a || ch === 0x0d) {\n                    comment = false;\n                  }\n                } else if (ch === 0x25) {\n                  comment = true;\n                } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n                  break;\n                }\n                ch = this.nextChar();\n              }\n              switch (ch | 0) {\n                case 0x30:\n                case 0x31:\n                case 0x32:\n                case 0x33:\n                case 0x34:\n                case 0x35:\n                case 0x36:\n                case 0x37:\n                case 0x38:\n                case 0x39:\n                case 0x2b:\n                case 0x2d:\n                case 0x2e:\n                  return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());\n                case 0x7b:\n                  this.nextChar();\n                  return PostScriptToken.LBRACE;\n                case 0x7d:\n                  this.nextChar();\n                  return PostScriptToken.RBRACE;\n              }\n              var strBuf = this.strBuf;\n              strBuf.length = 0;\n              strBuf[0] = String.fromCharCode(ch);\n              while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {\n                strBuf.push(String.fromCharCode(ch));\n              }\n              var str = strBuf.join(\"\");\n              switch (str.toLowerCase()) {\n                case \"if\":\n                  return PostScriptToken.IF;\n                case \"ifelse\":\n                  return PostScriptToken.IFELSE;\n                default:\n                  return PostScriptToken.getOperator(str);\n              }\n            }\n          }, {\n            key: \"getNumber\",\n            value: function getNumber() {\n              var ch = this.currentChar;\n              var strBuf = this.strBuf;\n              strBuf.length = 0;\n              strBuf[0] = String.fromCharCode(ch);\n              while ((ch = this.nextChar()) >= 0) {\n                if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {\n                  strBuf.push(String.fromCharCode(ch));\n                } else {\n                  break;\n                }\n              }\n              var value = parseFloat(strBuf.join(\"\"));\n              if (isNaN(value)) {\n                throw new _util.FormatError(\"Invalid floating point number: \".concat(value));\n              }\n              return value;\n            }\n          }]);\n          return PostScriptLexer;\n        }();\n        exports.PostScriptLexer = PostScriptLexer;\n\n        /***/\n      }, /* 59 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.LocalTilingPatternCache = exports.LocalImageCache = exports.LocalGStateCache = exports.LocalFunctionCache = exports.LocalColorSpaceCache = exports.GlobalImageCache = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var BaseLocalCache = /*#__PURE__*/function () {\n          function BaseLocalCache(options) {\n            _classCallCheck(this, BaseLocalCache);\n            if (this.constructor === BaseLocalCache) {\n              (0, _util.unreachable)(\"Cannot initialize BaseLocalCache.\");\n            }\n            this._onlyRefs = (options && options.onlyRefs) === true;\n            if (!this._onlyRefs) {\n              this._nameRefMap = new Map();\n              this._imageMap = new Map();\n            }\n            this._imageCache = new _primitives.RefSetCache();\n          }\n          _createClass(BaseLocalCache, [{\n            key: \"getByName\",\n            value: function getByName(name) {\n              if (this._onlyRefs) {\n                (0, _util.unreachable)(\"Should not call `getByName` method.\");\n              }\n              var ref = this._nameRefMap.get(name);\n              if (ref) {\n                return this.getByRef(ref);\n              }\n              return this._imageMap.get(name) || null;\n            }\n          }, {\n            key: \"getByRef\",\n            value: function getByRef(ref) {\n              return this._imageCache.get(ref) || null;\n            }\n          }, {\n            key: \"set\",\n            value: function set(name, ref, data) {\n              (0, _util.unreachable)(\"Abstract method `set` called.\");\n            }\n          }]);\n          return BaseLocalCache;\n        }();\n        var LocalImageCache = /*#__PURE__*/function (_BaseLocalCache) {\n          _inherits(LocalImageCache, _BaseLocalCache);\n          function LocalImageCache() {\n            _classCallCheck(this, LocalImageCache);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocalImageCache).apply(this, arguments));\n          }\n          _createClass(LocalImageCache, [{\n            key: \"set\",\n            value: function set(name) {\n              var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              var data = arguments.length > 2 ? arguments[2] : undefined;\n              if (typeof name !== \"string\") {\n                throw new Error('LocalImageCache.set - expected \"name\" argument.');\n              }\n              if (ref) {\n                if (this._imageCache.has(ref)) {\n                  return;\n                }\n                this._nameRefMap.set(name, ref);\n                this._imageCache.put(ref, data);\n                return;\n              }\n              if (this._imageMap.has(name)) {\n                return;\n              }\n              this._imageMap.set(name, data);\n            }\n          }]);\n          return LocalImageCache;\n        }(BaseLocalCache);\n        exports.LocalImageCache = LocalImageCache;\n        var LocalColorSpaceCache = /*#__PURE__*/function (_BaseLocalCache2) {\n          _inherits(LocalColorSpaceCache, _BaseLocalCache2);\n          function LocalColorSpaceCache() {\n            _classCallCheck(this, LocalColorSpaceCache);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocalColorSpaceCache).apply(this, arguments));\n          }\n          _createClass(LocalColorSpaceCache, [{\n            key: \"set\",\n            value: function set() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              var data = arguments.length > 2 ? arguments[2] : undefined;\n              if (typeof name !== \"string\" && !ref) {\n                throw new Error('LocalColorSpaceCache.set - expected \"name\" and/or \"ref\" argument.');\n              }\n              if (ref) {\n                if (this._imageCache.has(ref)) {\n                  return;\n                }\n                if (name !== null) {\n                  this._nameRefMap.set(name, ref);\n                }\n                this._imageCache.put(ref, data);\n                return;\n              }\n              if (this._imageMap.has(name)) {\n                return;\n              }\n              this._imageMap.set(name, data);\n            }\n          }]);\n          return LocalColorSpaceCache;\n        }(BaseLocalCache);\n        exports.LocalColorSpaceCache = LocalColorSpaceCache;\n        var LocalFunctionCache = /*#__PURE__*/function (_BaseLocalCache3) {\n          _inherits(LocalFunctionCache, _BaseLocalCache3);\n          function LocalFunctionCache(options) {\n            _classCallCheck(this, LocalFunctionCache);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocalFunctionCache).call(this, {\n              onlyRefs: true\n            }));\n          }\n          _createClass(LocalFunctionCache, [{\n            key: \"set\",\n            value: function set() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              var ref = arguments.length > 1 ? arguments[1] : undefined;\n              var data = arguments.length > 2 ? arguments[2] : undefined;\n              if (!ref) {\n                throw new Error('LocalFunctionCache.set - expected \"ref\" argument.');\n              }\n              if (this._imageCache.has(ref)) {\n                return;\n              }\n              this._imageCache.put(ref, data);\n            }\n          }]);\n          return LocalFunctionCache;\n        }(BaseLocalCache);\n        exports.LocalFunctionCache = LocalFunctionCache;\n        var LocalGStateCache = /*#__PURE__*/function (_BaseLocalCache4) {\n          _inherits(LocalGStateCache, _BaseLocalCache4);\n          function LocalGStateCache() {\n            _classCallCheck(this, LocalGStateCache);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocalGStateCache).apply(this, arguments));\n          }\n          _createClass(LocalGStateCache, [{\n            key: \"set\",\n            value: function set(name) {\n              var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              var data = arguments.length > 2 ? arguments[2] : undefined;\n              if (typeof name !== \"string\") {\n                throw new Error('LocalGStateCache.set - expected \"name\" argument.');\n              }\n              if (ref) {\n                if (this._imageCache.has(ref)) {\n                  return;\n                }\n                this._nameRefMap.set(name, ref);\n                this._imageCache.put(ref, data);\n                return;\n              }\n              if (this._imageMap.has(name)) {\n                return;\n              }\n              this._imageMap.set(name, data);\n            }\n          }]);\n          return LocalGStateCache;\n        }(BaseLocalCache);\n        exports.LocalGStateCache = LocalGStateCache;\n        var LocalTilingPatternCache = /*#__PURE__*/function (_BaseLocalCache5) {\n          _inherits(LocalTilingPatternCache, _BaseLocalCache5);\n          function LocalTilingPatternCache(options) {\n            _classCallCheck(this, LocalTilingPatternCache);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocalTilingPatternCache).call(this, {\n              onlyRefs: true\n            }));\n          }\n          _createClass(LocalTilingPatternCache, [{\n            key: \"set\",\n            value: function set() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              var ref = arguments.length > 1 ? arguments[1] : undefined;\n              var data = arguments.length > 2 ? arguments[2] : undefined;\n              if (!ref) {\n                throw new Error('LocalTilingPatternCache.set - expected \"ref\" argument.');\n              }\n              if (this._imageCache.has(ref)) {\n                return;\n              }\n              this._imageCache.put(ref, data);\n            }\n          }]);\n          return LocalTilingPatternCache;\n        }(BaseLocalCache);\n        exports.LocalTilingPatternCache = LocalTilingPatternCache;\n        var GlobalImageCache = /*#__PURE__*/function () {\n          _createClass(GlobalImageCache, null, [{\n            key: \"NUM_PAGES_THRESHOLD\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"NUM_PAGES_THRESHOLD\", 2);\n            }\n          }, {\n            key: \"MIN_IMAGES_TO_CACHE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MIN_IMAGES_TO_CACHE\", 10);\n            }\n          }, {\n            key: \"MAX_BYTE_SIZE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"MAX_BYTE_SIZE\", 40e6);\n            }\n          }]);\n          function GlobalImageCache() {\n            _classCallCheck(this, GlobalImageCache);\n            this._refCache = new _primitives.RefSetCache();\n            this._imageCache = new _primitives.RefSetCache();\n          }\n          _createClass(GlobalImageCache, [{\n            key: \"shouldCache\",\n            value: function shouldCache(ref, pageIndex) {\n              var pageIndexSet = this._refCache.get(ref);\n              var numPages = pageIndexSet ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1) : 1;\n              if (numPages < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n                return false;\n              }\n              if (!this._imageCache.has(ref) && this._cacheLimitReached) {\n                return false;\n              }\n              return true;\n            }\n          }, {\n            key: \"addPageIndex\",\n            value: function addPageIndex(ref, pageIndex) {\n              var pageIndexSet = this._refCache.get(ref);\n              if (!pageIndexSet) {\n                pageIndexSet = new Set();\n                this._refCache.put(ref, pageIndexSet);\n              }\n              pageIndexSet.add(pageIndex);\n            }\n          }, {\n            key: \"addByteSize\",\n            value: function addByteSize(ref, byteSize) {\n              var imageData = this._imageCache.get(ref);\n              if (!imageData) {\n                return;\n              }\n              if (imageData.byteSize) {\n                return;\n              }\n              imageData.byteSize = byteSize;\n            }\n          }, {\n            key: \"getData\",\n            value: function getData(ref, pageIndex) {\n              var pageIndexSet = this._refCache.get(ref);\n              if (!pageIndexSet) {\n                return null;\n              }\n              if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n                return null;\n              }\n              var imageData = this._imageCache.get(ref);\n              if (!imageData) {\n                return null;\n              }\n              pageIndexSet.add(pageIndex);\n              return imageData;\n            }\n          }, {\n            key: \"setData\",\n            value: function setData(ref, data) {\n              if (!this._refCache.has(ref)) {\n                throw new Error('GlobalImageCache.setData - expected \"addPageIndex\" to have been called.');\n              }\n              if (this._imageCache.has(ref)) {\n                return;\n              }\n              if (this._cacheLimitReached) {\n                (0, _util.warn)(\"GlobalImageCache.setData - cache limit reached.\");\n                return;\n              }\n              this._imageCache.put(ref, data);\n            }\n          }, {\n            key: \"clear\",\n            value: function clear() {\n              var onlyData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              if (!onlyData) {\n                this._refCache.clear();\n              }\n              this._imageCache.clear();\n            }\n          }, {\n            key: \"_byteSize\",\n            get: function get() {\n              var byteSize = 0;\n              var _iterator90 = _createForOfIteratorHelper(this._imageCache),\n                _step90;\n              try {\n                for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {\n                  var imageData = _step90.value;\n                  byteSize += imageData.byteSize;\n                }\n              } catch (err) {\n                _iterator90.e(err);\n              } finally {\n                _iterator90.f();\n              }\n              return byteSize;\n            }\n          }, {\n            key: \"_cacheLimitReached\",\n            get: function get() {\n              if (this._imageCache.size < GlobalImageCache.MIN_IMAGES_TO_CACHE) {\n                return false;\n              }\n              if (this._byteSize < GlobalImageCache.MAX_BYTE_SIZE) {\n                return false;\n              }\n              return true;\n            }\n          }]);\n          return GlobalImageCache;\n        }();\n        exports.GlobalImageCache = GlobalImageCache;\n\n        /***/\n      }, /* 60 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.bidi = bidi;\n        var _util = __w_pdfjs_require__(2);\n        var baseTypesn        var arabicTypes = [\"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ON\", \"ON\", \"AL\", \"ET\", \"ET\", \"AL\", \"CS\", \"AL\", \"ON\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"];\n        function isOdd(i) {\n          return (i & 1) !== 0;\n        }\n        function isEven(i) {\n          return (i & 1) === 0;\n        }\n        function findUnequal(arr, start, value) {\n          var j, jj;\n          for (j = start, jj = arr.length; j < jj; ++j) {\n            if (arr[j] !== value) {\n              return j;\n            }\n          }\n          return j;\n        }\n        function setValues(arr, start, end, value) {\n          for (var j = start; j < end; ++j) {\n            arr[j] = value;\n          }\n        }\n        function reverseValues(arr, start, end) {\n          for (var i = start, j = end - 1; i < j; ++i, --j) {\n            var temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n          }\n        }\n        function createBidiText(str, isLTR) {\n          var vertical = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var dir = \"ltr\";\n          if (vertical) {\n            dir = \"ttb\";\n          } else if (!isLTR) {\n            dir = \"rtl\";\n          }\n          return {\n            str: str,\n            dir: dir\n          };\n        }\n        var chars = [];\n        var types = [];\n        function bidi(str) {\n          var startLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n          var vertical = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var isLTR = true;\n          var strLength = str.length;\n          if (strLength === 0 || vertical) {\n            return createBidiText(str, isLTR, vertical);\n          }\n          chars.length = strLength;\n          types.length = strLength;\n          var numBidi = 0;\n          var i, ii;\n          for (i = 0; i < strLength; ++i) {\n            chars[i] = str.charAt(i);\n            var charCode = str.charCodeAt(i);\n            var charType = \"L\";\n            if (charCode <= 0x00ff) {\n              charType = baseTypes[charCode];\n            } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n              charType = \"R\";\n            } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n              charType = arabicTypes[charCode & 0xff];\n              if (!charType) {\n                (0, _util.warn)(\"Bidi: invalid Unicode character \" + charCode.toString(16));\n              }\n            } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n              charType = \"AL\";\n            }\n            if (charType === \"R\" || charType === \"AL\" || charType === \"AN\") {\n              numBidi++;\n            }\n            types[i] = charType;\n          }\n          if (numBidi === 0) {\n            isLTR = true;\n            return createBidiText(str, isLTR);\n          }\n          if (startLevel === -1) {\n            if (numBidi / strLength < 0.3 && strLength > 4) {\n              isLTR = true;\n              startLevel = 0;\n            } else {\n              isLTR = false;\n              startLevel = 1;\n            }\n          }\n          var levels = [];\n          for (i = 0; i < strLength; ++i) {\n            levels[i] = startLevel;\n          }\n          var e = isOdd(startLevel) ? \"R\" : \"L\";\n          var sor = e;\n          var eor = sor;\n          var lastType = sor;\n          for (i = 0; i < strLength; ++i) {\n            if (types[i] === \"NSM\") {\n              types[i] = lastType;\n            } else {\n              lastType = types[i];\n            }\n          }\n          lastType = sor;\n          var t;\n          for (i = 0; i < strLength; ++i) {\n            t = types[i];\n            if (t === \"EN\") {\n              types[i] = lastType === \"AL\" ? \"AN\" : \"EN\";\n            } else if (t === \"R\" || t === \"L\" || t === \"AL\") {\n              lastType = t;\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            t = types[i];\n            if (t === \"AL\") {\n              types[i] = \"R\";\n            }\n          }\n          for (i = 1; i < strLength - 1; ++i) {\n            if (types[i] === \"ES\" && types[i - 1] === \"EN\" && types[i + 1] === \"EN\") {\n              types[i] = \"EN\";\n            }\n            if (types[i] === \"CS\" && (types[i - 1] === \"EN\" || types[i - 1] === \"AN\") && types[i + 1] === types[i - 1]) {\n              types[i] = types[i - 1];\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            if (types[i] === \"EN\") {\n              for (var j = i - 1; j >= 0; --j) {\n                if (types[j] !== \"ET\") {\n                  break;\n                }\n                types[j] = \"EN\";\n              }\n              for (var _j4 = i + 1; _j4 < strLength; ++_j4) {\n                if (types[_j4] !== \"ET\") {\n                  break;\n                }\n                types[_j4] = \"EN\";\n              }\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            t = types[i];\n            if (t === \"WS\" || t === \"ES\" || t === \"ET\" || t === \"CS\") {\n              types[i] = \"ON\";\n            }\n          }\n          lastType = sor;\n          for (i = 0; i < strLength; ++i) {\n            t = types[i];\n            if (t === \"EN\") {\n              types[i] = lastType === \"L\" ? \"L\" : \"EN\";\n            } else if (t === \"R\" || t === \"L\") {\n              lastType = t;\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            if (types[i] === \"ON\") {\n              var end = findUnequal(types, i + 1, \"ON\");\n              var before = sor;\n              if (i > 0) {\n                before = types[i - 1];\n              }\n              var after = eor;\n              if (end + 1 < strLength) {\n                after = types[end + 1];\n              }\n              if (before !== \"L\") {\n                before = \"R\";\n              }\n              if (after !== \"L\") {\n                after = \"R\";\n              }\n              if (before === after) {\n                setValues(types, i, end, before);\n              }\n              i = end - 1;\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            if (types[i] === \"ON\") {\n              types[i] = e;\n            }\n          }\n          for (i = 0; i < strLength; ++i) {\n            t = types[i];\n            if (isEven(levels[i])) {\n              if (t === \"R\") {\n                levels[i] += 1;\n              } else if (t === \"AN\" || t === \"EN\") {\n                levels[i] += 2;\n              }\n            } else {\n              if (t === \"L\" || t === \"AN\" || t === \"EN\") {\n                levels[i] += 1;\n              }\n            }\n          }\n          var highestLevel = -1;\n          var lowestOddLevel = 99;\n          var level;\n          for (i = 0, ii = levels.length; i < ii; ++i) {\n            level = levels[i];\n            if (highestLevel < level) {\n              highestLevel = level;\n            }\n            if (lowestOddLevel > level && isOdd(level)) {\n              lowestOddLevel = level;\n            }\n          }\n          for (level = highestLevel; level >= lowestOddLevel; --level) {\n            var start = -1;\n            for (i = 0, ii = levels.length; i < ii; ++i) {\n              if (levels[i] < level) {\n                if (start >= 0) {\n                  reverseValues(chars, start, i);\n                  start = -1;\n                }\n              } else if (start < 0) {\n                start = i;\n              }\n            }\n            if (start >= 0) {\n              reverseValues(chars, start, levels.length);\n            }\n          }\n          for (i = 0, ii = chars.length; i < ii; ++i) {\n            var ch = chars[i];\n            if (ch === \"<\" || ch === \">\") {\n              chars[i] = \"\";\n            }\n          }\n          return createBidiText(chars.join(\"\"), isLTR);\n        }\n\n        /***/\n      }, /* 61 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MurmurHash3_64 = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var SEED = 0xc3d2e1f0;\n        var MASK_HIGH = 0xffff0000;\n        var MASK_LOW = 0xffff;\n        var MurmurHash3_64 = /*#__PURE__*/function () {\n          function MurmurHash3_64(seed) {\n            _classCallCheck(this, MurmurHash3_64);\n            this.h1 = seed ? seed & 0xffffffff : SEED;\n            this.h2 = seed ? seed & 0xffffffff : SEED;\n          }\n          _createClass(MurmurHash3_64, [{\n            key: \"update\",\n            value: function update(input) {\n              var data, length;\n              if (typeof input === \"string\") {\n                data = new Uint8Array(input.length * 2);\n                length = 0;\n                for (var i = 0, ii = input.length; i < ii; i++) {\n                  var code = input.charCodeAt(i);\n                  if (code <= 0xff) {\n                    data[length++] = code;\n                  } else {\n                    data[length++] = code >>> 8;\n                    data[length++] = code & 0xff;\n                  }\n                }\n              } else if ((0, _util.isArrayBuffer)(input)) {\n                data = input.slice();\n                length = data.byteLength;\n              } else {\n                throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n              }\n              var blockCounts = length >> 2;\n              var tailLength = length - blockCounts * 4;\n              var dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n              var k1 = 0,\n                k2 = 0;\n              var h1 = this.h1,\n                h2 = this.h2;\n              var C1 = 0xcc9e2d51,\n                C2 = 0x1b873593;\n              var C1_LOW = C1 & MASK_LOW,\n                C2_LOW = C2 & MASK_LOW;\n              for (var _i53 = 0; _i53 < blockCounts; _i53++) {\n                if (_i53 & 1) {\n                  k1 = dataUint32[_i53];\n                  k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                  k1 = k1 << 15 | k1 >>> 17;\n                  k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n                  h1 ^= k1;\n                  h1 = h1 << 13 | h1 >>> 19;\n                  h1 = h1 * 5 + 0xe6546b64;\n                } else {\n                  k2 = dataUint32[_i53];\n                  k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n                  k2 = k2 << 15 | k2 >>> 17;\n                  k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n                  h2 ^= k2;\n                  h2 = h2 << 13 | h2 >>> 19;\n                  h2 = h2 * 5 + 0xe6546b64;\n                }\n              }\n              k1 = 0;\n              switch (tailLength) {\n                case 3:\n                  k1 ^= data[blockCounts * 4 + 2] << 16;\n                case 2:\n                  k1 ^= data[blockCounts * 4 + 1] << 8;\n                case 1:\n                  k1 ^= data[blockCounts * 4];\n                  k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                  k1 = k1 << 15 | k1 >>> 17;\n                  k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n                  if (blockCounts & 1) {\n                    h1 ^= k1;\n                  } else {\n                    h2 ^= k1;\n                  }\n              }\n              this.h1 = h1;\n              this.h2 = h2;\n            }\n          }, {\n            key: \"hexdigest\",\n            value: function hexdigest() {\n              var h1 = this.h1,\n                h2 = this.h2;\n              h1 ^= h2 >>> 1;\n              h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n              h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n              h1 ^= h2 >>> 1;\n              h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n              h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n              h1 ^= h2 >>> 1;\n              var hex1 = (h1 >>> 0).toString(16),\n                hex2 = (h2 >>> 0).toString(16);\n              return hex1.padStart(8, \"0\") + hex2.padStart(8, \"0\");\n            }\n          }]);\n          return MurmurHash3_64;\n        }();\n        exports.MurmurHash3_64 = MurmurHash3_64;\n\n        /***/\n      }, /* 62 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OperatorList = void 0;\n        var _util = __w_pdfjs_require__(2);\n        function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n          var state = parentState;\n          for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n            var item = pattern[i];\n            state = state[item] || (state[item] = []);\n          }\n          state[pattern.at(-1)] = {\n            checkFn: checkFn,\n            iterateFn: iterateFn,\n            processFn: processFn\n          };\n        }\n        var InitialState = [];\n        addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {\n          var fnArray = context.fnArray;\n          var iFirstSave = context.iCurr - 3;\n          var pos = (i - iFirstSave) % 4;\n          switch (pos) {\n            case 0:\n              return fnArray[i] === _util.OPS.save;\n            case 1:\n              return fnArray[i] === _util.OPS.transform;\n            case 2:\n              return fnArray[i] === _util.OPS.paintInlineImageXObject;\n            case 3:\n              return fnArray[i] === _util.OPS.restore;\n          }\n          throw new Error(\"iterateInlineImageGroup - invalid pos: \".concat(pos));\n        }, function foundInlineImageGroup(context, i) {\n          var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n          var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n          var MAX_WIDTH = 1000;\n          var IMAGE_PADDING = 1;\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var curr = context.iCurr;\n          var iFirstSave = curr - 3;\n          var iFirstTransform = curr - 2;\n          var iFirstPIIXO = curr - 1;\n          var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);\n          if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n            return i - (i - iFirstSave) % 4;\n          }\n          var maxX = 0;\n          var map = [];\n          var maxLineHeight = 0;\n          var currentX = IMAGE_PADDING,\n            currentY = IMAGE_PADDING;\n          for (var q = 0; q < count; q++) {\n            var transform = argsArray[iFirstTransform + (q << 2)];\n            var img = argsArray[iFirstPIIXO + (q << 2)][0];\n            if (currentX + img.width > MAX_WIDTH) {\n              maxX = Math.max(maxX, currentX);\n              currentY += maxLineHeight + 2 * IMAGE_PADDING;\n              currentX = 0;\n              maxLineHeight = 0;\n            }\n            map.push({\n              transform: transform,\n              x: currentX,\n              y: currentY,\n              w: img.width,\n              h: img.height\n            });\n            currentX += img.width + 2 * IMAGE_PADDING;\n            maxLineHeight = Math.max(maxLineHeight, img.height);\n          }\n          var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n          var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n          var imgData = new Uint8Array(imgWidth * imgHeight * 4);\n          var imgRowSize = imgWidth << 2;\n          for (var _q = 0; _q < count; _q++) {\n            var data = argsArray[iFirstPIIXO + (_q << 2)][0].data;\n            var rowSize = map[_q].w << 2;\n            var dataOffset = 0;\n            var offset = map[_q].x + map[_q].y * imgWidth << 2;\n            imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n            for (var k = 0, kk = map[_q].h; k < kk; k++) {\n              imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n              dataOffset += rowSize;\n              offset += imgRowSize;\n            }\n            imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n            while (offset >= 0) {\n              data[offset - 4] = data[offset];\n              data[offset - 3] = data[offset + 1];\n              data[offset - 2] = data[offset + 2];\n              data[offset - 1] = data[offset + 3];\n              data[offset + rowSize] = data[offset + rowSize - 4];\n              data[offset + rowSize + 1] = data[offset + rowSize - 3];\n              data[offset + rowSize + 2] = data[offset + rowSize - 2];\n              data[offset + rowSize + 3] = data[offset + rowSize - 1];\n              offset -= imgRowSize;\n            }\n          }\n          fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);\n          argsArray.splice(iFirstSave, count * 4, [{\n            width: imgWidth,\n            height: imgHeight,\n            kind: _util.ImageKind.RGBA_32BPP,\n            data: imgData\n          }, map]);\n          return iFirstSave + 1;\n        });\n        addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {\n          var fnArray = context.fnArray;\n          var iFirstSave = context.iCurr - 3;\n          var pos = (i - iFirstSave) % 4;\n          switch (pos) {\n            case 0:\n              return fnArray[i] === _util.OPS.save;\n            case 1:\n              return fnArray[i] === _util.OPS.transform;\n            case 2:\n              return fnArray[i] === _util.OPS.paintImageMaskXObject;\n            case 3:\n              return fnArray[i] === _util.OPS.restore;\n          }\n          throw new Error(\"iterateImageMaskGroup - invalid pos: \".concat(pos));\n        }, function foundImageMaskGroup(context, i) {\n          var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n          var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n          var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var curr = context.iCurr;\n          var iFirstSave = curr - 3;\n          var iFirstTransform = curr - 2;\n          var iFirstPIMXO = curr - 1;\n          var count = Math.floor((i - iFirstSave) / 4);\n          if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n            return i - (i - iFirstSave) % 4;\n          }\n          var isSameImage = false;\n          var iTransform, transformArgs;\n          var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n          var firstTransformArg0 = argsArray[iFirstTransform][0],\n            firstTransformArg1 = argsArray[iFirstTransform][1],\n            firstTransformArg2 = argsArray[iFirstTransform][2],\n            firstTransformArg3 = argsArray[iFirstTransform][3];\n          if (firstTransformArg1 === firstTransformArg2) {\n            isSameImage = true;\n            iTransform = iFirstTransform + 4;\n            var iPIMXO = iFirstPIMXO + 4;\n            for (var q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n              transformArgs = argsArray[iTransform];\n              if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== firstTransformArg1 || transformArgs[2] !== firstTransformArg2 || transformArgs[3] !== firstTransformArg3) {\n                if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n                  isSameImage = false;\n                } else {\n                  count = q;\n                }\n                break;\n              }\n            }\n          }\n          if (isSameImage) {\n            count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n            var positions = new Float32Array(count * 2);\n            iTransform = iFirstTransform;\n            for (var _q2 = 0; _q2 < count; _q2++, iTransform += 4) {\n              transformArgs = argsArray[iTransform];\n              positions[_q2 << 1] = transformArgs[4];\n              positions[(_q2 << 1) + 1] = transformArgs[5];\n            }\n            fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);\n            argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg1, firstTransformArg2, firstTransformArg3, positions]);\n          } else {\n            count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n            var images = [];\n            for (var _q3 = 0; _q3 < count; _q3++) {\n              transformArgs = argsArray[iFirstTransform + (_q3 << 2)];\n              var maskParams = argsArray[iFirstPIMXO + (_q3 << 2)][0];\n              images.push({\n                data: maskParams.data,\n                width: maskParams.width,\n                height: maskParams.height,\n                interpolate: maskParams.interpolate,\n                count: maskParams.count,\n                transform: transformArgs\n              });\n            }\n            fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);\n            argsArray.splice(iFirstSave, count * 4, [images]);\n          }\n          return iFirstSave + 1;\n        });\n        addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function (context) {\n          var argsArray = context.argsArray;\n          var iFirstTransform = context.iCurr - 2;\n          return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;\n        }, function iterateImageGroup(context, i) {\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var iFirstSave = context.iCurr - 3;\n          var pos = (i - iFirstSave) % 4;\n          switch (pos) {\n            case 0:\n              return fnArray[i] === _util.OPS.save;\n            case 1:\n              if (fnArray[i] !== _util.OPS.transform) {\n                return false;\n              }\n              var iFirstTransform = context.iCurr - 2;\n              var firstTransformArg0 = argsArray[iFirstTransform][0];\n              var firstTransformArg3 = argsArray[iFirstTransform][3];\n              if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {\n                return false;\n              }\n              return true;\n            case 2:\n              if (fnArray[i] !== _util.OPS.paintImageXObject) {\n                return false;\n              }\n              var iFirstPIXO = context.iCurr - 1;\n              var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n              if (argsArray[i][0] !== firstPIXOArg0) {\n                return false;\n              }\n              return true;\n            case 3:\n              return fnArray[i] === _util.OPS.restore;\n          }\n          throw new Error(\"iterateImageGroup - invalid pos: \".concat(pos));\n        }, function (context, i) {\n          var MIN_IMAGES_IN_BLOCK = 3;\n          var MAX_IMAGES_IN_BLOCK = 1000;\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var curr = context.iCurr;\n          var iFirstSave = curr - 3;\n          var iFirstTransform = curr - 2;\n          var iFirstPIXO = curr - 1;\n          var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n          var firstTransformArg0 = argsArray[iFirstTransform][0];\n          var firstTransformArg3 = argsArray[iFirstTransform][3];\n          var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);\n          if (count < MIN_IMAGES_IN_BLOCK) {\n            return i - (i - iFirstSave) % 4;\n          }\n          var positions = new Float32Array(count * 2);\n          var iTransform = iFirstTransform;\n          for (var q = 0; q < count; q++, iTransform += 4) {\n            var transformArgs = argsArray[iTransform];\n            positions[q << 1] = transformArgs[4];\n            positions[(q << 1) + 1] = transformArgs[5];\n          }\n          var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];\n          fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);\n          argsArray.splice(iFirstSave, count * 4, args);\n          return iFirstSave + 1;\n        });\n        addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var iFirstSave = context.iCurr - 4;\n          var pos = (i - iFirstSave) % 5;\n          switch (pos) {\n            case 0:\n              return fnArray[i] === _util.OPS.beginText;\n            case 1:\n              return fnArray[i] === _util.OPS.setFont;\n            case 2:\n              return fnArray[i] === _util.OPS.setTextMatrix;\n            case 3:\n              if (fnArray[i] !== _util.OPS.showText) {\n                return false;\n              }\n              var iFirstSetFont = context.iCurr - 3;\n              var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n              var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n              if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {\n                return false;\n              }\n              return true;\n            case 4:\n              return fnArray[i] === _util.OPS.endText;\n          }\n          throw new Error(\"iterateShowTextGroup - invalid pos: \".concat(pos));\n        }, function (context, i) {\n          var MIN_CHARS_IN_BLOCK = 3;\n          var MAX_CHARS_IN_BLOCK = 1000;\n          var fnArray = context.fnArray,\n            argsArray = context.argsArray;\n          var curr = context.iCurr;\n          var iFirstBeginText = curr - 4;\n          var iFirstSetFont = curr - 3;\n          var iFirstSetTextMatrix = curr - 2;\n          var iFirstShowText = curr - 1;\n          var iFirstEndText = curr;\n          var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n          var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n          var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);\n          if (count < MIN_CHARS_IN_BLOCK) {\n            return i - (i - iFirstBeginText) % 5;\n          }\n          var iFirst = iFirstBeginText;\n          if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {\n            count++;\n            iFirst -= 5;\n          }\n          var iEndText = iFirst + 4;\n          for (var q = 1; q < count; q++) {\n            fnArray.splice(iEndText, 3);\n            argsArray.splice(iEndText, 3);\n            iEndText += 2;\n          }\n          return iEndText + 1;\n        });\n        var NullOptimizer = /*#__PURE__*/function () {\n          function NullOptimizer(queue) {\n            _classCallCheck(this, NullOptimizer);\n            this.queue = queue;\n          }\n          _createClass(NullOptimizer, [{\n            key: \"_optimize\",\n            value: function _optimize() {}\n          }, {\n            key: \"push\",\n            value: function push(fn, args) {\n              this.queue.fnArray.push(fn);\n              this.queue.argsArray.push(args);\n              this._optimize();\n            }\n          }, {\n            key: \"flush\",\n            value: function flush() {}\n          }, {\n            key: \"reset\",\n            value: function reset() {}\n          }]);\n          return NullOptimizer;\n        }();\n        var QueueOptimizer = /*#__PURE__*/function (_NullOptimizer) {\n          _inherits(QueueOptimizer, _NullOptimizer);\n          function QueueOptimizer(queue) {\n            var _this90;\n            _classCallCheck(this, QueueOptimizer);\n            _this90 = _possibleConstructorReturn(this, _getPrototypeOf(QueueOptimizer).call(this, queue));\n            _this90.state = null;\n            _this90.context = {\n              iCurr: 0,\n              fnArray: queue.fnArray,\n              argsArray: queue.argsArray\n            };\n            _this90.match = null;\n            _this90.lastProcessed = 0;\n            return _this90;\n          }\n          _createClass(QueueOptimizer, [{\n            key: \"_optimize\",\n            value: function _optimize() {\n              var fnArray = this.queue.fnArray;\n              var i = this.lastProcessed,\n                ii = fnArray.length;\n              var state = this.state;\n              var match = this.match;\n              if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n                this.lastProcessed = ii;\n                return;\n              }\n              var context = this.context;\n              while (i < ii) {\n                if (match) {\n                  var iterate = (0, match.iterateFn)(context, i);\n                  if (iterate) {\n                    i++;\n                    continue;\n                  }\n                  i = (0, match.processFn)(context, i + 1);\n                  ii = fnArray.length;\n                  match = null;\n                  state = null;\n                  if (i >= ii) {\n                    break;\n                  }\n                }\n                state = (state || InitialState)[fnArray[i]];\n                if (!state || Array.isArray(state)) {\n                  i++;\n                  continue;\n                }\n                context.iCurr = i;\n                i++;\n                if (state.checkFn && !(0, state.checkFn)(context)) {\n                  state = null;\n                  continue;\n                }\n                match = state;\n                state = null;\n              }\n              this.state = state;\n              this.match = match;\n              this.lastProcessed = i;\n            }\n          }, {\n            key: \"flush\",\n            value: function flush() {\n              while (this.match) {\n                var length = this.queue.fnArray.length;\n                this.lastProcessed = (0, this.match.processFn)(this.context, length);\n                this.match = null;\n                this.state = null;\n                this._optimize();\n              }\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              this.state = null;\n              this.match = null;\n              this.lastProcessed = 0;\n            }\n          }]);\n          return QueueOptimizer;\n        }(NullOptimizer);\n        var OperatorList = /*#__PURE__*/function () {\n          _createClass(OperatorList, null, [{\n            key: \"CHUNK_SIZE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"CHUNK_SIZE\", 1000);\n            }\n          }, {\n            key: \"CHUNK_SIZE_ABOUT\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"CHUNK_SIZE_ABOUT\", this.CHUNK_SIZE - 5);\n            }\n          }]);\n          function OperatorList() {\n            var intent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            var streamSink = arguments.length > 1 ? arguments[1] : undefined;\n            _classCallCheck(this, OperatorList);\n            this._streamSink = streamSink;\n            this.fnArray = [];\n            this.argsArray = [];\n            if (streamSink && !(intent & _util.RenderingIntentFlag.OPLIST)) {\n              this.optimizer = new QueueOptimizer(this);\n            } else {\n              this.optimizer = new NullOptimizer(this);\n            }\n            this.dependencies = new Set();\n            this._totalLength = 0;\n            this.weight = 0;\n            this._resolved = streamSink ? null : Promise.resolve();\n          }\n          _createClass(OperatorList, [{\n            key: \"addOp\",\n            value: function addOp(fn, args) {\n              this.optimizer.push(fn, args);\n              this.weight++;\n              if (this._streamSink) {\n                if (this.weight >= OperatorList.CHUNK_SIZE) {\n                  this.flush();\n                } else if (this.weight >= OperatorList.CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {\n                  this.flush();\n                }\n              }\n            }\n          }, {\n            key: \"addImageOps\",\n            value: function addImageOps(fn, args, optionalContent) {\n              if (optionalContent !== undefined) {\n                this.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", optionalContent]);\n              }\n              this.addOp(fn, args);\n              if (optionalContent !== undefined) {\n                this.addOp(_util.OPS.endMarkedContent, []);\n              }\n            }\n          }, {\n            key: \"addDependency\",\n            value: function addDependency(dependency) {\n              if (this.dependencies.has(dependency)) {\n                return;\n              }\n              this.dependencies.add(dependency);\n              this.addOp(_util.OPS.dependency, [dependency]);\n            }\n          }, {\n            key: \"addDependencies\",\n            value: function addDependencies(dependencies) {\n              var _iterator91 = _createForOfIteratorHelper(dependencies),\n                _step91;\n              try {\n                for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {\n                  var dependency = _step91.value;\n                  this.addDependency(dependency);\n                }\n              } catch (err) {\n                _iterator91.e(err);\n              } finally {\n                _iterator91.f();\n              }\n            }\n          }, {\n            key: \"addOpList\",\n            value: function addOpList(opList) {\n              if (!(opList instanceof OperatorList)) {\n                (0, _util.warn)('addOpList - ignoring invalid \"opList\" parameter.');\n                return;\n              }\n              var _iterator92 = _createForOfIteratorHelper(opList.dependencies),\n                _step92;\n              try {\n                for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {\n                  var dependency = _step92.value;\n                  this.dependencies.add(dependency);\n                }\n              } catch (err) {\n                _iterator92.e(err);\n              } finally {\n                _iterator92.f();\n              }\n              for (var i = 0, ii = opList.length; i < ii; i++) {\n                this.addOp(opList.fnArray[i], opList.argsArray[i]);\n              }\n            }\n          }, {\n            key: \"getIR\",\n            value: function getIR() {\n              return {\n                fnArray: this.fnArray,\n                argsArray: this.argsArray,\n                length: this.length\n              };\n            }\n          }, {\n            key: \"flush\",\n            value: function flush() {\n              var lastChunk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var separateAnnots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              this.optimizer.flush();\n              var length = this.length;\n              this._totalLength += length;\n              this._streamSink.enqueue({\n                fnArray: this.fnArray,\n                argsArray: this.argsArray,\n                lastChunk: lastChunk,\n                separateAnnots: separateAnnots,\n                length: length\n              }, 1, this._transfers);\n              this.dependencies.clear();\n              this.fnArray.length = 0;\n              this.argsArray.length = 0;\n              this.weight = 0;\n              this.optimizer.reset();\n            }\n          }, {\n            key: \"length\",\n            get: function get() {\n              return this.argsArray.length;\n            }\n          }, {\n            key: \"ready\",\n            get: function get() {\n              return this._resolved || this._streamSink.ready;\n            }\n          }, {\n            key: \"totalLength\",\n            get: function get() {\n              return this._totalLength + this.length;\n            }\n          }, {\n            key: \"_transfers\",\n            get: function get() {\n              var transfers = [];\n              var fnArray = this.fnArray,\n                argsArray = this.argsArray,\n                length = this.length;\n              for (var i = 0; i < length; i++) {\n                switch (fnArray[i]) {\n                  case _util.OPS.paintInlineImageXObject:\n                  case _util.OPS.paintInlineImageXObjectGroup:\n                  case _util.OPS.paintImageMaskXObject:\n                    var arg = argsArray[i][0];\n                    if (!arg.cached && arg.data && arg.data.buffer instanceof ArrayBuffer) {\n                      transfers.push(arg.data.buffer);\n                    }\n                    break;\n                }\n              }\n              return transfers;\n            }\n          }]);\n          return OperatorList;\n        }();\n        exports.OperatorList = OperatorList;\n\n        /***/\n      }, /* 63 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFImage = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _image_utils = __w_pdfjs_require__(64);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _decode_stream = __w_pdfjs_require__(19);\n        var _jpeg_stream = __w_pdfjs_require__(27);\n        var _jpx = __w_pdfjs_require__(30);\n        var _primitives = __w_pdfjs_require__(5);\n        function decodeAndClamp(value, addend, coefficient, max) {\n          value = addend + value * coefficient;\n          if (value < 0) {\n            value = 0;\n          } else if (value > max) {\n            value = max;\n          }\n          return value;\n        }\n        function resizeImageMask(src, bpc, w1, h1, w2, h2) {\n          var length = w2 * h2;\n          var dest;\n          if (bpc <= 8) {\n            dest = new Uint8Array(length);\n          } else if (bpc <= 16) {\n            dest = new Uint16Array(length);\n          } else {\n            dest = new Uint32Array(length);\n          }\n          var xRatio = w1 / w2;\n          var yRatio = h1 / h2;\n          var i,\n            j,\n            py,\n            newIndex = 0,\n            oldIndex;\n          var xScaled = new Uint16Array(w2);\n          var w1Scanline = w1;\n          for (i = 0; i < w2; i++) {\n            xScaled[i] = Math.floor(i * xRatio);\n          }\n          for (i = 0; i < h2; i++) {\n            py = Math.floor(i * yRatio) * w1Scanline;\n            for (j = 0; j < w2; j++) {\n              oldIndex = py + xScaled[j];\n              dest[newIndex++] = src[oldIndex];\n            }\n          }\n          return dest;\n        }\n        var PDFImage = /*#__PURE__*/function () {\n          function PDFImage(_ref76) {\n            var xref = _ref76.xref,\n              res = _ref76.res,\n              image = _ref76.image,\n              _ref76$isInline = _ref76.isInline,\n              isInline = _ref76$isInline === void 0 ? false : _ref76$isInline,\n              _ref76$smask = _ref76.smask,\n              smask = _ref76$smask === void 0 ? null : _ref76$smask,\n              _ref76$mask = _ref76.mask,\n              mask = _ref76$mask === void 0 ? null : _ref76$mask,\n              _ref76$isMask = _ref76.isMask,\n              isMask = _ref76$isMask === void 0 ? false : _ref76$isMask,\n              pdfFunctionFactory = _ref76.pdfFunctionFactory,\n              localColorSpaceCache = _ref76.localColorSpaceCache;\n            _classCallCheck(this, PDFImage);\n            this.image = image;\n            var dict = image.dict;\n            var filter = dict.get(\"F\", \"Filter\");\n            var filterName;\n            if (filter instanceof _primitives.Name) {\n              filterName = filter.name;\n            } else if (Array.isArray(filter)) {\n              var filterZero = xref.fetchIfRef(filter[0]);\n              if (filterZero instanceof _primitives.Name) {\n                filterName = filterZero.name;\n              }\n            }\n            switch (filterName) {\n              case \"JPXDecode\":\n                var jpxImage = new _jpx.JpxImage();\n                jpxImage.parseImageProperties(image.stream);\n                image.stream.reset();\n                image.width = jpxImage.width;\n                image.height = jpxImage.height;\n                image.bitsPerComponent = jpxImage.bitsPerComponent;\n                image.numComps = jpxImage.componentsCount;\n                break;\n              case \"JBIG2Decode\":\n                image.bitsPerComponent = 1;\n                image.numComps = 1;\n                break;\n            }\n            var width = dict.get(\"W\", \"Width\");\n            var height = dict.get(\"H\", \"Height\");\n            if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {\n              (0, _util.warn)(\"PDFImage - using the Width/Height of the image data, \" + \"rather than the image dictionary.\");\n              width = image.width;\n              height = image.height;\n            }\n            if (width < 1 || height < 1) {\n              throw new _util.FormatError(\"Invalid image width: \".concat(width, \" or height: \").concat(height));\n            }\n            this.width = width;\n            this.height = height;\n            this.interpolate = dict.get(\"I\", \"Interpolate\");\n            this.imageMask = dict.get(\"IM\", \"ImageMask\") || false;\n            this.matte = dict.get(\"Matte\") || false;\n            var bitsPerComponent = image.bitsPerComponent;\n            if (!bitsPerComponent) {\n              bitsPerComponent = dict.get(\"BPC\", \"BitsPerComponent\");\n              if (!bitsPerComponent) {\n                if (this.imageMask) {\n                  bitsPerComponent = 1;\n                } else {\n                  throw new _util.FormatError(\"Bits per component missing in image: \".concat(this.imageMask));\n                }\n              }\n            }\n            this.bpc = bitsPerComponent;\n            if (!this.imageMask) {\n              var colorSpace = dict.getRaw(\"CS\") || dict.getRaw(\"ColorSpace\");\n              if (!colorSpace) {\n                (0, _util.info)(\"JPX images (which do not require color spaces)\");\n                switch (image.numComps) {\n                  case 1:\n                    colorSpace = _primitives.Name.get(\"DeviceGray\");\n                    break;\n                  case 3:\n                    colorSpace = _primitives.Name.get(\"DeviceRGB\");\n                    break;\n                  case 4:\n                    colorSpace = _primitives.Name.get(\"DeviceCMYK\");\n                    break;\n                  default:\n                    throw new Error(\"JPX images with \".concat(image.numComps, \" color components not supported.\"));\n                }\n              }\n              this.colorSpace = _colorspace.ColorSpace.parse({\n                cs: colorSpace,\n                xref: xref,\n                resources: isInline ? res : null,\n                pdfFunctionFactory: pdfFunctionFactory,\n                localColorSpaceCache: localColorSpaceCache\n              });\n              this.numComps = this.colorSpace.numComps;\n            }\n            this.decode = dict.getArray(\"D\", \"Decode\");\n            this.needsDecode = false;\n            if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {\n              this.needsDecode = true;\n              var max = (1 << bitsPerComponent) - 1;\n              this.decodeCoefficients = [];\n              this.decodeAddends = [];\n              var isIndexed = this.colorSpace && this.colorSpace.name === \"Indexed\";\n              for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n                var dmin = this.decode[i];\n                var dmax = this.decode[i + 1];\n                this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;\n                this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n              }\n            }\n            if (smask) {\n              this.smask = new PDFImage({\n                xref: xref,\n                res: res,\n                image: smask,\n                isInline: isInline,\n                pdfFunctionFactory: pdfFunctionFactory,\n                localColorSpaceCache: localColorSpaceCache\n              });\n            } else if (mask) {\n              if (mask instanceof _base_stream.BaseStream) {\n                var maskDict = mask.dict,\n                  imageMask = maskDict.get(\"IM\", \"ImageMask\");\n                if (!imageMask) {\n                  (0, _util.warn)(\"Ignoring /Mask in image without /ImageMask.\");\n                } else {\n                  this.mask = new PDFImage({\n                    xref: xref,\n                    res: res,\n                    image: mask,\n                    isInline: isInline,\n                    isMask: true,\n                    pdfFunctionFactory: pdfFunctionFactory,\n                    localColorSpaceCache: localColorSpaceCache\n                  });\n                }\n              } else {\n                this.mask = mask;\n              }\n            }\n          }\n          _createClass(PDFImage, [{\n            key: \"decodeBuffer\",\n            value: function decodeBuffer(buffer) {\n              var bpc = this.bpc;\n              var numComps = this.numComps;\n              var decodeAddends = this.decodeAddends;\n              var decodeCoefficients = this.decodeCoefficients;\n              var max = (1 << bpc) - 1;\n              var i, ii;\n              if (bpc === 1) {\n                for (i = 0, ii = buffer.length; i < ii; i++) {\n                  buffer[i] = +!buffer[i];\n                }\n                return;\n              }\n              var index = 0;\n              for (i = 0, ii = this.width * this.height; i < ii; i++) {\n                for (var j = 0; j < numComps; j++) {\n                  buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);\n                  index++;\n                }\n              }\n            }\n          }, {\n            key: \"getComponents\",\n            value: function getComponents(buffer) {\n              var bpc = this.bpc;\n              if (bpc === 8) {\n                return buffer;\n              }\n              var width = this.width;\n              var height = this.height;\n              var numComps = this.numComps;\n              var length = width * height * numComps;\n              var bufferPos = 0;\n              var output;\n              if (bpc <= 8) {\n                output = new Uint8Array(length);\n              } else if (bpc <= 16) {\n                output = new Uint16Array(length);\n              } else {\n                output = new Uint32Array(length);\n              }\n              var rowComps = width * numComps;\n              var max = (1 << bpc) - 1;\n              var i = 0,\n                ii,\n                buf;\n              if (bpc === 1) {\n                var mask, loop1End, loop2End;\n                for (var j = 0; j < height; j++) {\n                  loop1End = i + (rowComps & ~7);\n                  loop2End = i + rowComps;\n                  while (i < loop1End) {\n                    buf = buffer[bufferPos++];\n                    output[i] = buf >> 7 & 1;\n                    output[i + 1] = buf >> 6 & 1;\n                    output[i + 2] = buf >> 5 & 1;\n                    output[i + 3] = buf >> 4 & 1;\n                    output[i + 4] = buf >> 3 & 1;\n                    output[i + 5] = buf >> 2 & 1;\n                    output[i + 6] = buf >> 1 & 1;\n                    output[i + 7] = buf & 1;\n                    i += 8;\n                  }\n                  if (i < loop2End) {\n                    buf = buffer[bufferPos++];\n                    mask = 128;\n                    while (i < loop2End) {\n                      output[i++] = +!!(buf & mask);\n                      mask >>= 1;\n                    }\n                  }\n                }\n              } else {\n                var bits = 0;\n                buf = 0;\n                for (i = 0, ii = length; i < ii; ++i) {\n                  if (i % rowComps === 0) {\n                    buf = 0;\n                    bits = 0;\n                  }\n                  while (bits < bpc) {\n                    buf = buf << 8 | buffer[bufferPos++];\n                    bits += 8;\n                  }\n                  var remainingBits = bits - bpc;\n                  var value = buf >> remainingBits;\n                  if (value < 0) {\n                    value = 0;\n                  } else if (value > max) {\n                    value = max;\n                  }\n                  output[i] = value;\n                  buf &= (1 << remainingBits) - 1;\n                  bits = remainingBits;\n                }\n              }\n              return output;\n            }\n          }, {\n            key: \"fillOpacity\",\n            value: function fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n              var smask = this.smask;\n              var mask = this.mask;\n              var alphaBuf, sw, sh, i, ii, j;\n              if (smask) {\n                sw = smask.width;\n                sh = smask.height;\n                alphaBuf = new Uint8ClampedArray(sw * sh);\n                smask.fillGrayBuffer(alphaBuf);\n                if (sw !== width || sh !== height) {\n                  alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);\n                }\n              } else if (mask) {\n                if (mask instanceof PDFImage) {\n                  sw = mask.width;\n                  sh = mask.height;\n                  alphaBuf = new Uint8ClampedArray(sw * sh);\n                  mask.numComps = 1;\n                  mask.fillGrayBuffer(alphaBuf);\n                  for (i = 0, ii = sw * sh; i < ii; ++i) {\n                    alphaBuf[i] = 255 - alphaBuf[i];\n                  }\n                  if (sw !== width || sh !== height) {\n                    alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);\n                  }\n                } else if (Array.isArray(mask)) {\n                  alphaBuf = new Uint8ClampedArray(width * height);\n                  var numComps = this.numComps;\n                  for (i = 0, ii = width * height; i < ii; ++i) {\n                    var opacity = 0;\n                    var imageOffset = i * numComps;\n                    for (j = 0; j < numComps; ++j) {\n                      var color = image[imageOffset + j];\n                      var maskOffset = j * 2;\n                      if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n                        opacity = 255;\n                        break;\n                      }\n                    }\n                    alphaBuf[i] = opacity;\n                  }\n                } else {\n                  throw new _util.FormatError(\"Unknown mask format.\");\n                }\n              }\n              if (alphaBuf) {\n                for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n                  rgbaBuf[j] = alphaBuf[i];\n                }\n              } else {\n                for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n                  rgbaBuf[j] = 255;\n                }\n              }\n            }\n          }, {\n            key: \"undoPreblend\",\n            value: function undoPreblend(buffer, width, height) {\n              var matte = this.smask && this.smask.matte;\n              if (!matte) {\n                return;\n              }\n              var matteRgb = this.colorSpace.getRgb(matte, 0);\n              var matteR = matteRgb[0];\n              var matteG = matteRgb[1];\n              var matteB = matteRgb[2];\n              var length = width * height * 4;\n              for (var i = 0; i < length; i += 4) {\n                var alpha = buffer[i + 3];\n                if (alpha === 0) {\n                  buffer[i] = 255;\n                  buffer[i + 1] = 255;\n                  buffer[i + 2] = 255;\n                  continue;\n                }\n                var k = 255 / alpha;\n                buffer[i] = (buffer[i] - matteR) * k + matteR;\n                buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n                buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n              }\n            }\n          }, {\n            key: \"createImageData\",\n            value: function createImageData() {\n              var forceRGBA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var drawWidth = this.drawWidth;\n              var drawHeight = this.drawHeight;\n              var imgData = {\n                width: drawWidth,\n                height: drawHeight,\n                interpolate: this.interpolate,\n                kind: 0,\n                data: null\n              };\n              var numComps = this.numComps;\n              var originalWidth = this.width;\n              var originalHeight = this.height;\n              var bpc = this.bpc;\n              var rowBytes = originalWidth * numComps * bpc + 7 >> 3;\n              if (!forceRGBA) {\n                var kind;\n                if (this.colorSpace.name === \"DeviceGray\" && bpc === 1) {\n                  kind = _util.ImageKind.GRAYSCALE_1BPP;\n                } else if (this.colorSpace.name === \"DeviceRGB\" && bpc === 8 && !this.needsDecode) {\n                  kind = _util.ImageKind.RGB_24BPP;\n                }\n                if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {\n                  imgData.kind = kind;\n                  imgData.data = this.getImageBytes(originalHeight * rowBytes, {});\n                  if (this.needsDecode) {\n                    (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, \"PDFImage.createImageData: The image must be grayscale.\");\n                    var buffer = imgData.data;\n                    for (var i = 0, ii = buffer.length; i < ii; i++) {\n                      buffer[i] ^= 0xff;\n                    }\n                  }\n                  return imgData;\n                }\n                if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {\n                  var imageLength = originalHeight * rowBytes;\n                  switch (this.colorSpace.name) {\n                    case \"DeviceGray\":\n                      imageLength *= 3;\n                    case \"DeviceRGB\":\n                    case \"DeviceCMYK\":\n                      imgData.kind = _util.ImageKind.RGB_24BPP;\n                      imgData.data = this.getImageBytes(imageLength, {\n                        drawWidth: drawWidth,\n                        drawHeight: drawHeight,\n                        forceRGB: true\n                      });\n                      return imgData;\n                  }\n                }\n              }\n              var imgArray = this.getImageBytes(originalHeight * rowBytes, {\n                internal: true\n              });\n              var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;\n              var comps = this.getComponents(imgArray);\n              var alpha01, maybeUndoPreblend;\n              if (!forceRGBA && !this.smask && !this.mask) {\n                imgData.kind = _util.ImageKind.RGB_24BPP;\n                imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n                alpha01 = 0;\n                maybeUndoPreblend = false;\n              } else {\n                imgData.kind = _util.ImageKind.RGBA_32BPP;\n                imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n                alpha01 = 1;\n                maybeUndoPreblend = true;\n                this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);\n              }\n              if (this.needsDecode) {\n                this.decodeBuffer(comps);\n              }\n              this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);\n              if (maybeUndoPreblend) {\n                this.undoPreblend(imgData.data, drawWidth, actualHeight);\n              }\n              return imgData;\n            }\n          }, {\n            key: \"fillGrayBuffer\",\n            value: function fillGrayBuffer(buffer) {\n              var numComps = this.numComps;\n              if (numComps !== 1) {\n                throw new _util.FormatError(\"Reading gray scale from a color image: \".concat(numComps));\n              }\n              var width = this.width;\n              var height = this.height;\n              var bpc = this.bpc;\n              var rowBytes = width * numComps * bpc + 7 >> 3;\n              var imgArray = this.getImageBytes(height * rowBytes, {\n                internal: true\n              });\n              var comps = this.getComponents(imgArray);\n              var i, length;\n              if (bpc === 1) {\n                length = width * height;\n                if (this.needsDecode) {\n                  for (i = 0; i < length; ++i) {\n                    buffer[i] = comps[i] - 1 & 255;\n                  }\n                } else {\n                  for (i = 0; i < length; ++i) {\n                    buffer[i] = -comps[i] & 255;\n                  }\n                }\n                return;\n              }\n              if (this.needsDecode) {\n                this.decodeBuffer(comps);\n              }\n              length = width * height;\n              var scale = 255 / ((1 << bpc) - 1);\n              for (i = 0; i < length; ++i) {\n                buffer[i] = scale * comps[i];\n              }\n            }\n          }, {\n            key: \"getImageBytes\",\n            value: function getImageBytes(length, _ref77) {\n              var drawWidth = _ref77.drawWidth,\n                drawHeight = _ref77.drawHeight,\n                _ref77$forceRGB = _ref77.forceRGB,\n                forceRGB = _ref77$forceRGB === void 0 ? false : _ref77$forceRGB,\n                _ref77$internal = _ref77.internal,\n                internal = _ref77$internal === void 0 ? false : _ref77$internal;\n              this.image.reset();\n              this.image.drawWidth = drawWidth || this.width;\n              this.image.drawHeight = drawHeight || this.height;\n              this.image.forceRGB = !!forceRGB;\n              var imageBytes = this.image.getBytes(length);\n              if (internal || this.image instanceof _decode_stream.DecodeStream) {\n                return imageBytes;\n              }\n              (0, _util.assert)(imageBytes instanceof Uint8Array, 'PDFImage.getImageBytes: Unsupported \"imageBytes\" type.');\n              return new Uint8Array(imageBytes);\n            }\n          }, {\n            key: \"drawWidth\",\n            get: function get() {\n              return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);\n            }\n          }, {\n            key: \"drawHeight\",\n            get: function get() {\n              return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);\n            }\n          }], [{\n            key: \"buildImage\",\n            value: function () {\n              var _buildImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51(_ref78) {\n                var xref, res, image, _ref78$isInline, isInline, pdfFunctionFactory, localColorSpaceCache, imageData, smaskData, maskData, smask, mask;\n                return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n                  while (1) {\n                    switch (_context51.prev = _context51.next) {\n                      case 0:\n                        xref = _ref78.xref, res = _ref78.res, image = _ref78.image, _ref78$isInline = _ref78.isInline, isInline = _ref78$isInline === void 0 ? false : _ref78$isInline, pdfFunctionFactory = _ref78.pdfFunctionFactory, localColorSpaceCache = _ref78.localColorSpaceCache;\n                        imageData = image;\n                        smaskData = null;\n                        maskData = null;\n                        smask = image.dict.get(\"SMask\");\n                        mask = image.dict.get(\"Mask\");\n                        if (smask) {\n                          if (smask instanceof _base_stream.BaseStream) {\n                            smaskData = smask;\n                          } else {\n                            (0, _util.warn)(\"Unsupported /SMask format.\");\n                          }\n                        } else if (mask) {\n                          if (mask instanceof _base_stream.BaseStream || Array.isArray(mask)) {\n                            maskData = mask;\n                          } else {\n                            (0, _util.warn)(\"Unsupported /Mask format.\");\n                          }\n                        }\n                        return _context51.abrupt(\"return\", new PDFImage({\n                          xref: xref,\n                          res: res,\n                          image: imageData,\n                          isInline: isInline,\n                          smask: smaskData,\n                          mask: maskData,\n                          pdfFunctionFactory: pdfFunctionFactory,\n                          localColorSpaceCache: localColorSpaceCache\n                        }));\n                      case 8:\n                      case \"end\":\n                        return _context51.stop();\n                    }\n                  }\n                }, _callee51);\n              }));\n              function buildImage(_x119) {\n                return _buildImage.apply(this, arguments);\n              }\n              return buildImage;\n            }()\n          }, {\n            key: \"createRawMask\",\n            value: function createRawMask(_ref79) {\n              var imgArray = _ref79.imgArray,\n                width = _ref79.width,\n                height = _ref79.height,\n                imageIsFromDecodeStream = _ref79.imageIsFromDecodeStream,\n                inverseDecode = _ref79.inverseDecode,\n                interpolate = _ref79.interpolate;\n              var computedLength = (width + 7 >> 3) * height;\n              var actualLength = imgArray.byteLength;\n              var haveFullData = computedLength === actualLength;\n              var data, i;\n              if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n                data = imgArray;\n              } else if (!inverseDecode) {\n                data = new Uint8Array(imgArray);\n              } else {\n                data = new Uint8Array(computedLength);\n                data.set(imgArray);\n                data.fill(0xff, actualLength);\n              }\n              if (inverseDecode) {\n                for (i = 0; i < actualLength; i++) {\n                  data[i] ^= 0xff;\n                }\n              }\n              return {\n                data: data,\n                width: width,\n                height: height,\n                interpolate: interpolate\n              };\n            }\n          }, {\n            key: \"createMask\",\n            value: function createMask(_ref80) {\n              var imgArray = _ref80.imgArray,\n                width = _ref80.width,\n                height = _ref80.height,\n                imageIsFromDecodeStream = _ref80.imageIsFromDecodeStream,\n                inverseDecode = _ref80.inverseDecode,\n                interpolate = _ref80.interpolate;\n              var isSingleOpaquePixel = width === 1 && height === 1 && inverseDecode === (imgArray.length === 0 || !!(imgArray[0] & 128));\n              if (isSingleOpaquePixel) {\n                return {\n                  isSingleOpaquePixel: isSingleOpaquePixel\n                };\n              }\n              if (_util.FeatureTest.isOffscreenCanvasSupported) {\n                var canvas = new OffscreenCanvas(width, height);\n                var ctx = canvas.getContext(\"2d\");\n                var imgData = ctx.createImageData(width, height);\n                (0, _image_utils.applyMaskImageData)({\n                  src: imgArray,\n                  dest: imgData.data,\n                  width: width,\n                  height: height,\n                  inverseDecode: inverseDecode\n                });\n                ctx.putImageData(imgData, 0, 0);\n                var bitmap = canvas.transferToImageBitmap();\n                return {\n                  data: null,\n                  width: width,\n                  height: height,\n                  interpolate: interpolate,\n                  bitmap: bitmap\n                };\n              }\n              return this.createRawMask({\n                imgArray: imgArray,\n                width: width,\n                height: height,\n                inverseDecode: inverseDecode,\n                imageIsFromDecodeStream: imageIsFromDecodeStream,\n                interpolate: interpolate\n              });\n            }\n          }]);\n          return PDFImage;\n        }();\n        exports.PDFImage = PDFImage;\n\n        /***/\n      }, /* 64 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.applyMaskImageData = applyMaskImageData;\n        var _util = __w_pdfjs_require__(2);\n        function applyMaskImageData(_ref81) {\n          var src = _ref81.src,\n            _ref81$srcPos = _ref81.srcPos,\n            srcPos = _ref81$srcPos === void 0 ? 0 : _ref81$srcPos,\n            dest = _ref81.dest,\n            _ref81$destPos = _ref81.destPos,\n            destPos = _ref81$destPos === void 0 ? 0 : _ref81$destPos,\n            width = _ref81.width,\n            height = _ref81.height,\n            _ref81$inverseDecode = _ref81.inverseDecode,\n            inverseDecode = _ref81$inverseDecode === void 0 ? false : _ref81$inverseDecode;\n          var opaque = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n          var _ref82 = !inverseDecode ? [opaque, 0] : [0, opaque],\n            _ref83 = _slicedToArray(_ref82, 2),\n            zeroMapping = _ref83[0],\n            oneMapping = _ref83[1];\n          var widthInSource = width >> 3;\n          var widthRemainder = width & 7;\n          var srcLength = src.length;\n          dest = new Uint32Array(dest.buffer);\n          for (var i = 0; i < height; i++) {\n            for (var max = srcPos + widthInSource; srcPos < max; srcPos++) {\n              var _elem = srcPos < srcLength ? src[srcPos] : 255;\n              dest[destPos++] = _elem & 128 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 64 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 32 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 16 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 8 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 4 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 2 ? oneMapping : zeroMapping;\n              dest[destPos++] = _elem & 1 ? oneMapping : zeroMapping;\n            }\n            if (widthRemainder === 0) {\n              continue;\n            }\n            var elem = srcPos < srcLength ? src[srcPos++] : 255;\n            for (var j = 0; j < widthRemainder; j++) {\n              dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\n            }\n          }\n          return {\n            srcPos: srcPos,\n            destPos: destPos\n          };\n        }\n\n        /***/\n      }, /* 65 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.incrementalUpdate = incrementalUpdate;\n        exports.writeDict = writeDict;\n        exports.writeObject = writeObject;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _xml_parser = __w_pdfjs_require__(66);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _crypto = __w_pdfjs_require__(67);\n        function writeObject(ref, obj, buffer, transform) {\n          buffer.push(\"\".concat(ref.num, \" \").concat(ref.gen, \" obj\\n\"));\n          if (obj instanceof _primitives.Dict) {\n            writeDict(obj, buffer, transform);\n          } else if (obj instanceof _base_stream.BaseStream) {\n            writeStream(obj, buffer, transform);\n          }\n          buffer.push(\"\\nendobj\\n\");\n        }\n        function writeDict(dict, buffer, transform) {\n          buffer.push(\"<<\");\n          var _iterator93 = _createForOfIteratorHelper(dict.getKeys()),\n            _step93;\n          try {\n            for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {\n              var key = _step93.value;\n              buffer.push(\" /\".concat((0, _core_utils.escapePDFName)(key), \" \"));\n              writeValue(dict.getRaw(key), buffer, transform);\n            }\n          } catch (err) {\n            _iterator93.e(err);\n          } finally {\n            _iterator93.f();\n          }\n          buffer.push(\">>\");\n        }\n        function writeStream(stream, buffer, transform) {\n          writeDict(stream.dict, buffer, transform);\n          buffer.push(\" stream\\n\");\n          var string = stream.getString();\n          if (transform !== null) {\n            string = transform.encryptString(string);\n          }\n          buffer.push(string, \"\\nendstream\\n\");\n        }\n        function writeArray(array, buffer, transform) {\n          buffer.push(\"[\");\n          var first = true;\n          var _iterator94 = _createForOfIteratorHelper(array),\n            _step94;\n          try {\n            for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {\n              var val = _step94.value;\n              if (!first) {\n                buffer.push(\" \");\n              } else {\n                first = false;\n              }\n              writeValue(val, buffer, transform);\n            }\n          } catch (err) {\n            _iterator94.e(err);\n          } finally {\n            _iterator94.f();\n          }\n          buffer.push(\"]\");\n        }\n        function writeValue(value, buffer, transform) {\n          if (value instanceof _primitives.Name) {\n            buffer.push(\"/\".concat((0, _core_utils.escapePDFName)(value.name)));\n          } else if (value instanceof _primitives.Ref) {\n            buffer.push(\"\".concat(value.num, \" \").concat(value.gen, \" R\"));\n          } else if (Array.isArray(value)) {\n            writeArray(value, buffer, transform);\n          } else if (typeof value === \"string\") {\n            if (transform !== null) {\n              value = transform.encryptString(value);\n            }\n            buffer.push(\"(\".concat((0, _util.escapeString)(value), \")\"));\n          } else if (typeof value === \"number\") {\n            buffer.push((0, _core_utils.numberToString)(value));\n          } else if (typeof value === \"boolean\") {\n            buffer.push(value.toString());\n          } else if (value instanceof _primitives.Dict) {\n            writeDict(value, buffer, transform);\n          } else if (value instanceof _base_stream.BaseStream) {\n            writeStream(value, buffer, transform);\n          } else if (value === null) {\n            buffer.push(\"null\");\n          } else {\n            (0, _util.warn)(\"Unhandled value in writer: \".concat(typeof value, \", please file a bug.\"));\n          }\n        }\n        function writeInt(number, size, offset, buffer) {\n          for (var i = size + offset - 1; i > offset - 1; i--) {\n            buffer[i] = number & 0xff;\n            number >>= 8;\n          }\n          return offset + size;\n        }\n        function writeString(string, offset, buffer) {\n          for (var i = 0, len = string.length; i < len; i++) {\n            buffer[offset + i] = string.charCodeAt(i) & 0xff;\n          }\n        }\n        function computeMD5(filesize, xrefInfo) {\n          var time = Math.floor(Date.now() / 1000);\n          var filename = xrefInfo.filename || \"\";\n          var md5Buffer = [time.toString(), filename, filesize.toString()];\n          var md5BufferLen = md5Buffer.reduce(function (a, str) {\n            return a + str.length;\n          }, 0);\n          for (var _i54 = 0, _Object$values = Object.values(xrefInfo.info); _i54 < _Object$values.length; _i54++) {\n            var value = _Object$values[_i54];\n            md5Buffer.push(value);\n            md5BufferLen += value.length;\n          }\n          var array = new Uint8Array(md5BufferLen);\n          var offset = 0;\n          for (var _i55 = 0, _md5Buffer = md5Buffer; _i55 < _md5Buffer.length; _i55++) {\n            var str = _md5Buffer[_i55];\n            writeString(str, offset, array);\n            offset += str.length;\n          }\n          return (0, _util.bytesToString)((0, _crypto.calculateMD5)(array));\n        }\n        function writeXFADataForAcroform(str, newRefs) {\n          var xml = new _xml_parser.SimpleXMLParser({\n            hasAttributes: true\n          }).parseFromString(str);\n          var _iterator95 = _createForOfIteratorHelper(newRefs),\n            _step95;\n          try {\n            for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {\n              var xfa = _step95.value.xfa;\n              if (!xfa) {\n                continue;\n              }\n              var path = xfa.path,\n                value = xfa.value;\n              if (!path) {\n                continue;\n              }\n              var node = xml.documentElement.searchNode((0, _core_utils.parseXFAPath)(path), 0);\n              if (node) {\n                if (Array.isArray(value)) {\n                  node.childNodes = value.map(function (val) {\n                    return new _xml_parser.SimpleDOMNode(\"value\", val);\n                  });\n                } else {\n                  node.childNodes = [new _xml_parser.SimpleDOMNode(\"#text\", value)];\n                }\n              } else {\n                (0, _util.warn)(\"Node not found for path: \".concat(path));\n              }\n            }\n          } catch (err) {\n            _iterator95.e(err);\n          } finally {\n            _iterator95.f();\n          }\n          var buffer = [];\n          xml.documentElement.dump(buffer);\n          return buffer.join(\"\");\n        }\n        function updateXFA(_ref84) {\n          var xfaData = _ref84.xfaData,\n            xfaDatasetsRef = _ref84.xfaDatasetsRef,\n            hasXfaDatasetsEntry = _ref84.hasXfaDatasetsEntry,\n            acroFormRef = _ref84.acroFormRef,\n            acroForm = _ref84.acroForm,\n            newRefs = _ref84.newRefs,\n            xref = _ref84.xref,\n            xrefInfo = _ref84.xrefInfo;\n          if (xref === null) {\n            return;\n          }\n          if (!hasXfaDatasetsEntry) {\n            if (!acroFormRef) {\n              (0, _util.warn)(\"XFA - Cannot save it\");\n              return;\n            }\n            var oldXfa = acroForm.get(\"XFA\");\n            var newXfa = oldXfa.slice();\n            newXfa.splice(2, 0, \"datasets\");\n            newXfa.splice(3, 0, xfaDatasetsRef);\n            acroForm.set(\"XFA\", newXfa);\n            var _encrypt = xref.encrypt;\n            var transform = null;\n            if (_encrypt) {\n              transform = _encrypt.createCipherTransform(acroFormRef.num, acroFormRef.gen);\n            }\n            var buffer = [\"\".concat(acroFormRef.num, \" \").concat(acroFormRef.gen, \" obj\\n\")];\n            writeDict(acroForm, buffer, transform);\n            buffer.push(\"\\n\");\n            acroForm.set(\"XFA\", oldXfa);\n            newRefs.push({\n              ref: acroFormRef,\n              data: buffer.join(\"\")\n            });\n          }\n          if (xfaData === null) {\n            var datasets = xref.fetchIfRef(xfaDatasetsRef);\n            xfaData = writeXFADataForAcroform(datasets.getString(), newRefs);\n          }\n          var encrypt = xref.encrypt;\n          if (encrypt) {\n            var _transform = encrypt.createCipherTransform(xfaDatasetsRef.num, xfaDatasetsRef.gen);\n            xfaData = _transform.encryptString(xfaData);\n          }\n          var data = \"\".concat(xfaDatasetsRef.num, \" \").concat(xfaDatasetsRef.gen, \" obj\\n\") + \"<< /Type /EmbeddedFile /Length \".concat(xfaData.length, \">>\\nstream\\n\") + xfaData + \"\\nendstream\\nendobj\\n\";\n          newRefs.push({\n            ref: xfaDatasetsRef,\n            data: data\n          });\n        }\n        function incrementalUpdate(_ref85) {\n          var originalData = _ref85.originalData,\n            xrefInfo = _ref85.xrefInfo,\n            newRefs = _ref85.newRefs,\n            _ref85$xref = _ref85.xref,\n            xref = _ref85$xref === void 0 ? null : _ref85$xref,\n            _ref85$hasXfa = _ref85.hasXfa,\n            hasXfa = _ref85$hasXfa === void 0 ? false : _ref85$hasXfa,\n            _ref85$xfaDatasetsRef = _ref85.xfaDatasetsRef,\n            xfaDatasetsRef = _ref85$xfaDatasetsRef === void 0 ? null : _ref85$xfaDatasetsRef,\n            _ref85$hasXfaDatasets = _ref85.hasXfaDatasetsEntry,\n            hasXfaDatasetsEntry = _ref85$hasXfaDatasets === void 0 ? false : _ref85$hasXfaDatasets,\n            _ref85$acroFormRef = _ref85.acroFormRef,\n            acroFormRef = _ref85$acroFormRef === void 0 ? null : _ref85$acroFormRef,\n            _ref85$acroForm = _ref85.acroForm,\n            acroForm = _ref85$acroForm === void 0 ? null : _ref85$acroForm,\n            _ref85$xfaData = _ref85.xfaData,\n            xfaData = _ref85$xfaData === void 0 ? null : _ref85$xfaData;\n          if (hasXfa) {\n            updateXFA({\n              xfaData: xfaData,\n              xfaDatasetsRef: xfaDatasetsRef,\n              hasXfaDatasetsEntry: hasXfaDatasetsEntry,\n              acroFormRef: acroFormRef,\n              acroForm: acroForm,\n              newRefs: newRefs,\n              xref: xref,\n              xrefInfo: xrefInfo\n            });\n          }\n          var newXref = new _primitives.Dict(null);\n          var refForXrefTable = xrefInfo.newRef;\n          var buffer, baseOffset;\n          var lastByte = originalData.at(-1);\n          if (lastByte === 0x0a || lastByte === 0x0d) {\n            buffer = [];\n            baseOffset = originalData.length;\n          } else {\n            buffer = [\"\\n\"];\n            baseOffset = originalData.length + 1;\n          }\n          newXref.set(\"Size\", refForXrefTable.num + 1);\n          newXref.set(\"Prev\", xrefInfo.startXRef);\n          newXref.set(\"Type\", _primitives.Name.get(\"XRef\"));\n          if (xrefInfo.rootRef !== null) {\n            newXref.set(\"Root\", xrefInfo.rootRef);\n          }\n          if (xrefInfo.infoRef !== null) {\n            newXref.set(\"Info\", xrefInfo.infoRef);\n          }\n          if (xrefInfo.encryptRef !== null) {\n            newXref.set(\"Encrypt\", xrefInfo.encryptRef);\n          }\n          newRefs.push({\n            ref: refForXrefTable,\n            data: \"\"\n          });\n          newRefs = newRefs.sort(function (a, b) {\n            return a.ref.num - b.ref.num;\n          });\n          var xrefTableData = [[0, 1, 0xffff]];\n          var indexes = [0, 1];\n          var maxOffset = 0;\n          var _iterator96 = _createForOfIteratorHelper(newRefs),\n            _step96;\n          try {\n            for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {\n              var _step96$value = _step96.value,\n                ref = _step96$value.ref,\n                data = _step96$value.data;\n              maxOffset = Math.max(maxOffset, baseOffset);\n              xrefTableData.push([1, baseOffset, Math.min(ref.gen, 0xffff)]);\n              baseOffset += data.length;\n              indexes.push(ref.num, 1);\n              buffer.push(data);\n            }\n          } catch (err) {\n            _iterator96.e(err);\n          } finally {\n            _iterator96.f();\n          }\n          newXref.set(\"Index\", indexes);\n          if (Array.isArray(xrefInfo.fileIds) && xrefInfo.fileIds.length > 0) {\n            var md5 = computeMD5(baseOffset, xrefInfo);\n            newXref.set(\"ID\", [xrefInfo.fileIds[0], md5]);\n          }\n          var offsetSize = Math.ceil(Math.log2(maxOffset) / 8);\n          var sizes = [1, offsetSize, 2];\n          var structSize = sizes[0] + sizes[1] + sizes[2];\n          var tableLength = structSize * xrefTableData.length;\n          newXref.set(\"W\", sizes);\n          newXref.set(\"Length\", tableLength);\n          buffer.push(\"\".concat(refForXrefTable.num, \" \").concat(refForXrefTable.gen, \" obj\\n\"));\n          writeDict(newXref, buffer, null);\n          buffer.push(\" stream\\n\");\n          var bufferLen = buffer.reduce(function (a, str) {\n            return a + str.length;\n          }, 0);\n          var footer = \"\\nendstream\\nendobj\\nstartxref\\n\".concat(baseOffset, \"\\n%%EOF\\n\");\n          var array = new Uint8Array(originalData.length + bufferLen + tableLength + footer.length);\n          array.set(originalData);\n          var offset = originalData.length;\n          var _iterator97 = _createForOfIteratorHelper(buffer),\n            _step97;\n          try {\n            for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {\n              var str = _step97.value;\n              writeString(str, offset, array);\n              offset += str.length;\n            }\n          } catch (err) {\n            _iterator97.e(err);\n          } finally {\n            _iterator97.f();\n          }\n          for (var _i56 = 0, _xrefTableData = xrefTableData; _i56 < _xrefTableData.length; _i56++) {\n            var _xrefTableData$_i = _slicedToArray(_xrefTableData[_i56], 3),\n              type = _xrefTableData$_i[0],\n              objOffset = _xrefTableData$_i[1],\n              gen = _xrefTableData$_i[2];\n            offset = writeInt(type, sizes[0], offset, array);\n            offset = writeInt(objOffset, sizes[1], offset, array);\n            offset = writeInt(gen, sizes[2], offset, array);\n          }\n          writeString(footer, offset, array);\n          return array;\n        }\n\n        /***/\n      }, /* 66 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XMLParserErrorCode = exports.XMLParserBase = exports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n        var _core_utils = __w_pdfjs_require__(6);\n        var XMLParserErrorCode = {\n          NoError: 0,\n          EndOfDocument: -1,\n          UnterminatedCdat: -2,\n          UnterminatedXmlDeclaration: -3,\n          UnterminatedDoctypeDeclaration: -4,\n          UnterminatedComment: -5,\n          MalformedElement: -6,\n          OutOfMemory: -7,\n          UnterminatedAttributeValue: -8,\n          UnterminatedElement: -9,\n          ElementNeverBegun: -10\n        };\n        exports.XMLParserErrorCode = XMLParserErrorCode;\n        function isWhitespace(s, index) {\n          var ch = s[index];\n          return ch === \" \" || ch === \"\\n\" || ch === \"\\r\" || ch === \"\\t\";\n        }\n        function isWhitespaceString(s) {\n          for (var i = 0, ii = s.length; i < ii; i++) {\n            if (!isWhitespace(s, i)) {\n              return false;\n            }\n          }\n          return true;\n        }\n        var XMLParserBase = /*#__PURE__*/function () {\n          function XMLParserBase() {\n            _classCallCheck(this, XMLParserBase);\n          }\n          _createClass(XMLParserBase, [{\n            key: \"_resolveEntities\",\n            value: function _resolveEntities(s) {\n              var _this91 = this;\n              return s.replace(/&([^;]+);/g, function (all, entity) {\n                if (entity.substring(0, 2) === \"#x\") {\n                  return String.fromCodePoint(parseInt(entity.substring(2), 16));\n                } else if (entity.substring(0, 1) === \"#\") {\n                  return String.fromCodePoint(parseInt(entity.substring(1), 10));\n                }\n                switch (entity) {\n                  case \"lt\":\n                    return \"<\";\n                  case \"gt\":\n                    return \">\";\n                  case \"amp\":\n                    return \"&\";\n                  case \"quot\":\n                    return '\"';\n                  case \"apos\":\n                    return \"'\";\n                }\n                return _this91.onResolveEntity(entity);\n              });\n            }\n          }, {\n            key: \"_parseContent\",\n            value: function _parseContent(s, start) {\n              var attributes = [];\n              var pos = start;\n              function skipWs() {\n                while (pos < s.length && isWhitespace(s, pos)) {\n                  ++pos;\n                }\n              }\n              while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n                ++pos;\n              }\n              var name = s.substring(start, pos);\n              skipWs();\n              while (pos < s.length && s[pos] !== \">\" && s[pos] !== \"/\" && s[pos] !== \"?\") {\n                skipWs();\n                var attrName = \"\",\n                  attrValue = \"\";\n                while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \"=\") {\n                  attrName += s[pos];\n                  ++pos;\n                }\n                skipWs();\n                if (s[pos] !== \"=\") {\n                  return null;\n                }\n                ++pos;\n                skipWs();\n                var attrEndChar = s[pos];\n                if (attrEndChar !== '\"' && attrEndChar !== \"'\") {\n                  return null;\n                }\n                var attrEndIndex = s.indexOf(attrEndChar, ++pos);\n                if (attrEndIndex < 0) {\n                  return null;\n                }\n                attrValue = s.substring(pos, attrEndIndex);\n                attributes.push({\n                  name: attrName,\n                  value: this._resolveEntities(attrValue)\n                });\n                pos = attrEndIndex + 1;\n                skipWs();\n              }\n              return {\n                name: name,\n                attributes: attributes,\n                parsed: pos - start\n              };\n            }\n          }, {\n            key: \"_parseProcessingInstruction\",\n            value: function _parseProcessingInstruction(s, start) {\n              var pos = start;\n              function skipWs() {\n                while (pos < s.length && isWhitespace(s, pos)) {\n                  ++pos;\n                }\n              }\n              while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"?\" && s[pos] !== \"/\") {\n                ++pos;\n              }\n              var name = s.substring(start, pos);\n              skipWs();\n              var attrStart = pos;\n              while (pos < s.length && (s[pos] !== \"?\" || s[pos + 1] !== \">\")) {\n                ++pos;\n              }\n              var value = s.substring(attrStart, pos);\n              return {\n                name: name,\n                value: value,\n                parsed: pos - start\n              };\n            }\n          }, {\n            key: \"parseXml\",\n            value: function parseXml(s) {\n              var i = 0;\n              while (i < s.length) {\n                var ch = s[i];\n                var j = i;\n                if (ch === \"<\") {\n                  ++j;\n                  var ch2 = s[j];\n                  var q = void 0;\n                  switch (ch2) {\n                    case \"/\":\n                      ++j;\n                      q = s.indexOf(\">\", j);\n                      if (q < 0) {\n                        this.onError(XMLParserErrorCode.UnterminatedElement);\n                        return;\n                      }\n                      this.onEndElement(s.substring(j, q));\n                      j = q + 1;\n                      break;\n                    case \"?\":\n                      ++j;\n                      var pi = this._parseProcessingInstruction(s, j);\n                      if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== \"?>\") {\n                        this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n                        return;\n                      }\n                      this.onPi(pi.name, pi.value);\n                      j += pi.parsed + 2;\n                      break;\n                    case \"!\":\n                      if (s.substring(j + 1, j + 3) === \"--\") {\n                        q = s.indexOf(\"-->\", j + 3);\n                        if (q < 0) {\n                          this.onError(XMLParserErrorCode.UnterminatedComment);\n                          return;\n                        }\n                        this.onComment(s.substring(j + 3, q));\n                        j = q + 3;\n                      } else if (s.substring(j + 1, j + 8) === \"[CDATA[\") {\n                        q = s.indexOf(\"]]>\", j + 8);\n                        if (q < 0) {\n                          this.onError(XMLParserErrorCode.UnterminatedCdat);\n                          return;\n                        }\n                        this.onCdata(s.substring(j + 8, q));\n                        j = q + 3;\n                      } else if (s.substring(j + 1, j + 8) === \"DOCTYPE\") {\n                        var q2 = s.indexOf(\"[\", j + 8);\n                        var complexDoctype = false;\n                        q = s.indexOf(\">\", j + 8);\n                        if (q < 0) {\n                          this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                          return;\n                        }\n                        if (q2 > 0 && q > q2) {\n                          q = s.indexOf(\"]>\", j + 8);\n                          if (q < 0) {\n                            this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                            return;\n                          }\n                          complexDoctype = true;\n                        }\n                        var doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n                        this.onDoctype(doctypeContent);\n                        j = q + (complexDoctype ? 2 : 1);\n                      } else {\n                        this.onError(XMLParserErrorCode.MalformedElement);\n                        return;\n                      }\n                      break;\n                    default:\n                      var content = this._parseContent(s, j);\n                      if (content === null) {\n                        this.onError(XMLParserErrorCode.MalformedElement);\n                        return;\n                      }\n                      var isClosed = false;\n                      if (s.substring(j + content.parsed, j + content.parsed + 2) === \"/>\") {\n                        isClosed = true;\n                      } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== \">\") {\n                        this.onError(XMLParserErrorCode.UnterminatedElement);\n                        return;\n                      }\n                      this.onBeginElement(content.name, content.attributes, isClosed);\n                      j += content.parsed + (isClosed ? 2 : 1);\n                      break;\n                  }\n                } else {\n                  while (j < s.length && s[j] !== \"<\") {\n                    j++;\n                  }\n                  var text = s.substring(i, j);\n                  this.onText(this._resolveEntities(text));\n                }\n                i = j;\n              }\n            }\n          }, {\n            key: \"onResolveEntity\",\n            value: function onResolveEntity(name) {\n              return \"&\".concat(name, \";\");\n            }\n          }, {\n            key: \"onPi\",\n            value: function onPi(name, value) {}\n          }, {\n            key: \"onComment\",\n            value: function onComment(text) {}\n          }, {\n            key: \"onCdata\",\n            value: function onCdata(text) {}\n          }, {\n            key: \"onDoctype\",\n            value: function onDoctype(doctypeContent) {}\n          }, {\n            key: \"onText\",\n            value: function onText(text) {}\n          }, {\n            key: \"onBeginElement\",\n            value: function onBeginElement(name, attributes, isEmpty) {}\n          }, {\n            key: \"onEndElement\",\n            value: function onEndElement(name) {}\n          }, {\n            key: \"onError\",\n            value: function onError(code) {}\n          }]);\n          return XMLParserBase;\n        }();\n        exports.XMLParserBase = XMLParserBase;\n        var SimpleDOMNode = /*#__PURE__*/function () {\n          function SimpleDOMNode(nodeName, nodeValue) {\n            _classCallCheck(this, SimpleDOMNode);\n            this.nodeName = nodeName;\n            this.nodeValue = nodeValue;\n            Object.defineProperty(this, \"parentNode\", {\n              value: null,\n              writable: true\n            });\n          }\n          _createClass(SimpleDOMNode, [{\n            key: \"hasChildNodes\",\n            value: function hasChildNodes() {\n              return this.childNodes && this.childNodes.length > 0;\n            }\n          }, {\n            key: \"searchNode\",\n            value: function searchNode(paths, pos) {\n              if (pos >= paths.length) {\n                return this;\n              }\n              var component = paths[pos];\n              var stack = [];\n              var node = this;\n              while (true) {\n                if (component.name === node.nodeName) {\n                  if (component.pos === 0) {\n                    var res = node.searchNode(paths, pos + 1);\n                    if (res !== null) {\n                      return res;\n                    }\n                  } else if (stack.length === 0) {\n                    return null;\n                  } else {\n                    var _stack$pop = stack.pop(),\n                      _stack$pop2 = _slicedToArray(_stack$pop, 1),\n                      parent = _stack$pop2[0];\n                    var siblingPos = 0;\n                    var _iterator98 = _createForOfIteratorHelper(parent.childNodes),\n                      _step98;\n                    try {\n                      for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {\n                        var child = _step98.value;\n                        if (component.name === child.nodeName) {\n                          if (siblingPos === component.pos) {\n                            return child.searchNode(paths, pos + 1);\n                          }\n                          siblingPos++;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator98.e(err);\n                    } finally {\n                      _iterator98.f();\n                    }\n                    return node.searchNode(paths, pos + 1);\n                  }\n                }\n                if (node.childNodes && node.childNodes.length !== 0) {\n                  stack.push([node, 0]);\n                  node = node.childNodes[0];\n                } else if (stack.length === 0) {\n                  return null;\n                } else {\n                  while (stack.length !== 0) {\n                    var _stack$pop3 = stack.pop(),\n                      _stack$pop4 = _slicedToArray(_stack$pop3, 2),\n                      _parent2 = _stack$pop4[0],\n                      currentPos = _stack$pop4[1];\n                    var newPos = currentPos + 1;\n                    if (newPos < _parent2.childNodes.length) {\n                      stack.push([_parent2, newPos]);\n                      node = _parent2.childNodes[newPos];\n                      break;\n                    }\n                  }\n                  if (stack.length === 0) {\n                    return null;\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"dump\",\n            value: function dump(buffer) {\n              if (this.nodeName === \"#text\") {\n                buffer.push((0, _core_utils.encodeToXmlString)(this.nodeValue));\n                return;\n              }\n              buffer.push(\"<\".concat(this.nodeName));\n              if (this.attributes) {\n                var _iterator99 = _createForOfIteratorHelper(this.attributes),\n                  _step99;\n                try {\n                  for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {\n                    var attribute = _step99.value;\n                    buffer.push(\" \".concat(attribute.name, \"=\\\"\").concat((0, _core_utils.encodeToXmlString)(attribute.value), \"\\\"\"));\n                  }\n                } catch (err) {\n                  _iterator99.e(err);\n                } finally {\n                  _iterator99.f();\n                }\n              }\n              if (this.hasChildNodes()) {\n                buffer.push(\">\");\n                var _iterator100 = _createForOfIteratorHelper(this.childNodes),\n                  _step100;\n                try {\n                  for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {\n                    var child = _step100.value;\n                    child.dump(buffer);\n                  }\n                } catch (err) {\n                  _iterator100.e(err);\n                } finally {\n                  _iterator100.f();\n                }\n                buffer.push(\"</\".concat(this.nodeName, \">\"));\n              } else if (this.nodeValue) {\n                buffer.push(\">\".concat((0, _core_utils.encodeToXmlString)(this.nodeValue), \"</\").concat(this.nodeName, \">\"));\n              } else {\n                buffer.push(\"/>\");\n              }\n            }\n          }, {\n            key: \"firstChild\",\n            get: function get() {\n              return this.childNodes && this.childNodes[0];\n            }\n          }, {\n            key: \"nextSibling\",\n            get: function get() {\n              var childNodes = this.parentNode.childNodes;\n              if (!childNodes) {\n                return undefined;\n              }\n              var index = childNodes.indexOf(this);\n              if (index === -1) {\n                return undefined;\n              }\n              return childNodes[index + 1];\n            }\n          }, {\n            key: \"textContent\",\n            get: function get() {\n              if (!this.childNodes) {\n                return this.nodeValue || \"\";\n              }\n              return this.childNodes.map(function (child) {\n                return child.textContent;\n              }).join(\"\");\n            }\n          }, {\n            key: \"children\",\n            get: function get() {\n              return this.childNodes || [];\n            }\n          }]);\n          return SimpleDOMNode;\n        }();\n        exports.SimpleDOMNode = SimpleDOMNode;\n        var SimpleXMLParser = /*#__PURE__*/function (_XMLParserBase) {\n          _inherits(SimpleXMLParser, _XMLParserBase);\n          function SimpleXMLParser(_ref86) {\n            var _this92;\n            var _ref86$hasAttributes = _ref86.hasAttributes,\n              hasAttributes = _ref86$hasAttributes === void 0 ? false : _ref86$hasAttributes,\n              _ref86$lowerCaseName = _ref86.lowerCaseName,\n              lowerCaseName = _ref86$lowerCaseName === void 0 ? false : _ref86$lowerCaseName;\n            _classCallCheck(this, SimpleXMLParser);\n            _this92 = _possibleConstructorReturn(this, _getPrototypeOf(SimpleXMLParser).call(this));\n            _this92._currentFragment = null;\n            _this92._stack = null;\n            _this92._errorCode = XMLParserErrorCode.NoError;\n            _this92._hasAttributes = hasAttributes;\n            _this92._lowerCaseName = lowerCaseName;\n            return _this92;\n          }\n          _createClass(SimpleXMLParser, [{\n            key: \"parseFromString\",\n            value: function parseFromString(data) {\n              this._currentFragment = [];\n              this._stack = [];\n              this._errorCode = XMLParserErrorCode.NoError;\n              this.parseXml(data);\n              if (this._errorCode !== XMLParserErrorCode.NoError) {\n                return undefined;\n              }\n              var _this$_currentFragmen = _slicedToArray(this._currentFragment, 1),\n                documentElement = _this$_currentFragmen[0];\n              if (!documentElement) {\n                return undefined;\n              }\n              return {\n                documentElement: documentElement\n              };\n            }\n          }, {\n            key: \"onText\",\n            value: function onText(text) {\n              if (isWhitespaceString(text)) {\n                return;\n              }\n              var node = new SimpleDOMNode(\"#text\", text);\n              this._currentFragment.push(node);\n            }\n          }, {\n            key: \"onCdata\",\n            value: function onCdata(text) {\n              var node = new SimpleDOMNode(\"#text\", text);\n              this._currentFragment.push(node);\n            }\n          }, {\n            key: \"onBeginElement\",\n            value: function onBeginElement(name, attributes, isEmpty) {\n              if (this._lowerCaseName) {\n                name = name.toLowerCase();\n              }\n              var node = new SimpleDOMNode(name);\n              node.childNodes = [];\n              if (this._hasAttributes) {\n                node.attributes = attributes;\n              }\n              this._currentFragment.push(node);\n              if (isEmpty) {\n                return;\n              }\n              this._stack.push(this._currentFragment);\n              this._currentFragment = node.childNodes;\n            }\n          }, {\n            key: \"onEndElement\",\n            value: function onEndElement(name) {\n              this._currentFragment = this._stack.pop() || [];\n              var lastElement = this._currentFragment.at(-1);\n              if (!lastElement) {\n                return null;\n              }\n              for (var i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n                lastElement.childNodes[i].parentNode = lastElement;\n              }\n              return lastElement;\n            }\n          }, {\n            key: \"onError\",\n            value: function onError(code) {\n              this._errorCode = code;\n            }\n          }]);\n          return SimpleXMLParser;\n        }(XMLParserBase);\n        exports.SimpleXMLParser = SimpleXMLParser;\n\n        /***/\n      }, /* 67 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.calculateSHA256 = exports.calculateMD5 = exports.PDF20 = exports.PDF17 = exports.CipherTransformFactory = exports.ARCFourCipher = exports.AES256Cipher = exports.AES128Cipher = void 0;\n        exports.calculateSHA384 = calculateSHA384;\n        exports.calculateSHA512 = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _decrypt_stream = __w_pdfjs_require__(68);\n        var ARCFourCipher = /*#__PURE__*/function () {\n          function ARCFourCipher(key) {\n            _classCallCheck(this, ARCFourCipher);\n            this.a = 0;\n            this.b = 0;\n            var s = new Uint8Array(256);\n            var keyLength = key.length;\n            for (var i = 0; i < 256; ++i) {\n              s[i] = i;\n            }\n            for (var _i57 = 0, j = 0; _i57 < 256; ++_i57) {\n              var tmp = s[_i57];\n              j = j + tmp + key[_i57 % keyLength] & 0xff;\n              s[_i57] = s[j];\n              s[j] = tmp;\n            }\n            this.s = s;\n          }\n          _createClass(ARCFourCipher, [{\n            key: \"encryptBlock\",\n            value: function encryptBlock(data) {\n              var a = this.a,\n                b = this.b;\n              var s = this.s;\n              var n = data.length;\n              var output = new Uint8Array(n);\n              for (var i = 0; i < n; ++i) {\n                a = a + 1 & 0xff;\n                var tmp = s[a];\n                b = b + tmp & 0xff;\n                var tmp2 = s[b];\n                s[a] = tmp2;\n                s[b] = tmp;\n                output[i] = data[i] ^ s[tmp + tmp2 & 0xff];\n              }\n              this.a = a;\n              this.b = b;\n              return output;\n            }\n          }, {\n            key: \"decryptBlock\",\n            value: function decryptBlock(data) {\n              return this.encryptBlock(data);\n            }\n          }, {\n            key: \"encrypt\",\n            value: function encrypt(data) {\n              return this.encryptBlock(data);\n            }\n          }]);\n          return ARCFourCipher;\n        }();\n        exports.ARCFourCipher = ARCFourCipher;\n        var calculateMD5 = function calculateMD5Closure() {\n          var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n          var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);\n          function hash(data, offset, length) {\n            var h0 = 1732584193,\n              h1 = -271733879,\n              h2 = -1732584194,\n              h3 = 271733878;\n            var paddedLength = length + 72 & ~63;\n            var padded = new Uint8Array(paddedLength);\n            var i, j;\n            for (i = 0; i < length; ++i) {\n              padded[i] = data[offset++];\n            }\n            padded[i++] = 0x80;\n            var n = paddedLength - 8;\n            while (i < n) {\n              padded[i++] = 0;\n            }\n            padded[i++] = length << 3 & 0xff;\n            padded[i++] = length >> 5 & 0xff;\n            padded[i++] = length >> 13 & 0xff;\n            padded[i++] = length >> 21 & 0xff;\n            padded[i++] = length >>> 29 & 0xff;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            var w = new Int32Array(16);\n            for (i = 0; i < paddedLength;) {\n              for (j = 0; j < 16; ++j, i += 4) {\n                w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;\n              }\n              var a = h0,\n                b = h1,\n                c = h2,\n                d = h3,\n                f = void 0,\n                g = void 0;\n              for (j = 0; j < 64; ++j) {\n                if (j < 16) {\n                  f = b & c | ~b & d;\n                  g = j;\n                } else if (j < 32) {\n                  f = d & b | ~d & c;\n                  g = 5 * j + 1 & 15;\n                } else if (j < 48) {\n                  f = b ^ c ^ d;\n                  g = 3 * j + 5 & 15;\n                } else {\n                  f = c ^ (b | ~d);\n                  g = 7 * j & 15;\n                }\n                var tmp = d,\n                  rotateArg = a + f + k[j] + w[g] | 0,\n                  rotate = r[j];\n                d = c;\n                c = b;\n                b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;\n                a = tmp;\n              }\n              h0 = h0 + a | 0;\n              h1 = h1 + b | 0;\n              h2 = h2 + c | 0;\n              h3 = h3 + d | 0;\n            }\n            return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);\n          }\n          return hash;\n        }();\n        exports.calculateMD5 = calculateMD5;\n        var Word64 = /*#__PURE__*/function () {\n          function Word64(highInteger, lowInteger) {\n            _classCallCheck(this, Word64);\n            this.high = highInteger | 0;\n            this.low = lowInteger | 0;\n          }\n          _createClass(Word64, [{\n            key: \"and\",\n            value: function and(word) {\n              this.high &= word.high;\n              this.low &= word.low;\n            }\n          }, {\n            key: \"xor\",\n            value: function xor(word) {\n              this.high ^= word.high;\n              this.low ^= word.low;\n            }\n          }, {\n            key: \"or\",\n            value: function or(word) {\n              this.high |= word.high;\n              this.low |= word.low;\n            }\n          }, {\n            key: \"shiftRight\",\n            value: function shiftRight(places) {\n              if (places >= 32) {\n                this.low = this.high >>> places - 32 | 0;\n                this.high = 0;\n              } else {\n                this.low = this.low >>> places | this.high << 32 - places;\n                this.high = this.high >>> places | 0;\n              }\n            }\n          }, {\n            key: \"shiftLeft\",\n            value: function shiftLeft(places) {\n              if (places >= 32) {\n                this.high = this.low << places - 32;\n                this.low = 0;\n              } else {\n                this.high = this.high << places | this.low >>> 32 - places;\n                this.low <<= places;\n              }\n            }\n          }, {\n            key: \"rotateRight\",\n            value: function rotateRight(places) {\n              var low, high;\n              if (places & 32) {\n                high = this.low;\n                low = this.high;\n              } else {\n                low = this.low;\n                high = this.high;\n              }\n              places &= 31;\n              this.low = low >>> places | high << 32 - places;\n              this.high = high >>> places | low << 32 - places;\n            }\n          }, {\n            key: \"not\",\n            value: function not() {\n              this.high = ~this.high;\n              this.low = ~this.low;\n            }\n          }, {\n            key: \"add\",\n            value: function add(word) {\n              var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n              var highAdd = (this.high >>> 0) + (word.high >>> 0);\n              if (lowAdd > 0xffffffff) {\n                highAdd += 1;\n              }\n              this.low = lowAdd | 0;\n              this.high = highAdd | 0;\n            }\n          }, {\n            key: \"copyTo\",\n            value: function copyTo(bytes, offset) {\n              bytes[offset] = this.high >>> 24 & 0xff;\n              bytes[offset + 1] = this.high >> 16 & 0xff;\n              bytes[offset + 2] = this.high >> 8 & 0xff;\n              bytes[offset + 3] = this.high & 0xff;\n              bytes[offset + 4] = this.low >>> 24 & 0xff;\n              bytes[offset + 5] = this.low >> 16 & 0xff;\n              bytes[offset + 6] = this.low >> 8 & 0xff;\n              bytes[offset + 7] = this.low & 0xff;\n            }\n          }, {\n            key: \"assign\",\n            value: function assign(word) {\n              this.high = word.high;\n              this.low = word.low;\n            }\n          }]);\n          return Word64;\n        }();\n        var calculateSHA256 = function calculateSHA256Closure() {\n          function rotr(x, n) {\n            return x >>> n | x << 32 - n;\n          }\n          function ch(x, y, z) {\n            return x & y ^ ~x & z;\n          }\n          function maj(x, y, z) {\n            return x & y ^ x & z ^ y & z;\n          }\n          function sigma(x) {\n            return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n          }\n          function sigmaPrime(x) {\n            return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n          }\n          function littleSigma(x) {\n            return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;\n          }\n          function littleSigmaPrime(x) {\n            return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;\n          }\n          var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n          function hash(data, offset, length) {\n            var h0 = 0x6a09e667,\n              h1 = 0xbb67ae85,\n              h2 = 0x3c6ef372,\n              h3 = 0xa54ff53a,\n              h4 = 0x510e527f,\n              h5 = 0x9b05688c,\n              h6 = 0x1f83d9ab,\n              h7 = 0x5be0cd19;\n            var paddedLength = Math.ceil((length + 9) / 64) * 64;\n            var padded = new Uint8Array(paddedLength);\n            var i, j;\n            for (i = 0; i < length; ++i) {\n              padded[i] = data[offset++];\n            }\n            padded[i++] = 0x80;\n            var n = paddedLength - 8;\n            while (i < n) {\n              padded[i++] = 0;\n            }\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = length >>> 29 & 0xff;\n            padded[i++] = length >> 21 & 0xff;\n            padded[i++] = length >> 13 & 0xff;\n            padded[i++] = length >> 5 & 0xff;\n            padded[i++] = length << 3 & 0xff;\n            var w = new Uint32Array(64);\n            for (i = 0; i < paddedLength;) {\n              for (j = 0; j < 16; ++j) {\n                w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n                i += 4;\n              }\n              for (j = 16; j < 64; ++j) {\n                w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;\n              }\n              var a = h0,\n                b = h1,\n                c = h2,\n                d = h3,\n                e = h4,\n                f = h5,\n                g = h6,\n                h = h7,\n                t1 = void 0,\n                t2 = void 0;\n              for (j = 0; j < 64; ++j) {\n                t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n                t2 = sigma(a) + maj(a, b, c);\n                h = g;\n                g = f;\n                f = e;\n                e = d + t1 | 0;\n                d = c;\n                c = b;\n                b = a;\n                a = t1 + t2 | 0;\n              }\n              h0 = h0 + a | 0;\n              h1 = h1 + b | 0;\n              h2 = h2 + c | 0;\n              h3 = h3 + d | 0;\n              h4 = h4 + e | 0;\n              h5 = h5 + f | 0;\n              h6 = h6 + g | 0;\n              h7 = h7 + h | 0;\n            }\n            return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);\n          }\n          return hash;\n        }();\n        exports.calculateSHA256 = calculateSHA256;\n        var calculateSHA512 = function calculateSHA512Closure() {\n          function ch(result, x, y, z, tmp) {\n            result.assign(x);\n            result.and(y);\n            tmp.assign(x);\n            tmp.not();\n            tmp.and(z);\n            result.xor(tmp);\n          }\n          function maj(result, x, y, z, tmp) {\n            result.assign(x);\n            result.and(y);\n            tmp.assign(x);\n            tmp.and(z);\n            result.xor(tmp);\n            tmp.assign(y);\n            tmp.and(z);\n            result.xor(tmp);\n          }\n          function sigma(result, x, tmp) {\n            result.assign(x);\n            result.rotateRight(28);\n            tmp.assign(x);\n            tmp.rotateRight(34);\n            result.xor(tmp);\n            tmp.assign(x);\n            tmp.rotateRight(39);\n            result.xor(tmp);\n          }\n          function sigmaPrime(result, x, tmp) {\n            result.assign(x);\n            result.rotateRight(14);\n            tmp.assign(x);\n            tmp.rotateRight(18);\n            result.xor(tmp);\n            tmp.assign(x);\n            tmp.rotateRight(41);\n            result.xor(tmp);\n          }\n          function littleSigma(result, x, tmp) {\n            result.assign(x);\n            result.rotateRight(1);\n            tmp.assign(x);\n            tmp.rotateRight(8);\n            result.xor(tmp);\n            tmp.assign(x);\n            tmp.shiftRight(7);\n            result.xor(tmp);\n          }\n          function littleSigmaPrime(result, x, tmp) {\n            result.assign(x);\n            result.rotateRight(19);\n            tmp.assign(x);\n            tmp.rotateRight(61);\n            result.xor(tmp);\n            tmp.assign(x);\n            tmp.shiftRight(6);\n            result.xor(tmp);\n          }\n          var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n          function hash(data, offset, length) {\n            var mode384 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            var h0, h1, h2, h3, h4, h5, h6, h7;\n            if (!mode384) {\n              h0 = new Word64(0x6a09e667, 0xf3bcc908);\n              h1 = new Word64(0xbb67ae85, 0x84caa73b);\n              h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n              h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n              h4 = new Word64(0x510e527f, 0xade682d1);\n              h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n              h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n              h7 = new Word64(0x5be0cd19, 0x137e2179);\n            } else {\n              h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n              h1 = new Word64(0x629a292a, 0x367cd507);\n              h2 = new Word64(0x9159015a, 0x3070dd17);\n              h3 = new Word64(0x152fecd8, 0xf70e5939);\n              h4 = new Word64(0x67332667, 0xffc00b31);\n              h5 = new Word64(0x8eb44a87, 0x68581511);\n              h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n              h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n            }\n            var paddedLength = Math.ceil((length + 17) / 128) * 128;\n            var padded = new Uint8Array(paddedLength);\n            var i, j;\n            for (i = 0; i < length; ++i) {\n              padded[i] = data[offset++];\n            }\n            padded[i++] = 0x80;\n            var n = paddedLength - 16;\n            while (i < n) {\n              padded[i++] = 0;\n            }\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = 0;\n            padded[i++] = length >>> 29 & 0xff;\n            padded[i++] = length >> 21 & 0xff;\n            padded[i++] = length >> 13 & 0xff;\n            padded[i++] = length >> 5 & 0xff;\n            padded[i++] = length << 3 & 0xff;\n            var w = new Array(80);\n            for (i = 0; i < 80; i++) {\n              w[i] = new Word64(0, 0);\n            }\n            var a = new Word64(0, 0),\n              b = new Word64(0, 0),\n              c = new Word64(0, 0);\n            var d = new Word64(0, 0),\n              e = new Word64(0, 0),\n              f = new Word64(0, 0);\n            var g = new Word64(0, 0),\n              h = new Word64(0, 0);\n            var t1 = new Word64(0, 0),\n              t2 = new Word64(0, 0);\n            var tmp1 = new Word64(0, 0),\n              tmp2 = new Word64(0, 0);\n            var tmp3;\n            for (i = 0; i < paddedLength;) {\n              for (j = 0; j < 16; ++j) {\n                w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n                w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];\n                i += 8;\n              }\n              for (j = 16; j < 80; ++j) {\n                tmp3 = w[j];\n                littleSigmaPrime(tmp3, w[j - 2], tmp2);\n                tmp3.add(w[j - 7]);\n                littleSigma(tmp1, w[j - 15], tmp2);\n                tmp3.add(tmp1);\n                tmp3.add(w[j - 16]);\n              }\n              a.assign(h0);\n              b.assign(h1);\n              c.assign(h2);\n              d.assign(h3);\n              e.assign(h4);\n              f.assign(h5);\n              g.assign(h6);\n              h.assign(h7);\n              for (j = 0; j < 80; ++j) {\n                t1.assign(h);\n                sigmaPrime(tmp1, e, tmp2);\n                t1.add(tmp1);\n                ch(tmp1, e, f, g, tmp2);\n                t1.add(tmp1);\n                t1.add(k[j]);\n                t1.add(w[j]);\n                sigma(t2, a, tmp2);\n                maj(tmp1, a, b, c, tmp2);\n                t2.add(tmp1);\n                tmp3 = h;\n                h = g;\n                g = f;\n                f = e;\n                d.add(t1);\n                e = d;\n                d = c;\n                c = b;\n                b = a;\n                tmp3.assign(t1);\n                tmp3.add(t2);\n                a = tmp3;\n              }\n              h0.add(a);\n              h1.add(b);\n              h2.add(c);\n              h3.add(d);\n              h4.add(e);\n              h5.add(f);\n              h6.add(g);\n              h7.add(h);\n            }\n            var result;\n            if (!mode384) {\n              result = new Uint8Array(64);\n              h0.copyTo(result, 0);\n              h1.copyTo(result, 8);\n              h2.copyTo(result, 16);\n              h3.copyTo(result, 24);\n              h4.copyTo(result, 32);\n              h5.copyTo(result, 40);\n              h6.copyTo(result, 48);\n              h7.copyTo(result, 56);\n            } else {\n              result = new Uint8Array(48);\n              h0.copyTo(result, 0);\n              h1.copyTo(result, 8);\n              h2.copyTo(result, 16);\n              h3.copyTo(result, 24);\n              h4.copyTo(result, 32);\n              h5.copyTo(result, 40);\n            }\n            return result;\n          }\n          return hash;\n        }();\n        exports.calculateSHA512 = calculateSHA512;\n        function calculateSHA384(data, offset, length) {\n          return calculateSHA512(data, offset, length, true);\n        }\n        var NullCipher = /*#__PURE__*/function () {\n          function NullCipher() {\n            _classCallCheck(this, NullCipher);\n          }\n          _createClass(NullCipher, [{\n            key: \"decryptBlock\",\n            value: function decryptBlock(data) {\n              return data;\n            }\n          }, {\n            key: \"encrypt\",\n            value: function encrypt(data) {\n              return data;\n            }\n          }]);\n          return NullCipher;\n        }();\n        var AESBaseCipher = /*#__PURE__*/function () {\n          function AESBaseCipher() {\n            _classCallCheck(this, AESBaseCipher);\n            if (this.constructor === AESBaseCipher) {\n              (0, _util.unreachable)(\"Cannot initialize AESBaseCipher.\");\n            }\n            this._s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n            this._inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n            this._mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);\n            this._mixCol = new Uint8Array(256);\n            for (var i = 0; i < 256; i++) {\n              if (i < 128) {\n                this._mixCol[i] = i << 1;\n              } else {\n                this._mixCol[i] = i << 1 ^ 0x1b;\n              }\n            }\n            this.buffer = new Uint8Array(16);\n            this.bufferPosition = 0;\n          }\n          _createClass(AESBaseCipher, [{\n            key: \"_expandKey\",\n            value: function _expandKey(cipherKey) {\n              (0, _util.unreachable)(\"Cannot call `_expandKey` on the base class\");\n            }\n          }, {\n            key: \"_decrypt\",\n            value: function _decrypt(input, key) {\n              var t, u, v;\n              var state = new Uint8Array(16);\n              state.set(input);\n              for (var j = 0, k = this._keySize; j < 16; ++j, ++k) {\n                state[j] ^= key[k];\n              }\n              for (var i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n                t = state[13];\n                state[13] = state[9];\n                state[9] = state[5];\n                state[5] = state[1];\n                state[1] = t;\n                t = state[14];\n                u = state[10];\n                state[14] = state[6];\n                state[10] = state[2];\n                state[6] = t;\n                state[2] = u;\n                t = state[15];\n                u = state[11];\n                v = state[7];\n                state[15] = state[3];\n                state[11] = t;\n                state[7] = u;\n                state[3] = v;\n                for (var _j5 = 0; _j5 < 16; ++_j5) {\n                  state[_j5] = this._inv_s[state[_j5]];\n                }\n                for (var _j6 = 0, _k = i * 16; _j6 < 16; ++_j6, ++_k) {\n                  state[_j6] ^= key[_k];\n                }\n                for (var _j7 = 0; _j7 < 16; _j7 += 4) {\n                  var s0 = this._mix[state[_j7]];\n                  var s1 = this._mix[state[_j7 + 1]];\n                  var s2 = this._mix[state[_j7 + 2]];\n                  var s3 = this._mix[state[_j7 + 3]];\n                  t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;\n                  state[_j7] = t >>> 24 & 0xff;\n                  state[_j7 + 1] = t >> 16 & 0xff;\n                  state[_j7 + 2] = t >> 8 & 0xff;\n                  state[_j7 + 3] = t & 0xff;\n                }\n              }\n              t = state[13];\n              state[13] = state[9];\n              state[9] = state[5];\n              state[5] = state[1];\n              state[1] = t;\n              t = state[14];\n              u = state[10];\n              state[14] = state[6];\n              state[10] = state[2];\n              state[6] = t;\n              state[2] = u;\n              t = state[15];\n              u = state[11];\n              v = state[7];\n              state[15] = state[3];\n              state[11] = t;\n              state[7] = u;\n              state[3] = v;\n              for (var _j8 = 0; _j8 < 16; ++_j8) {\n                state[_j8] = this._inv_s[state[_j8]];\n                state[_j8] ^= key[_j8];\n              }\n              return state;\n            }\n          }, {\n            key: \"_encrypt\",\n            value: function _encrypt(input, key) {\n              var s = this._s;\n              var t, u, v;\n              var state = new Uint8Array(16);\n              state.set(input);\n              for (var j = 0; j < 16; ++j) {\n                state[j] ^= key[j];\n              }\n              for (var i = 1; i < this._cyclesOfRepetition; i++) {\n                for (var _j9 = 0; _j9 < 16; ++_j9) {\n                  state[_j9] = s[state[_j9]];\n                }\n                v = state[1];\n                state[1] = state[5];\n                state[5] = state[9];\n                state[9] = state[13];\n                state[13] = v;\n                v = state[2];\n                u = state[6];\n                state[2] = state[10];\n                state[6] = state[14];\n                state[10] = v;\n                state[14] = u;\n                v = state[3];\n                u = state[7];\n                t = state[11];\n                state[3] = state[15];\n                state[7] = v;\n                state[11] = u;\n                state[15] = t;\n                for (var _j10 = 0; _j10 < 16; _j10 += 4) {\n                  var s0 = state[_j10 + 0];\n                  var s1 = state[_j10 + 1];\n                  var s2 = state[_j10 + 2];\n                  var s3 = state[_j10 + 3];\n                  t = s0 ^ s1 ^ s2 ^ s3;\n                  state[_j10 + 0] ^= t ^ this._mixCol[s0 ^ s1];\n                  state[_j10 + 1] ^= t ^ this._mixCol[s1 ^ s2];\n                  state[_j10 + 2] ^= t ^ this._mixCol[s2 ^ s3];\n                  state[_j10 + 3] ^= t ^ this._mixCol[s3 ^ s0];\n                }\n                for (var _j11 = 0, k = i * 16; _j11 < 16; ++_j11, ++k) {\n                  state[_j11] ^= key[k];\n                }\n              }\n              for (var _j12 = 0; _j12 < 16; ++_j12) {\n                state[_j12] = s[state[_j12]];\n              }\n              v = state[1];\n              state[1] = state[5];\n              state[5] = state[9];\n              state[9] = state[13];\n              state[13] = v;\n              v = state[2];\n              u = state[6];\n              state[2] = state[10];\n              state[6] = state[14];\n              state[10] = v;\n              state[14] = u;\n              v = state[3];\n              u = state[7];\n              t = state[11];\n              state[3] = state[15];\n              state[7] = v;\n              state[11] = u;\n              state[15] = t;\n              for (var _j13 = 0, _k2 = this._keySize; _j13 < 16; ++_j13, ++_k2) {\n                state[_j13] ^= key[_k2];\n              }\n              return state;\n            }\n          }, {\n            key: \"_decryptBlock2\",\n            value: function _decryptBlock2(data, finalize) {\n              var sourceLength = data.length;\n              var buffer = this.buffer,\n                bufferLength = this.bufferPosition;\n              var result = [];\n              var iv = this.iv;\n              for (var i = 0; i < sourceLength; ++i) {\n                buffer[bufferLength] = data[i];\n                ++bufferLength;\n                if (bufferLength < 16) {\n                  continue;\n                }\n                var plain = this._decrypt(buffer, this._key);\n                for (var j = 0; j < 16; ++j) {\n                  plain[j] ^= iv[j];\n                }\n                iv = buffer;\n                result.push(plain);\n                buffer = new Uint8Array(16);\n                bufferLength = 0;\n              }\n              this.buffer = buffer;\n              this.bufferLength = bufferLength;\n              this.iv = iv;\n              if (result.length === 0) {\n                return new Uint8Array(0);\n              }\n              var outputLength = 16 * result.length;\n              if (finalize) {\n                var lastBlock = result.at(-1);\n                var psLen = lastBlock[15];\n                if (psLen <= 16) {\n                  for (var _i58 = 15, ii = 16 - psLen; _i58 >= ii; --_i58) {\n                    if (lastBlock[_i58] !== psLen) {\n                      psLen = 0;\n                      break;\n                    }\n                  }\n                  outputLength -= psLen;\n                  result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n                }\n              }\n              var output = new Uint8Array(outputLength);\n              for (var _i59 = 0, _j14 = 0, _ii11 = result.length; _i59 < _ii11; ++_i59, _j14 += 16) {\n                output.set(result[_i59], _j14);\n              }\n              return output;\n            }\n          }, {\n            key: \"decryptBlock\",\n            value: function decryptBlock(data, finalize) {\n              var iv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n              var sourceLength = data.length;\n              var buffer = this.buffer;\n              var bufferLength = this.bufferPosition;\n              if (iv) {\n                this.iv = iv;\n              } else {\n                for (var i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {\n                  buffer[bufferLength] = data[i];\n                }\n                if (bufferLength < 16) {\n                  this.bufferLength = bufferLength;\n                  return new Uint8Array(0);\n                }\n                this.iv = buffer;\n                data = data.subarray(16);\n              }\n              this.buffer = new Uint8Array(16);\n              this.bufferLength = 0;\n              this.decryptBlock = this._decryptBlock2;\n              return this.decryptBlock(data, finalize);\n            }\n          }, {\n            key: \"encrypt\",\n            value: function encrypt(data, iv) {\n              var sourceLength = data.length;\n              var buffer = this.buffer,\n                bufferLength = this.bufferPosition;\n              var result = [];\n              if (!iv) {\n                iv = new Uint8Array(16);\n              }\n              for (var i = 0; i < sourceLength; ++i) {\n                buffer[bufferLength] = data[i];\n                ++bufferLength;\n                if (bufferLength < 16) {\n                  continue;\n                }\n                for (var j = 0; j < 16; ++j) {\n                  buffer[j] ^= iv[j];\n                }\n                var cipher = this._encrypt(buffer, this._key);\n                iv = cipher;\n                result.push(cipher);\n                buffer = new Uint8Array(16);\n                bufferLength = 0;\n              }\n              this.buffer = buffer;\n              this.bufferLength = bufferLength;\n              this.iv = iv;\n              if (result.length === 0) {\n                return new Uint8Array(0);\n              }\n              var outputLength = 16 * result.length;\n              var output = new Uint8Array(outputLength);\n              for (var _i60 = 0, _j15 = 0, ii = result.length; _i60 < ii; ++_i60, _j15 += 16) {\n                output.set(result[_i60], _j15);\n              }\n              return output;\n            }\n          }]);\n          return AESBaseCipher;\n        }();\n        var AES128Cipher = /*#__PURE__*/function (_AESBaseCipher) {\n          _inherits(AES128Cipher, _AESBaseCipher);\n          function AES128Cipher(key) {\n            var _this93;\n            _classCallCheck(this, AES128Cipher);\n            _this93 = _possibleConstructorReturn(this, _getPrototypeOf(AES128Cipher).call(this));\n            _this93._cyclesOfRepetition = 10;\n            _this93._keySize = 160;\n            _this93._rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);\n            _this93._key = _this93._expandKey(key);\n            return _this93;\n          }\n          _createClass(AES128Cipher, [{\n            key: \"_expandKey\",\n            value: function _expandKey(cipherKey) {\n              var b = 176;\n              var s = this._s;\n              var rcon = this._rcon;\n              var result = new Uint8Array(b);\n              result.set(cipherKey);\n              for (var j = 16, i = 1; j < b; ++i) {\n                var t1 = result[j - 3];\n                var t2 = result[j - 2];\n                var t3 = result[j - 1];\n                var t4 = result[j - 4];\n                t1 = s[t1];\n                t2 = s[t2];\n                t3 = s[t3];\n                t4 = s[t4];\n                t1 ^= rcon[i];\n                for (var n = 0; n < 4; ++n) {\n                  result[j] = t1 ^= result[j - 16];\n                  j++;\n                  result[j] = t2 ^= result[j - 16];\n                  j++;\n                  result[j] = t3 ^= result[j - 16];\n                  j++;\n                  result[j] = t4 ^= result[j - 16];\n                  j++;\n                }\n              }\n              return result;\n            }\n          }]);\n          return AES128Cipher;\n        }(AESBaseCipher);\n        exports.AES128Cipher = AES128Cipher;\n        var AES256Cipher = /*#__PURE__*/function (_AESBaseCipher2) {\n          _inherits(AES256Cipher, _AESBaseCipher2);\n          function AES256Cipher(key) {\n            var _this94;\n            _classCallCheck(this, AES256Cipher);\n            _this94 = _possibleConstructorReturn(this, _getPrototypeOf(AES256Cipher).call(this));\n            _this94._cyclesOfRepetition = 14;\n            _this94._keySize = 224;\n            _this94._key = _this94._expandKey(key);\n            return _this94;\n          }\n          _createClass(AES256Cipher, [{\n            key: \"_expandKey\",\n            value: function _expandKey(cipherKey) {\n              var b = 240;\n              var s = this._s;\n              var result = new Uint8Array(b);\n              result.set(cipherKey);\n              var r = 1;\n              var t1, t2, t3, t4;\n              for (var j = 32, i = 1; j < b; ++i) {\n                if (j % 32 === 16) {\n                  t1 = s[t1];\n                  t2 = s[t2];\n                  t3 = s[t3];\n                  t4 = s[t4];\n                } else if (j % 32 === 0) {\n                  t1 = result[j - 3];\n                  t2 = result[j - 2];\n                  t3 = result[j - 1];\n                  t4 = result[j - 4];\n                  t1 = s[t1];\n                  t2 = s[t2];\n                  t3 = s[t3];\n                  t4 = s[t4];\n                  t1 ^= r;\n                  if ((r <<= 1) >= 256) {\n                    r = (r ^ 0x1b) & 0xff;\n                  }\n                }\n                for (var n = 0; n < 4; ++n) {\n                  result[j] = t1 ^= result[j - 32];\n                  j++;\n                  result[j] = t2 ^= result[j - 32];\n                  j++;\n                  result[j] = t3 ^= result[j - 32];\n                  j++;\n                  result[j] = t4 ^= result[j - 32];\n                  j++;\n                }\n              }\n              return result;\n            }\n          }]);\n          return AES256Cipher;\n        }(AESBaseCipher);\n        exports.AES256Cipher = AES256Cipher;\n        var PDF17 = /*#__PURE__*/function () {\n          function PDF17() {\n            _classCallCheck(this, PDF17);\n          }\n          _createClass(PDF17, [{\n            key: \"checkOwnerPassword\",\n            value: function checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n              var hashData = new Uint8Array(password.length + 56);\n              hashData.set(password, 0);\n              hashData.set(ownerValidationSalt, password.length);\n              hashData.set(userBytes, password.length + ownerValidationSalt.length);\n              var result = calculateSHA256(hashData, 0, hashData.length);\n              return (0, _util.isArrayEqual)(result, ownerPassword);\n            }\n          }, {\n            key: \"checkUserPassword\",\n            value: function checkUserPassword(password, userValidationSalt, userPassword) {\n              var hashData = new Uint8Array(password.length + 8);\n              hashData.set(password, 0);\n              hashData.set(userValidationSalt, password.length);\n              var result = calculateSHA256(hashData, 0, hashData.length);\n              return (0, _util.isArrayEqual)(result, userPassword);\n            }\n          }, {\n            key: \"getOwnerKey\",\n            value: function getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n              var hashData = new Uint8Array(password.length + 56);\n              hashData.set(password, 0);\n              hashData.set(ownerKeySalt, password.length);\n              hashData.set(userBytes, password.length + ownerKeySalt.length);\n              var key = calculateSHA256(hashData, 0, hashData.length);\n              var cipher = new AES256Cipher(key);\n              return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n            }\n          }, {\n            key: \"getUserKey\",\n            value: function getUserKey(password, userKeySalt, userEncryption) {\n              var hashData = new Uint8Array(password.length + 8);\n              hashData.set(password, 0);\n              hashData.set(userKeySalt, password.length);\n              var key = calculateSHA256(hashData, 0, hashData.length);\n              var cipher = new AES256Cipher(key);\n              return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n            }\n          }]);\n          return PDF17;\n        }();\n        exports.PDF17 = PDF17;\n        var PDF20 = function PDF20Closure() {\n          function calculatePDF20Hash(password, input, userBytes) {\n            var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n            var e = [0];\n            var i = 0;\n            while (i < 64 || e.at(-1) > i - 32) {\n              var combinedLength = password.length + k.length + userBytes.length,\n                combinedArray = new Uint8Array(combinedLength);\n              var writeOffset = 0;\n              combinedArray.set(password, writeOffset);\n              writeOffset += password.length;\n              combinedArray.set(k, writeOffset);\n              writeOffset += k.length;\n              combinedArray.set(userBytes, writeOffset);\n              var k1 = new Uint8Array(combinedLength * 64);\n              for (var j = 0, pos = 0; j < 64; j++, pos += combinedLength) {\n                k1.set(combinedArray, pos);\n              }\n              var cipher = new AES128Cipher(k.subarray(0, 16));\n              e = cipher.encrypt(k1, k.subarray(16, 32));\n              var remainder = 0;\n              for (var z = 0; z < 16; z++) {\n                remainder *= 256 % 3;\n                remainder %= 3;\n                remainder += (e[z] >>> 0) % 3;\n                remainder %= 3;\n              }\n              if (remainder === 0) {\n                k = calculateSHA256(e, 0, e.length);\n              } else if (remainder === 1) {\n                k = calculateSHA384(e, 0, e.length);\n              } else if (remainder === 2) {\n                k = calculateSHA512(e, 0, e.length);\n              }\n              i++;\n            }\n            return k.subarray(0, 32);\n          }\n          var PDF20 = /*#__PURE__*/function () {\n            function PDF20() {\n              _classCallCheck(this, PDF20);\n            }\n            _createClass(PDF20, [{\n              key: \"hash\",\n              value: function hash(password, concatBytes, userBytes) {\n                return calculatePDF20Hash(password, concatBytes, userBytes);\n              }\n            }, {\n              key: \"checkOwnerPassword\",\n              value: function checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n                var hashData = new Uint8Array(password.length + 56);\n                hashData.set(password, 0);\n                hashData.set(ownerValidationSalt, password.length);\n                hashData.set(userBytes, password.length + ownerValidationSalt.length);\n                var result = calculatePDF20Hash(password, hashData, userBytes);\n                return (0, _util.isArrayEqual)(result, ownerPassword);\n              }\n            }, {\n              key: \"checkUserPassword\",\n              value: function checkUserPassword(password, userValidationSalt, userPassword) {\n                var hashData = new Uint8Array(password.length + 8);\n                hashData.set(password, 0);\n                hashData.set(userValidationSalt, password.length);\n                var result = calculatePDF20Hash(password, hashData, []);\n                return (0, _util.isArrayEqual)(result, userPassword);\n              }\n            }, {\n              key: \"getOwnerKey\",\n              value: function getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n                var hashData = new Uint8Array(password.length + 56);\n                hashData.set(password, 0);\n                hashData.set(ownerKeySalt, password.length);\n                hashData.set(userBytes, password.length + ownerKeySalt.length);\n                var key = calculatePDF20Hash(password, hashData, userBytes);\n                var cipher = new AES256Cipher(key);\n                return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n              }\n            }, {\n              key: \"getUserKey\",\n              value: function getUserKey(password, userKeySalt, userEncryption) {\n                var hashData = new Uint8Array(password.length + 8);\n                hashData.set(password, 0);\n                hashData.set(userKeySalt, password.length);\n                var key = calculatePDF20Hash(password, hashData, []);\n                var cipher = new AES256Cipher(key);\n                return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n              }\n            }]);\n            return PDF20;\n          }();\n          return PDF20;\n        }();\n        exports.PDF20 = PDF20;\n        var CipherTransform = /*#__PURE__*/function () {\n          function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n            _classCallCheck(this, CipherTransform);\n            this.StringCipherConstructor = stringCipherConstructor;\n            this.StreamCipherConstructor = streamCipherConstructor;\n          }\n          _createClass(CipherTransform, [{\n            key: \"createStream\",\n            value: function createStream(stream, length) {\n              var cipher = new this.StreamCipherConstructor();\n              return new _decrypt_stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {\n                return cipher.decryptBlock(data, finalize);\n              });\n            }\n          }, {\n            key: \"decryptString\",\n            value: function decryptString(s) {\n              var cipher = new this.StringCipherConstructor();\n              var data = (0, _util.stringToBytes)(s);\n              data = cipher.decryptBlock(data, true);\n              return (0, _util.bytesToString)(data);\n            }\n          }, {\n            key: \"encryptString\",\n            value: function encryptString(s) {\n              var cipher = new this.StringCipherConstructor();\n              if (cipher instanceof AESBaseCipher) {\n                var strLen = s.length;\n                var pad = 16 - strLen % 16;\n                s += String.fromCharCode(pad).repeat(pad);\n                var iv = new Uint8Array(16);\n                if (typeof crypto !== \"undefined\") {\n                  crypto.getRandomValues(iv);\n                } else {\n                  for (var i = 0; i < 16; i++) {\n                    iv[i] = Math.floor(256 * Math.random());\n                  }\n                }\n                var _data3 = (0, _util.stringToBytes)(s);\n                _data3 = cipher.encrypt(_data3, iv);\n                var buf = new Uint8Array(16 + _data3.length);\n                buf.set(iv);\n                buf.set(_data3, 16);\n                return (0, _util.bytesToString)(buf);\n              }\n              var data = (0, _util.stringToBytes)(s);\n              data = cipher.encrypt(data);\n              return (0, _util.bytesToString)(data);\n            }\n          }]);\n          return CipherTransform;\n        }();\n        var CipherTransformFactory = function CipherTransformFactoryClosure() {\n          var defaultPasswordBytes = new Uint8Array([0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a]);\n          function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {\n            if (password) {\n              var passwordLength = Math.min(127, password.length);\n              password = password.subarray(0, passwordLength);\n            } else {\n              password = [];\n            }\n            var pdfAlgorithm;\n            if (revision === 6) {\n              pdfAlgorithm = new PDF20();\n            } else {\n              pdfAlgorithm = new PDF17();\n            }\n            if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {\n              return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n            } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {\n              return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n            }\n            return null;\n          }\n          function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {\n            var hashDataSize = 40 + ownerPassword.length + fileId.length;\n            var hashData = new Uint8Array(hashDataSize);\n            var i = 0,\n              j,\n              n;\n            if (password) {\n              n = Math.min(32, password.length);\n              for (; i < n; ++i) {\n                hashData[i] = password[i];\n              }\n            }\n            j = 0;\n            while (i < 32) {\n              hashData[i++] = defaultPasswordBytes[j++];\n            }\n            for (j = 0, n = ownerPassword.length; j < n; ++j) {\n              hashData[i++] = ownerPassword[j];\n            }\n            hashData[i++] = flags & 0xff;\n            hashData[i++] = flags >> 8 & 0xff;\n            hashData[i++] = flags >> 16 & 0xff;\n            hashData[i++] = flags >>> 24 & 0xff;\n            for (j = 0, n = fileId.length; j < n; ++j) {\n              hashData[i++] = fileId[j];\n            }\n            if (revision >= 4 && !encryptMetadata) {\n              hashData[i++] = 0xff;\n              hashData[i++] = 0xff;\n              hashData[i++] = 0xff;\n              hashData[i++] = 0xff;\n            }\n            var hash = calculateMD5(hashData, 0, i);\n            var keyLengthInBytes = keyLength >> 3;\n            if (revision >= 3) {\n              for (j = 0; j < 50; ++j) {\n                hash = calculateMD5(hash, 0, keyLengthInBytes);\n              }\n            }\n            var encryptionKey = hash.subarray(0, keyLengthInBytes);\n            var cipher, checkData;\n            if (revision >= 3) {\n              for (i = 0; i < 32; ++i) {\n                hashData[i] = defaultPasswordBytes[i];\n              }\n              for (j = 0, n = fileId.length; j < n; ++j) {\n                hashData[i++] = fileId[j];\n              }\n              cipher = new ARCFourCipher(encryptionKey);\n              checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n              n = encryptionKey.length;\n              var derivedKey = new Uint8Array(n);\n              for (j = 1; j <= 19; ++j) {\n                for (var k = 0; k < n; ++k) {\n                  derivedKey[k] = encryptionKey[k] ^ j;\n                }\n                cipher = new ARCFourCipher(derivedKey);\n                checkData = cipher.encryptBlock(checkData);\n              }\n              for (j = 0, n = checkData.length; j < n; ++j) {\n                if (userPassword[j] !== checkData[j]) {\n                  return null;\n                }\n              }\n            } else {\n              cipher = new ARCFourCipher(encryptionKey);\n              checkData = cipher.encryptBlock(defaultPasswordBytes);\n              for (j = 0, n = checkData.length; j < n; ++j) {\n                if (userPassword[j] !== checkData[j]) {\n                  return null;\n                }\n              }\n            }\n            return encryptionKey;\n          }\n          function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n            var hashData = new Uint8Array(32);\n            var i = 0;\n            var n = Math.min(32, password.length);\n            for (; i < n; ++i) {\n              hashData[i] = password[i];\n            }\n            var j = 0;\n            while (i < 32) {\n              hashData[i++] = defaultPasswordBytes[j++];\n            }\n            var hash = calculateMD5(hashData, 0, i);\n            var keyLengthInBytes = keyLength >> 3;\n            if (revision >= 3) {\n              for (j = 0; j < 50; ++j) {\n                hash = calculateMD5(hash, 0, hash.length);\n              }\n            }\n            var cipher, userPassword;\n            if (revision >= 3) {\n              userPassword = ownerPassword;\n              var derivedKey = new Uint8Array(keyLengthInBytes);\n              for (j = 19; j >= 0; j--) {\n                for (var k = 0; k < keyLengthInBytes; ++k) {\n                  derivedKey[k] = hash[k] ^ j;\n                }\n                cipher = new ARCFourCipher(derivedKey);\n                userPassword = cipher.encryptBlock(userPassword);\n              }\n            } else {\n              cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n              userPassword = cipher.encryptBlock(ownerPassword);\n            }\n            return userPassword;\n          }\n          var identityName = _primitives.Name.get(\"Identity\");\n          function buildObjectKey(num, gen, encryptionKey) {\n            var isAes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            var key = new Uint8Array(encryptionKey.length + 9);\n            var n = encryptionKey.length;\n            var i;\n            for (i = 0; i < n; ++i) {\n              key[i] = encryptionKey[i];\n            }\n            key[i++] = num & 0xff;\n            key[i++] = num >> 8 & 0xff;\n            key[i++] = num >> 16 & 0xff;\n            key[i++] = gen & 0xff;\n            key[i++] = gen >> 8 & 0xff;\n            if (isAes) {\n              key[i++] = 0x73;\n              key[i++] = 0x41;\n              key[i++] = 0x6c;\n              key[i++] = 0x54;\n            }\n            var hash = calculateMD5(key, 0, i);\n            return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n          }\n          function buildCipherConstructor(cf, name, num, gen, key) {\n            if (!(name instanceof _primitives.Name)) {\n              throw new _util.FormatError(\"Invalid crypt filter name.\");\n            }\n            var cryptFilter = cf.get(name.name);\n            var cfm;\n            if (cryptFilter !== null && cryptFilter !== undefined) {\n              cfm = cryptFilter.get(\"CFM\");\n            }\n            if (!cfm || cfm.name === \"None\") {\n              return function cipherTransformFactoryBuildCipherConstructorNone() {\n                return new NullCipher();\n              };\n            }\n            if (cfm.name === \"V2\") {\n              return function cipherTransformFactoryBuildCipherConstructorV2() {\n                return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n              };\n            }\n            if (cfm.name === \"AESV2\") {\n              return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n                return new AES128Cipher(buildObjectKey(num, gen, key, true));\n              };\n            }\n            if (cfm.name === \"AESV3\") {\n              return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n                return new AES256Cipher(key);\n              };\n            }\n            throw new _util.FormatError(\"Unknown crypto method\");\n          }\n          var CipherTransformFactory = /*#__PURE__*/function () {\n            function CipherTransformFactory(dict, fileId, password) {\n              _classCallCheck(this, CipherTransformFactory);\n              var filter = dict.get(\"Filter\");\n              if (!(0, _primitives.isName)(filter, \"Standard\")) {\n                throw new _util.FormatError(\"unknown encryption method\");\n              }\n              this.filterName = filter.name;\n              this.dict = dict;\n              var algorithm = dict.get(\"V\");\n              if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {\n                throw new _util.FormatError(\"unsupported encryption algorithm\");\n              }\n              this.algorithm = algorithm;\n              var keyLength = dict.get(\"Length\");\n              if (!keyLength) {\n                if (algorithm <= 3) {\n                  keyLength = 40;\n                } else {\n                  var cfDict = dict.get(\"CF\");\n                  var streamCryptoName = dict.get(\"StmF\");\n                  if (cfDict instanceof _primitives.Dict && streamCryptoName instanceof _primitives.Name) {\n                    cfDict.suppressEncryption = true;\n                    var handlerDict = cfDict.get(streamCryptoName.name);\n                    keyLength = handlerDict && handlerDict.get(\"Length\") || 128;\n                    if (keyLength < 40) {\n                      keyLength <<= 3;\n                    }\n                  }\n                }\n              }\n              if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n                throw new _util.FormatError(\"invalid key length\");\n              }\n              var ownerPassword = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(0, 32);\n              var userPassword = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 32);\n              var flags = dict.get(\"P\");\n              var revision = dict.get(\"R\");\n              var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get(\"EncryptMetadata\") !== false;\n              this.encryptMetadata = encryptMetadata;\n              var fileIdBytes = (0, _util.stringToBytes)(fileId);\n              var passwordBytes;\n              if (password) {\n                if (revision === 6) {\n                  try {\n                    password = (0, _util.utf8StringToString)(password);\n                  } catch (ex) {\n                    (0, _util.warn)(\"CipherTransformFactory: \" + \"Unable to convert UTF8 encoded password.\");\n                  }\n                }\n                passwordBytes = (0, _util.stringToBytes)(password);\n              }\n              var encryptionKey;\n              if (algorithm !== 5) {\n                encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n              } else {\n                var ownerValidationSalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(32, 40);\n                var ownerKeySalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(40, 48);\n                var uBytes = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 48);\n                var userValidationSalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(32, 40);\n                var userKeySalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(40, 48);\n                var ownerEncryption = (0, _util.stringToBytes)(dict.get(\"OE\"));\n                var userEncryption = (0, _util.stringToBytes)(dict.get(\"UE\"));\n                var perms = (0, _util.stringToBytes)(dict.get(\"Perms\"));\n                encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);\n              }\n              if (!encryptionKey && !password) {\n                throw new _util.PasswordException(\"No password given\", _util.PasswordResponses.NEED_PASSWORD);\n              } else if (!encryptionKey && password) {\n                var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);\n                encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n              }\n              if (!encryptionKey) {\n                throw new _util.PasswordException(\"Incorrect Password\", _util.PasswordResponses.INCORRECT_PASSWORD);\n              }\n              this.encryptionKey = encryptionKey;\n              if (algorithm >= 4) {\n                var cf = dict.get(\"CF\");\n                if (cf instanceof _primitives.Dict) {\n                  cf.suppressEncryption = true;\n                }\n                this.cf = cf;\n                this.stmf = dict.get(\"StmF\") || identityName;\n                this.strf = dict.get(\"StrF\") || identityName;\n                this.eff = dict.get(\"EFF\") || this.stmf;\n              }\n            }\n            _createClass(CipherTransformFactory, [{\n              key: \"createCipherTransform\",\n              value: function createCipherTransform(num, gen) {\n                if (this.algorithm === 4 || this.algorithm === 5) {\n                  return new CipherTransform(buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey));\n                }\n                var key = buildObjectKey(num, gen, this.encryptionKey, false);\n                var cipherConstructor = function buildCipherCipherConstructor() {\n                  return new ARCFourCipher(key);\n                };\n                return new CipherTransform(cipherConstructor, cipherConstructor);\n              }\n            }]);\n            return CipherTransformFactory;\n          }();\n          return CipherTransformFactory;\n        }();\n        exports.CipherTransformFactory = CipherTransformFactory;\n\n        /***/\n      }, /* 68 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.DecryptStream = void 0;\n        var _decode_stream = __w_pdfjs_require__(19);\n        var chunkSize = 512;\n        var DecryptStream = /*#__PURE__*/function (_decode_stream$Decode11) {\n          _inherits(DecryptStream, _decode_stream$Decode11);\n          function DecryptStream(str, maybeLength, decrypt) {\n            var _this95;\n            _classCallCheck(this, DecryptStream);\n            _this95 = _possibleConstructorReturn(this, _getPrototypeOf(DecryptStream).call(this, maybeLength));\n            _this95.str = str;\n            _this95.dict = str.dict;\n            _this95.decrypt = decrypt;\n            _this95.nextChunk = null;\n            _this95.initialized = false;\n            return _this95;\n          }\n          _createClass(DecryptStream, [{\n            key: \"readBlock\",\n            value: function readBlock() {\n              var chunk;\n              if (this.initialized) {\n                chunk = this.nextChunk;\n              } else {\n                chunk = this.str.getBytes(chunkSize);\n                this.initialized = true;\n              }\n              if (!chunk || chunk.length === 0) {\n                this.eof = true;\n                return;\n              }\n              this.nextChunk = this.str.getBytes(chunkSize);\n              var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n              var decrypt = this.decrypt;\n              chunk = decrypt(chunk, !hasMoreData);\n              var bufferLength = this.bufferLength;\n              var n = chunk.length,\n                buffer = this.ensureBuffer(bufferLength + n);\n              for (var i = 0; i < n; i++) {\n                buffer[bufferLength++] = chunk[i];\n              }\n              this.bufferLength = bufferLength;\n            }\n          }]);\n          return DecryptStream;\n        }(_decode_stream.DecodeStream);\n        exports.DecryptStream = DecryptStream;\n\n        /***/\n      }, /* 69 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Catalog = void 0;\n        var _core_utils = __w_pdfjs_require__(6);\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _name_number_tree = __w_pdfjs_require__(70);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _cleanup_helper = __w_pdfjs_require__(71);\n        var _colorspace = __w_pdfjs_require__(14);\n        var _file_spec = __w_pdfjs_require__(72);\n        var _image_utils = __w_pdfjs_require__(59);\n        var _metadata_parser = __w_pdfjs_require__(73);\n        var _struct_tree = __w_pdfjs_require__(74);\n        function fetchDestination(dest) {\n          if (dest instanceof _primitives.Dict) {\n            dest = dest.get(\"D\");\n          }\n          return Array.isArray(dest) ? dest : null;\n        }\n        var Catalog = /*#__PURE__*/function () {\n          function Catalog(pdfManager, xref) {\n            _classCallCheck(this, Catalog);\n            this.pdfManager = pdfManager;\n            this.xref = xref;\n            this._catDict = xref.getCatalogObj();\n            if (!(this._catDict instanceof _primitives.Dict)) {\n              throw new _util.FormatError(\"Catalog object is not a dictionary.\");\n            }\n            this.toplevelPagesDict;\n            this._actualNumPages = null;\n            this.fontCache = new _primitives.RefSetCache();\n            this.builtInCMapCache = new Map();\n            this.standardFontDataCache = new Map();\n            this.globalImageCache = new _image_utils.GlobalImageCache();\n            this.pageKidsCountCache = new _primitives.RefSetCache();\n            this.pageIndexCache = new _primitives.RefSetCache();\n            this.nonBlendModesSet = new _primitives.RefSet();\n          }\n          _createClass(Catalog, [{\n            key: \"_readMarkInfo\",\n            value: function _readMarkInfo() {\n              var obj = this._catDict.get(\"MarkInfo\");\n              if (!(obj instanceof _primitives.Dict)) {\n                return null;\n              }\n              var markInfo = {\n                Marked: false,\n                UserProperties: false,\n                Suspects: false\n              };\n              for (var key in markInfo) {\n                var value = obj.get(key);\n                if (typeof value === \"boolean\") {\n                  markInfo[key] = value;\n                }\n              }\n              return markInfo;\n            }\n          }, {\n            key: \"_readStructTreeRoot\",\n            value: function _readStructTreeRoot() {\n              var obj = this._catDict.get(\"StructTreeRoot\");\n              if (!(obj instanceof _primitives.Dict)) {\n                return null;\n              }\n              var root = new _struct_tree.StructTreeRoot(obj);\n              root.init();\n              return root;\n            }\n          }, {\n            key: \"_readDocumentOutline\",\n            value: function _readDocumentOutline() {\n              var obj = this._catDict.get(\"Outlines\");\n              if (!(obj instanceof _primitives.Dict)) {\n                return null;\n              }\n              obj = obj.getRaw(\"First\");\n              if (!(obj instanceof _primitives.Ref)) {\n                return null;\n              }\n              var root = {\n                items: []\n              };\n              var queue = [{\n                obj: obj,\n                parent: root\n              }];\n              var processed = new _primitives.RefSet();\n              processed.put(obj);\n              var xref = this.xref,\n                blackColor = new Uint8ClampedArray(3);\n              while (queue.length > 0) {\n                var i = queue.shift();\n                var outlineDict = xref.fetchIfRef(i.obj);\n                if (outlineDict === null) {\n                  continue;\n                }\n                if (!outlineDict.has(\"Title\")) {\n                  throw new _util.FormatError(\"Invalid outline item encountered.\");\n                }\n                var data = {\n                  url: null,\n                  dest: null\n                };\n                Catalog.parseDestDictionary({\n                  destDict: outlineDict,\n                  resultObj: data,\n                  docBaseUrl: this.pdfManager.docBaseUrl\n                });\n                var title = outlineDict.get(\"Title\");\n                var flags = outlineDict.get(\"F\") || 0;\n                var color = outlineDict.getArray(\"C\");\n                var count = outlineDict.get(\"Count\");\n                var rgbColor = blackColor;\n                if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {\n                  rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);\n                }\n                var outlineItem = {\n                  dest: data.dest,\n                  url: data.url,\n                  unsafeUrl: data.unsafeUrl,\n                  newWindow: data.newWindow,\n                  title: (0, _util.stringToPDFString)(title),\n                  color: rgbColor,\n                  count: Number.isInteger(count) ? count : undefined,\n                  bold: !!(flags & 2),\n                  italic: !!(flags & 1),\n                  items: []\n                };\n                i.parent.items.push(outlineItem);\n                obj = outlineDict.getRaw(\"First\");\n                if (obj instanceof _primitives.Ref && !processed.has(obj)) {\n                  queue.push({\n                    obj: obj,\n                    parent: outlineItem\n                  });\n                  processed.put(obj);\n                }\n                obj = outlineDict.getRaw(\"Next\");\n                if (obj instanceof _primitives.Ref && !processed.has(obj)) {\n                  queue.push({\n                    obj: obj,\n                    parent: i.parent\n                  });\n                  processed.put(obj);\n                }\n              }\n              return root.items.length > 0 ? root.items : null;\n            }\n          }, {\n            key: \"_readPermissions\",\n            value: function _readPermissions() {\n              var encrypt = this.xref.trailer.get(\"Encrypt\");\n              if (!(encrypt instanceof _primitives.Dict)) {\n                return null;\n              }\n              var flags = encrypt.get(\"P\");\n              if (typeof flags !== \"number\") {\n                return null;\n              }\n              flags += Math.pow(2, 32);\n              var permissions = [];\n              for (var key in _util.PermissionFlag) {\n                var value = _util.PermissionFlag[key];\n                if (flags & value) {\n                  permissions.push(value);\n                }\n              }\n              return permissions;\n            }\n          }, {\n            key: \"_readOptionalContentConfig\",\n            value: function _readOptionalContentConfig(config, contentGroupRefs) {\n              function parseOnOff(refs) {\n                var onParsed = [];\n                if (Array.isArray(refs)) {\n                  var _iterator101 = _createForOfIteratorHelper(refs),\n                    _step101;\n                  try {\n                    for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {\n                      var value = _step101.value;\n                      if (!(value instanceof _primitives.Ref)) {\n                        continue;\n                      }\n                      if (contentGroupRefs.includes(value)) {\n                        onParsed.push(value.toString());\n                      }\n                    }\n                  } catch (err) {\n                    _iterator101.e(err);\n                  } finally {\n                    _iterator101.f();\n                  }\n                }\n                return onParsed;\n              }\n              function parseOrder(refs) {\n                var nestedLevels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                if (!Array.isArray(refs)) {\n                  return null;\n                }\n                var order = [];\n                var _iterator102 = _createForOfIteratorHelper(refs),\n                  _step102;\n                try {\n                  for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {\n                    var value = _step102.value;\n                    if (value instanceof _primitives.Ref && contentGroupRefs.includes(value)) {\n                      parsedOrderRefs.put(value);\n                      order.push(value.toString());\n                      continue;\n                    }\n                    var nestedOrder = parseNestedOrder(value, nestedLevels);\n                    if (nestedOrder) {\n                      order.push(nestedOrder);\n                    }\n                  }\n                } catch (err) {\n                  _iterator102.e(err);\n                } finally {\n                  _iterator102.f();\n                }\n                if (nestedLevels > 0) {\n                  return order;\n                }\n                var hiddenGroups = [];\n                var _iterator103 = _createForOfIteratorHelper(contentGroupRefs),\n                  _step103;\n                try {\n                  for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {\n                    var groupRef = _step103.value;\n                    if (parsedOrderRefs.has(groupRef)) {\n                      continue;\n                    }\n                    hiddenGroups.push(groupRef.toString());\n                  }\n                } catch (err) {\n                  _iterator103.e(err);\n                } finally {\n                  _iterator103.f();\n                }\n                if (hiddenGroups.length) {\n                  order.push({\n                    name: null,\n                    order: hiddenGroups\n                  });\n                }\n                return order;\n              }\n              function parseNestedOrder(ref, nestedLevels) {\n                if (++nestedLevels > MAX_NESTED_LEVELS) {\n                  (0, _util.warn)(\"parseNestedOrder - reached MAX_NESTED_LEVELS.\");\n                  return null;\n                }\n                var value = xref.fetchIfRef(ref);\n                if (!Array.isArray(value)) {\n                  return null;\n                }\n                var nestedName = xref.fetchIfRef(value[0]);\n                if (typeof nestedName !== \"string\") {\n                  return null;\n                }\n                var nestedOrder = parseOrder(value.slice(1), nestedLevels);\n                if (!nestedOrder || !nestedOrder.length) {\n                  return null;\n                }\n                return {\n                  name: (0, _util.stringToPDFString)(nestedName),\n                  order: nestedOrder\n                };\n              }\n              var xref = this.xref,\n                parsedOrderRefs = new _primitives.RefSet(),\n                MAX_NESTED_LEVELS = 10;\n              return {\n                name: typeof config.get(\"Name\") === \"string\" ? (0, _util.stringToPDFString)(config.get(\"Name\")) : null,\n                creator: typeof config.get(\"Creator\") === \"string\" ? (0, _util.stringToPDFString)(config.get(\"Creator\")) : null,\n                baseState: config.get(\"BaseState\") instanceof _primitives.Name ? config.get(\"BaseState\").name : null,\n                on: parseOnOff(config.get(\"ON\")),\n                off: parseOnOff(config.get(\"OFF\")),\n                order: parseOrder(config.get(\"Order\")),\n                groups: null\n              };\n            }\n          }, {\n            key: \"setActualNumPages\",\n            value: function setActualNumPages() {\n              var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              this._actualNumPages = num;\n            }\n          }, {\n            key: \"getDestination\",\n            value: function getDestination(id) {\n              var obj = this._readDests();\n              if (obj instanceof _name_number_tree.NameTree) {\n                var dest = fetchDestination(obj.get(id));\n                if (dest) {\n                  return dest;\n                }\n                var allDest = this.destinations[id];\n                if (allDest) {\n                  (0, _util.warn)(\"Found \\\"\".concat(id, \"\\\" at an incorrect position in the NameTree.\"));\n                  return allDest;\n                }\n              } else if (obj instanceof _primitives.Dict) {\n                var _dest = fetchDestination(obj.get(id));\n                if (_dest) {\n                  return _dest;\n                }\n              }\n              return null;\n            }\n          }, {\n            key: \"_readDests\",\n            value: function _readDests() {\n              var obj = this._catDict.get(\"Names\");\n              if (obj && obj.has(\"Dests\")) {\n                return new _name_number_tree.NameTree(obj.getRaw(\"Dests\"), this.xref);\n              } else if (this._catDict.has(\"Dests\")) {\n                return this._catDict.get(\"Dests\");\n              }\n              return undefined;\n            }\n          }, {\n            key: \"_readPageLabels\",\n            value: function _readPageLabels() {\n              var obj = this._catDict.getRaw(\"PageLabels\");\n              if (!obj) {\n                return null;\n              }\n              var pageLabels = new Array(this.numPages);\n              var style = null,\n                prefix = \"\";\n              var numberTree = new _name_number_tree.NumberTree(obj, this.xref);\n              var nums = numberTree.getAll();\n              var currentLabel = \"\",\n                currentIndex = 1;\n              for (var i = 0, ii = this.numPages; i < ii; i++) {\n                var labelDict = nums.get(i);\n                if (labelDict !== undefined) {\n                  if (!(labelDict instanceof _primitives.Dict)) {\n                    throw new _util.FormatError(\"PageLabel is not a dictionary.\");\n                  }\n                  if (labelDict.has(\"Type\") && !(0, _primitives.isName)(labelDict.get(\"Type\"), \"PageLabel\")) {\n                    throw new _util.FormatError(\"Invalid type in PageLabel dictionary.\");\n                  }\n                  if (labelDict.has(\"S\")) {\n                    var s = labelDict.get(\"S\");\n                    if (!(s instanceof _primitives.Name)) {\n                      throw new _util.FormatError(\"Invalid style in PageLabel dictionary.\");\n                    }\n                    style = s.name;\n                  } else {\n                    style = null;\n                  }\n                  if (labelDict.has(\"P\")) {\n                    var p = labelDict.get(\"P\");\n                    if (typeof p !== \"string\") {\n                      throw new _util.FormatError(\"Invalid prefix in PageLabel dictionary.\");\n                    }\n                    prefix = (0, _util.stringToPDFString)(p);\n                  } else {\n                    prefix = \"\";\n                  }\n                  if (labelDict.has(\"St\")) {\n                    var st = labelDict.get(\"St\");\n                    if (!(Number.isInteger(st) && st >= 1)) {\n                      throw new _util.FormatError(\"Invalid start in PageLabel dictionary.\");\n                    }\n                    currentIndex = st;\n                  } else {\n                    currentIndex = 1;\n                  }\n                }\n                switch (style) {\n                  case \"D\":\n                    currentLabel = currentIndex;\n                    break;\n                  case \"R\":\n                  case \"r\":\n                    currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === \"r\");\n                    break;\n                  case \"A\":\n                  case \"a\":\n                    var LIMIT = 26;\n                    var A_UPPER_CASE = 0x41,\n                      A_LOWER_CASE = 0x61;\n                    var baseCharCode = style === \"a\" ? A_LOWER_CASE : A_UPPER_CASE;\n                    var letterIndex = currentIndex - 1;\n                    var character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);\n                    currentLabel = character.repeat(Math.floor(letterIndex / LIMIT) + 1);\n                    break;\n                  default:\n                    if (style) {\n                      throw new _util.FormatError(\"Invalid style \\\"\".concat(style, \"\\\" in PageLabel dictionary.\"));\n                    }\n                    currentLabel = \"\";\n                }\n                pageLabels[i] = prefix + currentLabel;\n                currentIndex++;\n              }\n              return pageLabels;\n            }\n          }, {\n            key: \"_collectJavaScript\",\n            value: function _collectJavaScript() {\n              var obj = this._catDict.get(\"Names\");\n              var javaScript = null;\n              function appendIfJavaScriptDict(name, jsDict) {\n                if (!(jsDict instanceof _primitives.Dict)) {\n                  return;\n                }\n                if (!(0, _primitives.isName)(jsDict.get(\"S\"), \"JavaScript\")) {\n                  return;\n                }\n                var js = jsDict.get(\"JS\");\n                if (js instanceof _base_stream.BaseStream) {\n                  js = js.getString();\n                } else if (typeof js !== \"string\") {\n                  return;\n                }\n                if (javaScript === null) {\n                  javaScript = new Map();\n                }\n                js = (0, _util.stringToPDFString)(js).replace(/\\u0000/g, \"\");\n                javaScript.set(name, js);\n              }\n              if (obj instanceof _primitives.Dict && obj.has(\"JavaScript\")) {\n                var nameTree = new _name_number_tree.NameTree(obj.getRaw(\"JavaScript\"), this.xref);\n                var _iterator104 = _createForOfIteratorHelper(nameTree.getAll()),\n                  _step104;\n                try {\n                  for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {\n                    var _step104$value = _slicedToArray(_step104.value, 2),\n                      key = _step104$value[0],\n                      value = _step104$value[1];\n                    appendIfJavaScriptDict((0, _util.stringToPDFString)(key), value);\n                  }\n                } catch (err) {\n                  _iterator104.e(err);\n                } finally {\n                  _iterator104.f();\n                }\n              }\n              var openAction = this._catDict.get(\"OpenAction\");\n              if (openAction) {\n                appendIfJavaScriptDict(\"OpenAction\", openAction);\n              }\n              return javaScript;\n            }\n          }, {\n            key: \"fontFallback\",\n            value: function () {\n              var _fontFallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(id, handler) {\n                var translatedFonts, _iterator105, _step105, translatedFont;\n                return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n                  while (1) {\n                    switch (_context52.prev = _context52.next) {\n                      case 0:\n                        _context52.next = 2;\n                        return Promise.all(this.fontCache);\n                      case 2:\n                        translatedFonts = _context52.sent;\n                        _iterator105 = _createForOfIteratorHelper(translatedFonts);\n                        _context52.prev = 4;\n                        _iterator105.s();\n                      case 6:\n                        if ((_step105 = _iterator105.n()).done) {\n                          _context52.next = 13;\n                          break;\n                        }\n                        translatedFont = _step105.value;\n                        if (!(translatedFont.loadedName === id)) {\n                          _context52.next = 11;\n                          break;\n                        }\n                        translatedFont.fallback(handler);\n                        return _context52.abrupt(\"return\");\n                      case 11:\n                        _context52.next = 6;\n                        break;\n                      case 13:\n                        _context52.next = 18;\n                        break;\n                      case 15:\n                        _context52.prev = 15;\n                        _context52.t0 = _context52[\"catch\"](4);\n                        _iterator105.e(_context52.t0);\n                      case 18:\n                        _context52.prev = 18;\n                        _iterator105.f();\n                        return _context52.finish(18);\n                      case 21:\n                      case \"end\":\n                        return _context52.stop();\n                    }\n                  }\n                }, _callee52, this, [[4, 15, 18, 21]]);\n              }));\n              function fontFallback(_x120, _x121) {\n                return _fontFallback.apply(this, arguments);\n              }\n              return fontFallback;\n            }()\n          }, {\n            key: \"cleanup\",\n            value: function () {\n              var _cleanup2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {\n                var manuallyTriggered,\n                  translatedFonts,\n                  _iterator106,\n                  _step106,\n                  dict,\n                  _args54 = arguments;\n                return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n                  while (1) {\n                    switch (_context53.prev = _context53.next) {\n                      case 0:\n                        manuallyTriggered = _args54.length > 0 && _args54[0] !== undefined ? _args54[0] : false;\n                        (0, _cleanup_helper.clearGlobalCaches)();\n                        this.globalImageCache.clear(manuallyTriggered);\n                        this.pageKidsCountCache.clear();\n                        this.pageIndexCache.clear();\n                        this.nonBlendModesSet.clear();\n                        _context53.next = 8;\n                        return Promise.all(this.fontCache);\n                      case 8:\n                        translatedFonts = _context53.sent;\n                        _iterator106 = _createForOfIteratorHelper(translatedFonts);\n                        try {\n                          for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {\n                            dict = _step106.value.dict;\n                            delete dict.cacheKey;\n                          }\n                        } catch (err) {\n                          _iterator106.e(err);\n                        } finally {\n                          _iterator106.f();\n                        }\n                        this.fontCache.clear();\n                        this.builtInCMapCache.clear();\n                        this.standardFontDataCache.clear();\n                      case 14:\n                      case \"end\":\n                        return _context53.stop();\n                    }\n                  }\n                }, _callee53, this);\n              }));\n              function cleanup() {\n                return _cleanup2.apply(this, arguments);\n              }\n              return cleanup;\n            }()\n          }, {\n            key: \"getPageDict\",\n            value: function () {\n              var _getPageDict = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(pageIndex) {\n                var nodesToVisit, visitedNodes, pagesRef, xref, pageKidsCountCache, pageIndexCache, currentPageIndex, currentNode, _count, obj, type, objId, count, kids, _type2, last;\n                return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n                  while (1) {\n                    switch (_context54.prev = _context54.next) {\n                      case 0:\n                        nodesToVisit = [this.toplevelPagesDict];\n                        visitedNodes = new _primitives.RefSet();\n                        pagesRef = this._catDict.getRaw(\"Pages\");\n                        if (pagesRef instanceof _primitives.Ref) {\n                          visitedNodes.put(pagesRef);\n                        }\n                        xref = this.xref, pageKidsCountCache = this.pageKidsCountCache, pageIndexCache = this.pageIndexCache;\n                        currentPageIndex = 0;\n                      case 6:\n                        if (!nodesToVisit.length) {\n                          _context54.next = 67;\n                          break;\n                        }\n                        currentNode = nodesToVisit.pop();\n                        if (!(currentNode instanceof _primitives.Ref)) {\n                          _context54.next = 34;\n                          break;\n                        }\n                        _count = pageKidsCountCache.get(currentNode);\n                        if (!(_count >= 0 && currentPageIndex + _count <= pageIndex)) {\n                          _context54.next = 13;\n                          break;\n                        }\n                        currentPageIndex += _count;\n                        return _context54.abrupt(\"continue\", 6);\n                      case 13:\n                        if (!visitedNodes.has(currentNode)) {\n                          _context54.next = 15;\n                          break;\n                        }\n                        throw new _util.FormatError(\"Pages tree contains circular reference.\");\n                      case 15:\n                        visitedNodes.put(currentNode);\n                        _context54.next = 18;\n                        return xref.fetchAsync(currentNode);\n                      case 18:\n                        obj = _context54.sent;\n                        if (!(obj instanceof _primitives.Dict)) {\n                          _context54.next = 32;\n                          break;\n                        }\n                        type = obj.getRaw(\"Type\");\n                        if (!(type instanceof _primitives.Ref)) {\n                          _context54.next = 25;\n                          break;\n                        }\n                        _context54.next = 24;\n                        return xref.fetchAsync(type);\n                      case 24:\n                        type = _context54.sent;\n                      case 25:\n                        if (!((0, _primitives.isName)(type, \"Page\") || !obj.has(\"Kids\"))) {\n                          _context54.next = 32;\n                          break;\n                        }\n                        if (!pageKidsCountCache.has(currentNode)) {\n                          pageKidsCountCache.put(currentNode, 1);\n                        }\n                        if (!pageIndexCache.has(currentNode)) {\n                          pageIndexCache.put(currentNode, currentPageIndex);\n                        }\n                        if (!(currentPageIndex === pageIndex)) {\n                          _context54.next = 30;\n                          break;\n                        }\n                        return _context54.abrupt(\"return\", [obj, currentNode]);\n                      case 30:\n                        currentPageIndex++;\n                        return _context54.abrupt(\"continue\", 6);\n                      case 32:\n                        nodesToVisit.push(obj);\n                        return _context54.abrupt(\"continue\", 6);\n                      case 34:\n                        if (currentNode instanceof _primitives.Dict) {\n                          _context54.next = 36;\n                          break;\n                        }\n                        throw new _util.FormatError(\"Page dictionary kid reference points to wrong type of object.\");\n                      case 36:\n                        objId = currentNode.objId;\n                        count = currentNode.getRaw(\"Count\");\n                        if (!(count instanceof _primitives.Ref)) {\n                          _context54.next = 42;\n                          break;\n                        }\n                        _context54.next = 41;\n                        return xref.fetchAsync(count);\n                      case 41:\n                        count = _context54.sent;\n                      case 42:\n                        if (!(Number.isInteger(count) && count >= 0)) {\n                          _context54.next = 47;\n                          break;\n                        }\n                        if (objId && !pageKidsCountCache.has(objId)) {\n                          pageKidsCountCache.put(objId, count);\n                        }\n                        if (!(currentPageIndex + count <= pageIndex)) {\n                          _context54.next = 47;\n                          break;\n                        }\n                        currentPageIndex += count;\n                        return _context54.abrupt(\"continue\", 6);\n                      case 47:\n                        kids = currentNode.getRaw(\"Kids\");\n                        if (!(kids instanceof _primitives.Ref)) {\n                          _context54.next = 52;\n                          break;\n                        }\n                        _context54.next = 51;\n                        return xref.fetchAsync(kids);\n                      case 51:\n                        kids = _context54.sent;\n                      case 52:\n                        if (Array.isArray(kids)) {\n                          _context54.next = 64;\n                          break;\n                        }\n                        _type2 = currentNode.getRaw(\"Type\");\n                        if (!(_type2 instanceof _primitives.Ref)) {\n                          _context54.next = 58;\n                          break;\n                        }\n                        _context54.next = 57;\n                        return xref.fetchAsync(_type2);\n                      case 57:\n                        _type2 = _context54.sent;\n                      case 58:\n                        if (!((0, _primitives.isName)(_type2, \"Page\") || !currentNode.has(\"Kids\"))) {\n                          _context54.next = 63;\n                          break;\n                        }\n                        if (!(currentPageIndex === pageIndex)) {\n                          _context54.next = 61;\n                          break;\n                        }\n                        return _context54.abrupt(\"return\", [currentNode, null]);\n                      case 61:\n                        currentPageIndex++;\n                        return _context54.abrupt(\"continue\", 6);\n                      case 63:\n                        throw new _util.FormatError(\"Page dictionary kids object is not an array.\");\n                      case 64:\n                        for (last = kids.length - 1; last >= 0; last--) {\n                          nodesToVisit.push(kids[last]);\n                        }\n                        _context54.next = 6;\n                        break;\n                      case 67:\n                        throw new Error(\"Page index \".concat(pageIndex, \" not found.\"));\n                      case 68:\n                      case \"end\":\n                        return _context54.stop();\n                    }\n                  }\n                }, _callee54, this);\n              }));\n              function getPageDict(_x122) {\n                return _getPageDict.apply(this, arguments);\n              }\n              return getPageDict;\n            }()\n          }, {\n            key: \"getAllPageDicts\",\n            value: function () {\n              var _getAllPageDicts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {\n                var recoveryMode,\n                  queue,\n                  visitedNodes,\n                  pagesRef,\n                  map,\n                  xref,\n                  pageIndexCache,\n                  pageIndex,\n                  addPageDict,\n                  addPageError,\n                  queueItem,\n                  currentNode,\n                  posInKids,\n                  kids,\n                  kidObj,\n                  obj,\n                  type,\n                  _args56 = arguments;\n                return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n                  while (1) {\n                    switch (_context55.prev = _context55.next) {\n                      case 0:\n                        addPageError = function _addPageError(error) {\n                          if (error instanceof _core_utils.XRefEntryException && !recoveryMode) {\n                            throw error;\n                          }\n                          map.set(pageIndex++, [error, null]);\n                        };\n                        addPageDict = function _addPageDict(pageDict, pageRef) {\n                          if (pageRef && !pageIndexCache.has(pageRef)) {\n                            pageIndexCache.put(pageRef, pageIndex);\n                          }\n                          map.set(pageIndex++, [pageDict, pageRef]);\n                        };\n                        recoveryMode = _args56.length > 0 && _args56[0] !== undefined ? _args56[0] : false;\n                        queue = [{\n                          currentNode: this.toplevelPagesDict,\n                          posInKids: 0\n                        }];\n                        visitedNodes = new _primitives.RefSet();\n                        pagesRef = this._catDict.getRaw(\"Pages\");\n                        if (pagesRef instanceof _primitives.Ref) {\n                          visitedNodes.put(pagesRef);\n                        }\n                        map = new Map(), xref = this.xref, pageIndexCache = this.pageIndexCache;\n                        pageIndex = 0;\n                      case 9:\n                        if (!(queue.length > 0)) {\n                          _context55.next = 69;\n                          break;\n                        }\n                        queueItem = queue.at(-1);\n                        currentNode = queueItem.currentNode, posInKids = queueItem.posInKids;\n                        kids = currentNode.getRaw(\"Kids\");\n                        if (!(kids instanceof _primitives.Ref)) {\n                          _context55.next = 24;\n                          break;\n                        }\n                        _context55.prev = 14;\n                        _context55.next = 17;\n                        return xref.fetchAsync(kids);\n                      case 17:\n                        kids = _context55.sent;\n                        _context55.next = 24;\n                        break;\n                      case 20:\n                        _context55.prev = 20;\n                        _context55.t0 = _context55[\"catch\"](14);\n                        addPageError(_context55.t0);\n                        return _context55.abrupt(\"break\", 69);\n                      case 24:\n                        if (Array.isArray(kids)) {\n                          _context55.next = 27;\n                          break;\n                        }\n                        addPageError(new _util.FormatError(\"Page dictionary kids object is not an array.\"));\n                        return _context55.abrupt(\"break\", 69);\n                      case 27:\n                        if (!(posInKids >= kids.length)) {\n                          _context55.next = 30;\n                          break;\n                        }\n                        queue.pop();\n                        return _context55.abrupt(\"continue\", 9);\n                      case 30:\n                        kidObj = kids[posInKids];\n                        obj = void 0;\n                        if (!(kidObj instanceof _primitives.Ref)) {\n                          _context55.next = 49;\n                          break;\n                        }\n                        if (!visitedNodes.has(kidObj)) {\n                          _context55.next = 36;\n                          break;\n                        }\n                        addPageError(new _util.FormatError(\"Pages tree contains circular reference.\"));\n                        return _context55.abrupt(\"break\", 69);\n                      case 36:\n                        visitedNodes.put(kidObj);\n                        _context55.prev = 37;\n                        _context55.next = 40;\n                        return xref.fetchAsync(kidObj);\n                      case 40:\n                        obj = _context55.sent;\n                        _context55.next = 47;\n                        break;\n                      case 43:\n                        _context55.prev = 43;\n                        _context55.t1 = _context55[\"catch\"](37);\n                        addPageError(_context55.t1);\n                        return _context55.abrupt(\"break\", 69);\n                      case 47:\n                        _context55.next = 50;\n                        break;\n                      case 49:\n                        obj = kidObj;\n                      case 50:\n                        if (obj instanceof _primitives.Dict) {\n                          _context55.next = 53;\n                          break;\n                        }\n                        addPageError(new _util.FormatError(\"Page dictionary kid reference points to wrong type of object.\"));\n                        return _context55.abrupt(\"break\", 69);\n                      case 53:\n                        type = obj.getRaw(\"Type\");\n                        if (!(type instanceof _primitives.Ref)) {\n                          _context55.next = 65;\n                          break;\n                        }\n                        _context55.prev = 55;\n                        _context55.next = 58;\n                        return xref.fetchAsync(type);\n                      case 58:\n                        type = _context55.sent;\n                        _context55.next = 65;\n                        break;\n                      case 61:\n                        _context55.prev = 61;\n                        _context55.t2 = _context55[\"catch\"](55);\n                        addPageError(_context55.t2);\n                        return _context55.abrupt(\"break\", 69);\n                      case 65:\n                        if ((0, _primitives.isName)(type, \"Page\") || !obj.has(\"Kids\")) {\n                          addPageDict(obj, kidObj instanceof _primitives.Ref ? kidObj : null);\n                        } else {\n                          queue.push({\n                            currentNode: obj,\n                            posInKids: 0\n                          });\n                        }\n                        queueItem.posInKids++;\n                        _context55.next = 9;\n                        break;\n                      case 69:\n                        return _context55.abrupt(\"return\", map);\n                      case 70:\n                      case \"end\":\n                        return _context55.stop();\n                    }\n                  }\n                }, _callee55, this, [[14, 20], [37, 43], [55, 61]]);\n              }));\n              function getAllPageDicts() {\n                return _getAllPageDicts.apply(this, arguments);\n              }\n              return getAllPageDicts;\n            }()\n          }, {\n            key: \"getPageIndex\",\n            value: function getPageIndex(pageRef) {\n              var _this96 = this;\n              var cachedPageIndex = this.pageIndexCache.get(pageRef);\n              if (cachedPageIndex !== undefined) {\n                return Promise.resolve(cachedPageIndex);\n              }\n              var xref = this.xref;\n              function pagesBeforeRef(kidRef) {\n                var total = 0,\n                  parentRef;\n                return xref.fetchAsync(kidRef).then(function (node) {\n                  if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, \"Page\") && !(node instanceof _primitives.Dict && !node.has(\"Type\") && node.has(\"Contents\"))) {\n                    throw new _util.FormatError(\"The reference does not point to a /Page dictionary.\");\n                  }\n                  if (!node) {\n                    return null;\n                  }\n                  if (!(node instanceof _primitives.Dict)) {\n                    throw new _util.FormatError(\"Node must be a dictionary.\");\n                  }\n                  parentRef = node.getRaw(\"Parent\");\n                  return node.getAsync(\"Parent\");\n                }).then(function (parent) {\n                  if (!parent) {\n                    return null;\n                  }\n                  if (!(parent instanceof _primitives.Dict)) {\n                    throw new _util.FormatError(\"Parent must be a dictionary.\");\n                  }\n                  return parent.getAsync(\"Kids\");\n                }).then(function (kids) {\n                  if (!kids) {\n                    return null;\n                  }\n                  var kidPromises = [];\n                  var found = false;\n                  for (var i = 0, ii = kids.length; i < ii; i++) {\n                    var kid = kids[i];\n                    if (!(kid instanceof _primitives.Ref)) {\n                      throw new _util.FormatError(\"Kid must be a reference.\");\n                    }\n                    if ((0, _primitives.isRefsEqual)(kid, kidRef)) {\n                      found = true;\n                      break;\n                    }\n                    kidPromises.push(xref.fetchAsync(kid).then(function (obj) {\n                      if (!(obj instanceof _primitives.Dict)) {\n                        throw new _util.FormatError(\"Kid node must be a dictionary.\");\n                      }\n                      if (obj.has(\"Count\")) {\n                        total += obj.get(\"Count\");\n                      } else {\n                        total++;\n                      }\n                    }));\n                  }\n                  if (!found) {\n                    throw new _util.FormatError(\"Kid reference not found in parent's kids.\");\n                  }\n                  return Promise.all(kidPromises).then(function () {\n                    return [total, parentRef];\n                  });\n                });\n              }\n              var total = 0;\n              var next = function next(ref) {\n                return pagesBeforeRef(ref).then(function (args) {\n                  if (!args) {\n                    _this96.pageIndexCache.put(pageRef, total);\n                    return total;\n                  }\n                  var _args57 = _slicedToArray(args, 2),\n                    count = _args57[0],\n                    parentRef = _args57[1];\n                  total += count;\n                  return next(parentRef);\n                });\n              };\n              return next(pageRef);\n            }\n          }, {\n            key: \"version\",\n            get: function get() {\n              var version = this._catDict.get(\"Version\");\n              return (0, _util.shadow)(this, \"version\", version instanceof _primitives.Name ? version.name : null);\n            }\n          }, {\n            key: \"lang\",\n            get: function get() {\n              var lang = this._catDict.get(\"Lang\");\n              return (0, _util.shadow)(this, \"lang\", typeof lang === \"string\" ? (0, _util.stringToPDFString)(lang) : null);\n            }\n          }, {\n            key: \"needsRendering\",\n            get: function get() {\n              var needsRendering = this._catDict.get(\"NeedsRendering\");\n              return (0, _util.shadow)(this, \"needsRendering\", typeof needsRendering === \"boolean\" ? needsRendering : false);\n            }\n          }, {\n            key: \"collection\",\n            get: function get() {\n              var collection = null;\n              try {\n                var obj = this._catDict.get(\"Collection\");\n                if (obj instanceof _primitives.Dict && obj.size > 0) {\n                  collection = obj;\n                }\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.info)(\"Cannot fetch Collection entry; assuming no collection is present.\");\n              }\n              return (0, _util.shadow)(this, \"collection\", collection);\n            }\n          }, {\n            key: \"acroForm\",\n            get: function get() {\n              var acroForm = null;\n              try {\n                var obj = this._catDict.get(\"AcroForm\");\n                if (obj instanceof _primitives.Dict && obj.size > 0) {\n                  acroForm = obj;\n                }\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.info)(\"Cannot fetch AcroForm entry; assuming no forms are present.\");\n              }\n              return (0, _util.shadow)(this, \"acroForm\", acroForm);\n            }\n          }, {\n            key: \"acroFormRef\",\n            get: function get() {\n              var value = this._catDict.getRaw(\"AcroForm\");\n              return (0, _util.shadow)(this, \"acroFormRef\", value instanceof _primitives.Ref ? value : null);\n            }\n          }, {\n            key: \"metadata\",\n            get: function get() {\n              var streamRef = this._catDict.getRaw(\"Metadata\");\n              if (!(streamRef instanceof _primitives.Ref)) {\n                return (0, _util.shadow)(this, \"metadata\", null);\n              }\n              var metadata = null;\n              try {\n                var suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);\n                var stream = this.xref.fetch(streamRef, suppressEncryption);\n                if (stream instanceof _base_stream.BaseStream && stream.dict instanceof _primitives.Dict) {\n                  var type = stream.dict.get(\"Type\");\n                  var subtype = stream.dict.get(\"Subtype\");\n                  if ((0, _primitives.isName)(type, \"Metadata\") && (0, _primitives.isName)(subtype, \"XML\")) {\n                    var data = (0, _util.stringToUTF8String)(stream.getString());\n                    if (data) {\n                      metadata = new _metadata_parser.MetadataParser(data).serializable;\n                    }\n                  }\n                }\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.info)(\"Skipping invalid Metadata: \\\"\".concat(ex, \"\\\".\"));\n              }\n              return (0, _util.shadow)(this, \"metadata\", metadata);\n            }\n          }, {\n            key: \"markInfo\",\n            get: function get() {\n              var markInfo = null;\n              try {\n                markInfo = this._readMarkInfo();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable to read mark info.\");\n              }\n              return (0, _util.shadow)(this, \"markInfo\", markInfo);\n            }\n          }, {\n            key: \"structTreeRoot\",\n            get: function get() {\n              var structTree = null;\n              try {\n                structTree = this._readStructTreeRoot();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable read to structTreeRoot info.\");\n              }\n              return (0, _util.shadow)(this, \"structTreeRoot\", structTree);\n            }\n          }, {\n            key: \"toplevelPagesDict\",\n            get: function get() {\n              var pagesObj = this._catDict.get(\"Pages\");\n              if (!(pagesObj instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"Invalid top-level pages dictionary.\");\n              }\n              return (0, _util.shadow)(this, \"toplevelPagesDict\", pagesObj);\n            }\n          }, {\n            key: \"documentOutline\",\n            get: function get() {\n              var obj = null;\n              try {\n                obj = this._readDocumentOutline();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable to read document outline.\");\n              }\n              return (0, _util.shadow)(this, \"documentOutline\", obj);\n            }\n          }, {\n            key: \"permissions\",\n            get: function get() {\n              var permissions = null;\n              try {\n                permissions = this._readPermissions();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable to read permissions.\");\n              }\n              return (0, _util.shadow)(this, \"permissions\", permissions);\n            }\n          }, {\n            key: \"optionalContentConfig\",\n            get: function get() {\n              var config = null;\n              try {\n                var properties = this._catDict.get(\"OCProperties\");\n                if (!properties) {\n                  return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n                }\n                var defaultConfig = properties.get(\"D\");\n                if (!defaultConfig) {\n                  return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n                }\n                var groupsData = properties.get(\"OCGs\");\n                if (!Array.isArray(groupsData)) {\n                  return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n                }\n                var groups = [];\n                var groupRefs = [];\n                var _iterator107 = _createForOfIteratorHelper(groupsData),\n                  _step107;\n                try {\n                  for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {\n                    var groupRef = _step107.value;\n                    if (!(groupRef instanceof _primitives.Ref)) {\n                      continue;\n                    }\n                    groupRefs.push(groupRef);\n                    var group = this.xref.fetchIfRef(groupRef);\n                    groups.push({\n                      id: groupRef.toString(),\n                      name: typeof group.get(\"Name\") === \"string\" ? (0, _util.stringToPDFString)(group.get(\"Name\")) : null,\n                      intent: typeof group.get(\"Intent\") === \"string\" ? (0, _util.stringToPDFString)(group.get(\"Intent\")) : null\n                    });\n                  }\n                } catch (err) {\n                  _iterator107.e(err);\n                } finally {\n                  _iterator107.f();\n                }\n                config = this._readOptionalContentConfig(defaultConfig, groupRefs);\n                config.groups = groups;\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable to read optional content config: \".concat(ex));\n              }\n              return (0, _util.shadow)(this, \"optionalContentConfig\", config);\n            }\n          }, {\n            key: \"hasActualNumPages\",\n            get: function get() {\n              return this._actualNumPages !== null;\n            }\n          }, {\n            key: \"_pagesCount\",\n            get: function get() {\n              var obj = this.toplevelPagesDict.get(\"Count\");\n              if (!Number.isInteger(obj)) {\n                throw new _util.FormatError(\"Page count in top-level pages dictionary is not an integer.\");\n              }\n              return (0, _util.shadow)(this, \"_pagesCount\", obj);\n            }\n          }, {\n            key: \"numPages\",\n            get: function get() {\n              return this.hasActualNumPages ? this._actualNumPages : this._pagesCount;\n            }\n          }, {\n            key: \"destinations\",\n            get: function get() {\n              var obj = this._readDests(),\n                dests = Object.create(null);\n              if (obj instanceof _name_number_tree.NameTree) {\n                var _iterator108 = _createForOfIteratorHelper(obj.getAll()),\n                  _step108;\n                try {\n                  for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {\n                    var _step108$value = _slicedToArray(_step108.value, 2),\n                      key = _step108$value[0],\n                      value = _step108$value[1];\n                    var dest = fetchDestination(value);\n                    if (dest) {\n                      dests[(0, _util.stringToPDFString)(key)] = dest;\n                    }\n                  }\n                } catch (err) {\n                  _iterator108.e(err);\n                } finally {\n                  _iterator108.f();\n                }\n              } else if (obj instanceof _primitives.Dict) {\n                obj.forEach(function (key, value) {\n                  var dest = fetchDestination(value);\n                  if (dest) {\n                    dests[key] = dest;\n                  }\n                });\n              }\n              return (0, _util.shadow)(this, \"destinations\", dests);\n            }\n          }, {\n            key: \"pageLabels\",\n            get: function get() {\n              var obj = null;\n              try {\n                obj = this._readPageLabels();\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"Unable to read page labels.\");\n              }\n              return (0, _util.shadow)(this, \"pageLabels\", obj);\n            }\n          }, {\n            key: \"pageLayout\",\n            get: function get() {\n              var obj = this._catDict.get(\"PageLayout\");\n              var pageLayout = \"\";\n              if (obj instanceof _primitives.Name) {\n                switch (obj.name) {\n                  case \"SinglePage\":\n                  case \"OneColumn\":\n                  case \"TwoColumnLeft\":\n                  case \"TwoColumnRight\":\n                  case \"TwoPageLeft\":\n                  case \"TwoPageRight\":\n                    pageLayout = obj.name;\n                }\n              }\n              return (0, _util.shadow)(this, \"pageLayout\", pageLayout);\n            }\n          }, {\n            key: \"pageMode\",\n            get: function get() {\n              var obj = this._catDict.get(\"PageMode\");\n              var pageMode = \"UseNone\";\n              if (obj instanceof _primitives.Name) {\n                switch (obj.name) {\n                  case \"UseNone\":\n                  case \"UseOutlines\":\n                  case \"UseThumbs\":\n                  case \"FullScreen\":\n                  case \"UseOC\":\n                  case \"UseAttachments\":\n                    pageMode = obj.name;\n                }\n              }\n              return (0, _util.shadow)(this, \"pageMode\", pageMode);\n            }\n          }, {\n            key: \"viewerPreferences\",\n            get: function get() {\n              var _this97 = this;\n              var obj = this._catDict.get(\"ViewerPreferences\");\n              if (!(obj instanceof _primitives.Dict)) {\n                return (0, _util.shadow)(this, \"viewerPreferences\", null);\n              }\n              var prefs = null;\n              var _iterator109 = _createForOfIteratorHelper(obj.getKeys()),\n                _step109;\n              try {\n                for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {\n                  var key = _step109.value;\n                  var value = obj.get(key);\n                  var prefValue = void 0;\n                  switch (key) {\n                    case \"HideToolbar\":\n                    case \"HideMenubar\":\n                    case \"HideWindowUI\":\n                    case \"FitWindow\":\n                    case \"CenterWindow\":\n                    case \"DisplayDocTitle\":\n                    case \"PickTrayByPDFSize\":\n                      if (typeof value === \"boolean\") {\n                        prefValue = value;\n                      }\n                      break;\n                    case \"NonFullScreenPageMode\":\n                      if (value instanceof _primitives.Name) {\n                        switch (value.name) {\n                          case \"UseNone\":\n                          case \"UseOutlines\":\n                          case \"UseThumbs\":\n                          case \"UseOC\":\n                            prefValue = value.name;\n                            break;\n                          default:\n                            prefValue = \"UseNone\";\n                        }\n                      }\n                      break;\n                    case \"Direction\":\n                      if (value instanceof _primitives.Name) {\n                        switch (value.name) {\n                          case \"L2R\":\n                          case \"R2L\":\n                            prefValue = value.name;\n                            break;\n                          default:\n                            prefValue = \"L2R\";\n                        }\n                      }\n                      break;\n                    case \"ViewArea\":\n                    case \"ViewClip\":\n                    case \"PrintArea\":\n                    case \"PrintClip\":\n                      if (value instanceof _primitives.Name) {\n                        switch (value.name) {\n                          case \"MediaBox\":\n                          case \"CropBox\":\n                          case \"BleedBox\":\n                          case \"TrimBox\":\n                          case \"ArtBox\":\n                            prefValue = value.name;\n                            break;\n                          default:\n                            prefValue = \"CropBox\";\n                        }\n                      }\n                      break;\n                    case \"PrintScaling\":\n                      if (value instanceof _primitives.Name) {\n                        switch (value.name) {\n                          case \"None\":\n                          case \"AppDefault\":\n                            prefValue = value.name;\n                            break;\n                          default:\n                            prefValue = \"AppDefault\";\n                        }\n                      }\n                      break;\n                    case \"Duplex\":\n                      if (value instanceof _primitives.Name) {\n                        switch (value.name) {\n                          case \"Simplex\":\n                          case \"DuplexFlipShortEdge\":\n                          case \"DuplexFlipLongEdge\":\n                            prefValue = value.name;\n                            break;\n                          default:\n                            prefValue = \"None\";\n                        }\n                      }\n                      break;\n                    case \"PrintPageRange\":\n                      if (Array.isArray(value) && value.length % 2 === 0) {\n                        var isValid = value.every(function (page, i, arr) {\n                          return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= _this97.numPages;\n                        });\n                        if (isValid) {\n                          prefValue = value;\n                        }\n                      }\n                      break;\n                    case \"NumCopies\":\n                      if (Number.isInteger(value) && value > 0) {\n                        prefValue = value;\n                      }\n                      break;\n                    default:\n                      (0, _util.warn)(\"Ignoring non-standard key in ViewerPreferences: \".concat(key, \".\"));\n                      continue;\n                  }\n                  if (prefValue === undefined) {\n                    (0, _util.warn)(\"Bad value, for key \\\"\".concat(key, \"\\\", in ViewerPreferences: \").concat(value, \".\"));\n                    continue;\n                  }\n                  if (!prefs) {\n                    prefs = Object.create(null);\n                  }\n                  prefs[key] = prefValue;\n                }\n              } catch (err) {\n                _iterator109.e(err);\n              } finally {\n                _iterator109.f();\n              }\n              return (0, _util.shadow)(this, \"viewerPreferences\", prefs);\n            }\n          }, {\n            key: \"openAction\",\n            get: function get() {\n              var obj = this._catDict.get(\"OpenAction\");\n              var openAction = Object.create(null);\n              if (obj instanceof _primitives.Dict) {\n                var destDict = new _primitives.Dict(this.xref);\n                destDict.set(\"A\", obj);\n                var resultObj = {\n                  url: null,\n                  dest: null,\n                  action: null\n                };\n                Catalog.parseDestDictionary({\n                  destDict: destDict,\n                  resultObj: resultObj\n                });\n                if (Array.isArray(resultObj.dest)) {\n                  openAction.dest = resultObj.dest;\n                } else if (resultObj.action) {\n                  openAction.action = resultObj.action;\n                }\n              } else if (Array.isArray(obj)) {\n                openAction.dest = obj;\n              }\n              return (0, _util.shadow)(this, \"openAction\", (0, _util.objectSize)(openAction) > 0 ? openAction : null);\n            }\n          }, {\n            key: \"attachments\",\n            get: function get() {\n              var obj = this._catDict.get(\"Names\");\n              var attachments = null;\n              if (obj instanceof _primitives.Dict && obj.has(\"EmbeddedFiles\")) {\n                var nameTree = new _name_number_tree.NameTree(obj.getRaw(\"EmbeddedFiles\"), this.xref);\n                var _iterator110 = _createForOfIteratorHelper(nameTree.getAll()),\n                  _step110;\n                try {\n                  for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {\n                    var _step110$value = _slicedToArray(_step110.value, 2),\n                      key = _step110$value[0],\n                      value = _step110$value[1];\n                    var fs = new _file_spec.FileSpec(value, this.xref);\n                    if (!attachments) {\n                      attachments = Object.create(null);\n                    }\n                    attachments[(0, _util.stringToPDFString)(key)] = fs.serializable;\n                  }\n                } catch (err) {\n                  _iterator110.e(err);\n                } finally {\n                  _iterator110.f();\n                }\n              }\n              return (0, _util.shadow)(this, \"attachments\", attachments);\n            }\n          }, {\n            key: \"xfaImages\",\n            get: function get() {\n              var obj = this._catDict.get(\"Names\");\n              var xfaImages = null;\n              if (obj instanceof _primitives.Dict && obj.has(\"XFAImages\")) {\n                var nameTree = new _name_number_tree.NameTree(obj.getRaw(\"XFAImages\"), this.xref);\n                var _iterator111 = _createForOfIteratorHelper(nameTree.getAll()),\n                  _step111;\n                try {\n                  for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {\n                    var _step111$value = _slicedToArray(_step111.value, 2),\n                      key = _step111$value[0],\n                      value = _step111$value[1];\n                    if (!xfaImages) {\n                      xfaImages = new _primitives.Dict(this.xref);\n                    }\n                    xfaImages.set((0, _util.stringToPDFString)(key), value);\n                  }\n                } catch (err) {\n                  _iterator111.e(err);\n                } finally {\n                  _iterator111.f();\n                }\n              }\n              return (0, _util.shadow)(this, \"xfaImages\", xfaImages);\n            }\n          }, {\n            key: \"javaScript\",\n            get: function get() {\n              var javaScript = this._collectJavaScript();\n              return (0, _util.shadow)(this, \"javaScript\", javaScript ? _toConsumableArray(javaScript.values()) : null);\n            }\n          }, {\n            key: \"jsActions\",\n            get: function get() {\n              var javaScript = this._collectJavaScript();\n              var actions = (0, _core_utils.collectActions)(this.xref, this._catDict, _util.DocumentActionEventType);\n              if (javaScript) {\n                if (!actions) {\n                  actions = Object.create(null);\n                }\n                var _iterator112 = _createForOfIteratorHelper(javaScript),\n                  _step112;\n                try {\n                  for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {\n                    var _step112$value = _slicedToArray(_step112.value, 2),\n                      key = _step112$value[0],\n                      val = _step112$value[1];\n                    if (key in actions) {\n                      actions[key].push(val);\n                    } else {\n                      actions[key] = [val];\n                    }\n                  }\n                } catch (err) {\n                  _iterator112.e(err);\n                } finally {\n                  _iterator112.f();\n                }\n              }\n              return (0, _util.shadow)(this, \"jsActions\", actions);\n            }\n          }, {\n            key: \"baseUrl\",\n            get: function get() {\n              var uri = this._catDict.get(\"URI\");\n              if (uri instanceof _primitives.Dict) {\n                var base = uri.get(\"Base\");\n                if (typeof base === \"string\") {\n                  var absoluteUrl = (0, _util.createValidAbsoluteUrl)(base, null, {\n                    tryConvertEncoding: true\n                  });\n                  if (absoluteUrl) {\n                    return (0, _util.shadow)(this, \"baseUrl\", absoluteUrl.href);\n                  }\n                }\n              }\n              return (0, _util.shadow)(this, \"baseUrl\", null);\n            }\n          }], [{\n            key: \"parseDestDictionary\",\n            value: function parseDestDictionary(params) {\n              var destDict = params.destDict;\n              if (!(destDict instanceof _primitives.Dict)) {\n                (0, _util.warn)(\"parseDestDictionary: `destDict` must be a dictionary.\");\n                return;\n              }\n              var resultObj = params.resultObj;\n              if (typeof resultObj !== \"object\") {\n                (0, _util.warn)(\"parseDestDictionary: `resultObj` must be an object.\");\n                return;\n              }\n              var docBaseUrl = params.docBaseUrl || null;\n              var action = destDict.get(\"A\"),\n                url,\n                dest;\n              if (!(action instanceof _primitives.Dict)) {\n                if (destDict.has(\"Dest\")) {\n                  action = destDict.get(\"Dest\");\n                } else {\n                  action = destDict.get(\"AA\");\n                  if (action instanceof _primitives.Dict) {\n                    if (action.has(\"D\")) {\n                      action = action.get(\"D\");\n                    } else if (action.has(\"U\")) {\n                      action = action.get(\"U\");\n                    }\n                  }\n                }\n              }\n              if (action instanceof _primitives.Dict) {\n                var actionType = action.get(\"S\");\n                if (!(actionType instanceof _primitives.Name)) {\n                  (0, _util.warn)(\"parseDestDictionary: Invalid type in Action dictionary.\");\n                  return;\n                }\n                var actionName = actionType.name;\n                switch (actionName) {\n                  case \"ResetForm\":\n                    var flags = action.get(\"Flags\");\n                    var include = ((typeof flags === \"number\" ? flags : 0) & 1) === 0;\n                    var fields = [];\n                    var refs = [];\n                    var _iterator113 = _createForOfIteratorHelper(action.get(\"Fields\") || []),\n                      _step113;\n                    try {\n                      for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {\n                        var obj = _step113.value;\n                        if (obj instanceof _primitives.Ref) {\n                          refs.push(obj.toString());\n                        } else if (typeof obj === \"string\") {\n                          fields.push((0, _util.stringToPDFString)(obj));\n                        }\n                      }\n                    } catch (err) {\n                      _iterator113.e(err);\n                    } finally {\n                      _iterator113.f();\n                    }\n                    resultObj.resetForm = {\n                      fields: fields,\n                      refs: refs,\n                      include: include\n                    };\n                    break;\n                  case \"URI\":\n                    url = action.get(\"URI\");\n                    if (url instanceof _primitives.Name) {\n                      url = \"/\" + url.name;\n                    }\n                    break;\n                  case \"GoTo\":\n                    dest = action.get(\"D\");\n                    break;\n                  case \"Launch\":\n                  case \"GoToR\":\n                    var urlDict = action.get(\"F\");\n                    if (urlDict instanceof _primitives.Dict) {\n                      url = urlDict.get(\"F\") || null;\n                    } else if (typeof urlDict === \"string\") {\n                      url = urlDict;\n                    }\n                    var remoteDest = action.get(\"D\");\n                    if (remoteDest) {\n                      if (remoteDest instanceof _primitives.Name) {\n                        remoteDest = remoteDest.name;\n                      }\n                      if (typeof url === \"string\") {\n                        var baseUrl = url.split(\"#\")[0];\n                        if (typeof remoteDest === \"string\") {\n                          url = baseUrl + \"#\" + remoteDest;\n                        } else if (Array.isArray(remoteDest)) {\n                          url = baseUrl + \"#\" + JSON.stringify(remoteDest);\n                        }\n                      }\n                    }\n                    var newWindow = action.get(\"NewWindow\");\n                    if (typeof newWindow === \"boolean\") {\n                      resultObj.newWindow = newWindow;\n                    }\n                    break;\n                  case \"Named\":\n                    var namedAction = action.get(\"N\");\n                    if (namedAction instanceof _primitives.Name) {\n                      resultObj.action = namedAction.name;\n                    }\n                    break;\n                  case \"JavaScript\":\n                    var jsAction = action.get(\"JS\");\n                    var js;\n                    if (jsAction instanceof _base_stream.BaseStream) {\n                      js = jsAction.getString();\n                    } else if (typeof jsAction === \"string\") {\n                      js = jsAction;\n                    }\n                    var jsURL = js && (0, _core_utils.recoverJsURL)((0, _util.stringToPDFString)(js));\n                    if (jsURL) {\n                      url = jsURL.url;\n                      resultObj.newWindow = jsURL.newWindow;\n                      break;\n                    }\n                  default:\n                    if (actionName === \"JavaScript\" || actionName === \"SubmitForm\") {\n                      break;\n                    }\n                    (0, _util.warn)(\"parseDestDictionary - unsupported action: \\\"\".concat(actionName, \"\\\".\"));\n                    break;\n                }\n              } else if (destDict.has(\"Dest\")) {\n                dest = destDict.get(\"Dest\");\n              }\n              if (typeof url === \"string\") {\n                var absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl, {\n                  addDefaultProtocol: true,\n                  tryConvertEncoding: true\n                });\n                if (absoluteUrl) {\n                  resultObj.url = absoluteUrl.href;\n                }\n                resultObj.unsafeUrl = url;\n              }\n              if (dest) {\n                if (dest instanceof _primitives.Name) {\n                  dest = dest.name;\n                }\n                if (typeof dest === \"string\") {\n                  resultObj.dest = (0, _util.stringToPDFString)(dest);\n                } else if (Array.isArray(dest)) {\n                  resultObj.dest = dest;\n                }\n              }\n            }\n          }]);\n          return Catalog;\n        }();\n        exports.Catalog = Catalog;\n\n        /***/\n      }, /* 70 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NumberTree = exports.NameTree = void 0;\n        var _primitives = __w_pdfjs_require__(5);\n        var _util = __w_pdfjs_require__(2);\n        var NameOrNumberTree = /*#__PURE__*/function () {\n          function NameOrNumberTree(root, xref, type) {\n            _classCallCheck(this, NameOrNumberTree);\n            if (this.constructor === NameOrNumberTree) {\n              (0, _util.unreachable)(\"Cannot initialize NameOrNumberTree.\");\n            }\n            this.root = root;\n            this.xref = xref;\n            this._type = type;\n          }\n          _createClass(NameOrNumberTree, [{\n            key: \"getAll\",\n            value: function getAll() {\n              var map = new Map();\n              if (!this.root) {\n                return map;\n              }\n              var xref = this.xref;\n              var processed = new _primitives.RefSet();\n              processed.put(this.root);\n              var queue = [this.root];\n              while (queue.length > 0) {\n                var obj = xref.fetchIfRef(queue.shift());\n                if (!(obj instanceof _primitives.Dict)) {\n                  continue;\n                }\n                if (obj.has(\"Kids\")) {\n                  var kids = obj.get(\"Kids\");\n                  if (!Array.isArray(kids)) {\n                    continue;\n                  }\n                  var _iterator114 = _createForOfIteratorHelper(kids),\n                    _step114;\n                  try {\n                    for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {\n                      var kid = _step114.value;\n                      if (processed.has(kid)) {\n                        throw new _util.FormatError(\"Duplicate entry in \\\"\".concat(this._type, \"\\\" tree.\"));\n                      }\n                      queue.push(kid);\n                      processed.put(kid);\n                    }\n                  } catch (err) {\n                    _iterator114.e(err);\n                  } finally {\n                    _iterator114.f();\n                  }\n                  continue;\n                }\n                var entries = obj.get(this._type);\n                if (!Array.isArray(entries)) {\n                  continue;\n                }\n                for (var i = 0, ii = entries.length; i < ii; i += 2) {\n                  map.set(xref.fetchIfRef(entries[i]), xref.fetchIfRef(entries[i + 1]));\n                }\n              }\n              return map;\n            }\n          }, {\n            key: \"get\",\n            value: function get(key) {\n              if (!this.root) {\n                return null;\n              }\n              var xref = this.xref;\n              var kidsOrEntries = xref.fetchIfRef(this.root);\n              var loopCount = 0;\n              var MAX_LEVELS = 10;\n              while (kidsOrEntries.has(\"Kids\")) {\n                if (++loopCount > MAX_LEVELS) {\n                  (0, _util.warn)(\"Search depth limit reached for \\\"\".concat(this._type, \"\\\" tree.\"));\n                  return null;\n                }\n                var kids = kidsOrEntries.get(\"Kids\");\n                if (!Array.isArray(kids)) {\n                  return null;\n                }\n                var l = 0,\n                  r = kids.length - 1;\n                while (l <= r) {\n                  var m = l + r >> 1;\n                  var kid = xref.fetchIfRef(kids[m]);\n                  var limits = kid.get(\"Limits\");\n                  if (key < xref.fetchIfRef(limits[0])) {\n                    r = m - 1;\n                  } else if (key > xref.fetchIfRef(limits[1])) {\n                    l = m + 1;\n                  } else {\n                    kidsOrEntries = kid;\n                    break;\n                  }\n                }\n                if (l > r) {\n                  return null;\n                }\n              }\n              var entries = kidsOrEntries.get(this._type);\n              if (Array.isArray(entries)) {\n                var _l = 0,\n                  _r = entries.length - 2;\n                while (_l <= _r) {\n                  var tmp = _l + _r >> 1,\n                    _m = tmp + (tmp & 1);\n                  var currentKey = xref.fetchIfRef(entries[_m]);\n                  if (key < currentKey) {\n                    _r = _m - 2;\n                  } else if (key > currentKey) {\n                    _l = _m + 2;\n                  } else {\n                    return xref.fetchIfRef(entries[_m + 1]);\n                  }\n                }\n              }\n              return null;\n            }\n          }]);\n          return NameOrNumberTree;\n        }();\n        var NameTree = /*#__PURE__*/function (_NameOrNumberTree) {\n          _inherits(NameTree, _NameOrNumberTree);\n          function NameTree(root, xref) {\n            _classCallCheck(this, NameTree);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NameTree).call(this, root, xref, \"Names\"));\n          }\n          return NameTree;\n        }(NameOrNumberTree);\n        exports.NameTree = NameTree;\n        var NumberTree = /*#__PURE__*/function (_NameOrNumberTree2) {\n          _inherits(NumberTree, _NameOrNumberTree2);\n          function NumberTree(root, xref) {\n            _classCallCheck(this, NumberTree);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NumberTree).call(this, root, xref, \"Nums\"));\n          }\n          return NumberTree;\n        }(NameOrNumberTree);\n        exports.NumberTree = NumberTree;\n\n        /***/\n      }, /* 71 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.clearGlobalCaches = clearGlobalCaches;\n        var _primitives = __w_pdfjs_require__(5);\n        var _unicode = __w_pdfjs_require__(40);\n        function clearGlobalCaches() {\n          (0, _primitives.clearPrimitiveCaches)();\n          (0, _unicode.clearUnicodeCaches)();\n        }\n\n        /***/\n      }, /* 72 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FileSpec = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _primitives = __w_pdfjs_require__(5);\n        function pickPlatformItem(dict) {\n          if (dict.has(\"UF\")) {\n            return dict.get(\"UF\");\n          } else if (dict.has(\"F\")) {\n            return dict.get(\"F\");\n          } else if (dict.has(\"Unix\")) {\n            return dict.get(\"Unix\");\n          } else if (dict.has(\"Mac\")) {\n            return dict.get(\"Mac\");\n          } else if (dict.has(\"DOS\")) {\n            return dict.get(\"DOS\");\n          }\n          return null;\n        }\n        var FileSpec = /*#__PURE__*/function () {\n          function FileSpec(root, xref) {\n            _classCallCheck(this, FileSpec);\n            if (!(root instanceof _primitives.Dict)) {\n              return;\n            }\n            this.xref = xref;\n            this.root = root;\n            if (root.has(\"FS\")) {\n              this.fs = root.get(\"FS\");\n            }\n            this.description = root.has(\"Desc\") ? (0, _util.stringToPDFString)(root.get(\"Desc\")) : \"\";\n            if (root.has(\"RF\")) {\n              (0, _util.warn)(\"Related file specifications are not supported\");\n            }\n            this.contentAvailable = true;\n            if (!root.has(\"EF\")) {\n              this.contentAvailable = false;\n              (0, _util.warn)(\"Non-embedded file specifications are not supported\");\n            }\n          }\n          _createClass(FileSpec, [{\n            key: \"filename\",\n            get: function get() {\n              if (!this._filename && this.root) {\n                var filename = pickPlatformItem(this.root) || \"unnamed\";\n                this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\\//g, \"/\").replace(/\\\\/g, \"/\");\n              }\n              return this._filename;\n            }\n          }, {\n            key: \"content\",\n            get: function get() {\n              if (!this.contentAvailable) {\n                return null;\n              }\n              if (!this.contentRef && this.root) {\n                this.contentRef = pickPlatformItem(this.root.get(\"EF\"));\n              }\n              var content = null;\n              if (this.contentRef) {\n                var fileObj = this.xref.fetchIfRef(this.contentRef);\n                if (fileObj instanceof _base_stream.BaseStream) {\n                  content = fileObj.getBytes();\n                } else {\n                  (0, _util.warn)(\"Embedded file specification points to non-existing/invalid content\");\n                }\n              } else {\n                (0, _util.warn)(\"Embedded file specification does not have a content\");\n              }\n              return content;\n            }\n          }, {\n            key: \"serializable\",\n            get: function get() {\n              return {\n                filename: this.filename,\n                content: this.content\n              };\n            }\n          }]);\n          return FileSpec;\n        }();\n        exports.FileSpec = FileSpec;\n\n        /***/\n      }, /* 73 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MetadataParser = void 0;\n        var _xml_parser = __w_pdfjs_require__(66);\n        var MetadataParser = /*#__PURE__*/function () {\n          function MetadataParser(data) {\n            _classCallCheck(this, MetadataParser);\n            data = this._repair(data);\n            var parser = new _xml_parser.SimpleXMLParser({\n              lowerCaseName: true\n            });\n            var xmlDocument = parser.parseFromString(data);\n            this._metadataMap = new Map();\n            this._data = data;\n            if (xmlDocument) {\n              this._parse(xmlDocument);\n            }\n          }\n          _createClass(MetadataParser, [{\n            key: \"_repair\",\n            value: function _repair(data) {\n              return data.replace(/^[^<]+/, \"\").replace(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {\n                var bytes = codes.replace(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {\n                  return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);\n                }).replace(/&(amp|apos|gt|lt|quot);/g, function (str, name) {\n                  switch (name) {\n                    case \"amp\":\n                      return \"&\";\n                    case \"apos\":\n                      return \"'\";\n                    case \"gt\":\n                      return \">\";\n                    case \"lt\":\n                      return \"<\";\n                    case \"quot\":\n                      return '\"';\n                  }\n                  throw new Error(\"_repair: \".concat(name, \" isn't defined.\"));\n                });\n                var charBuf = [];\n                for (var i = 0, ii = bytes.length; i < ii; i += 2) {\n                  var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);\n                  if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {\n                    charBuf.push(String.fromCharCode(code));\n                  } else {\n                    charBuf.push(\"&#x\" + (0x10000 + code).toString(16).substring(1) + \";\");\n                  }\n                }\n                return \">\" + charBuf.join(\"\");\n              });\n            }\n          }, {\n            key: \"_getSequence\",\n            value: function _getSequence(entry) {\n              var name = entry.nodeName;\n              if (name !== \"rdf:bag\" && name !== \"rdf:seq\" && name !== \"rdf:alt\") {\n                return null;\n              }\n              return entry.childNodes.filter(function (node) {\n                return node.nodeName === \"rdf:li\";\n              });\n            }\n          }, {\n            key: \"_parseArray\",\n            value: function _parseArray(entry) {\n              if (!entry.hasChildNodes()) {\n                return;\n              }\n              var _entry$childNodes = _slicedToArray(entry.childNodes, 1),\n                seqNode = _entry$childNodes[0];\n              var sequence = this._getSequence(seqNode) || [];\n              this._metadataMap.set(entry.nodeName, sequence.map(function (node) {\n                return node.textContent.trim();\n              }));\n            }\n          }, {\n            key: \"_parse\",\n            value: function _parse(xmlDocument) {\n              var rdf = xmlDocument.documentElement;\n              if (rdf.nodeName !== \"rdf:rdf\") {\n                rdf = rdf.firstChild;\n                while (rdf && rdf.nodeName !== \"rdf:rdf\") {\n                  rdf = rdf.nextSibling;\n                }\n              }\n              if (!rdf || rdf.nodeName !== \"rdf:rdf\" || !rdf.hasChildNodes()) {\n                return;\n              }\n              var _iterator115 = _createForOfIteratorHelper(rdf.childNodes),\n                _step115;\n              try {\n                for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {\n                  var desc = _step115.value;\n                  if (desc.nodeName !== \"rdf:description\") {\n                    continue;\n                  }\n                  var _iterator116 = _createForOfIteratorHelper(desc.childNodes),\n                    _step116;\n                  try {\n                    for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {\n                      var entry = _step116.value;\n                      var name = entry.nodeName;\n                      switch (name) {\n                        case \"#text\":\n                          continue;\n                        case \"dc:creator\":\n                        case \"dc:subject\":\n                          this._parseArray(entry);\n                          continue;\n                      }\n                      this._metadataMap.set(name, entry.textContent.trim());\n                    }\n                  } catch (err) {\n                    _iterator116.e(err);\n                  } finally {\n                    _iterator116.f();\n                  }\n                }\n              } catch (err) {\n                _iterator115.e(err);\n              } finally {\n                _iterator115.f();\n              }\n            }\n          }, {\n            key: \"serializable\",\n            get: function get() {\n              return {\n                parsedData: this._metadataMap,\n                rawData: this._data\n              };\n            }\n          }]);\n          return MetadataParser;\n        }();\n        exports.MetadataParser = MetadataParser;\n\n        /***/\n      }, /* 74 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StructTreeRoot = exports.StructTreePage = void 0;\n        var _primitives = __w_pdfjs_require__(5);\n        var _util = __w_pdfjs_require__(2);\n        var _name_number_tree = __w_pdfjs_require__(70);\n        var MAX_DEPTH = 40;\n        var StructElementType = {\n          PAGE_CONTENT: \"PAGE_CONTENT\",\n          STREAM_CONTENT: \"STREAM_CONTENT\",\n          OBJECT: \"OBJECT\",\n          ELEMENT: \"ELEMENT\"\n        };\n        var StructTreeRoot = /*#__PURE__*/function () {\n          function StructTreeRoot(rootDict) {\n            _classCallCheck(this, StructTreeRoot);\n            this.dict = rootDict;\n            this.roleMap = new Map();\n          }\n          _createClass(StructTreeRoot, [{\n            key: \"init\",\n            value: function init() {\n              this.readRoleMap();\n            }\n          }, {\n            key: \"readRoleMap\",\n            value: function readRoleMap() {\n              var _this98 = this;\n              var roleMapDict = this.dict.get(\"RoleMap\");\n              if (!(roleMapDict instanceof _primitives.Dict)) {\n                return;\n              }\n              roleMapDict.forEach(function (key, value) {\n                if (!(value instanceof _primitives.Name)) {\n                  return;\n                }\n                _this98.roleMap.set(key, value.name);\n              });\n            }\n          }]);\n          return StructTreeRoot;\n        }();\n        exports.StructTreeRoot = StructTreeRoot;\n        var StructElementNode = /*#__PURE__*/function () {\n          function StructElementNode(tree, dict) {\n            _classCallCheck(this, StructElementNode);\n            this.tree = tree;\n            this.dict = dict;\n            this.kids = [];\n            this.parseKids();\n          }\n          _createClass(StructElementNode, [{\n            key: \"parseKids\",\n            value: function parseKids() {\n              var pageObjId = null;\n              var objRef = this.dict.getRaw(\"Pg\");\n              if (objRef instanceof _primitives.Ref) {\n                pageObjId = objRef.toString();\n              }\n              var kids = this.dict.get(\"K\");\n              if (Array.isArray(kids)) {\n                var _iterator117 = _createForOfIteratorHelper(kids),\n                  _step117;\n                try {\n                  for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {\n                    var kid = _step117.value;\n                    var element = this.parseKid(pageObjId, kid);\n                    if (element) {\n                      this.kids.push(element);\n                    }\n                  }\n                } catch (err) {\n                  _iterator117.e(err);\n                } finally {\n                  _iterator117.f();\n                }\n              } else {\n                var _element = this.parseKid(pageObjId, kids);\n                if (_element) {\n                  this.kids.push(_element);\n                }\n              }\n            }\n          }, {\n            key: \"parseKid\",\n            value: function parseKid(pageObjId, kid) {\n              if (Number.isInteger(kid)) {\n                if (this.tree.pageDict.objId !== pageObjId) {\n                  return null;\n                }\n                return new StructElement({\n                  type: StructElementType.PAGE_CONTENT,\n                  mcid: kid,\n                  pageObjId: pageObjId\n                });\n              }\n              var kidDict = null;\n              if (kid instanceof _primitives.Ref) {\n                kidDict = this.dict.xref.fetch(kid);\n              } else if (kid instanceof _primitives.Dict) {\n                kidDict = kid;\n              }\n              if (!kidDict) {\n                return null;\n              }\n              var pageRef = kidDict.getRaw(\"Pg\");\n              if (pageRef instanceof _primitives.Ref) {\n                pageObjId = pageRef.toString();\n              }\n              var type = kidDict.get(\"Type\") instanceof _primitives.Name ? kidDict.get(\"Type\").name : null;\n              if (type === \"MCR\") {\n                if (this.tree.pageDict.objId !== pageObjId) {\n                  return null;\n                }\n                return new StructElement({\n                  type: StructElementType.STREAM_CONTENT,\n                  refObjId: kidDict.getRaw(\"Stm\") instanceof _primitives.Ref ? kidDict.getRaw(\"Stm\").toString() : null,\n                  pageObjId: pageObjId,\n                  mcid: kidDict.get(\"MCID\")\n                });\n              }\n              if (type === \"OBJR\") {\n                if (this.tree.pageDict.objId !== pageObjId) {\n                  return null;\n                }\n                return new StructElement({\n                  type: StructElementType.OBJECT,\n                  refObjId: kidDict.getRaw(\"Obj\") instanceof _primitives.Ref ? kidDict.getRaw(\"Obj\").toString() : null,\n                  pageObjId: pageObjId\n                });\n              }\n              return new StructElement({\n                type: StructElementType.ELEMENT,\n                dict: kidDict\n              });\n            }\n          }, {\n            key: \"role\",\n            get: function get() {\n              var nameObj = this.dict.get(\"S\");\n              var name = nameObj instanceof _primitives.Name ? nameObj.name : \"\";\n              var root = this.tree.root;\n              if (root.roleMap.has(name)) {\n                return root.roleMap.get(name);\n              }\n              return name;\n            }\n          }]);\n          return StructElementNode;\n        }();\n        var StructElement = function StructElement(_ref87) {\n          var type = _ref87.type,\n            _ref87$dict = _ref87.dict,\n            dict = _ref87$dict === void 0 ? null : _ref87$dict,\n            _ref87$mcid = _ref87.mcid,\n            mcid = _ref87$mcid === void 0 ? null : _ref87$mcid,\n            _ref87$pageObjId = _ref87.pageObjId,\n            pageObjId = _ref87$pageObjId === void 0 ? null : _ref87$pageObjId,\n            _ref87$refObjId = _ref87.refObjId,\n            refObjId = _ref87$refObjId === void 0 ? null : _ref87$refObjId;\n          _classCallCheck(this, StructElement);\n          this.type = type;\n          this.dict = dict;\n          this.mcid = mcid;\n          this.pageObjId = pageObjId;\n          this.refObjId = refObjId;\n          this.parentNode = null;\n        };\n        var StructTreePage = /*#__PURE__*/function () {\n          function StructTreePage(structTreeRoot, pageDict) {\n            _classCallCheck(this, StructTreePage);\n            this.root = structTreeRoot;\n            this.rootDict = structTreeRoot ? structTreeRoot.dict : null;\n            this.pageDict = pageDict;\n            this.nodes = [];\n          }\n          _createClass(StructTreePage, [{\n            key: \"parse\",\n            value: function parse() {\n              if (!this.root || !this.rootDict) {\n                return;\n              }\n              var parentTree = this.rootDict.get(\"ParentTree\");\n              if (!parentTree) {\n                return;\n              }\n              var id = this.pageDict.get(\"StructParents\");\n              if (!Number.isInteger(id)) {\n                return;\n              }\n              var numberTree = new _name_number_tree.NumberTree(parentTree, this.rootDict.xref);\n              var parentArray = numberTree.get(id);\n              if (!Array.isArray(parentArray)) {\n                return;\n              }\n              var map = new Map();\n              var _iterator118 = _createForOfIteratorHelper(parentArray),\n                _step118;\n              try {\n                for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {\n                  var ref = _step118.value;\n                  if (ref instanceof _primitives.Ref) {\n                    this.addNode(this.rootDict.xref.fetch(ref), map);\n                  }\n                }\n              } catch (err) {\n                _iterator118.e(err);\n              } finally {\n                _iterator118.f();\n              }\n            }\n          }, {\n            key: \"addNode\",\n            value: function addNode(dict, map) {\n              var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n              if (level > MAX_DEPTH) {\n                (0, _util.warn)(\"StructTree MAX_DEPTH reached.\");\n                return null;\n              }\n              if (map.has(dict)) {\n                return map.get(dict);\n              }\n              var element = new StructElementNode(this, dict);\n              map.set(dict, element);\n              var parent = dict.get(\"P\");\n              if (!parent || (0, _primitives.isName)(parent.get(\"Type\"), \"StructTreeRoot\")) {\n                if (!this.addTopLevelNode(dict, element)) {\n                  map.delete(dict);\n                }\n                return element;\n              }\n              var parentNode = this.addNode(parent, map, level + 1);\n              if (!parentNode) {\n                return element;\n              }\n              var save = false;\n              var _iterator119 = _createForOfIteratorHelper(parentNode.kids),\n                _step119;\n              try {\n                for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {\n                  var kid = _step119.value;\n                  if (kid.type === StructElementType.ELEMENT && kid.dict === dict) {\n                    kid.parentNode = element;\n                    save = true;\n                  }\n                }\n              } catch (err) {\n                _iterator119.e(err);\n              } finally {\n                _iterator119.f();\n              }\n              if (!save) {\n                map.delete(dict);\n              }\n              return element;\n            }\n          }, {\n            key: \"addTopLevelNode\",\n            value: function addTopLevelNode(dict, element) {\n              var obj = this.rootDict.get(\"K\");\n              if (!obj) {\n                return false;\n              }\n              if (obj instanceof _primitives.Dict) {\n                if (obj.objId !== dict.objId) {\n                  return false;\n                }\n                this.nodes[0] = element;\n                return true;\n              }\n              if (!Array.isArray(obj)) {\n                return true;\n              }\n              var save = false;\n              for (var i = 0; i < obj.length; i++) {\n                var kidRef = obj[i];\n                if (kidRef && kidRef.toString() === dict.objId) {\n                  this.nodes[i] = element;\n                  save = true;\n                }\n              }\n              return save;\n            }\n          }, {\n            key: \"serializable\",\n            get: function get() {\n              function nodeToSerializable(node, parent) {\n                var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                if (level > MAX_DEPTH) {\n                  (0, _util.warn)(\"StructTree too deep to be fully serialized.\");\n                  return;\n                }\n                var obj = Object.create(null);\n                obj.role = node.role;\n                obj.children = [];\n                parent.children.push(obj);\n                var alt = node.dict.get(\"Alt\");\n                if (typeof alt === \"string\") {\n                  obj.alt = (0, _util.stringToPDFString)(alt);\n                }\n                var lang = node.dict.get(\"Lang\");\n                if (typeof lang === \"string\") {\n                  obj.lang = (0, _util.stringToPDFString)(lang);\n                }\n                var _iterator120 = _createForOfIteratorHelper(node.kids),\n                  _step120;\n                try {\n                  for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {\n                    var kid = _step120.value;\n                    var kidElement = kid.type === StructElementType.ELEMENT ? kid.parentNode : null;\n                    if (kidElement) {\n                      nodeToSerializable(kidElement, obj, level + 1);\n                      continue;\n                    } else if (kid.type === StructElementType.PAGE_CONTENT || kid.type === StructElementType.STREAM_CONTENT) {\n                      obj.children.push({\n                        type: \"content\",\n                        id: \"page\".concat(kid.pageObjId, \"_mcid\").concat(kid.mcid)\n                      });\n                    } else if (kid.type === StructElementType.OBJECT) {\n                      obj.children.push({\n                        type: \"object\",\n                        id: kid.refObjId\n                      });\n                    }\n                  }\n                } catch (err) {\n                  _iterator120.e(err);\n                } finally {\n                  _iterator120.f();\n                }\n              }\n              var root = Object.create(null);\n              root.children = [];\n              root.role = \"Root\";\n              var _iterator121 = _createForOfIteratorHelper(this.nodes),\n                _step121;\n              try {\n                for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {\n                  var child = _step121.value;\n                  if (!child) {\n                    continue;\n                  }\n                  nodeToSerializable(child, root);\n                }\n              } catch (err) {\n                _iterator121.e(err);\n              } finally {\n                _iterator121.f();\n              }\n              return root;\n            }\n          }]);\n          return StructTreePage;\n        }();\n        exports.StructTreePage = StructTreePage;\n\n        /***/\n      }, /* 75 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ObjectLoader = void 0;\n        var _primitives = __w_pdfjs_require__(5);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _util = __w_pdfjs_require__(2);\n        function mayHaveChildren(value) {\n          return value instanceof _primitives.Ref || value instanceof _primitives.Dict || value instanceof _base_stream.BaseStream || Array.isArray(value);\n        }\n        function addChildren(node, nodesToVisit) {\n          if (node instanceof _primitives.Dict) {\n            node = node.getRawValues();\n          } else if (node instanceof _base_stream.BaseStream) {\n            node = node.dict.getRawValues();\n          } else if (!Array.isArray(node)) {\n            return;\n          }\n          var _iterator122 = _createForOfIteratorHelper(node),\n            _step122;\n          try {\n            for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {\n              var rawValue = _step122.value;\n              if (mayHaveChildren(rawValue)) {\n                nodesToVisit.push(rawValue);\n              }\n            }\n          } catch (err) {\n            _iterator122.e(err);\n          } finally {\n            _iterator122.f();\n          }\n        }\n        var ObjectLoader = /*#__PURE__*/function () {\n          function ObjectLoader(dict, keys, xref) {\n            _classCallCheck(this, ObjectLoader);\n            this.dict = dict;\n            this.keys = keys;\n            this.xref = xref;\n            this.refSet = null;\n          }\n          _createClass(ObjectLoader, [{\n            key: \"load\",\n            value: function () {\n              var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {\n                var keys, dict, nodesToVisit, i, ii, rawValue;\n                return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n                  while (1) {\n                    switch (_context56.prev = _context56.next) {\n                      case 0:\n                        if (!this.xref.stream.isDataLoaded) {\n                          _context56.next = 2;\n                          break;\n                        }\n                        return _context56.abrupt(\"return\", undefined);\n                      case 2:\n                        keys = this.keys, dict = this.dict;\n                        this.refSet = new _primitives.RefSet();\n                        nodesToVisit = [];\n                        for (i = 0, ii = keys.length; i < ii; i++) {\n                          rawValue = dict.getRaw(keys[i]);\n                          if (rawValue !== undefined) {\n                            nodesToVisit.push(rawValue);\n                          }\n                        }\n                        return _context56.abrupt(\"return\", this._walk(nodesToVisit));\n                      case 7:\n                      case \"end\":\n                        return _context56.stop();\n                    }\n                  }\n                }, _callee56, this);\n              }));\n              function load() {\n                return _load.apply(this, arguments);\n              }\n              return load;\n            }()\n          }, {\n            key: \"_walk\",\n            value: function () {\n              var _walk2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(nodesToVisit) {\n                var nodesToRevisit, pendingRequests, currentNode, manager, baseStreams, foundMissingData, _iterator123, _step123, stream, _iterator124, _step124, node;\n                return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n                  while (1) {\n                    switch (_context57.prev = _context57.next) {\n                      case 0:\n                        nodesToRevisit = [];\n                        pendingRequests = [];\n                      case 2:\n                        if (!nodesToVisit.length) {\n                          _context57.next = 48;\n                          break;\n                        }\n                        currentNode = nodesToVisit.pop();\n                        if (!(currentNode instanceof _primitives.Ref)) {\n                          _context57.next = 21;\n                          break;\n                        }\n                        if (!this.refSet.has(currentNode)) {\n                          _context57.next = 7;\n                          break;\n                        }\n                        return _context57.abrupt(\"continue\", 2);\n                      case 7:\n                        _context57.prev = 7;\n                        this.refSet.put(currentNode);\n                        currentNode = this.xref.fetch(currentNode);\n                        _context57.next = 21;\n                        break;\n                      case 12:\n                        _context57.prev = 12;\n                        _context57.t0 = _context57[\"catch\"](7);\n                        if (_context57.t0 instanceof _core_utils.MissingDataException) {\n                          _context57.next = 19;\n                          break;\n                        }\n                        (0, _util.warn)(\"ObjectLoader._walk - requesting all data: \\\"\".concat(_context57.t0, \"\\\".\"));\n                        this.refSet = null;\n                        manager = this.xref.stream.manager;\n                        return _context57.abrupt(\"return\", manager.requestAllChunks());\n                      case 19:\n                        nodesToRevisit.push(currentNode);\n                        pendingRequests.push({\n                          begin: _context57.t0.begin,\n                          end: _context57.t0.end\n                        });\n                      case 21:\n                        if (!(currentNode instanceof _base_stream.BaseStream)) {\n                          _context57.next = 45;\n                          break;\n                        }\n                        baseStreams = currentNode.getBaseStreams();\n                        if (!baseStreams) {\n                          _context57.next = 45;\n                          break;\n                        }\n                        foundMissingData = false;\n                        _iterator123 = _createForOfIteratorHelper(baseStreams);\n                        _context57.prev = 26;\n                        _iterator123.s();\n                      case 28:\n                        if ((_step123 = _iterator123.n()).done) {\n                          _context57.next = 36;\n                          break;\n                        }\n                        stream = _step123.value;\n                        if (!stream.isDataLoaded) {\n                          _context57.next = 32;\n                          break;\n                        }\n                        return _context57.abrupt(\"continue\", 34);\n                      case 32:\n                        foundMissingData = true;\n                        pendingRequests.push({\n                          begin: stream.start,\n                          end: stream.end\n                        });\n                      case 34:\n                        _context57.next = 28;\n                        break;\n                      case 36:\n                        _context57.next = 41;\n                        break;\n                      case 38:\n                        _context57.prev = 38;\n                        _context57.t1 = _context57[\"catch\"](26);\n                        _iterator123.e(_context57.t1);\n                      case 41:\n                        _context57.prev = 41;\n                        _iterator123.f();\n                        return _context57.finish(41);\n                      case 44:\n                        if (foundMissingData) {\n                          nodesToRevisit.push(currentNode);\n                        }\n                      case 45:\n                        addChildren(currentNode, nodesToVisit);\n                        _context57.next = 2;\n                        break;\n                      case 48:\n                        if (!pendingRequests.length) {\n                          _context57.next = 54;\n                          break;\n                        }\n                        _context57.next = 51;\n                        return this.xref.stream.manager.requestRanges(pendingRequests);\n                      case 51:\n                        _iterator124 = _createForOfIteratorHelper(nodesToRevisit);\n                        try {\n                          for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {\n                            node = _step124.value;\n                            if (node instanceof _primitives.Ref) {\n                              this.refSet.remove(node);\n                            }\n                          }\n                        } catch (err) {\n                          _iterator124.e(err);\n                        } finally {\n                          _iterator124.f();\n                        }\n                        return _context57.abrupt(\"return\", this._walk(nodesToRevisit));\n                      case 54:\n                        this.refSet = null;\n                        return _context57.abrupt(\"return\", undefined);\n                      case 56:\n                      case \"end\":\n                        return _context57.stop();\n                    }\n                  }\n                }, _callee57, this, [[7, 12], [26, 38, 41, 44]]);\n              }));\n              function _walk(_x123) {\n                return _walk2.apply(this, arguments);\n              }\n              return _walk;\n            }()\n          }]);\n          return ObjectLoader;\n        }();\n        exports.ObjectLoader = ObjectLoader;\n\n        /***/\n      }, /* 76 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XFAFactory = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _bind = __w_pdfjs_require__(81);\n        var _data = __w_pdfjs_require__(87);\n        var _fonts = __w_pdfjs_require__(85);\n        var _utils = __w_pdfjs_require__(78);\n        var _util = __w_pdfjs_require__(2);\n        var _parser = __w_pdfjs_require__(88);\n        var _xhtml = __w_pdfjs_require__(98);\n        var XFAFactory = /*#__PURE__*/function () {\n          function XFAFactory(data) {\n            _classCallCheck(this, XFAFactory);\n            try {\n              this.root = new _parser.XFAParser().parse(XFAFactory._createDocument(data));\n              var binder = new _bind.Binder(this.root);\n              this.form = binder.bind();\n              this.dataHandler = new _data.DataHandler(this.root, binder.getData());\n              this.form[_xfa_object.$globalData].template = this.form;\n            } catch (e) {\n              (0, _util.warn)(\"XFA - an error occurred during parsing and binding: \".concat(e));\n            }\n          }\n          _createClass(XFAFactory, [{\n            key: \"isValid\",\n            value: function isValid() {\n              return this.root && this.form;\n            }\n          }, {\n            key: \"_createPagesHelper\",\n            value: function _createPagesHelper() {\n              var iterator = this.form[_xfa_object.$toPages]();\n              return new Promise(function (resolve, reject) {\n                var nextIteration = function nextIteration() {\n                  try {\n                    var value = iterator.next();\n                    if (value.done) {\n                      resolve(value.value);\n                    } else {\n                      setTimeout(nextIteration, 0);\n                    }\n                  } catch (e) {\n                    reject(e);\n                  }\n                };\n                setTimeout(nextIteration, 0);\n              });\n            }\n          }, {\n            key: \"_createPages\",\n            value: function () {\n              var _createPages2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {\n                return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n                  while (1) {\n                    switch (_context58.prev = _context58.next) {\n                      case 0:\n                        _context58.prev = 0;\n                        _context58.next = 3;\n                        return this._createPagesHelper();\n                      case 3:\n                        this.pages = _context58.sent;\n                        this.dims = this.pages.children.map(function (c) {\n                          var _c$attributes$style = c.attributes.style,\n                            width = _c$attributes$style.width,\n                            height = _c$attributes$style.height;\n                          return [0, 0, parseInt(width), parseInt(height)];\n                        });\n                        _context58.next = 10;\n                        break;\n                      case 7:\n                        _context58.prev = 7;\n                        _context58.t0 = _context58[\"catch\"](0);\n                        (0, _util.warn)(\"XFA - an error occurred during layout: \".concat(_context58.t0));\n                      case 10:\n                      case \"end\":\n                        return _context58.stop();\n                    }\n                  }\n                }, _callee58, this, [[0, 7]]);\n              }));\n              function _createPages() {\n                return _createPages2.apply(this, arguments);\n              }\n              return _createPages;\n            }()\n          }, {\n            key: \"getBoundingBox\",\n            value: function getBoundingBox(pageIndex) {\n              return this.dims[pageIndex];\n            }\n          }, {\n            key: \"getNumPages\",\n            value: function () {\n              var _getNumPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {\n                return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n                  while (1) {\n                    switch (_context59.prev = _context59.next) {\n                      case 0:\n                        if (this.pages) {\n                          _context59.next = 3;\n                          break;\n                        }\n                        _context59.next = 3;\n                        return this._createPages();\n                      case 3:\n                        return _context59.abrupt(\"return\", this.dims.length);\n                      case 4:\n                      case \"end\":\n                        return _context59.stop();\n                    }\n                  }\n                }, _callee59, this);\n              }));\n              function getNumPages() {\n                return _getNumPages.apply(this, arguments);\n              }\n              return getNumPages;\n            }()\n          }, {\n            key: \"setImages\",\n            value: function setImages(images) {\n              this.form[_xfa_object.$globalData].images = images;\n            }\n          }, {\n            key: \"setFonts\",\n            value: function setFonts(fonts) {\n              this.form[_xfa_object.$globalData].fontFinder = new _fonts.FontFinder(fonts);\n              var missingFonts = [];\n              var _iterator125 = _createForOfIteratorHelper(this.form[_xfa_object.$globalData].usedTypefaces),\n                _step125;\n              try {\n                for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {\n                  var typeface = _step125.value;\n                  typeface = (0, _utils.stripQuotes)(typeface);\n                  var font = this.form[_xfa_object.$globalData].fontFinder.find(typeface);\n                  if (!font) {\n                    missingFonts.push(typeface);\n                  }\n                }\n              } catch (err) {\n                _iterator125.e(err);\n              } finally {\n                _iterator125.f();\n              }\n              if (missingFonts.length > 0) {\n                return missingFonts;\n              }\n              return null;\n            }\n          }, {\n            key: \"appendFonts\",\n            value: function appendFonts(fonts, reallyMissingFonts) {\n              this.form[_xfa_object.$globalData].fontFinder.add(fonts, reallyMissingFonts);\n            }\n          }, {\n            key: \"getPages\",\n            value: function () {\n              var _getPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {\n                var pages;\n                return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n                  while (1) {\n                    switch (_context60.prev = _context60.next) {\n                      case 0:\n                        if (this.pages) {\n                          _context60.next = 3;\n                          break;\n                        }\n                        _context60.next = 3;\n                        return this._createPages();\n                      case 3:\n                        pages = this.pages;\n                        this.pages = null;\n                        return _context60.abrupt(\"return\", pages);\n                      case 6:\n                      case \"end\":\n                        return _context60.stop();\n                    }\n                  }\n                }, _callee60, this);\n              }));\n              function getPages() {\n                return _getPages.apply(this, arguments);\n              }\n              return getPages;\n            }()\n          }, {\n            key: \"serializeData\",\n            value: function serializeData(storage) {\n              return this.dataHandler.serialize(storage);\n            }\n          }], [{\n            key: \"_createDocument\",\n            value: function _createDocument(data) {\n              if (!data[\"/xdp:xdp\"]) {\n                return data[\"xdp:xdp\"];\n              }\n              return Object.values(data).join(\"\");\n            }\n          }, {\n            key: \"getRichTextAsHtml\",\n            value: function getRichTextAsHtml(rc) {\n              if (!rc || typeof rc !== \"string\") {\n                return null;\n              }\n              try {\n                var root = new _parser.XFAParser(_xhtml.XhtmlNamespace, true).parse(rc);\n                if (![\"body\", \"xhtml\"].includes(root[_xfa_object.$nodeName])) {\n                  var newRoot = _xhtml.XhtmlNamespace.body({});\n                  newRoot[_xfa_object.$appendChild](root);\n                  root = newRoot;\n                }\n                var result = root[_xfa_object.$toHTML]();\n                if (!result.success) {\n                  return null;\n                }\n                var html = result.html;\n                var attributes = html.attributes;\n                if (attributes) {\n                  if (attributes.class) {\n                    attributes.class = attributes.class.filter(function (attr) {\n                      return !attr.startsWith(\"xfa\");\n                    });\n                  }\n                  attributes.dir = \"auto\";\n                }\n                return {\n                  html: html,\n                  str: root[_xfa_object.$text]()\n                };\n              } catch (e) {\n                (0, _util.warn)(\"XFA - an error occurred during parsing of rich text: \".concat(e));\n              }\n              return null;\n            }\n          }]);\n          return XFAFactory;\n        }();\n        exports.XFAFactory = XFAFactory;\n\n        /***/\n      }, /* 77 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XmlObject = exports.XFAObjectArray = exports.XFAObject = exports.XFAAttribute = exports.StringObject = exports.OptionObject = exports.Option10 = exports.Option01 = exports.IntegerObject = exports.ContentObject = exports.$uid = exports.$toStyle = exports.$toString = exports.$toPages = exports.$toHTML = exports.$text = exports.$tabIndex = exports.$setValue = exports.$setSetAttributes = exports.$setId = exports.$searchNode = exports.$root = exports.$resolvePrototypes = exports.$removeChild = exports.$pushPara = exports.$pushGlyphs = exports.$popPara = exports.$onText = exports.$onChildCheck = exports.$onChild = exports.$nsAttributes = exports.$nodeName = exports.$namespaceId = exports.$isUsable = exports.$isTransparent = exports.$isThereMoreWidth = exports.$isSplittable = exports.$isNsAgnostic = exports.$isDescendent = exports.$isDataValue = exports.$isCDATAXml = exports.$isBindable = exports.$insertAt = exports.$indexOf = exports.$ids = exports.$hasSettableValue = exports.$globalData = exports.$getTemplateRoot = exports.$getSubformParent = exports.$getRealChildrenByNameIt = exports.$getParent = exports.$getNextPage = exports.$getExtra = exports.$getDataValue = exports.$getContainedChildren = exports.$getChildrenByNameIt = exports.$getChildrenByName = exports.$getChildrenByClass = exports.$getChildren = exports.$getAvailableSpace = exports.$getAttributes = exports.$getAttributeIt = exports.$flushHTML = exports.$finalize = exports.$extra = exports.$dump = exports.$data = exports.$content = exports.$consumed = exports.$clone = exports.$cleanup = exports.$cleanPage = exports.$clean = exports.$childrenToHTML = exports.$appendChild = exports.$addHTML = exports.$acceptWhitespace = void 0;\n        var _utils = __w_pdfjs_require__(78);\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _namespaces = __w_pdfjs_require__(79);\n        var _som = __w_pdfjs_require__(80);\n        var $acceptWhitespace = Symbol();\n        exports.$acceptWhitespace = $acceptWhitespace;\n        var $addHTML = Symbol();\n        exports.$addHTML = $addHTML;\n        var $appendChild = Symbol();\n        exports.$appendChild = $appendChild;\n        var $childrenToHTML = Symbol();\n        exports.$childrenToHTML = $childrenToHTML;\n        var $clean = Symbol();\n        exports.$clean = $clean;\n        var $cleanPage = Symbol();\n        exports.$cleanPage = $cleanPage;\n        var $cleanup = Symbol();\n        exports.$cleanup = $cleanup;\n        var $clone = Symbol();\n        exports.$clone = $clone;\n        var $consumed = Symbol();\n        exports.$consumed = $consumed;\n        var $content = Symbol(\"content\");\n        exports.$content = $content;\n        var $data = Symbol(\"data\");\n        exports.$data = $data;\n        var $dump = Symbol();\n        exports.$dump = $dump;\n        var $extra = Symbol(\"extra\");\n        exports.$extra = $extra;\n        var $finalize = Symbol();\n        exports.$finalize = $finalize;\n        var $flushHTML = Symbol();\n        exports.$flushHTML = $flushHTML;\n        var $getAttributeIt = Symbol();\n        exports.$getAttributeIt = $getAttributeIt;\n        var $getAttributes = Symbol();\n        exports.$getAttributes = $getAttributes;\n        var $getAvailableSpace = Symbol();\n        exports.$getAvailableSpace = $getAvailableSpace;\n        var $getChildrenByClass = Symbol();\n        exports.$getChildrenByClass = $getChildrenByClass;\n        var $getChildrenByName = Symbol();\n        exports.$getChildrenByName = $getChildrenByName;\n        var $getChildrenByNameIt = Symbol();\n        exports.$getChildrenByNameIt = $getChildrenByNameIt;\n        var $getDataValue = Symbol();\n        exports.$getDataValue = $getDataValue;\n        var $getExtra = Symbol();\n        exports.$getExtra = $getExtra;\n        var $getRealChildrenByNameIt = Symbol();\n        exports.$getRealChildrenByNameIt = $getRealChildrenByNameIt;\n        var $getChildren = Symbol();\n        exports.$getChildren = $getChildren;\n        var $getContainedChildren = Symbol();\n        exports.$getContainedChildren = $getContainedChildren;\n        var $getNextPage = Symbol();\n        exports.$getNextPage = $getNextPage;\n        var $getSubformParent = Symbol();\n        exports.$getSubformParent = $getSubformParent;\n        var $getParent = Symbol();\n        exports.$getParent = $getParent;\n        var $getTemplateRoot = Symbol();\n        exports.$getTemplateRoot = $getTemplateRoot;\n        var $globalData = Symbol();\n        exports.$globalData = $globalData;\n        var $hasSettableValue = Symbol();\n        exports.$hasSettableValue = $hasSettableValue;\n        var $ids = Symbol();\n        exports.$ids = $ids;\n        var $indexOf = Symbol();\n        exports.$indexOf = $indexOf;\n        var $insertAt = Symbol();\n        exports.$insertAt = $insertAt;\n        var $isCDATAXml = Symbol();\n        exports.$isCDATAXml = $isCDATAXml;\n        var $isBindable = Symbol();\n        exports.$isBindable = $isBindable;\n        var $isDataValue = Symbol();\n        exports.$isDataValue = $isDataValue;\n        var $isDescendent = Symbol();\n        exports.$isDescendent = $isDescendent;\n        var $isNsAgnostic = Symbol();\n        exports.$isNsAgnostic = $isNsAgnostic;\n        var $isSplittable = Symbol();\n        exports.$isSplittable = $isSplittable;\n        var $isThereMoreWidth = Symbol();\n        exports.$isThereMoreWidth = $isThereMoreWidth;\n        var $isTransparent = Symbol();\n        exports.$isTransparent = $isTransparent;\n        var $isUsable = Symbol();\n        exports.$isUsable = $isUsable;\n        var $lastAttribute = Symbol();\n        var $namespaceId = Symbol(\"namespaceId\");\n        exports.$namespaceId = $namespaceId;\n        var $nodeName = Symbol(\"nodeName\");\n        exports.$nodeName = $nodeName;\n        var $nsAttributes = Symbol();\n        exports.$nsAttributes = $nsAttributes;\n        var $onChild = Symbol();\n        exports.$onChild = $onChild;\n        var $onChildCheck = Symbol();\n        exports.$onChildCheck = $onChildCheck;\n        var $onText = Symbol();\n        exports.$onText = $onText;\n        var $pushGlyphs = Symbol();\n        exports.$pushGlyphs = $pushGlyphs;\n        var $popPara = Symbol();\n        exports.$popPara = $popPara;\n        var $pushPara = Symbol();\n        exports.$pushPara = $pushPara;\n        var $removeChild = Symbol();\n        exports.$removeChild = $removeChild;\n        var $root = Symbol(\"root\");\n        exports.$root = $root;\n        var $resolvePrototypes = Symbol();\n        exports.$resolvePrototypes = $resolvePrototypes;\n        var $searchNode = Symbol();\n        exports.$searchNode = $searchNode;\n        var $setId = Symbol();\n        exports.$setId = $setId;\n        var $setSetAttributes = Symbol();\n        exports.$setSetAttributes = $setSetAttributes;\n        var $setValue = Symbol();\n        exports.$setValue = $setValue;\n        var $tabIndex = Symbol();\n        exports.$tabIndex = $tabIndex;\n        var $text = Symbol();\n        exports.$text = $text;\n        var $toPages = Symbol();\n        exports.$toPages = $toPages;\n        var $toHTML = Symbol();\n        exports.$toHTML = $toHTML;\n        var $toString = Symbol();\n        exports.$toString = $toString;\n        var $toStyle = Symbol();\n        exports.$toStyle = $toStyle;\n        var $uid = Symbol(\"uid\");\n        exports.$uid = $uid;\n        var _applyPrototype = Symbol();\n        var _attributes = Symbol();\n        var _attributeNames = Symbol();\n        var _children = Symbol(\"_children\");\n        var _cloneAttribute = Symbol();\n        var _dataValue = Symbol();\n        var _defaultValue = Symbol();\n        var _filteredChildrenGenerator = Symbol();\n        var _getPrototype = Symbol();\n        var _getUnsetAttributes = Symbol();\n        var _hasChildren = Symbol();\n        var _max = Symbol();\n        var _options = Symbol();\n        var _parent = Symbol(\"parent\");\n        var _resolvePrototypesHelper = Symbol();\n        var _setAttributes = Symbol();\n        var _validator = Symbol();\n        var uid = 0;\n        var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;\n        var XFAObject = /*#__PURE__*/function () {\n          function XFAObject(nsId, name) {\n            var hasChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            _classCallCheck(this, XFAObject);\n            this[$namespaceId] = nsId;\n            this[$nodeName] = name;\n            this[_hasChildren] = hasChildren;\n            this[_parent] = null;\n            this[_children] = [];\n            this[$uid] = \"\".concat(name).concat(uid++);\n            this[$globalData] = null;\n          }\n          _createClass(XFAObject, [{\n            key: $onChild,\n            value: function value(child) {\n              if (!this[_hasChildren] || !this[$onChildCheck](child)) {\n                return false;\n              }\n              var name = child[$nodeName];\n              var node = this[name];\n              if (node instanceof XFAObjectArray) {\n                if (node.push(child)) {\n                  this[$appendChild](child);\n                  return true;\n                }\n              } else {\n                if (node !== null) {\n                  this[$removeChild](node);\n                }\n                this[name] = child;\n                this[$appendChild](child);\n                return true;\n              }\n              var id = \"\";\n              if (this.id) {\n                id = \" (id: \".concat(this.id, \")\");\n              } else if (this.name) {\n                id = \" (name: \".concat(this.name, \" \").concat(this.h.value, \")\");\n              }\n              (0, _util.warn)(\"XFA - node \\\"\".concat(this[$nodeName], \"\\\"\").concat(id, \" has already enough \\\"\").concat(name, \"\\\"!\"));\n              return false;\n            }\n          }, {\n            key: $onChildCheck,\n            value: function value(child) {\n              return this.hasOwnProperty(child[$nodeName]) && child[$namespaceId] === this[$namespaceId];\n            }\n          }, {\n            key: $isNsAgnostic,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $acceptWhitespace,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $isCDATAXml,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $isBindable,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $popPara,\n            value: function value() {\n              if (this.para) {\n                this[$getTemplateRoot]()[$extra].paraStack.pop();\n              }\n            }\n          }, {\n            key: $pushPara,\n            value: function value() {\n              this[$getTemplateRoot]()[$extra].paraStack.push(this.para);\n            }\n          }, {\n            key: $setId,\n            value: function value(ids) {\n              if (this.id && this[$namespaceId] === _namespaces.NamespaceIds.template.id) {\n                ids.set(this.id, this);\n              }\n            }\n          }, {\n            key: $getTemplateRoot,\n            value: function value() {\n              return this[$globalData].template;\n            }\n          }, {\n            key: $isSplittable,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $isThereMoreWidth,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: $appendChild,\n            value: function value(child) {\n              child[_parent] = this;\n              this[_children].push(child);\n              if (!child[$globalData] && this[$globalData]) {\n                child[$globalData] = this[$globalData];\n              }\n            }\n          }, {\n            key: $removeChild,\n            value: function value(child) {\n              var i = this[_children].indexOf(child);\n              this[_children].splice(i, 1);\n            }\n          }, {\n            key: $hasSettableValue,\n            value: function value() {\n              return this.hasOwnProperty(\"value\");\n            }\n          }, {\n            key: $setValue,\n            value: function value(_) {}\n          }, {\n            key: $onText,\n            value: function value(_) {}\n          }, {\n            key: $finalize,\n            value: function value() {}\n          }, {\n            key: $clean,\n            value: function value(builder) {\n              delete this[_hasChildren];\n              if (this[$cleanup]) {\n                builder.clean(this[$cleanup]);\n                delete this[$cleanup];\n              }\n            }\n          }, {\n            key: $indexOf,\n            value: function value(child) {\n              return this[_children].indexOf(child);\n            }\n          }, {\n            key: $insertAt,\n            value: function value(i, child) {\n              child[_parent] = this;\n              this[_children].splice(i, 0, child);\n              if (!child[$globalData] && this[$globalData]) {\n                child[$globalData] = this[$globalData];\n              }\n            }\n          }, {\n            key: $isTransparent,\n            value: function value() {\n              return !this.name;\n            }\n          }, {\n            key: $lastAttribute,\n            value: function value() {\n              return \"\";\n            }\n          }, {\n            key: $text,\n            value: function value() {\n              if (this[_children].length === 0) {\n                return this[$content];\n              }\n              return this[_children].map(function (c) {\n                return c[$text]();\n              }).join(\"\");\n            }\n          }, {\n            key: $isDescendent,\n            value: function value(parent) {\n              var node = this;\n              while (node) {\n                if (node === parent) {\n                  return true;\n                }\n                node = node[$getParent]();\n              }\n              return false;\n            }\n          }, {\n            key: $getParent,\n            value: function value() {\n              return this[_parent];\n            }\n          }, {\n            key: $getSubformParent,\n            value: function value() {\n              return this[$getParent]();\n            }\n          }, {\n            key: $getChildren,\n            value: function value() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              if (!name) {\n                return this[_children];\n              }\n              return this[name];\n            }\n          }, {\n            key: $dump,\n            value: function value() {\n              var dumped = Object.create(null);\n              if (this[$content]) {\n                dumped.$content = this[$content];\n              }\n              var _iterator126 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step126;\n              try {\n                for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {\n                  var name = _step126.value;\n                  var value = this[name];\n                  if (value === null) {\n                    continue;\n                  }\n                  if (value instanceof XFAObject) {\n                    dumped[name] = value[$dump]();\n                  } else if (value instanceof XFAObjectArray) {\n                    if (!value.isEmpty()) {\n                      dumped[name] = value.dump();\n                    }\n                  } else {\n                    dumped[name] = value;\n                  }\n                }\n              } catch (err) {\n                _iterator126.e(err);\n              } finally {\n                _iterator126.f();\n              }\n              return dumped;\n            }\n          }, {\n            key: $toStyle,\n            value: function value() {\n              return null;\n            }\n          }, {\n            key: $toHTML,\n            value: function value() {\n              return _utils.HTMLResult.EMPTY;\n            }\n          }, {\n            key: $getContainedChildren,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n              var _iterator127, _step127, node;\n              return _regeneratorRuntime().wrap(function value$(_context61) {\n                while (1) {\n                  switch (_context61.prev = _context61.next) {\n                    case 0:\n                      _iterator127 = _createForOfIteratorHelper(this[$getChildren]());\n                      _context61.prev = 1;\n                      _iterator127.s();\n                    case 3:\n                      if ((_step127 = _iterator127.n()).done) {\n                        _context61.next = 9;\n                        break;\n                      }\n                      node = _step127.value;\n                      _context61.next = 7;\n                      return node;\n                    case 7:\n                      _context61.next = 3;\n                      break;\n                    case 9:\n                      _context61.next = 14;\n                      break;\n                    case 11:\n                      _context61.prev = 11;\n                      _context61.t0 = _context61[\"catch\"](1);\n                      _iterator127.e(_context61.t0);\n                    case 14:\n                      _context61.prev = 14;\n                      _iterator127.f();\n                      return _context61.finish(14);\n                    case 17:\n                    case \"end\":\n                      return _context61.stop();\n                  }\n                }\n              }, value, this, [[1, 11, 14, 17]]);\n            })\n          }, {\n            key: _filteredChildrenGenerator,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value(filter, include) {\n              var _iterator128, _step128, node, availableSpace, res;\n              return _regeneratorRuntime().wrap(function value$(_context62) {\n                while (1) {\n                  switch (_context62.prev = _context62.next) {\n                    case 0:\n                      _iterator128 = _createForOfIteratorHelper(this[$getContainedChildren]());\n                      _context62.prev = 1;\n                      _iterator128.s();\n                    case 3:\n                      if ((_step128 = _iterator128.n()).done) {\n                        _context62.next = 13;\n                        break;\n                      }\n                      node = _step128.value;\n                      if (!(!filter || include === filter.has(node[$nodeName]))) {\n                        _context62.next = 11;\n                        break;\n                      }\n                      availableSpace = this[$getAvailableSpace]();\n                      res = node[$toHTML](availableSpace);\n                      if (!res.success) {\n                        this[$extra].failingNode = node;\n                      }\n                      _context62.next = 11;\n                      return res;\n                    case 11:\n                      _context62.next = 3;\n                      break;\n                    case 13:\n                      _context62.next = 18;\n                      break;\n                    case 15:\n                      _context62.prev = 15;\n                      _context62.t0 = _context62[\"catch\"](1);\n                      _iterator128.e(_context62.t0);\n                    case 18:\n                      _context62.prev = 18;\n                      _iterator128.f();\n                      return _context62.finish(18);\n                    case 21:\n                    case \"end\":\n                      return _context62.stop();\n                  }\n                }\n              }, value, this, [[1, 15, 18, 21]]);\n            })\n          }, {\n            key: $flushHTML,\n            value: function value() {\n              return null;\n            }\n          }, {\n            key: $addHTML,\n            value: function value(html, bbox) {\n              this[$extra].children.push(html);\n            }\n          }, {\n            key: $getAvailableSpace,\n            value: function value() {}\n          }, {\n            key: $childrenToHTML,\n            value: function value(_ref88) {\n              var _ref88$filter = _ref88.filter,\n                filter = _ref88$filter === void 0 ? null : _ref88$filter,\n                _ref88$include = _ref88.include,\n                include = _ref88$include === void 0 ? true : _ref88$include;\n              if (!this[$extra].generator) {\n                this[$extra].generator = this[_filteredChildrenGenerator](filter, include);\n              } else {\n                var availableSpace = this[$getAvailableSpace]();\n                var res = this[$extra].failingNode[$toHTML](availableSpace);\n                if (!res.success) {\n                  return res;\n                }\n                if (res.html) {\n                  this[$addHTML](res.html, res.bbox);\n                }\n                delete this[$extra].failingNode;\n              }\n              while (true) {\n                var gen = this[$extra].generator.next();\n                if (gen.done) {\n                  break;\n                }\n                var _res = gen.value;\n                if (!_res.success) {\n                  return _res;\n                }\n                if (_res.html) {\n                  this[$addHTML](_res.html, _res.bbox);\n                }\n              }\n              this[$extra].generator = null;\n              return _utils.HTMLResult.EMPTY;\n            }\n          }, {\n            key: $setSetAttributes,\n            value: function value(attributes) {\n              this[_setAttributes] = new Set(Object.keys(attributes));\n            }\n          }, {\n            key: _getUnsetAttributes,\n            value: function value(protoAttributes) {\n              var allAttr = this[_attributeNames];\n              var setAttr = this[_setAttributes];\n              return _toConsumableArray(protoAttributes).filter(function (x) {\n                return allAttr.has(x) && !setAttr.has(x);\n              });\n            }\n          }, {\n            key: $resolvePrototypes,\n            value: function value(ids) {\n              var ancestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n              var _iterator129 = _createForOfIteratorHelper(this[_children]),\n                _step129;\n              try {\n                for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {\n                  var child = _step129.value;\n                  child[_resolvePrototypesHelper](ids, ancestors);\n                }\n              } catch (err) {\n                _iterator129.e(err);\n              } finally {\n                _iterator129.f();\n              }\n            }\n          }, {\n            key: _resolvePrototypesHelper,\n            value: function value(ids, ancestors) {\n              var proto = this[_getPrototype](ids, ancestors);\n              if (proto) {\n                this[_applyPrototype](proto, ids, ancestors);\n              } else {\n                this[$resolvePrototypes](ids, ancestors);\n              }\n            }\n          }, {\n            key: _getPrototype,\n            value: function value(ids, ancestors) {\n              var use = this.use,\n                usehref = this.usehref;\n              if (!use && !usehref) {\n                return null;\n              }\n              var proto = null;\n              var somExpression = null;\n              var id = null;\n              var ref = use;\n              if (usehref) {\n                ref = usehref;\n                if (usehref.startsWith(\"#som(\") && usehref.endsWith(\")\")) {\n                  somExpression = usehref.slice(\"#som(\".length, usehref.length - 1);\n                } else if (usehref.startsWith(\".#som(\") && usehref.endsWith(\")\")) {\n                  somExpression = usehref.slice(\".#som(\".length, usehref.length - 1);\n                } else if (usehref.startsWith(\"#\")) {\n                  id = usehref.slice(1);\n                } else if (usehref.startsWith(\".#\")) {\n                  id = usehref.slice(2);\n                }\n              } else if (use.startsWith(\"#\")) {\n                id = use.slice(1);\n              } else {\n                somExpression = use;\n              }\n              this.use = this.usehref = \"\";\n              if (id) {\n                proto = ids.get(id);\n              } else {\n                proto = (0, _som.searchNode)(ids.get($root), this, somExpression, true, false);\n                if (proto) {\n                  proto = proto[0];\n                }\n              }\n              if (!proto) {\n                (0, _util.warn)(\"XFA - Invalid prototype reference: \".concat(ref, \".\"));\n                return null;\n              }\n              if (proto[$nodeName] !== this[$nodeName]) {\n                (0, _util.warn)(\"XFA - Incompatible prototype: \".concat(proto[$nodeName], \" !== \").concat(this[$nodeName], \".\"));\n                return null;\n              }\n              if (ancestors.has(proto)) {\n                (0, _util.warn)(\"XFA - Cycle detected in prototypes use.\");\n                return null;\n              }\n              ancestors.add(proto);\n              var protoProto = proto[_getPrototype](ids, ancestors);\n              if (protoProto) {\n                proto[_applyPrototype](protoProto, ids, ancestors);\n              }\n              proto[$resolvePrototypes](ids, ancestors);\n              ancestors.delete(proto);\n              return proto;\n            }\n          }, {\n            key: _applyPrototype,\n            value: function value(proto, ids, ancestors) {\n              if (ancestors.has(proto)) {\n                (0, _util.warn)(\"XFA - Cycle detected in prototypes use.\");\n                return;\n              }\n              if (!this[$content] && proto[$content]) {\n                this[$content] = proto[$content];\n              }\n              var newAncestors = new Set(ancestors);\n              newAncestors.add(proto);\n              var _iterator130 = _createForOfIteratorHelper(this[_getUnsetAttributes](proto[_setAttributes])),\n                _step130;\n              try {\n                for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {\n                  var unsetAttrName = _step130.value;\n                  this[unsetAttrName] = proto[unsetAttrName];\n                  if (this[_setAttributes]) {\n                    this[_setAttributes].add(unsetAttrName);\n                  }\n                }\n              } catch (err) {\n                _iterator130.e(err);\n              } finally {\n                _iterator130.f();\n              }\n              var _iterator131 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step131;\n              try {\n                for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {\n                  var name = _step131.value;\n                  if (this[_attributeNames].has(name)) {\n                    continue;\n                  }\n                  var _value2 = this[name];\n                  var protoValue = proto[name];\n                  if (_value2 instanceof XFAObjectArray) {\n                    var _iterator132 = _createForOfIteratorHelper(_value2[_children]),\n                      _step132;\n                    try {\n                      for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {\n                        var _child = _step132.value;\n                        _child[_resolvePrototypesHelper](ids, ancestors);\n                      }\n                    } catch (err) {\n                      _iterator132.e(err);\n                    } finally {\n                      _iterator132.f();\n                    }\n                    for (var i = _value2[_children].length, ii = protoValue[_children].length; i < ii; i++) {\n                      var child = proto[_children][i][$clone]();\n                      if (_value2.push(child)) {\n                        child[_parent] = this;\n                        this[_children].push(child);\n                        child[_resolvePrototypesHelper](ids, ancestors);\n                      } else {\n                        break;\n                      }\n                    }\n                    continue;\n                  }\n                  if (_value2 !== null) {\n                    _value2[$resolvePrototypes](ids, ancestors);\n                    if (protoValue) {\n                      _value2[_applyPrototype](protoValue, ids, ancestors);\n                    }\n                    continue;\n                  }\n                  if (protoValue !== null) {\n                    var _child2 = protoValue[$clone]();\n                    _child2[_parent] = this;\n                    this[name] = _child2;\n                    this[_children].push(_child2);\n                    _child2[_resolvePrototypesHelper](ids, ancestors);\n                  }\n                }\n              } catch (err) {\n                _iterator131.e(err);\n              } finally {\n                _iterator131.f();\n              }\n            }\n          }, {\n            key: $clone,\n            value: function value() {\n              var clone = Object.create(Object.getPrototypeOf(this));\n              var _iterator133 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(this)),\n                _step133;\n              try {\n                for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {\n                  var $symbol = _step133.value;\n                  try {\n                    clone[$symbol] = this[$symbol];\n                  } catch (_) {\n                    (0, _util.shadow)(clone, $symbol, this[$symbol]);\n                  }\n                }\n              } catch (err) {\n                _iterator133.e(err);\n              } finally {\n                _iterator133.f();\n              }\n              clone[$uid] = \"\".concat(clone[$nodeName]).concat(uid++);\n              clone[_children] = [];\n              var _iterator134 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step134;\n              try {\n                for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {\n                  var name = _step134.value;\n                  if (this[_attributeNames].has(name)) {\n                    clone[name] = XFAObject[_cloneAttribute](this[name]);\n                    continue;\n                  }\n                  var _value3 = this[name];\n                  if (_value3 instanceof XFAObjectArray) {\n                    clone[name] = new XFAObjectArray(_value3[_max]);\n                  } else {\n                    clone[name] = null;\n                  }\n                }\n              } catch (err) {\n                _iterator134.e(err);\n              } finally {\n                _iterator134.f();\n              }\n              var _iterator135 = _createForOfIteratorHelper(this[_children]),\n                _step135;\n              try {\n                for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {\n                  var child = _step135.value;\n                  var _name = child[$nodeName];\n                  var clonedChild = child[$clone]();\n                  clone[_children].push(clonedChild);\n                  clonedChild[_parent] = clone;\n                  if (clone[_name] === null) {\n                    clone[_name] = clonedChild;\n                  } else {\n                    clone[_name][_children].push(clonedChild);\n                  }\n                }\n              } catch (err) {\n                _iterator135.e(err);\n              } finally {\n                _iterator135.f();\n              }\n              return clone;\n            }\n          }, {\n            key: $getChildren,\n            value: function value() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              if (!name) {\n                return this[_children];\n              }\n              return this[_children].filter(function (c) {\n                return c[$nodeName] === name;\n              });\n            }\n          }, {\n            key: $getChildrenByClass,\n            value: function value(name) {\n              return this[name];\n            }\n          }, {\n            key: $getChildrenByName,\n            value: function value(name, allTransparent) {\n              var first = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n              return Array.from(this[$getChildrenByNameIt](name, allTransparent, first));\n            }\n          }, {\n            key: $getChildrenByNameIt,\n            value: function value(name, allTransparent) {\n              var _this99 = this;\n              var first = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n              return /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {\n                var _iterator136, _step136, child;\n                return _regeneratorRuntime().wrap(function _callee61$(_context63) {\n                  while (1) {\n                    switch (_context63.prev = _context63.next) {\n                      case 0:\n                        if (!(name === \"parent\")) {\n                          _context63.next = 4;\n                          break;\n                        }\n                        _context63.next = 3;\n                        return _this99[_parent];\n                      case 3:\n                        return _context63.abrupt(\"return\");\n                      case 4:\n                        _iterator136 = _createForOfIteratorHelper(_this99[_children]);\n                        _context63.prev = 5;\n                        _iterator136.s();\n                      case 7:\n                        if ((_step136 = _iterator136.n()).done) {\n                          _context63.next = 19;\n                          break;\n                        }\n                        child = _step136.value;\n                        if (!(child[$nodeName] === name)) {\n                          _context63.next = 12;\n                          break;\n                        }\n                        _context63.next = 12;\n                        return child;\n                      case 12:\n                        if (!(child.name === name)) {\n                          _context63.next = 15;\n                          break;\n                        }\n                        _context63.next = 15;\n                        return child;\n                      case 15:\n                        if (!(allTransparent || child[$isTransparent]())) {\n                          _context63.next = 17;\n                          break;\n                        }\n                        return _context63.delegateYield(child[$getChildrenByNameIt](name, allTransparent, false), \"t0\", 17);\n                      case 17:\n                        _context63.next = 7;\n                        break;\n                      case 19:\n                        _context63.next = 24;\n                        break;\n                      case 21:\n                        _context63.prev = 21;\n                        _context63.t1 = _context63[\"catch\"](5);\n                        _iterator136.e(_context63.t1);\n                      case 24:\n                        _context63.prev = 24;\n                        _iterator136.f();\n                        return _context63.finish(24);\n                      case 27:\n                        if (!(first && _this99[_attributeNames].has(name))) {\n                          _context63.next = 30;\n                          break;\n                        }\n                        _context63.next = 30;\n                        return new XFAAttribute(_this99, name, _this99[name]);\n                      case 30:\n                      case \"end\":\n                        return _context63.stop();\n                    }\n                  }\n                }, _callee61, null, [[5, 21, 24, 27]]);\n              })();\n            }\n          }, {\n            key: _attributeNames,\n            get: function get() {\n              var proto = Object.getPrototypeOf(this);\n              if (!proto._attributes) {\n                var attributes = proto._attributes = new Set();\n                var _iterator137 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                  _step137;\n                try {\n                  for (_iterator137.s(); !(_step137 = _iterator137.n()).done;) {\n                    var name = _step137.value;\n                    if (this[name] === null || this[name] instanceof XFAObject || this[name] instanceof XFAObjectArray) {\n                      break;\n                    }\n                    attributes.add(name);\n                  }\n                } catch (err) {\n                  _iterator137.e(err);\n                } finally {\n                  _iterator137.f();\n                }\n              }\n              return (0, _util.shadow)(this, _attributeNames, proto._attributes);\n            }\n          }], [{\n            key: _cloneAttribute,\n            value: function value(obj) {\n              if (Array.isArray(obj)) {\n                return obj.map(function (x) {\n                  return XFAObject[_cloneAttribute](x);\n                });\n              }\n              if (typeof obj === \"object\" && obj !== null) {\n                return Object.assign({}, obj);\n              }\n              return obj;\n            }\n          }]);\n          return XFAObject;\n        }();\n        exports.XFAObject = XFAObject;\n        var XFAObjectArray = /*#__PURE__*/function () {\n          function XFAObjectArray() {\n            var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n            _classCallCheck(this, XFAObjectArray);\n            this[_max] = max;\n            this[_children] = [];\n          }\n          _createClass(XFAObjectArray, [{\n            key: \"push\",\n            value: function push(child) {\n              var len = this[_children].length;\n              if (len <= this[_max]) {\n                this[_children].push(child);\n                return true;\n              }\n              (0, _util.warn)(\"XFA - node \\\"\".concat(child[$nodeName], \"\\\" accepts no more than \").concat(this[_max], \" children\"));\n              return false;\n            }\n          }, {\n            key: \"isEmpty\",\n            value: function isEmpty() {\n              return this[_children].length === 0;\n            }\n          }, {\n            key: \"dump\",\n            value: function dump() {\n              return this[_children].length === 1 ? this[_children][0][$dump]() : this[_children].map(function (x) {\n                return x[$dump]();\n              });\n            }\n          }, {\n            key: $clone,\n            value: function value() {\n              var clone = new XFAObjectArray(this[_max]);\n              clone[_children] = this[_children].map(function (c) {\n                return c[$clone]();\n              });\n              return clone;\n            }\n          }, {\n            key: \"clear\",\n            value: function clear() {\n              this[_children].length = 0;\n            }\n          }, {\n            key: \"children\",\n            get: function get() {\n              return this[_children];\n            }\n          }]);\n          return XFAObjectArray;\n        }();\n        exports.XFAObjectArray = XFAObjectArray;\n        var XFAAttribute = /*#__PURE__*/function () {\n          function XFAAttribute(node, name, value) {\n            _classCallCheck(this, XFAAttribute);\n            this[_parent] = node;\n            this[$nodeName] = name;\n            this[$content] = value;\n            this[$consumed] = false;\n            this[$uid] = \"attribute\".concat(uid++);\n          }\n          _createClass(XFAAttribute, [{\n            key: $getParent,\n            value: function value() {\n              return this[_parent];\n            }\n          }, {\n            key: $isDataValue,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: $getDataValue,\n            value: function value() {\n              return this[$content].trim();\n            }\n          }, {\n            key: $setValue,\n            value: function (_value4) {\n              function value(_x124) {\n                return _value4.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value4.toString();\n              };\n              return value;\n            }(function (value) {\n              value = value.value || \"\";\n              this[$content] = value.toString();\n            })\n          }, {\n            key: $text,\n            value: function value() {\n              return this[$content];\n            }\n          }, {\n            key: $isDescendent,\n            value: function value(parent) {\n              return this[_parent] === parent || this[_parent][$isDescendent](parent);\n            }\n          }]);\n          return XFAAttribute;\n        }();\n        exports.XFAAttribute = XFAAttribute;\n        var XmlObject = /*#__PURE__*/function (_XFAObject) {\n          _inherits(XmlObject, _XFAObject);\n          function XmlObject(nsId, name) {\n            var _this100;\n            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n            _classCallCheck(this, XmlObject);\n            _this100 = _possibleConstructorReturn(this, _getPrototypeOf(XmlObject).call(this, nsId, name));\n            _this100[$content] = \"\";\n            _this100[_dataValue] = null;\n            if (name !== \"#text\") {\n              var _map3 = new Map();\n              _this100[_attributes] = _map3;\n              for (var _i61 = 0, _Object$entries4 = Object.entries(attributes); _i61 < _Object$entries4.length; _i61++) {\n                var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i61], 2),\n                  attrName = _Object$entries4$_i[0],\n                  _value5 = _Object$entries4$_i[1];\n                _map3.set(attrName, new XFAAttribute(_assertThisInitialized(_assertThisInitialized(_this100)), attrName, _value5));\n              }\n              if (attributes.hasOwnProperty($nsAttributes)) {\n                var dataNode = attributes[$nsAttributes].xfa.dataNode;\n                if (dataNode !== undefined) {\n                  if (dataNode === \"dataGroup\") {\n                    _this100[_dataValue] = false;\n                  } else if (dataNode === \"dataValue\") {\n                    _this100[_dataValue] = true;\n                  }\n                }\n              }\n            }\n            _this100[$consumed] = false;\n            return _this100;\n          }\n          _createClass(XmlObject, [{\n            key: $toString,\n            value: function value(buf) {\n              var tagName = this[$nodeName];\n              if (tagName === \"#text\") {\n                buf.push((0, _core_utils.encodeToXmlString)(this[$content]));\n                return;\n              }\n              var utf8TagName = (0, _util.utf8StringToString)(tagName);\n              var prefix = this[$namespaceId] === NS_DATASETS ? \"xfa:\" : \"\";\n              buf.push(\"<\".concat(prefix).concat(utf8TagName));\n              var _iterator138 = _createForOfIteratorHelper(this[_attributes].entries()),\n                _step138;\n              try {\n                for (_iterator138.s(); !(_step138 = _iterator138.n()).done;) {\n                  var _step138$value = _slicedToArray(_step138.value, 2),\n                    name = _step138$value[0],\n                    _value6 = _step138$value[1];\n                  var utf8Name = (0, _util.utf8StringToString)(name);\n                  buf.push(\" \".concat(utf8Name, \"=\\\"\").concat((0, _core_utils.encodeToXmlString)(_value6[$content]), \"\\\"\"));\n                }\n              } catch (err) {\n                _iterator138.e(err);\n              } finally {\n                _iterator138.f();\n              }\n              if (this[_dataValue] !== null) {\n                if (this[_dataValue]) {\n                  buf.push(\" xfa:dataNode=\\\"dataValue\\\"\");\n                } else {\n                  buf.push(\" xfa:dataNode=\\\"dataGroup\\\"\");\n                }\n              }\n              if (!this[$content] && this[_children].length === 0) {\n                buf.push(\"/>\");\n                return;\n              }\n              buf.push(\">\");\n              if (this[$content]) {\n                if (typeof this[$content] === \"string\") {\n                  buf.push((0, _core_utils.encodeToXmlString)(this[$content]));\n                } else {\n                  this[$content][$toString](buf);\n                }\n              } else {\n                var _iterator139 = _createForOfIteratorHelper(this[_children]),\n                  _step139;\n                try {\n                  for (_iterator139.s(); !(_step139 = _iterator139.n()).done;) {\n                    var child = _step139.value;\n                    child[$toString](buf);\n                  }\n                } catch (err) {\n                  _iterator139.e(err);\n                } finally {\n                  _iterator139.f();\n                }\n              }\n              buf.push(\"</\".concat(prefix).concat(utf8TagName, \">\"));\n            }\n          }, {\n            key: $onChild,\n            value: function value(child) {\n              if (this[$content]) {\n                var node = new XmlObject(this[$namespaceId], \"#text\");\n                this[$appendChild](node);\n                node[$content] = this[$content];\n                this[$content] = \"\";\n              }\n              this[$appendChild](child);\n              return true;\n            }\n          }, {\n            key: $onText,\n            value: function value(str) {\n              this[$content] += str;\n            }\n          }, {\n            key: $finalize,\n            value: function value() {\n              if (this[$content] && this[_children].length > 0) {\n                var node = new XmlObject(this[$namespaceId], \"#text\");\n                this[$appendChild](node);\n                node[$content] = this[$content];\n                delete this[$content];\n              }\n            }\n          }, {\n            key: $toHTML,\n            value: function value() {\n              if (this[$nodeName] === \"#text\") {\n                return _utils.HTMLResult.success({\n                  name: \"#text\",\n                  value: this[$content]\n                });\n              }\n              return _utils.HTMLResult.EMPTY;\n            }\n          }, {\n            key: $getChildren,\n            value: function value() {\n              var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              if (!name) {\n                return this[_children];\n              }\n              return this[_children].filter(function (c) {\n                return c[$nodeName] === name;\n              });\n            }\n          }, {\n            key: $getAttributes,\n            value: function value() {\n              return this[_attributes];\n            }\n          }, {\n            key: $getChildrenByClass,\n            value: function value(name) {\n              var value = this[_attributes].get(name);\n              if (value !== undefined) {\n                return value;\n              }\n              return this[$getChildren](name);\n            }\n          }, {\n            key: $getChildrenByNameIt,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value(name, allTransparent) {\n              var value, _iterator140, _step140, child;\n              return _regeneratorRuntime().wrap(function value$(_context64) {\n                while (1) {\n                  switch (_context64.prev = _context64.next) {\n                    case 0:\n                      value = this[_attributes].get(name);\n                      if (!value) {\n                        _context64.next = 4;\n                        break;\n                      }\n                      _context64.next = 4;\n                      return value;\n                    case 4:\n                      _iterator140 = _createForOfIteratorHelper(this[_children]);\n                      _context64.prev = 5;\n                      _iterator140.s();\n                    case 7:\n                      if ((_step140 = _iterator140.n()).done) {\n                        _context64.next = 16;\n                        break;\n                      }\n                      child = _step140.value;\n                      if (!(child[$nodeName] === name)) {\n                        _context64.next = 12;\n                        break;\n                      }\n                      _context64.next = 12;\n                      return child;\n                    case 12:\n                      if (!allTransparent) {\n                        _context64.next = 14;\n                        break;\n                      }\n                      return _context64.delegateYield(child[$getChildrenByNameIt](name, allTransparent), \"t0\", 14);\n                    case 14:\n                      _context64.next = 7;\n                      break;\n                    case 16:\n                      _context64.next = 21;\n                      break;\n                    case 18:\n                      _context64.prev = 18;\n                      _context64.t1 = _context64[\"catch\"](5);\n                      _iterator140.e(_context64.t1);\n                    case 21:\n                      _context64.prev = 21;\n                      _iterator140.f();\n                      return _context64.finish(21);\n                    case 24:\n                    case \"end\":\n                      return _context64.stop();\n                  }\n                }\n              }, value, this, [[5, 18, 21, 24]]);\n            })\n          }, {\n            key: $getAttributeIt,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value(name, skipConsumed) {\n              var value, _iterator141, _step141, child;\n              return _regeneratorRuntime().wrap(function value$(_context65) {\n                while (1) {\n                  switch (_context65.prev = _context65.next) {\n                    case 0:\n                      value = this[_attributes].get(name);\n                      if (!(value && (!skipConsumed || !value[$consumed]))) {\n                        _context65.next = 4;\n                        break;\n                      }\n                      _context65.next = 4;\n                      return value;\n                    case 4:\n                      _iterator141 = _createForOfIteratorHelper(this[_children]);\n                      _context65.prev = 5;\n                      _iterator141.s();\n                    case 7:\n                      if ((_step141 = _iterator141.n()).done) {\n                        _context65.next = 12;\n                        break;\n                      }\n                      child = _step141.value;\n                      return _context65.delegateYield(child[$getAttributeIt](name, skipConsumed), \"t0\", 10);\n                    case 10:\n                      _context65.next = 7;\n                      break;\n                    case 12:\n                      _context65.next = 17;\n                      break;\n                    case 14:\n                      _context65.prev = 14;\n                      _context65.t1 = _context65[\"catch\"](5);\n                      _iterator141.e(_context65.t1);\n                    case 17:\n                      _context65.prev = 17;\n                      _iterator141.f();\n                      return _context65.finish(17);\n                    case 20:\n                    case \"end\":\n                      return _context65.stop();\n                  }\n                }\n              }, value, this, [[5, 14, 17, 20]]);\n            })\n          }, {\n            key: $getRealChildrenByNameIt,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value(name, allTransparent, skipConsumed) {\n              var _iterator142, _step142, child;\n              return _regeneratorRuntime().wrap(function value$(_context66) {\n                while (1) {\n                  switch (_context66.prev = _context66.next) {\n                    case 0:\n                      _iterator142 = _createForOfIteratorHelper(this[_children]);\n                      _context66.prev = 1;\n                      _iterator142.s();\n                    case 3:\n                      if ((_step142 = _iterator142.n()).done) {\n                        _context66.next = 12;\n                        break;\n                      }\n                      child = _step142.value;\n                      if (!(child[$nodeName] === name && (!skipConsumed || !child[$consumed]))) {\n                        _context66.next = 8;\n                        break;\n                      }\n                      _context66.next = 8;\n                      return child;\n                    case 8:\n                      if (!allTransparent) {\n                        _context66.next = 10;\n                        break;\n                      }\n                      return _context66.delegateYield(child[$getRealChildrenByNameIt](name, allTransparent, skipConsumed), \"t0\", 10);\n                    case 10:\n                      _context66.next = 3;\n                      break;\n                    case 12:\n                      _context66.next = 17;\n                      break;\n                    case 14:\n                      _context66.prev = 14;\n                      _context66.t1 = _context66[\"catch\"](1);\n                      _iterator142.e(_context66.t1);\n                    case 17:\n                      _context66.prev = 17;\n                      _iterator142.f();\n                      return _context66.finish(17);\n                    case 20:\n                    case \"end\":\n                      return _context66.stop();\n                  }\n                }\n              }, value, this, [[1, 14, 17, 20]]);\n            })\n          }, {\n            key: $isDataValue,\n            value: function value() {\n              if (this[_dataValue] === null) {\n                return this[_children].length === 0 || this[_children][0][$namespaceId] === _namespaces.NamespaceIds.xhtml.id;\n              }\n              return this[_dataValue];\n            }\n          }, {\n            key: $getDataValue,\n            value: function value() {\n              if (this[_dataValue] === null) {\n                if (this[_children].length === 0) {\n                  return this[$content].trim();\n                }\n                if (this[_children][0][$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {\n                  return this[_children][0][$text]().trim();\n                }\n                return null;\n              }\n              return this[$content].trim();\n            }\n          }, {\n            key: $setValue,\n            value: function (_value7) {\n              function value(_x125) {\n                return _value7.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value7.toString();\n              };\n              return value;\n            }(function (value) {\n              value = value.value || \"\";\n              this[$content] = value.toString();\n            })\n          }, {\n            key: $dump,\n            value: function value() {\n              var hasNS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var dumped = Object.create(null);\n              if (hasNS) {\n                dumped.$ns = this[$namespaceId];\n              }\n              if (this[$content]) {\n                dumped.$content = this[$content];\n              }\n              dumped.$name = this[$nodeName];\n              dumped.children = [];\n              var _iterator143 = _createForOfIteratorHelper(this[_children]),\n                _step143;\n              try {\n                for (_iterator143.s(); !(_step143 = _iterator143.n()).done;) {\n                  var child = _step143.value;\n                  dumped.children.push(child[$dump](hasNS));\n                }\n              } catch (err) {\n                _iterator143.e(err);\n              } finally {\n                _iterator143.f();\n              }\n              dumped.attributes = Object.create(null);\n              var _iterator144 = _createForOfIteratorHelper(this[_attributes]),\n                _step144;\n              try {\n                for (_iterator144.s(); !(_step144 = _iterator144.n()).done;) {\n                  var _step144$value = _slicedToArray(_step144.value, 2),\n                    name = _step144$value[0],\n                    _value8 = _step144$value[1];\n                  dumped.attributes[name] = _value8[$content];\n                }\n              } catch (err) {\n                _iterator144.e(err);\n              } finally {\n                _iterator144.f();\n              }\n              return dumped;\n            }\n          }]);\n          return XmlObject;\n        }(XFAObject);\n        exports.XmlObject = XmlObject;\n        var ContentObject = /*#__PURE__*/function (_XFAObject2) {\n          _inherits(ContentObject, _XFAObject2);\n          function ContentObject(nsId, name) {\n            var _this101;\n            _classCallCheck(this, ContentObject);\n            _this101 = _possibleConstructorReturn(this, _getPrototypeOf(ContentObject).call(this, nsId, name));\n            _this101[$content] = \"\";\n            return _this101;\n          }\n          _createClass(ContentObject, [{\n            key: $onText,\n            value: function value(text) {\n              this[$content] += text;\n            }\n          }, {\n            key: $finalize,\n            value: function value() {}\n          }]);\n          return ContentObject;\n        }(XFAObject);\n        exports.ContentObject = ContentObject;\n        var OptionObject = /*#__PURE__*/function (_ContentObject) {\n          _inherits(OptionObject, _ContentObject);\n          function OptionObject(nsId, name, options) {\n            var _this102;\n            _classCallCheck(this, OptionObject);\n            _this102 = _possibleConstructorReturn(this, _getPrototypeOf(OptionObject).call(this, nsId, name));\n            _this102[_options] = options;\n            return _this102;\n          }\n          _createClass(OptionObject, [{\n            key: $finalize,\n            value: function value() {\n              var _this103 = this;\n              this[$content] = (0, _utils.getKeyword)({\n                data: this[$content],\n                defaultValue: this[_options][0],\n                validate: function validate(k) {\n                  return _this103[_options].includes(k);\n                }\n              });\n            }\n          }, {\n            key: $clean,\n            value: function value(builder) {\n              _get(_getPrototypeOf(OptionObject.prototype), $clean, this).call(this, builder);\n              delete this[_options];\n            }\n          }]);\n          return OptionObject;\n        }(ContentObject);\n        exports.OptionObject = OptionObject;\n        var StringObject = /*#__PURE__*/function (_ContentObject2) {\n          _inherits(StringObject, _ContentObject2);\n          function StringObject() {\n            _classCallCheck(this, StringObject);\n            return _possibleConstructorReturn(this, _getPrototypeOf(StringObject).apply(this, arguments));\n          }\n          _createClass(StringObject, [{\n            key: $finalize,\n            value: function value() {\n              this[$content] = this[$content].trim();\n            }\n          }]);\n          return StringObject;\n        }(ContentObject);\n        exports.StringObject = StringObject;\n        var IntegerObject = /*#__PURE__*/function (_ContentObject3) {\n          _inherits(IntegerObject, _ContentObject3);\n          function IntegerObject(nsId, name, defaultValue, validator) {\n            var _this104;\n            _classCallCheck(this, IntegerObject);\n            _this104 = _possibleConstructorReturn(this, _getPrototypeOf(IntegerObject).call(this, nsId, name));\n            _this104[_defaultValue] = defaultValue;\n            _this104[_validator] = validator;\n            return _this104;\n          }\n          _createClass(IntegerObject, [{\n            key: $finalize,\n            value: function value() {\n              this[$content] = (0, _utils.getInteger)({\n                data: this[$content],\n                defaultValue: this[_defaultValue],\n                validate: this[_validator]\n              });\n            }\n          }, {\n            key: $clean,\n            value: function value(builder) {\n              _get(_getPrototypeOf(IntegerObject.prototype), $clean, this).call(this, builder);\n              delete this[_defaultValue];\n              delete this[_validator];\n            }\n          }]);\n          return IntegerObject;\n        }(ContentObject);\n        exports.IntegerObject = IntegerObject;\n        var Option01 = /*#__PURE__*/function (_IntegerObject) {\n          _inherits(Option01, _IntegerObject);\n          function Option01(nsId, name) {\n            _classCallCheck(this, Option01);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Option01).call(this, nsId, name, 0, function (n) {\n              return n === 1;\n            }));\n          }\n          return Option01;\n        }(IntegerObject);\n        exports.Option01 = Option01;\n        var Option10 = /*#__PURE__*/function (_IntegerObject2) {\n          _inherits(Option10, _IntegerObject2);\n          function Option10(nsId, name) {\n            _classCallCheck(this, Option10);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Option10).call(this, nsId, name, 1, function (n) {\n              return n === 0;\n            }));\n          }\n          return Option10;\n        }(IntegerObject);\n        exports.Option10 = Option10;\n\n        /***/\n      }, /* 78 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.HTMLResult = void 0;\n        exports.getBBox = getBBox;\n        exports.getColor = getColor;\n        exports.getFloat = getFloat;\n        exports.getInteger = getInteger;\n        exports.getKeyword = getKeyword;\n        exports.getMeasurement = getMeasurement;\n        exports.getRatio = getRatio;\n        exports.getRelevant = getRelevant;\n        exports.getStringOption = getStringOption;\n        exports.stripQuotes = stripQuotes;\n        var _util = __w_pdfjs_require__(2);\n        var dimConverters = {\n          pt: function pt(x) {\n            return x;\n          },\n          cm: function cm(x) {\n            return x / 2.54 * 72;\n          },\n          mm: function mm(x) {\n            return x / (10 * 2.54) * 72;\n          },\n          in: function _in(x) {\n            return x * 72;\n          },\n          px: function px(x) {\n            return x;\n          }\n        };\n        var measurementPattern = /([+-]?\\d+\\.?\\d*)(.*)/;\n        function stripQuotes(str) {\n          if (str.startsWith(\"'\") || str.startsWith('\"')) {\n            return str.slice(1, str.length - 1);\n          }\n          return str;\n        }\n        function getInteger(_ref89) {\n          var data = _ref89.data,\n            defaultValue = _ref89.defaultValue,\n            validate = _ref89.validate;\n          if (!data) {\n            return defaultValue;\n          }\n          data = data.trim();\n          var n = parseInt(data, 10);\n          if (!isNaN(n) && validate(n)) {\n            return n;\n          }\n          return defaultValue;\n        }\n        function getFloat(_ref90) {\n          var data = _ref90.data,\n            defaultValue = _ref90.defaultValue,\n            validate = _ref90.validate;\n          if (!data) {\n            return defaultValue;\n          }\n          data = data.trim();\n          var n = parseFloat(data);\n          if (!isNaN(n) && validate(n)) {\n            return n;\n          }\n          return defaultValue;\n        }\n        function getKeyword(_ref91) {\n          var data = _ref91.data,\n            defaultValue = _ref91.defaultValue,\n            validate = _ref91.validate;\n          if (!data) {\n            return defaultValue;\n          }\n          data = data.trim();\n          if (validate(data)) {\n            return data;\n          }\n          return defaultValue;\n        }\n        function getStringOption(data, options) {\n          return getKeyword({\n            data: data,\n            defaultValue: options[0],\n            validate: function validate(k) {\n              return options.includes(k);\n            }\n          });\n        }\n        function getMeasurement(str) {\n          var def = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"0\";\n          def = def || \"0\";\n          if (!str) {\n            return getMeasurement(def);\n          }\n          var match = str.trim().match(measurementPattern);\n          if (!match) {\n            return getMeasurement(def);\n          }\n          var _match = _slicedToArray(match, 3),\n            valueStr = _match[1],\n            unit = _match[2];\n          var value = parseFloat(valueStr);\n          if (isNaN(value)) {\n            return getMeasurement(def);\n          }\n          if (value === 0) {\n            return 0;\n          }\n          var conv = dimConverters[unit];\n          if (conv) {\n            return conv(value);\n          }\n          return value;\n        }\n        function getRatio(data) {\n          if (!data) {\n            return {\n              num: 1,\n              den: 1\n            };\n          }\n          var ratio = data.trim().split(/\\s*:\\s*/).map(function (x) {\n            return parseFloat(x);\n          }).filter(function (x) {\n            return !isNaN(x);\n          });\n          if (ratio.length === 1) {\n            ratio.push(1);\n          }\n          if (ratio.length === 0) {\n            return {\n              num: 1,\n              den: 1\n            };\n          }\n          var _ratio = _slicedToArray(ratio, 2),\n            num = _ratio[0],\n            den = _ratio[1];\n          return {\n            num: num,\n            den: den\n          };\n        }\n        function getRelevant(data) {\n          if (!data) {\n            return [];\n          }\n          return data.trim().split(/\\s+/).map(function (e) {\n            return {\n              excluded: e[0] === \"-\",\n              viewname: e.substring(1)\n            };\n          });\n        }\n        function getColor(data) {\n          var def = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n          var _def = _slicedToArray(def, 3),\n            r = _def[0],\n            g = _def[1],\n            b = _def[2];\n          if (!data) {\n            return {\n              r: r,\n              g: g,\n              b: b\n            };\n          }\n          var color = data.trim().split(/\\s*,\\s*/).map(function (c) {\n            return Math.min(Math.max(0, parseInt(c.trim(), 10)), 255);\n          }).map(function (c) {\n            return isNaN(c) ? 0 : c;\n          });\n          if (color.length < 3) {\n            return {\n              r: r,\n              g: g,\n              b: b\n            };\n          }\n          var _color2 = _slicedToArray(color, 3);\n          r = _color2[0];\n          g = _color2[1];\n          b = _color2[2];\n          return {\n            r: r,\n            g: g,\n            b: b\n          };\n        }\n        function getBBox(data) {\n          var def = -1;\n          if (!data) {\n            return {\n              x: def,\n              y: def,\n              width: def,\n              height: def\n            };\n          }\n          var bbox = data.trim().split(/\\s*,\\s*/).map(function (m) {\n            return getMeasurement(m, \"-1\");\n          });\n          if (bbox.length < 4 || bbox[2] < 0 || bbox[3] < 0) {\n            return {\n              x: def,\n              y: def,\n              width: def,\n              height: def\n            };\n          }\n          var _bbox = _slicedToArray(bbox, 4),\n            x = _bbox[0],\n            y = _bbox[1],\n            width = _bbox[2],\n            height = _bbox[3];\n          return {\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          };\n        }\n        var HTMLResult = /*#__PURE__*/function () {\n          _createClass(HTMLResult, null, [{\n            key: \"FAILURE\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"FAILURE\", new HTMLResult(false, null, null, null));\n            }\n          }, {\n            key: \"EMPTY\",\n            get: function get() {\n              return (0, _util.shadow)(this, \"EMPTY\", new HTMLResult(true, null, null, null));\n            }\n          }]);\n          function HTMLResult(success, html, bbox, breakNode) {\n            _classCallCheck(this, HTMLResult);\n            this.success = success;\n            this.html = html;\n            this.bbox = bbox;\n            this.breakNode = breakNode;\n          }\n          _createClass(HTMLResult, [{\n            key: \"isBreak\",\n            value: function isBreak() {\n              return !!this.breakNode;\n            }\n          }], [{\n            key: \"breakNode\",\n            value: function breakNode(node) {\n              return new HTMLResult(false, null, null, node);\n            }\n          }, {\n            key: \"success\",\n            value: function success(html) {\n              var bbox = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              return new HTMLResult(true, html, bbox, null);\n            }\n          }]);\n          return HTMLResult;\n        }();\n        exports.HTMLResult = HTMLResult;\n\n        /***/\n      }, /* 79 */\n      /***/function (__unused_webpack_module, exports) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NamespaceIds = exports.$buildXFAObject = void 0;\n        var $buildXFAObject = Symbol();\n        exports.$buildXFAObject = $buildXFAObject;\n        var NamespaceIds = {\n          config: {\n            id: 0,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xci/\");\n            }\n          },\n          connectionSet: {\n            id: 1,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-connection-set/\");\n            }\n          },\n          datasets: {\n            id: 2,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-data/\");\n            }\n          },\n          form: {\n            id: 3,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-form/\");\n            }\n          },\n          localeSet: {\n            id: 4,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-locale-set/\");\n            }\n          },\n          pdf: {\n            id: 5,\n            check: function check(ns) {\n              return ns === \"http://ns.adobe.com/xdp/pdf/\";\n            }\n          },\n          signature: {\n            id: 6,\n            check: function check(ns) {\n              return ns === \"http://www.w3.org/2000/09/xmldsig#\";\n            }\n          },\n          sourceSet: {\n            id: 7,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-source-set/\");\n            }\n          },\n          stylesheet: {\n            id: 8,\n            check: function check(ns) {\n              return ns === \"http://www.w3.org/1999/XSL/Transform\";\n            }\n          },\n          template: {\n            id: 9,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xfa-template/\");\n            }\n          },\n          xdc: {\n            id: 10,\n            check: function check(ns) {\n              return ns.startsWith(\"http://www.xfa.org/schema/xdc/\");\n            }\n          },\n          xdp: {\n            id: 11,\n            check: function check(ns) {\n              return ns === \"http://ns.adobe.com/xdp/\";\n            }\n          },\n          xfdf: {\n            id: 12,\n            check: function check(ns) {\n              return ns === \"http://ns.adobe.com/xfdf/\";\n            }\n          },\n          xhtml: {\n            id: 13,\n            check: function check(ns) {\n              return ns === \"http://www.w3.org/1999/xhtml\";\n            }\n          },\n          xmpmeta: {\n            id: 14,\n            check: function check(ns) {\n              return ns === \"http://ns.adobe.com/xmpmeta/\";\n            }\n          }\n        };\n        exports.NamespaceIds = NamespaceIds;\n\n        /***/\n      }, /* 80 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createDataNode = createDataNode;\n        exports.searchNode = searchNode;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _namespaces = __w_pdfjs_require__(79);\n        var _util = __w_pdfjs_require__(2);\n        var namePattern = /^[^.[]+/;\n        var indexPattern = /^[^\\]]+/;\n        var operators = {\n          dot: 0,\n          dotDot: 1,\n          dotHash: 2,\n          dotBracket: 3,\n          dotParen: 4\n        };\n        var shortcuts = new Map([[\"$data\", function (root, current) {\n          return root.datasets ? root.datasets.data : root;\n        }], [\"$record\", function (root, current) {\n          return (root.datasets ? root.datasets.data : root)[_xfa_object.$getChildren]()[0];\n        }], [\"$template\", function (root, current) {\n          return root.template;\n        }], [\"$connectionSet\", function (root, current) {\n          return root.connectionSet;\n        }], [\"$form\", function (root, current) {\n          return root.form;\n        }], [\"$layout\", function (root, current) {\n          return root.layout;\n        }], [\"$host\", function (root, current) {\n          return root.host;\n        }], [\"$dataWindow\", function (root, current) {\n          return root.dataWindow;\n        }], [\"$event\", function (root, current) {\n          return root.event;\n        }], [\"!\", function (root, current) {\n          return root.datasets;\n        }], [\"$xfa\", function (root, current) {\n          return root;\n        }], [\"xfa\", function (root, current) {\n          return root;\n        }], [\"$\", function (root, current) {\n          return current;\n        }]]);\n        var somCache = new WeakMap();\n        var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;\n        function parseIndex(index) {\n          index = index.trim();\n          if (index === \"*\") {\n            return Infinity;\n          }\n          return parseInt(index, 10) || 0;\n        }\n        function parseExpression(expr, dotDotAllowed) {\n          var noExpr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          var match = expr.match(namePattern);\n          if (!match) {\n            return null;\n          }\n          var _match2 = match,\n            _match3 = _slicedToArray(_match2, 1),\n            name = _match3[0];\n          var parsed = [{\n            name: name,\n            cacheName: \".\" + name,\n            index: 0,\n            js: null,\n            formCalc: null,\n            operator: operators.dot\n          }];\n          var pos = name.length;\n          while (pos < expr.length) {\n            var spos = pos;\n            var char = expr.charAt(pos++);\n            if (char === \"[\") {\n              match = expr.slice(pos).match(indexPattern);\n              if (!match) {\n                (0, _util.warn)(\"XFA - Invalid index in SOM expression\");\n                return null;\n              }\n              parsed.at(-1).index = parseIndex(match[0]);\n              pos += match[0].length + 1;\n              continue;\n            }\n            var operator = void 0;\n            switch (expr.charAt(pos)) {\n              case \".\":\n                if (!dotDotAllowed) {\n                  return null;\n                }\n                pos++;\n                operator = operators.dotDot;\n                break;\n              case \"#\":\n                pos++;\n                operator = operators.dotHash;\n                break;\n              case \"[\":\n                if (noExpr) {\n                  (0, _util.warn)(\"XFA - SOM expression contains a FormCalc subexpression which is not supported for now.\");\n                  return null;\n                }\n                operator = operators.dotBracket;\n                break;\n              case \"(\":\n                if (noExpr) {\n                  (0, _util.warn)(\"XFA - SOM expression contains a JavaScript subexpression which is not supported for now.\");\n                  return null;\n                }\n                operator = operators.dotParen;\n                break;\n              default:\n                operator = operators.dot;\n                break;\n            }\n            match = expr.slice(pos).match(namePattern);\n            if (!match) {\n              break;\n            }\n            var _match4 = match;\n            var _match5 = _slicedToArray(_match4, 1);\n            name = _match5[0];\n            pos += name.length;\n            parsed.push({\n              name: name,\n              cacheName: expr.slice(spos, pos),\n              operator: operator,\n              index: 0,\n              js: null,\n              formCalc: null\n            });\n          }\n          return parsed;\n        }\n        function searchNode(root, container, expr) {\n          var dotDotAllowed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n          var useCache = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n          var parsed = parseExpression(expr, dotDotAllowed);\n          if (!parsed) {\n            return null;\n          }\n          var fn = shortcuts.get(parsed[0].name);\n          var i = 0;\n          var isQualified;\n          if (fn) {\n            isQualified = true;\n            root = [fn(root, container)];\n            i = 1;\n          } else {\n            isQualified = container === null;\n            root = [container || root];\n          }\n          var _loop6 = function _loop6(ii) {\n            var _parsed$i = parsed[i],\n              name = _parsed$i.name,\n              cacheName = _parsed$i.cacheName,\n              operator = _parsed$i.operator,\n              index = _parsed$i.index;\n            var nodes = [];\n            var _iterator145 = _createForOfIteratorHelper(root),\n              _step145;\n            try {\n              for (_iterator145.s(); !(_step145 = _iterator145.n()).done;) {\n                var node = _step145.value;\n                if (!(node instanceof _xfa_object.XFAObject)) {\n                  continue;\n                }\n                var children = void 0,\n                  cached = void 0;\n                if (useCache) {\n                  cached = somCache.get(node);\n                  if (!cached) {\n                    cached = new Map();\n                    somCache.set(node, cached);\n                  }\n                  children = cached.get(cacheName);\n                }\n                if (!children) {\n                  switch (operator) {\n                    case operators.dot:\n                      children = node[_xfa_object.$getChildrenByName](name, false);\n                      break;\n                    case operators.dotDot:\n                      children = node[_xfa_object.$getChildrenByName](name, true);\n                      break;\n                    case operators.dotHash:\n                      children = node[_xfa_object.$getChildrenByClass](name);\n                      if (children instanceof _xfa_object.XFAObjectArray) {\n                        children = children.children;\n                      } else {\n                        children = [children];\n                      }\n                      break;\n                    default:\n                      break;\n                  }\n                  if (useCache) {\n                    cached.set(cacheName, children);\n                  }\n                }\n                if (children.length > 0) {\n                  nodes.push(children);\n                }\n              }\n            } catch (err) {\n              _iterator145.e(err);\n            } finally {\n              _iterator145.f();\n            }\n            if (nodes.length === 0 && !isQualified && i === 0) {\n              var parent = container[_xfa_object.$getParent]();\n              container = parent;\n              if (!container) {\n                return {\n                  v: null\n                };\n              }\n              i = -1;\n              root = [container];\n              return \"continue\";\n            }\n            if (isFinite(index)) {\n              root = nodes.filter(function (node) {\n                return index < node.length;\n              }).map(function (node) {\n                return node[index];\n              });\n            } else {\n              root = nodes.flat();\n            }\n          };\n          for (var ii = parsed.length; i < ii; i++) {\n            var _ret = _loop6(ii);\n            if (_ret === \"continue\") continue;\n            if (typeof _ret === \"object\") return _ret.v;\n          }\n          if (root.length === 0) {\n            return null;\n          }\n          return root;\n        }\n        function createNodes(root, path) {\n          var node = null;\n          var _iterator146 = _createForOfIteratorHelper(path),\n            _step146;\n          try {\n            for (_iterator146.s(); !(_step146 = _iterator146.n()).done;) {\n              var _step146$value = _step146.value,\n                name = _step146$value.name,\n                index = _step146$value.index;\n              for (var i = 0, ii = !isFinite(index) ? 0 : index; i <= ii; i++) {\n                var nsId = root[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : root[_xfa_object.$namespaceId];\n                node = new _xfa_object.XmlObject(nsId, name);\n                root[_xfa_object.$appendChild](node);\n              }\n              root = node;\n            }\n          } catch (err) {\n            _iterator146.e(err);\n          } finally {\n            _iterator146.f();\n          }\n          return node;\n        }\n        function createDataNode(root, container, expr) {\n          var parsed = parseExpression(expr);\n          if (!parsed) {\n            return null;\n          }\n          if (parsed.some(function (x) {\n            return x.operator === operators.dotDot;\n          })) {\n            return null;\n          }\n          var fn = shortcuts.get(parsed[0].name);\n          var i = 0;\n          if (fn) {\n            root = fn(root, container);\n            i = 1;\n          } else {\n            root = container || root;\n          }\n          for (var ii = parsed.length; i < ii; i++) {\n            var _parsed$i2 = parsed[i],\n              name = _parsed$i2.name,\n              operator = _parsed$i2.operator,\n              index = _parsed$i2.index;\n            if (!isFinite(index)) {\n              parsed[i].index = 0;\n              return createNodes(root, parsed.slice(i));\n            }\n            var children = void 0;\n            switch (operator) {\n              case operators.dot:\n                children = root[_xfa_object.$getChildrenByName](name, false);\n                break;\n              case operators.dotDot:\n                children = root[_xfa_object.$getChildrenByName](name, true);\n                break;\n              case operators.dotHash:\n                children = root[_xfa_object.$getChildrenByClass](name);\n                if (children instanceof _xfa_object.XFAObjectArray) {\n                  children = children.children;\n                } else {\n                  children = [children];\n                }\n                break;\n              default:\n                break;\n            }\n            if (children.length === 0) {\n              return createNodes(root, parsed.slice(i));\n            }\n            if (index < children.length) {\n              var child = children[index];\n              if (!(child instanceof _xfa_object.XFAObject)) {\n                (0, _util.warn)(\"XFA - Cannot create a node.\");\n                return null;\n              }\n              root = child;\n            } else {\n              parsed[i].index = index - children.length;\n              return createNodes(root, parsed.slice(i));\n            }\n          }\n          return null;\n        }\n\n        /***/\n      }, /* 81 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Binder = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _template = __w_pdfjs_require__(82);\n        var _som = __w_pdfjs_require__(80);\n        var _namespaces = __w_pdfjs_require__(79);\n        var _util = __w_pdfjs_require__(2);\n        var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;\n        function createText(content) {\n          var node = new _template.Text({});\n          node[_xfa_object.$content] = content;\n          return node;\n        }\n        var Binder = /*#__PURE__*/function () {\n          function Binder(root) {\n            _classCallCheck(this, Binder);\n            this.root = root;\n            this.datasets = root.datasets;\n            if (root.datasets && root.datasets.data) {\n              this.data = root.datasets.data;\n            } else {\n              this.data = new _xfa_object.XmlObject(_namespaces.NamespaceIds.datasets.id, \"data\");\n            }\n            this.emptyMerge = this.data[_xfa_object.$getChildren]().length === 0;\n            this.root.form = this.form = root.template[_xfa_object.$clone]();\n          }\n          _createClass(Binder, [{\n            key: \"_isConsumeData\",\n            value: function _isConsumeData() {\n              return !this.emptyMerge && this._mergeMode;\n            }\n          }, {\n            key: \"_isMatchTemplate\",\n            value: function _isMatchTemplate() {\n              return !this._isConsumeData();\n            }\n          }, {\n            key: \"bind\",\n            value: function bind() {\n              this._bindElement(this.form, this.data);\n              return this.form;\n            }\n          }, {\n            key: \"getData\",\n            value: function getData() {\n              return this.data;\n            }\n          }, {\n            key: \"_bindValue\",\n            value: function _bindValue(formNode, data, picture) {\n              formNode[_xfa_object.$data] = data;\n              if (formNode[_xfa_object.$hasSettableValue]()) {\n                if (data[_xfa_object.$isDataValue]()) {\n                  var _value9 = data[_xfa_object.$getDataValue]();\n                  formNode[_xfa_object.$setValue](createText(_value9));\n                } else if (formNode instanceof _template.Field && formNode.ui && formNode.ui.choiceList && formNode.ui.choiceList.open === \"multiSelect\") {\n                  var _value10 = data[_xfa_object.$getChildren]().map(function (child) {\n                    return child[_xfa_object.$content].trim();\n                  }).join(\"\\n\");\n                  formNode[_xfa_object.$setValue](createText(_value10));\n                } else if (this._isConsumeData()) {\n                  (0, _util.warn)(\"XFA - Nodes haven't the same type.\");\n                }\n              } else if (!data[_xfa_object.$isDataValue]() || this._isMatchTemplate()) {\n                this._bindElement(formNode, data);\n              } else {\n                (0, _util.warn)(\"XFA - Nodes haven't the same type.\");\n              }\n            }\n          }, {\n            key: \"_findDataByNameToConsume\",\n            value: function _findDataByNameToConsume(name, isValue, dataNode, global) {\n              if (!name) {\n                return null;\n              }\n              var generator, match;\n              for (var i = 0; i < 3; i++) {\n                generator = dataNode[_xfa_object.$getRealChildrenByNameIt](name, false, true);\n                while (true) {\n                  match = generator.next().value;\n                  if (!match) {\n                    break;\n                  }\n                  if (isValue === match[_xfa_object.$isDataValue]()) {\n                    return match;\n                  }\n                }\n                if (dataNode[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.datasets.id && dataNode[_xfa_object.$nodeName] === \"data\") {\n                  break;\n                }\n                dataNode = dataNode[_xfa_object.$getParent]();\n              }\n              if (!global) {\n                return null;\n              }\n              generator = this.data[_xfa_object.$getRealChildrenByNameIt](name, true, false);\n              match = generator.next().value;\n              if (match) {\n                return match;\n              }\n              generator = this.data[_xfa_object.$getAttributeIt](name, true);\n              match = generator.next().value;\n              if (match && match[_xfa_object.$isDataValue]()) {\n                return match;\n              }\n              return null;\n            }\n          }, {\n            key: \"_setProperties\",\n            value: function _setProperties(formNode, dataNode) {\n              if (!formNode.hasOwnProperty(\"setProperty\")) {\n                return;\n              }\n              var _iterator147 = _createForOfIteratorHelper(formNode.setProperty.children),\n                _step147;\n              try {\n                for (_iterator147.s(); !(_step147 = _iterator147.n()).done;) {\n                  var _step147$value = _step147.value,\n                    ref = _step147$value.ref,\n                    target = _step147$value.target,\n                    connection = _step147$value.connection;\n                  if (connection) {\n                    continue;\n                  }\n                  if (!ref) {\n                    continue;\n                  }\n                  var nodes = (0, _som.searchNode)(this.root, dataNode, ref, false, false);\n                  if (!nodes) {\n                    (0, _util.warn)(\"XFA - Invalid reference: \".concat(ref, \".\"));\n                    continue;\n                  }\n                  var _nodes = _slicedToArray(nodes, 1),\n                    node = _nodes[0];\n                  if (!node[_xfa_object.$isDescendent](this.data)) {\n                    (0, _util.warn)(\"XFA - Invalid node: must be a data node.\");\n                    continue;\n                  }\n                  var targetNodes = (0, _som.searchNode)(this.root, formNode, target, false, false);\n                  if (!targetNodes) {\n                    (0, _util.warn)(\"XFA - Invalid target: \".concat(target, \".\"));\n                    continue;\n                  }\n                  var _targetNodes = _slicedToArray(targetNodes, 1),\n                    targetNode = _targetNodes[0];\n                  if (!targetNode[_xfa_object.$isDescendent](formNode)) {\n                    (0, _util.warn)(\"XFA - Invalid target: must be a property or subproperty.\");\n                    continue;\n                  }\n                  var targetParent = targetNode[_xfa_object.$getParent]();\n                  if (targetNode instanceof _template.SetProperty || targetParent instanceof _template.SetProperty) {\n                    (0, _util.warn)(\"XFA - Invalid target: cannot be a setProperty or one of its properties.\");\n                    continue;\n                  }\n                  if (targetNode instanceof _template.BindItems || targetParent instanceof _template.BindItems) {\n                    (0, _util.warn)(\"XFA - Invalid target: cannot be a bindItems or one of its properties.\");\n                    continue;\n                  }\n                  var content = node[_xfa_object.$text]();\n                  var name = targetNode[_xfa_object.$nodeName];\n                  if (targetNode instanceof _xfa_object.XFAAttribute) {\n                    var attrs = Object.create(null);\n                    attrs[name] = content;\n                    var obj = Reflect.construct(Object.getPrototypeOf(targetParent).constructor, [attrs]);\n                    targetParent[name] = obj[name];\n                    continue;\n                  }\n                  if (!targetNode.hasOwnProperty(_xfa_object.$content)) {\n                    (0, _util.warn)(\"XFA - Invalid node to use in setProperty\");\n                    continue;\n                  }\n                  targetNode[_xfa_object.$data] = node;\n                  targetNode[_xfa_object.$content] = content;\n                  targetNode[_xfa_object.$finalize]();\n                }\n              } catch (err) {\n                _iterator147.e(err);\n              } finally {\n                _iterator147.f();\n              }\n            }\n          }, {\n            key: \"_bindItems\",\n            value: function _bindItems(formNode, dataNode) {\n              if (!formNode.hasOwnProperty(\"items\") || !formNode.hasOwnProperty(\"bindItems\") || formNode.bindItems.isEmpty()) {\n                return;\n              }\n              var _iterator148 = _createForOfIteratorHelper(formNode.items.children),\n                _step148;\n              try {\n                for (_iterator148.s(); !(_step148 = _iterator148.n()).done;) {\n                  var item = _step148.value;\n                  formNode[_xfa_object.$removeChild](item);\n                }\n              } catch (err) {\n                _iterator148.e(err);\n              } finally {\n                _iterator148.f();\n              }\n              formNode.items.clear();\n              var labels = new _template.Items({});\n              var values = new _template.Items({});\n              formNode[_xfa_object.$appendChild](labels);\n              formNode.items.push(labels);\n              formNode[_xfa_object.$appendChild](values);\n              formNode.items.push(values);\n              var _iterator149 = _createForOfIteratorHelper(formNode.bindItems.children),\n                _step149;\n              try {\n                for (_iterator149.s(); !(_step149 = _iterator149.n()).done;) {\n                  var _step149$value = _step149.value,\n                    ref = _step149$value.ref,\n                    labelRef = _step149$value.labelRef,\n                    valueRef = _step149$value.valueRef,\n                    connection = _step149$value.connection;\n                  if (connection) {\n                    continue;\n                  }\n                  if (!ref) {\n                    continue;\n                  }\n                  var nodes = (0, _som.searchNode)(this.root, dataNode, ref, false, false);\n                  if (!nodes) {\n                    (0, _util.warn)(\"XFA - Invalid reference: \".concat(ref, \".\"));\n                    continue;\n                  }\n                  var _iterator150 = _createForOfIteratorHelper(nodes),\n                    _step150;\n                  try {\n                    for (_iterator150.s(); !(_step150 = _iterator150.n()).done;) {\n                      var node = _step150.value;\n                      if (!node[_xfa_object.$isDescendent](this.datasets)) {\n                        (0, _util.warn)(\"XFA - Invalid ref (\".concat(ref, \"): must be a datasets child.\"));\n                        continue;\n                      }\n                      var labelNodes = (0, _som.searchNode)(this.root, node, labelRef, true, false);\n                      if (!labelNodes) {\n                        (0, _util.warn)(\"XFA - Invalid label: \".concat(labelRef, \".\"));\n                        continue;\n                      }\n                      var _labelNodes = _slicedToArray(labelNodes, 1),\n                        labelNode = _labelNodes[0];\n                      if (!labelNode[_xfa_object.$isDescendent](this.datasets)) {\n                        (0, _util.warn)(\"XFA - Invalid label: must be a datasets child.\");\n                        continue;\n                      }\n                      var valueNodes = (0, _som.searchNode)(this.root, node, valueRef, true, false);\n                      if (!valueNodes) {\n                        (0, _util.warn)(\"XFA - Invalid value: \".concat(valueRef, \".\"));\n                        continue;\n                      }\n                      var _valueNodes = _slicedToArray(valueNodes, 1),\n                        valueNode = _valueNodes[0];\n                      if (!valueNode[_xfa_object.$isDescendent](this.datasets)) {\n                        (0, _util.warn)(\"XFA - Invalid value: must be a datasets child.\");\n                        continue;\n                      }\n                      var label = createText(labelNode[_xfa_object.$text]());\n                      var _value11 = createText(valueNode[_xfa_object.$text]());\n                      labels[_xfa_object.$appendChild](label);\n                      labels.text.push(label);\n                      values[_xfa_object.$appendChild](_value11);\n                      values.text.push(_value11);\n                    }\n                  } catch (err) {\n                    _iterator150.e(err);\n                  } finally {\n                    _iterator150.f();\n                  }\n                }\n              } catch (err) {\n                _iterator149.e(err);\n              } finally {\n                _iterator149.f();\n              }\n            }\n          }, {\n            key: \"_bindOccurrences\",\n            value: function _bindOccurrences(formNode, matches, picture) {\n              var baseClone;\n              if (matches.length > 1) {\n                baseClone = formNode[_xfa_object.$clone]();\n                baseClone[_xfa_object.$removeChild](baseClone.occur);\n                baseClone.occur = null;\n              }\n              this._bindValue(formNode, matches[0], picture);\n              this._setProperties(formNode, matches[0]);\n              this._bindItems(formNode, matches[0]);\n              if (matches.length === 1) {\n                return;\n              }\n              var parent = formNode[_xfa_object.$getParent]();\n              var name = formNode[_xfa_object.$nodeName];\n              var pos = parent[_xfa_object.$indexOf](formNode);\n              for (var i = 1, ii = matches.length; i < ii; i++) {\n                var match = matches[i];\n                var clone = baseClone[_xfa_object.$clone]();\n                parent[name].push(clone);\n                parent[_xfa_object.$insertAt](pos + i, clone);\n                this._bindValue(clone, match, picture);\n                this._setProperties(clone, match);\n                this._bindItems(clone, match);\n              }\n            }\n          }, {\n            key: \"_createOccurrences\",\n            value: function _createOccurrences(formNode) {\n              if (!this.emptyMerge) {\n                return;\n              }\n              var occur = formNode.occur;\n              if (!occur || occur.initial <= 1) {\n                return;\n              }\n              var parent = formNode[_xfa_object.$getParent]();\n              var name = formNode[_xfa_object.$nodeName];\n              if (!(parent[name] instanceof _xfa_object.XFAObjectArray)) {\n                return;\n              }\n              var currentNumber;\n              if (formNode.name) {\n                currentNumber = parent[name].children.filter(function (e) {\n                  return e.name === formNode.name;\n                }).length;\n              } else {\n                currentNumber = parent[name].children.length;\n              }\n              var pos = parent[_xfa_object.$indexOf](formNode) + 1;\n              var ii = occur.initial - currentNumber;\n              if (ii) {\n                var nodeClone = formNode[_xfa_object.$clone]();\n                nodeClone[_xfa_object.$removeChild](nodeClone.occur);\n                nodeClone.occur = null;\n                parent[name].push(nodeClone);\n                parent[_xfa_object.$insertAt](pos, nodeClone);\n                for (var i = 1; i < ii; i++) {\n                  var clone = nodeClone[_xfa_object.$clone]();\n                  parent[name].push(clone);\n                  parent[_xfa_object.$insertAt](pos + i, clone);\n                }\n              }\n            }\n          }, {\n            key: \"_getOccurInfo\",\n            value: function _getOccurInfo(formNode) {\n              var name = formNode.name,\n                occur = formNode.occur;\n              if (!occur || !name) {\n                return [1, 1];\n              }\n              var max = occur.max === -1 ? Infinity : occur.max;\n              return [occur.min, max];\n            }\n          }, {\n            key: \"_setAndBind\",\n            value: function _setAndBind(formNode, dataNode) {\n              this._setProperties(formNode, dataNode);\n              this._bindItems(formNode, dataNode);\n              this._bindElement(formNode, dataNode);\n            }\n          }, {\n            key: \"_bindElement\",\n            value: function _bindElement(formNode, dataNode) {\n              var uselessNodes = [];\n              this._createOccurrences(formNode);\n              var _iterator151 = _createForOfIteratorHelper(formNode[_xfa_object.$getChildren]()),\n                _step151;\n              try {\n                for (_iterator151.s(); !(_step151 = _iterator151.n()).done;) {\n                  var child = _step151.value;\n                  if (child[_xfa_object.$data]) {\n                    continue;\n                  }\n                  if (this._mergeMode === undefined && child[_xfa_object.$nodeName] === \"subform\") {\n                    this._mergeMode = child.mergeMode === \"consumeData\";\n                    var dataChildren = dataNode[_xfa_object.$getChildren]();\n                    if (dataChildren.length > 0) {\n                      this._bindOccurrences(child, [dataChildren[0]], null);\n                    } else if (this.emptyMerge) {\n                      var nsId = dataNode[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : dataNode[_xfa_object.$namespaceId];\n                      var dataChild = child[_xfa_object.$data] = new _xfa_object.XmlObject(nsId, child.name || \"root\");\n                      dataNode[_xfa_object.$appendChild](dataChild);\n                      this._bindElement(child, dataChild);\n                    }\n                    continue;\n                  }\n                  if (!child[_xfa_object.$isBindable]()) {\n                    continue;\n                  }\n                  var global = false;\n                  var picture = null;\n                  var ref = null;\n                  var match = null;\n                  if (child.bind) {\n                    switch (child.bind.match) {\n                      case \"none\":\n                        this._setAndBind(child, dataNode);\n                        continue;\n                      case \"global\":\n                        global = true;\n                        break;\n                      case \"dataRef\":\n                        if (!child.bind.ref) {\n                          (0, _util.warn)(\"XFA - ref is empty in node \".concat(child[_xfa_object.$nodeName], \".\"));\n                          this._setAndBind(child, dataNode);\n                          continue;\n                        }\n                        ref = child.bind.ref;\n                        break;\n                      default:\n                        break;\n                    }\n                    if (child.bind.picture) {\n                      picture = child.bind.picture[_xfa_object.$content];\n                    }\n                  }\n                  var _this$_getOccurInfo = this._getOccurInfo(child),\n                    _this$_getOccurInfo2 = _slicedToArray(_this$_getOccurInfo, 2),\n                    min = _this$_getOccurInfo2[0],\n                    max = _this$_getOccurInfo2[1];\n                  if (ref) {\n                    match = (0, _som.searchNode)(this.root, dataNode, ref, true, false);\n                    if (match === null) {\n                      match = (0, _som.createDataNode)(this.data, dataNode, ref);\n                      if (!match) {\n                        continue;\n                      }\n                      if (this._isConsumeData()) {\n                        match[_xfa_object.$consumed] = true;\n                      }\n                      this._setAndBind(child, match);\n                      continue;\n                    } else {\n                      if (this._isConsumeData()) {\n                        match = match.filter(function (node) {\n                          return !node[_xfa_object.$consumed];\n                        });\n                      }\n                      if (match.length > max) {\n                        match = match.slice(0, max);\n                      } else if (match.length === 0) {\n                        match = null;\n                      }\n                      if (match && this._isConsumeData()) {\n                        match.forEach(function (node) {\n                          node[_xfa_object.$consumed] = true;\n                        });\n                      }\n                    }\n                  } else {\n                    if (!child.name) {\n                      this._setAndBind(child, dataNode);\n                      continue;\n                    }\n                    if (this._isConsumeData()) {\n                      var matches = [];\n                      while (matches.length < max) {\n                        var found = this._findDataByNameToConsume(child.name, child[_xfa_object.$hasSettableValue](), dataNode, global);\n                        if (!found) {\n                          break;\n                        }\n                        found[_xfa_object.$consumed] = true;\n                        matches.push(found);\n                      }\n                      match = matches.length > 0 ? matches : null;\n                    } else {\n                      match = dataNode[_xfa_object.$getRealChildrenByNameIt](child.name, false, this.emptyMerge).next().value;\n                      if (!match) {\n                        if (min === 0) {\n                          uselessNodes.push(child);\n                          continue;\n                        }\n                        var _nsId = dataNode[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : dataNode[_xfa_object.$namespaceId];\n                        match = child[_xfa_object.$data] = new _xfa_object.XmlObject(_nsId, child.name);\n                        if (this.emptyMerge) {\n                          match[_xfa_object.$consumed] = true;\n                        }\n                        dataNode[_xfa_object.$appendChild](match);\n                        this._setAndBind(child, match);\n                        continue;\n                      }\n                      if (this.emptyMerge) {\n                        match[_xfa_object.$consumed] = true;\n                      }\n                      match = [match];\n                    }\n                  }\n                  if (match) {\n                    this._bindOccurrences(child, match, picture);\n                  } else if (min > 0) {\n                    this._setAndBind(child, dataNode);\n                  } else {\n                    uselessNodes.push(child);\n                  }\n                }\n              } catch (err) {\n                _iterator151.e(err);\n              } finally {\n                _iterator151.f();\n              }\n              uselessNodes.forEach(function (node) {\n                return node[_xfa_object.$getParent]()[_xfa_object.$removeChild](node);\n              });\n            }\n          }]);\n          return Binder;\n        }();\n        exports.Binder = Binder;\n\n        /***/\n      }, /* 82 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        var _marked = /*#__PURE__*/_regeneratorRuntime().mark(getContainedChildren);\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Value = exports.Text = exports.TemplateNamespace = exports.Template = exports.SetProperty = exports.Items = exports.Field = exports.BindItems = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _namespaces = __w_pdfjs_require__(79);\n        var _layout = __w_pdfjs_require__(83);\n        var _html_utils = __w_pdfjs_require__(84);\n        var _utils = __w_pdfjs_require__(78);\n        var _util = __w_pdfjs_require__(2);\n        var _fonts = __w_pdfjs_require__(85);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _som = __w_pdfjs_require__(80);\n        var TEMPLATE_NS_ID = _namespaces.NamespaceIds.template.id;\n        var SVG_NS = \"http://www.w3.org/2000/svg\";\n        var MAX_ATTEMPTS_FOR_LRTB_LAYOUT = 2;\n        var MAX_EMPTY_PAGES = 3;\n        var DEFAULT_TAB_INDEX = 5000;\n        var HEADING_PATTERN = /^H(\\d+)$/;\n        var MIMES = new Set([\"image/gif\", \"image/jpeg\", \"image/jpg\", \"image/pjpeg\", \"image/png\", \"image/apng\", \"image/x-png\", \"image/bmp\", \"image/x-ms-bmp\", \"image/tiff\", \"image/tif\", \"application/octet-stream\"]);\n        var IMAGES_HEADERS = [[[0x42, 0x4d], \"image/bmp\"], [[0xff, 0xd8, 0xff], \"image/jpeg\"], [[0x49, 0x49, 0x2a, 0x00], \"image/tiff\"], [[0x4d, 0x4d, 0x00, 0x2a], \"image/tiff\"], [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61], \"image/gif\"], [[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a], \"image/png\"]];\n        function getBorderDims(node) {\n          if (!node || !node.border) {\n            return {\n              w: 0,\n              h: 0\n            };\n          }\n          var borderExtra = node.border[_xfa_object.$getExtra]();\n          if (!borderExtra) {\n            return {\n              w: 0,\n              h: 0\n            };\n          }\n          return {\n            w: borderExtra.widths[0] + borderExtra.widths[2] + borderExtra.insets[0] + borderExtra.insets[2],\n            h: borderExtra.widths[1] + borderExtra.widths[3] + borderExtra.insets[1] + borderExtra.insets[3]\n          };\n        }\n        function hasMargin(node) {\n          return node.margin && (node.margin.topInset || node.margin.rightInset || node.margin.bottomInset || node.margin.leftInset);\n        }\n        function _setValue(templateNode, value) {\n          if (!templateNode.value) {\n            var nodeValue = new Value({});\n            templateNode[_xfa_object.$appendChild](nodeValue);\n            templateNode.value = nodeValue;\n          }\n          templateNode.value[_xfa_object.$setValue](value);\n        }\n        function getContainedChildren(node) {\n          var _iterator152, _step152, child;\n          return _regeneratorRuntime().wrap(function getContainedChildren$(_context67) {\n            while (1) {\n              switch (_context67.prev = _context67.next) {\n                case 0:\n                  _iterator152 = _createForOfIteratorHelper(node[_xfa_object.$getChildren]());\n                  _context67.prev = 1;\n                  _iterator152.s();\n                case 3:\n                  if ((_step152 = _iterator152.n()).done) {\n                    _context67.next = 12;\n                    break;\n                  }\n                  child = _step152.value;\n                  if (!(child instanceof SubformSet)) {\n                    _context67.next = 8;\n                    break;\n                  }\n                  return _context67.delegateYield(child[_xfa_object.$getContainedChildren](), \"t0\", 7);\n                case 7:\n                  return _context67.abrupt(\"continue\", 10);\n                case 8:\n                  _context67.next = 10;\n                  return child;\n                case 10:\n                  _context67.next = 3;\n                  break;\n                case 12:\n                  _context67.next = 17;\n                  break;\n                case 14:\n                  _context67.prev = 14;\n                  _context67.t1 = _context67[\"catch\"](1);\n                  _iterator152.e(_context67.t1);\n                case 17:\n                  _context67.prev = 17;\n                  _iterator152.f();\n                  return _context67.finish(17);\n                case 20:\n                case \"end\":\n                  return _context67.stop();\n              }\n            }\n          }, _marked, null, [[1, 14, 17, 20]]);\n        }\n        function isRequired(node) {\n          return node.validate && node.validate.nullTest === \"error\";\n        }\n        function setTabIndex(node) {\n          while (node) {\n            if (!node.traversal) {\n              node[_xfa_object.$tabIndex] = node[_xfa_object.$getParent]()[_xfa_object.$tabIndex];\n              return;\n            }\n            if (node[_xfa_object.$tabIndex]) {\n              return;\n            }\n            var next = null;\n            var _iterator153 = _createForOfIteratorHelper(node.traversal[_xfa_object.$getChildren]()),\n              _step153;\n            try {\n              for (_iterator153.s(); !(_step153 = _iterator153.n()).done;) {\n                var child = _step153.value;\n                if (child.operation === \"next\") {\n                  next = child;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator153.e(err);\n            } finally {\n              _iterator153.f();\n            }\n            if (!next || !next.ref) {\n              node[_xfa_object.$tabIndex] = node[_xfa_object.$getParent]()[_xfa_object.$tabIndex];\n              return;\n            }\n            var root = node[_xfa_object.$getTemplateRoot]();\n            node[_xfa_object.$tabIndex] = ++root[_xfa_object.$tabIndex];\n            var ref = root[_xfa_object.$searchNode](next.ref, node);\n            if (!ref) {\n              return;\n            }\n            node = ref[0];\n          }\n        }\n        function applyAssist(obj, attributes) {\n          var assist = obj.assist;\n          if (assist) {\n            var assistTitle = assist[_xfa_object.$toHTML]();\n            if (assistTitle) {\n              attributes.title = assistTitle;\n            }\n            var role = assist.role;\n            var match = role.match(HEADING_PATTERN);\n            if (match) {\n              var ariaRole = \"heading\";\n              var ariaLevel = match[1];\n              attributes.role = ariaRole;\n              attributes[\"aria-level\"] = ariaLevel;\n            }\n          }\n          if (obj.layout === \"table\") {\n            attributes.role = \"table\";\n          } else if (obj.layout === \"row\") {\n            attributes.role = \"row\";\n          } else {\n            var parent = obj[_xfa_object.$getParent]();\n            if (parent.layout === \"row\") {\n              if (parent.assist && parent.assist.role === \"TH\") {\n                attributes.role = \"columnheader\";\n              } else {\n                attributes.role = \"cell\";\n              }\n            }\n          }\n        }\n        function ariaLabel(obj) {\n          if (!obj.assist) {\n            return null;\n          }\n          var assist = obj.assist;\n          if (assist.speak && assist.speak[_xfa_object.$content] !== \"\") {\n            return assist.speak[_xfa_object.$content];\n          }\n          if (assist.toolTip) {\n            return assist.toolTip[_xfa_object.$content];\n          }\n          return null;\n        }\n        function valueToHtml(value) {\n          return _utils.HTMLResult.success({\n            name: \"div\",\n            attributes: {\n              class: [\"xfaRich\"],\n              style: Object.create(null)\n            },\n            children: [{\n              name: \"span\",\n              attributes: {\n                style: Object.create(null)\n              },\n              value: value\n            }]\n          });\n        }\n        function setFirstUnsplittable(node) {\n          var root = node[_xfa_object.$getTemplateRoot]();\n          if (root[_xfa_object.$extra].firstUnsplittable === null) {\n            root[_xfa_object.$extra].firstUnsplittable = node;\n            root[_xfa_object.$extra].noLayoutFailure = true;\n          }\n        }\n        function unsetFirstUnsplittable(node) {\n          var root = node[_xfa_object.$getTemplateRoot]();\n          if (root[_xfa_object.$extra].firstUnsplittable === node) {\n            root[_xfa_object.$extra].noLayoutFailure = false;\n          }\n        }\n        function handleBreak(node) {\n          if (node[_xfa_object.$extra]) {\n            return false;\n          }\n          node[_xfa_object.$extra] = Object.create(null);\n          if (node.targetType === \"auto\") {\n            return false;\n          }\n          var root = node[_xfa_object.$getTemplateRoot]();\n          var target = null;\n          if (node.target) {\n            target = root[_xfa_object.$searchNode](node.target, node[_xfa_object.$getParent]());\n            if (!target) {\n              return false;\n            }\n            target = target[0];\n          }\n          var _root$_xfa_object$$ex = root[_xfa_object.$extra],\n            currentPageArea = _root$_xfa_object$$ex.currentPageArea,\n            currentContentArea = _root$_xfa_object$$ex.currentContentArea;\n          if (node.targetType === \"pageArea\") {\n            if (!(target instanceof PageArea)) {\n              target = null;\n            }\n            if (node.startNew) {\n              node[_xfa_object.$extra].target = target || currentPageArea;\n              return true;\n            } else if (target && target !== currentPageArea) {\n              node[_xfa_object.$extra].target = target;\n              return true;\n            }\n            return false;\n          }\n          if (!(target instanceof ContentArea)) {\n            target = null;\n          }\n          var pageArea = target && target[_xfa_object.$getParent]();\n          var index;\n          var nextPageArea = pageArea;\n          if (node.startNew) {\n            if (target) {\n              var contentAreas = pageArea.contentArea.children;\n              var indexForCurrent = contentAreas.indexOf(currentContentArea);\n              var indexForTarget = contentAreas.indexOf(target);\n              if (indexForCurrent !== -1 && indexForCurrent < indexForTarget) {\n                nextPageArea = null;\n              }\n              index = indexForTarget - 1;\n            } else {\n              index = currentPageArea.contentArea.children.indexOf(currentContentArea);\n            }\n          } else if (target && target !== currentContentArea) {\n            var _contentAreas = pageArea.contentArea.children;\n            index = _contentAreas.indexOf(target) - 1;\n            nextPageArea = pageArea === currentPageArea ? null : pageArea;\n          } else {\n            return false;\n          }\n          node[_xfa_object.$extra].target = nextPageArea;\n          node[_xfa_object.$extra].index = index;\n          return true;\n        }\n        function handleOverflow(node, extraNode, space) {\n          var root = node[_xfa_object.$getTemplateRoot]();\n          var saved = root[_xfa_object.$extra].noLayoutFailure;\n          var savedMethod = extraNode[_xfa_object.$getSubformParent];\n          extraNode[_xfa_object.$getSubformParent] = function () {\n            return node;\n          };\n          root[_xfa_object.$extra].noLayoutFailure = true;\n          var res = extraNode[_xfa_object.$toHTML](space);\n          node[_xfa_object.$addHTML](res.html, res.bbox);\n          root[_xfa_object.$extra].noLayoutFailure = saved;\n          extraNode[_xfa_object.$getSubformParent] = savedMethod;\n        }\n        var AppearanceFilter = /*#__PURE__*/function (_xfa_object$StringObj) {\n          _inherits(AppearanceFilter, _xfa_object$StringObj);\n          function AppearanceFilter(attributes) {\n            var _this105;\n            _classCallCheck(this, AppearanceFilter);\n            _this105 = _possibleConstructorReturn(this, _getPrototypeOf(AppearanceFilter).call(this, TEMPLATE_NS_ID, \"appearanceFilter\"));\n            _this105.id = attributes.id || \"\";\n            _this105.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this105.use = attributes.use || \"\";\n            _this105.usehref = attributes.usehref || \"\";\n            return _this105;\n          }\n          return AppearanceFilter;\n        }(_xfa_object.StringObject);\n        var Arc = /*#__PURE__*/function (_xfa_object$XFAObject) {\n          _inherits(Arc, _xfa_object$XFAObject);\n          function Arc(attributes) {\n            var _this106;\n            _classCallCheck(this, Arc);\n            _this106 = _possibleConstructorReturn(this, _getPrototypeOf(Arc).call(this, TEMPLATE_NS_ID, \"arc\", true));\n            _this106.circular = (0, _utils.getInteger)({\n              data: attributes.circular,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this106.hand = (0, _utils.getStringOption)(attributes.hand, [\"even\", \"left\", \"right\"]);\n            _this106.id = attributes.id || \"\";\n            _this106.startAngle = (0, _utils.getFloat)({\n              data: attributes.startAngle,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this106.sweepAngle = (0, _utils.getFloat)({\n              data: attributes.sweepAngle,\n              defaultValue: 360,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this106.use = attributes.use || \"\";\n            _this106.usehref = attributes.usehref || \"\";\n            _this106.edge = null;\n            _this106.fill = null;\n            return _this106;\n          }\n          _createClass(Arc, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              var edge = this.edge || new Edge({});\n              var edgeStyle = edge[_xfa_object.$toStyle]();\n              var style = Object.create(null);\n              if (this.fill && this.fill.presence === \"visible\") {\n                Object.assign(style, this.fill[_xfa_object.$toStyle]());\n              } else {\n                style.fill = \"transparent\";\n              }\n              style.strokeWidth = (0, _html_utils.measureToString)(edge.presence === \"visible\" ? edge.thickness : 0);\n              style.stroke = edgeStyle.color;\n              var arc;\n              var attributes = {\n                xmlns: SVG_NS,\n                style: {\n                  width: \"100%\",\n                  height: \"100%\",\n                  overflow: \"visible\"\n                }\n              };\n              if (this.sweepAngle === 360) {\n                arc = {\n                  name: \"ellipse\",\n                  attributes: {\n                    xmlns: SVG_NS,\n                    cx: \"50%\",\n                    cy: \"50%\",\n                    rx: \"50%\",\n                    ry: \"50%\",\n                    style: style\n                  }\n                };\n              } else {\n                var startAngle = this.startAngle * Math.PI / 180;\n                var sweepAngle = this.sweepAngle * Math.PI / 180;\n                var largeArc = this.sweepAngle > 180 ? 1 : 0;\n                var x1 = 50 * (1 + Math.cos(startAngle)),\n                  y1 = 50 * (1 - Math.sin(startAngle)),\n                  x2 = 50 * (1 + Math.cos(startAngle + sweepAngle)),\n                  y2 = 50 * (1 - Math.sin(startAngle + sweepAngle));\n                arc = {\n                  name: \"path\",\n                  attributes: {\n                    xmlns: SVG_NS,\n                    d: \"M \".concat(x1, \" \").concat(y1, \" A 50 50 0 \").concat(largeArc, \" 0 \").concat(x2, \" \").concat(y2),\n                    vectorEffect: \"non-scaling-stroke\",\n                    style: style\n                  }\n                };\n                Object.assign(attributes, {\n                  viewBox: \"0 0 100 100\",\n                  preserveAspectRatio: \"none\"\n                });\n              }\n              var svg = {\n                name: \"svg\",\n                children: [arc],\n                attributes: attributes\n              };\n              var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              if (hasMargin(parent)) {\n                return _utils.HTMLResult.success({\n                  name: \"div\",\n                  attributes: {\n                    style: {\n                      display: \"inline\",\n                      width: \"100%\",\n                      height: \"100%\"\n                    }\n                  },\n                  children: [svg]\n                });\n              }\n              svg.attributes.style.position = \"absolute\";\n              return _utils.HTMLResult.success(svg);\n            }\n          }]);\n          return Arc;\n        }(_xfa_object.XFAObject);\n        var Area = /*#__PURE__*/function (_xfa_object$XFAObject2) {\n          _inherits(Area, _xfa_object$XFAObject2);\n          function Area(attributes) {\n            var _this107;\n            _classCallCheck(this, Area);\n            _this107 = _possibleConstructorReturn(this, _getPrototypeOf(Area).call(this, TEMPLATE_NS_ID, \"area\", true));\n            _this107.colSpan = (0, _utils.getInteger)({\n              data: attributes.colSpan,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n >= 1 || n === -1;\n              }\n            });\n            _this107.id = attributes.id || \"\";\n            _this107.name = attributes.name || \"\";\n            _this107.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this107.use = attributes.use || \"\";\n            _this107.usehref = attributes.usehref || \"\";\n            _this107.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this107.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this107.desc = null;\n            _this107.extras = null;\n            _this107.area = new _xfa_object.XFAObjectArray();\n            _this107.draw = new _xfa_object.XFAObjectArray();\n            _this107.exObject = new _xfa_object.XFAObjectArray();\n            _this107.exclGroup = new _xfa_object.XFAObjectArray();\n            _this107.field = new _xfa_object.XFAObjectArray();\n            _this107.subform = new _xfa_object.XFAObjectArray();\n            _this107.subformSet = new _xfa_object.XFAObjectArray();\n            return _this107;\n          }\n          _createClass(Area, [{\n            key: _xfa_object.$getContainedChildren,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n              return _regeneratorRuntime().wrap(function value$(_context68) {\n                while (1) {\n                  switch (_context68.prev = _context68.next) {\n                    case 0:\n                      return _context68.delegateYield(getContainedChildren(this), \"t0\", 1);\n                    case 1:\n                    case \"end\":\n                      return _context68.stop();\n                  }\n                }\n              }, value, this);\n            })\n          }, {\n            key: _xfa_object.$isTransparent,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$isBindable,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$addHTML,\n            value: function value(html, bbox) {\n              var _bbox2 = _slicedToArray(bbox, 4),\n                x = _bbox2[0],\n                y = _bbox2[1],\n                w = _bbox2[2],\n                h = _bbox2[3];\n              this[_xfa_object.$extra].width = Math.max(this[_xfa_object.$extra].width, x + w);\n              this[_xfa_object.$extra].height = Math.max(this[_xfa_object.$extra].height, y + h);\n              this[_xfa_object.$extra].children.push(html);\n            }\n          }, {\n            key: _xfa_object.$getAvailableSpace,\n            value: function value() {\n              return this[_xfa_object.$extra].availableSpace;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(this, \"position\");\n              var attributes = {\n                style: style,\n                id: this[_xfa_object.$uid],\n                class: [\"xfaArea\"]\n              };\n              if ((0, _html_utils.isPrintOnly)(this)) {\n                attributes.class.push(\"xfaPrintOnly\");\n              }\n              if (this.name) {\n                attributes.xfaName = this.name;\n              }\n              var children = [];\n              this[_xfa_object.$extra] = {\n                children: children,\n                width: 0,\n                height: 0,\n                availableSpace: availableSpace\n              };\n              var result = this[_xfa_object.$childrenToHTML]({\n                filter: new Set([\"area\", \"draw\", \"field\", \"exclGroup\", \"subform\", \"subformSet\"]),\n                include: true\n              });\n              if (!result.success) {\n                if (result.isBreak()) {\n                  return result;\n                }\n                delete this[_xfa_object.$extra];\n                return _utils.HTMLResult.FAILURE;\n              }\n              style.width = (0, _html_utils.measureToString)(this[_xfa_object.$extra].width);\n              style.height = (0, _html_utils.measureToString)(this[_xfa_object.$extra].height);\n              var html = {\n                name: \"div\",\n                attributes: attributes,\n                children: children\n              };\n              var bbox = [this.x, this.y, this[_xfa_object.$extra].width, this[_xfa_object.$extra].height];\n              delete this[_xfa_object.$extra];\n              return _utils.HTMLResult.success(html, bbox);\n            }\n          }]);\n          return Area;\n        }(_xfa_object.XFAObject);\n        var Assist = /*#__PURE__*/function (_xfa_object$XFAObject3) {\n          _inherits(Assist, _xfa_object$XFAObject3);\n          function Assist(attributes) {\n            var _this108;\n            _classCallCheck(this, Assist);\n            _this108 = _possibleConstructorReturn(this, _getPrototypeOf(Assist).call(this, TEMPLATE_NS_ID, \"assist\", true));\n            _this108.id = attributes.id || \"\";\n            _this108.role = attributes.role || \"\";\n            _this108.use = attributes.use || \"\";\n            _this108.usehref = attributes.usehref || \"\";\n            _this108.speak = null;\n            _this108.toolTip = null;\n            return _this108;\n          }\n          _createClass(Assist, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              return this.toolTip && this.toolTip[_xfa_object.$content] ? this.toolTip[_xfa_object.$content] : null;\n            }\n          }]);\n          return Assist;\n        }(_xfa_object.XFAObject);\n        var Barcode = /*#__PURE__*/function (_xfa_object$XFAObject4) {\n          _inherits(Barcode, _xfa_object$XFAObject4);\n          function Barcode(attributes) {\n            var _this109;\n            _classCallCheck(this, Barcode);\n            _this109 = _possibleConstructorReturn(this, _getPrototypeOf(Barcode).call(this, TEMPLATE_NS_ID, \"barcode\", true));\n            _this109.charEncoding = (0, _utils.getKeyword)({\n              data: attributes.charEncoding ? attributes.charEncoding.toLowerCase() : \"\",\n              defaultValue: \"\",\n              validate: function validate(k) {\n                return [\"utf-8\", \"big-five\", \"fontspecific\", \"gbk\", \"gb-18030\", \"gb-2312\", \"ksc-5601\", \"none\", \"shift-jis\", \"ucs-2\", \"utf-16\"].includes(k) || k.match(/iso-8859-\\d{2}/);\n              }\n            });\n            _this109.checksum = (0, _utils.getStringOption)(attributes.checksum, [\"none\", \"1mod10\", \"1mod10_1mod11\", \"2mod10\", \"auto\"]);\n            _this109.dataColumnCount = (0, _utils.getInteger)({\n              data: attributes.dataColumnCount,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this109.dataLength = (0, _utils.getInteger)({\n              data: attributes.dataLength,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this109.dataPrep = (0, _utils.getStringOption)(attributes.dataPrep, [\"none\", \"flateCompress\"]);\n            _this109.dataRowCount = (0, _utils.getInteger)({\n              data: attributes.dataRowCount,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this109.endChar = attributes.endChar || \"\";\n            _this109.errorCorrectionLevel = (0, _utils.getInteger)({\n              data: attributes.errorCorrectionLevel,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return x >= 0 && x <= 8;\n              }\n            });\n            _this109.id = attributes.id || \"\";\n            _this109.moduleHeight = (0, _utils.getMeasurement)(attributes.moduleHeight, \"5mm\");\n            _this109.moduleWidth = (0, _utils.getMeasurement)(attributes.moduleWidth, \"0.25mm\");\n            _this109.printCheckDigit = (0, _utils.getInteger)({\n              data: attributes.printCheckDigit,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this109.rowColumnRatio = (0, _utils.getRatio)(attributes.rowColumnRatio);\n            _this109.startChar = attributes.startChar || \"\";\n            _this109.textLocation = (0, _utils.getStringOption)(attributes.textLocation, [\"below\", \"above\", \"aboveEmbedded\", \"belowEmbedded\", \"none\"]);\n            _this109.truncate = (0, _utils.getInteger)({\n              data: attributes.truncate,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this109.type = (0, _utils.getStringOption)(attributes.type ? attributes.type.toLowerCase() : \"\", [\"aztec\", \"codabar\", \"code2of5industrial\", \"code2of5interleaved\", \"code2of5matrix\", \"code2of5standard\", \"code3of9\", \"code3of9extended\", \"code11\", \"code49\", \"code93\", \"code128\", \"code128a\", \"code128b\", \"code128c\", \"code128sscc\", \"datamatrix\", \"ean8\", \"ean8add2\", \"ean8add5\", \"ean13\", \"ean13add2\", \"ean13add5\", \"ean13pwcd\", \"fim\", \"logmars\", \"maxicode\", \"msi\", \"pdf417\", \"pdf417macro\", \"plessey\", \"postauscust2\", \"postauscust3\", \"postausreplypaid\", \"postausstandard\", \"postukrm4scc\", \"postusdpbc\", \"postusimb\", \"postusstandard\", \"postus5zip\", \"qrcode\", \"rfid\", \"rss14\", \"rss14expanded\", \"rss14limited\", \"rss14stacked\", \"rss14stackedomni\", \"rss14truncated\", \"telepen\", \"ucc128\", \"ucc128random\", \"ucc128sscc\", \"upca\", \"upcaadd2\", \"upcaadd5\", \"upcapwcd\", \"upce\", \"upceadd2\", \"upceadd5\", \"upcean2\", \"upcean5\", \"upsmaxicode\"]);\n            _this109.upsMode = (0, _utils.getStringOption)(attributes.upsMode, [\"usCarrier\", \"internationalCarrier\", \"secureSymbol\", \"standardSymbol\"]);\n            _this109.use = attributes.use || \"\";\n            _this109.usehref = attributes.usehref || \"\";\n            _this109.wideNarrowRatio = (0, _utils.getRatio)(attributes.wideNarrowRatio);\n            _this109.encrypt = null;\n            _this109.extras = null;\n            return _this109;\n          }\n          return Barcode;\n        }(_xfa_object.XFAObject);\n        var Bind = /*#__PURE__*/function (_xfa_object$XFAObject5) {\n          _inherits(Bind, _xfa_object$XFAObject5);\n          function Bind(attributes) {\n            var _this110;\n            _classCallCheck(this, Bind);\n            _this110 = _possibleConstructorReturn(this, _getPrototypeOf(Bind).call(this, TEMPLATE_NS_ID, \"bind\", true));\n            _this110.match = (0, _utils.getStringOption)(attributes.match, [\"once\", \"dataRef\", \"global\", \"none\"]);\n            _this110.ref = attributes.ref || \"\";\n            _this110.picture = null;\n            return _this110;\n          }\n          return Bind;\n        }(_xfa_object.XFAObject);\n        var BindItems = /*#__PURE__*/function (_xfa_object$XFAObject6) {\n          _inherits(BindItems, _xfa_object$XFAObject6);\n          function BindItems(attributes) {\n            var _this111;\n            _classCallCheck(this, BindItems);\n            _this111 = _possibleConstructorReturn(this, _getPrototypeOf(BindItems).call(this, TEMPLATE_NS_ID, \"bindItems\"));\n            _this111.connection = attributes.connection || \"\";\n            _this111.labelRef = attributes.labelRef || \"\";\n            _this111.ref = attributes.ref || \"\";\n            _this111.valueRef = attributes.valueRef || \"\";\n            return _this111;\n          }\n          return BindItems;\n        }(_xfa_object.XFAObject);\n        exports.BindItems = BindItems;\n        var Bookend = /*#__PURE__*/function (_xfa_object$XFAObject7) {\n          _inherits(Bookend, _xfa_object$XFAObject7);\n          function Bookend(attributes) {\n            var _this112;\n            _classCallCheck(this, Bookend);\n            _this112 = _possibleConstructorReturn(this, _getPrototypeOf(Bookend).call(this, TEMPLATE_NS_ID, \"bookend\"));\n            _this112.id = attributes.id || \"\";\n            _this112.leader = attributes.leader || \"\";\n            _this112.trailer = attributes.trailer || \"\";\n            _this112.use = attributes.use || \"\";\n            _this112.usehref = attributes.usehref || \"\";\n            return _this112;\n          }\n          return Bookend;\n        }(_xfa_object.XFAObject);\n        var BooleanElement = /*#__PURE__*/function (_xfa_object$Option) {\n          _inherits(BooleanElement, _xfa_object$Option);\n          function BooleanElement(attributes) {\n            var _this113;\n            _classCallCheck(this, BooleanElement);\n            _this113 = _possibleConstructorReturn(this, _getPrototypeOf(BooleanElement).call(this, TEMPLATE_NS_ID, \"boolean\"));\n            _this113.id = attributes.id || \"\";\n            _this113.name = attributes.name || \"\";\n            _this113.use = attributes.use || \"\";\n            _this113.usehref = attributes.usehref || \"\";\n            return _this113;\n          }\n          _createClass(BooleanElement, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] === 1 ? \"1\" : \"0\");\n            }\n          }]);\n          return BooleanElement;\n        }(_xfa_object.Option01);\n        var Border = /*#__PURE__*/function (_xfa_object$XFAObject8) {\n          _inherits(Border, _xfa_object$XFAObject8);\n          function Border(attributes) {\n            var _this114;\n            _classCallCheck(this, Border);\n            _this114 = _possibleConstructorReturn(this, _getPrototypeOf(Border).call(this, TEMPLATE_NS_ID, \"border\", true));\n            _this114.break = (0, _utils.getStringOption)(attributes.break, [\"close\", \"open\"]);\n            _this114.hand = (0, _utils.getStringOption)(attributes.hand, [\"even\", \"left\", \"right\"]);\n            _this114.id = attributes.id || \"\";\n            _this114.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this114.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this114.use = attributes.use || \"\";\n            _this114.usehref = attributes.usehref || \"\";\n            _this114.corner = new _xfa_object.XFAObjectArray(4);\n            _this114.edge = new _xfa_object.XFAObjectArray(4);\n            _this114.extras = null;\n            _this114.fill = null;\n            _this114.margin = null;\n            return _this114;\n          }\n          _createClass(Border, [{\n            key: _xfa_object.$getExtra,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                var edges = this.edge.children.slice();\n                if (edges.length < 4) {\n                  var defaultEdge = edges.at(-1) || new Edge({});\n                  for (var i = edges.length; i < 4; i++) {\n                    edges.push(defaultEdge);\n                  }\n                }\n                var widths = edges.map(function (edge) {\n                  return edge.thickness;\n                });\n                var insets = [0, 0, 0, 0];\n                if (this.margin) {\n                  insets[0] = this.margin.topInset;\n                  insets[1] = this.margin.rightInset;\n                  insets[2] = this.margin.bottomInset;\n                  insets[3] = this.margin.leftInset;\n                }\n                this[_xfa_object.$extra] = {\n                  widths: widths,\n                  insets: insets,\n                  edges: edges\n                };\n              }\n              return this[_xfa_object.$extra];\n            }\n          }, {\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var _this$_xfa_object$$ge = this[_xfa_object.$getExtra](),\n                edges = _this$_xfa_object$$ge.edges;\n              var edgeStyles = edges.map(function (node) {\n                var style = node[_xfa_object.$toStyle]();\n                style.color = style.color || \"#000000\";\n                return style;\n              });\n              var style = Object.create(null);\n              if (this.margin) {\n                Object.assign(style, this.margin[_xfa_object.$toStyle]());\n              }\n              if (this.fill && this.fill.presence === \"visible\") {\n                Object.assign(style, this.fill[_xfa_object.$toStyle]());\n              }\n              if (this.corner.children.some(function (node) {\n                return node.radius !== 0;\n              })) {\n                var cornerStyles = this.corner.children.map(function (node) {\n                  return node[_xfa_object.$toStyle]();\n                });\n                if (cornerStyles.length === 2 || cornerStyles.length === 3) {\n                  var last = cornerStyles.at(-1);\n                  for (var i = cornerStyles.length; i < 4; i++) {\n                    cornerStyles.push(last);\n                  }\n                }\n                style.borderRadius = cornerStyles.map(function (s) {\n                  return s.radius;\n                }).join(\" \");\n              }\n              switch (this.presence) {\n                case \"invisible\":\n                case \"hidden\":\n                  style.borderStyle = \"\";\n                  break;\n                case \"inactive\":\n                  style.borderStyle = \"none\";\n                  break;\n                default:\n                  style.borderStyle = edgeStyles.map(function (s) {\n                    return s.style;\n                  }).join(\" \");\n                  break;\n              }\n              style.borderWidth = edgeStyles.map(function (s) {\n                return s.width;\n              }).join(\" \");\n              style.borderColor = edgeStyles.map(function (s) {\n                return s.color;\n              }).join(\" \");\n              return style;\n            }\n          }]);\n          return Border;\n        }(_xfa_object.XFAObject);\n        var Break = /*#__PURE__*/function (_xfa_object$XFAObject9) {\n          _inherits(Break, _xfa_object$XFAObject9);\n          function Break(attributes) {\n            var _this115;\n            _classCallCheck(this, Break);\n            _this115 = _possibleConstructorReturn(this, _getPrototypeOf(Break).call(this, TEMPLATE_NS_ID, \"break\", true));\n            _this115.after = (0, _utils.getStringOption)(attributes.after, [\"auto\", \"contentArea\", \"pageArea\", \"pageEven\", \"pageOdd\"]);\n            _this115.afterTarget = attributes.afterTarget || \"\";\n            _this115.before = (0, _utils.getStringOption)(attributes.before, [\"auto\", \"contentArea\", \"pageArea\", \"pageEven\", \"pageOdd\"]);\n            _this115.beforeTarget = attributes.beforeTarget || \"\";\n            _this115.bookendLeader = attributes.bookendLeader || \"\";\n            _this115.bookendTrailer = attributes.bookendTrailer || \"\";\n            _this115.id = attributes.id || \"\";\n            _this115.overflowLeader = attributes.overflowLeader || \"\";\n            _this115.overflowTarget = attributes.overflowTarget || \"\";\n            _this115.overflowTrailer = attributes.overflowTrailer || \"\";\n            _this115.startNew = (0, _utils.getInteger)({\n              data: attributes.startNew,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this115.use = attributes.use || \"\";\n            _this115.usehref = attributes.usehref || \"\";\n            _this115.extras = null;\n            return _this115;\n          }\n          return Break;\n        }(_xfa_object.XFAObject);\n        var BreakAfter = /*#__PURE__*/function (_xfa_object$XFAObject10) {\n          _inherits(BreakAfter, _xfa_object$XFAObject10);\n          function BreakAfter(attributes) {\n            var _this116;\n            _classCallCheck(this, BreakAfter);\n            _this116 = _possibleConstructorReturn(this, _getPrototypeOf(BreakAfter).call(this, TEMPLATE_NS_ID, \"breakAfter\", true));\n            _this116.id = attributes.id || \"\";\n            _this116.leader = attributes.leader || \"\";\n            _this116.startNew = (0, _utils.getInteger)({\n              data: attributes.startNew,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this116.target = attributes.target || \"\";\n            _this116.targetType = (0, _utils.getStringOption)(attributes.targetType, [\"auto\", \"contentArea\", \"pageArea\"]);\n            _this116.trailer = attributes.trailer || \"\";\n            _this116.use = attributes.use || \"\";\n            _this116.usehref = attributes.usehref || \"\";\n            _this116.script = null;\n            return _this116;\n          }\n          return BreakAfter;\n        }(_xfa_object.XFAObject);\n        var BreakBefore = /*#__PURE__*/function (_xfa_object$XFAObject11) {\n          _inherits(BreakBefore, _xfa_object$XFAObject11);\n          function BreakBefore(attributes) {\n            var _this117;\n            _classCallCheck(this, BreakBefore);\n            _this117 = _possibleConstructorReturn(this, _getPrototypeOf(BreakBefore).call(this, TEMPLATE_NS_ID, \"breakBefore\", true));\n            _this117.id = attributes.id || \"\";\n            _this117.leader = attributes.leader || \"\";\n            _this117.startNew = (0, _utils.getInteger)({\n              data: attributes.startNew,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this117.target = attributes.target || \"\";\n            _this117.targetType = (0, _utils.getStringOption)(attributes.targetType, [\"auto\", \"contentArea\", \"pageArea\"]);\n            _this117.trailer = attributes.trailer || \"\";\n            _this117.use = attributes.use || \"\";\n            _this117.usehref = attributes.usehref || \"\";\n            _this117.script = null;\n            return _this117;\n          }\n          _createClass(BreakBefore, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              this[_xfa_object.$extra] = {};\n              return _utils.HTMLResult.FAILURE;\n            }\n          }]);\n          return BreakBefore;\n        }(_xfa_object.XFAObject);\n        var Button = /*#__PURE__*/function (_xfa_object$XFAObject12) {\n          _inherits(Button, _xfa_object$XFAObject12);\n          function Button(attributes) {\n            var _this118;\n            _classCallCheck(this, Button);\n            _this118 = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, TEMPLATE_NS_ID, \"button\", true));\n            _this118.highlight = (0, _utils.getStringOption)(attributes.highlight, [\"inverted\", \"none\", \"outline\", \"push\"]);\n            _this118.id = attributes.id || \"\";\n            _this118.use = attributes.use || \"\";\n            _this118.usehref = attributes.usehref || \"\";\n            _this118.extras = null;\n            return _this118;\n          }\n          _createClass(Button, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var parent = this[_xfa_object.$getParent]();\n              var grandpa = parent[_xfa_object.$getParent]();\n              var htmlButton = {\n                name: \"button\",\n                attributes: {\n                  id: this[_xfa_object.$uid],\n                  class: [\"xfaButton\"],\n                  style: {}\n                },\n                children: []\n              };\n              var _iterator154 = _createForOfIteratorHelper(grandpa.event.children),\n                _step154;\n              try {\n                for (_iterator154.s(); !(_step154 = _iterator154.n()).done;) {\n                  var event = _step154.value;\n                  if (event.activity !== \"click\" || !event.script) {\n                    continue;\n                  }\n                  var jsURL = (0, _core_utils.recoverJsURL)(event.script[_xfa_object.$content]);\n                  if (!jsURL) {\n                    continue;\n                  }\n                  var href = (0, _html_utils.fixURL)(jsURL.url);\n                  if (!href) {\n                    continue;\n                  }\n                  htmlButton.children.push({\n                    name: \"a\",\n                    attributes: {\n                      id: \"link\" + this[_xfa_object.$uid],\n                      href: href,\n                      newWindow: jsURL.newWindow,\n                      class: [\"xfaLink\"],\n                      style: {}\n                    },\n                    children: []\n                  });\n                }\n              } catch (err) {\n                _iterator154.e(err);\n              } finally {\n                _iterator154.f();\n              }\n              return _utils.HTMLResult.success(htmlButton);\n            }\n          }]);\n          return Button;\n        }(_xfa_object.XFAObject);\n        var Calculate = /*#__PURE__*/function (_xfa_object$XFAObject13) {\n          _inherits(Calculate, _xfa_object$XFAObject13);\n          function Calculate(attributes) {\n            var _this119;\n            _classCallCheck(this, Calculate);\n            _this119 = _possibleConstructorReturn(this, _getPrototypeOf(Calculate).call(this, TEMPLATE_NS_ID, \"calculate\", true));\n            _this119.id = attributes.id || \"\";\n            _this119.override = (0, _utils.getStringOption)(attributes.override, [\"disabled\", \"error\", \"ignore\", \"warning\"]);\n            _this119.use = attributes.use || \"\";\n            _this119.usehref = attributes.usehref || \"\";\n            _this119.extras = null;\n            _this119.message = null;\n            _this119.script = null;\n            return _this119;\n          }\n          return Calculate;\n        }(_xfa_object.XFAObject);\n        var Caption = /*#__PURE__*/function (_xfa_object$XFAObject14) {\n          _inherits(Caption, _xfa_object$XFAObject14);\n          function Caption(attributes) {\n            var _this120;\n            _classCallCheck(this, Caption);\n            _this120 = _possibleConstructorReturn(this, _getPrototypeOf(Caption).call(this, TEMPLATE_NS_ID, \"caption\", true));\n            _this120.id = attributes.id || \"\";\n            _this120.placement = (0, _utils.getStringOption)(attributes.placement, [\"left\", \"bottom\", \"inline\", \"right\", \"top\"]);\n            _this120.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this120.reserve = Math.ceil((0, _utils.getMeasurement)(attributes.reserve));\n            _this120.use = attributes.use || \"\";\n            _this120.usehref = attributes.usehref || \"\";\n            _this120.extras = null;\n            _this120.font = null;\n            _this120.margin = null;\n            _this120.para = null;\n            _this120.value = null;\n            return _this120;\n          }\n          _createClass(Caption, [{\n            key: _xfa_object.$setValue,\n            value: function (_value12) {\n              function value(_x126) {\n                return _value12.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value12.toString();\n              };\n              return value;\n            }(function (value) {\n              _setValue(this, value);\n            })\n          }, {\n            key: _xfa_object.$getExtra,\n            value: function value(availableSpace) {\n              if (!this[_xfa_object.$extra]) {\n                var width = availableSpace.width,\n                  height = availableSpace.height;\n                switch (this.placement) {\n                  case \"left\":\n                  case \"right\":\n                  case \"inline\":\n                    width = this.reserve <= 0 ? width : this.reserve;\n                    break;\n                  case \"top\":\n                  case \"bottom\":\n                    height = this.reserve <= 0 ? height : this.reserve;\n                    break;\n                }\n                this[_xfa_object.$extra] = (0, _html_utils.layoutNode)(this, {\n                  width: width,\n                  height: height\n                });\n              }\n              return this[_xfa_object.$extra];\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              if (!this.value) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              this[_xfa_object.$pushPara]();\n              var value = this.value[_xfa_object.$toHTML](availableSpace).html;\n              if (!value) {\n                this[_xfa_object.$popPara]();\n                return _utils.HTMLResult.EMPTY;\n              }\n              var savedReserve = this.reserve;\n              if (this.reserve <= 0) {\n                var _this$_xfa_object$$ge2 = this[_xfa_object.$getExtra](availableSpace),\n                  w = _this$_xfa_object$$ge2.w,\n                  h = _this$_xfa_object$$ge2.h;\n                switch (this.placement) {\n                  case \"left\":\n                  case \"right\":\n                  case \"inline\":\n                    this.reserve = w;\n                    break;\n                  case \"top\":\n                  case \"bottom\":\n                    this.reserve = h;\n                    break;\n                }\n              }\n              var children = [];\n              if (typeof value === \"string\") {\n                children.push({\n                  name: \"#text\",\n                  value: value\n                });\n              } else {\n                children.push(value);\n              }\n              var style = (0, _html_utils.toStyle)(this, \"font\", \"margin\", \"visibility\");\n              switch (this.placement) {\n                case \"left\":\n                case \"right\":\n                  if (this.reserve > 0) {\n                    style.width = (0, _html_utils.measureToString)(this.reserve);\n                  }\n                  break;\n                case \"top\":\n                case \"bottom\":\n                  if (this.reserve > 0) {\n                    style.height = (0, _html_utils.measureToString)(this.reserve);\n                  }\n                  break;\n              }\n              (0, _html_utils.setPara)(this, null, value);\n              this[_xfa_object.$popPara]();\n              this.reserve = savedReserve;\n              return _utils.HTMLResult.success({\n                name: \"div\",\n                attributes: {\n                  style: style,\n                  class: [\"xfaCaption\"]\n                },\n                children: children\n              });\n            }\n          }]);\n          return Caption;\n        }(_xfa_object.XFAObject);\n        var Certificate = /*#__PURE__*/function (_xfa_object$StringObj2) {\n          _inherits(Certificate, _xfa_object$StringObj2);\n          function Certificate(attributes) {\n            var _this121;\n            _classCallCheck(this, Certificate);\n            _this121 = _possibleConstructorReturn(this, _getPrototypeOf(Certificate).call(this, TEMPLATE_NS_ID, \"certificate\"));\n            _this121.id = attributes.id || \"\";\n            _this121.name = attributes.name || \"\";\n            _this121.use = attributes.use || \"\";\n            _this121.usehref = attributes.usehref || \"\";\n            return _this121;\n          }\n          return Certificate;\n        }(_xfa_object.StringObject);\n        var Certificates = /*#__PURE__*/function (_xfa_object$XFAObject15) {\n          _inherits(Certificates, _xfa_object$XFAObject15);\n          function Certificates(attributes) {\n            var _this122;\n            _classCallCheck(this, Certificates);\n            _this122 = _possibleConstructorReturn(this, _getPrototypeOf(Certificates).call(this, TEMPLATE_NS_ID, \"certificates\", true));\n            _this122.credentialServerPolicy = (0, _utils.getStringOption)(attributes.credentialServerPolicy, [\"optional\", \"required\"]);\n            _this122.id = attributes.id || \"\";\n            _this122.url = attributes.url || \"\";\n            _this122.urlPolicy = attributes.urlPolicy || \"\";\n            _this122.use = attributes.use || \"\";\n            _this122.usehref = attributes.usehref || \"\";\n            _this122.encryption = null;\n            _this122.issuers = null;\n            _this122.keyUsage = null;\n            _this122.oids = null;\n            _this122.signing = null;\n            _this122.subjectDNs = null;\n            return _this122;\n          }\n          return Certificates;\n        }(_xfa_object.XFAObject);\n        var CheckButton = /*#__PURE__*/function (_xfa_object$XFAObject16) {\n          _inherits(CheckButton, _xfa_object$XFAObject16);\n          function CheckButton(attributes) {\n            var _this123;\n            _classCallCheck(this, CheckButton);\n            _this123 = _possibleConstructorReturn(this, _getPrototypeOf(CheckButton).call(this, TEMPLATE_NS_ID, \"checkButton\", true));\n            _this123.id = attributes.id || \"\";\n            _this123.mark = (0, _utils.getStringOption)(attributes.mark, [\"default\", \"check\", \"circle\", \"cross\", \"diamond\", \"square\", \"star\"]);\n            _this123.shape = (0, _utils.getStringOption)(attributes.shape, [\"square\", \"round\"]);\n            _this123.size = (0, _utils.getMeasurement)(attributes.size, \"10pt\");\n            _this123.use = attributes.use || \"\";\n            _this123.usehref = attributes.usehref || \"\";\n            _this123.border = null;\n            _this123.extras = null;\n            _this123.margin = null;\n            return _this123;\n          }\n          _createClass(CheckButton, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(\"margin\");\n              var size = (0, _html_utils.measureToString)(this.size);\n              style.width = style.height = size;\n              var type;\n              var className;\n              var groupId;\n              var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              var items = field.items.children.length && field.items.children[0][_xfa_object.$toHTML]().html || [];\n              var exportedValue = {\n                on: (items[0] !== undefined ? items[0] : \"on\").toString(),\n                off: (items[1] !== undefined ? items[1] : \"off\").toString()\n              };\n              var value = field.value && field.value[_xfa_object.$text]() || \"off\";\n              var checked = value === exportedValue.on || undefined;\n              var container = field[_xfa_object.$getSubformParent]();\n              var fieldId = field[_xfa_object.$uid];\n              var dataId;\n              if (container instanceof ExclGroup) {\n                groupId = container[_xfa_object.$uid];\n                type = \"radio\";\n                className = \"xfaRadio\";\n                dataId = container[_xfa_object.$data] && container[_xfa_object.$data][_xfa_object.$uid] || container[_xfa_object.$uid];\n              } else {\n                type = \"checkbox\";\n                className = \"xfaCheckbox\";\n                dataId = field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid];\n              }\n              var input = {\n                name: \"input\",\n                attributes: {\n                  class: [className],\n                  style: style,\n                  fieldId: fieldId,\n                  dataId: dataId,\n                  type: type,\n                  checked: checked,\n                  xfaOn: exportedValue.on,\n                  xfaOff: exportedValue.off,\n                  \"aria-label\": ariaLabel(field),\n                  \"aria-required\": false\n                }\n              };\n              if (groupId) {\n                input.attributes.name = groupId;\n              }\n              if (isRequired(field)) {\n                input.attributes[\"aria-required\"] = true;\n                input.attributes.required = true;\n              }\n              return _utils.HTMLResult.success({\n                name: \"label\",\n                attributes: {\n                  class: [\"xfaLabel\"]\n                },\n                children: [input]\n              });\n            }\n          }]);\n          return CheckButton;\n        }(_xfa_object.XFAObject);\n        var ChoiceList = /*#__PURE__*/function (_xfa_object$XFAObject17) {\n          _inherits(ChoiceList, _xfa_object$XFAObject17);\n          function ChoiceList(attributes) {\n            var _this124;\n            _classCallCheck(this, ChoiceList);\n            _this124 = _possibleConstructorReturn(this, _getPrototypeOf(ChoiceList).call(this, TEMPLATE_NS_ID, \"choiceList\", true));\n            _this124.commitOn = (0, _utils.getStringOption)(attributes.commitOn, [\"select\", \"exit\"]);\n            _this124.id = attributes.id || \"\";\n            _this124.open = (0, _utils.getStringOption)(attributes.open, [\"userControl\", \"always\", \"multiSelect\", \"onEntry\"]);\n            _this124.textEntry = (0, _utils.getInteger)({\n              data: attributes.textEntry,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this124.use = attributes.use || \"\";\n            _this124.usehref = attributes.usehref || \"\";\n            _this124.border = null;\n            _this124.extras = null;\n            _this124.margin = null;\n            return _this124;\n          }\n          _createClass(ChoiceList, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(this, \"border\", \"margin\");\n              var ui = this[_xfa_object.$getParent]();\n              var field = ui[_xfa_object.$getParent]();\n              var fontSize = field.font && field.font.size || 10;\n              var optionStyle = {\n                fontSize: \"calc(\".concat(fontSize, \"px * var(--scale-factor))\")\n              };\n              var children = [];\n              if (field.items.children.length > 0) {\n                var items = field.items;\n                var displayedIndex = 0;\n                var saveIndex = 0;\n                if (items.children.length === 2) {\n                  displayedIndex = items.children[0].save;\n                  saveIndex = 1 - displayedIndex;\n                }\n                var displayed = items.children[displayedIndex][_xfa_object.$toHTML]().html;\n                var values = items.children[saveIndex][_xfa_object.$toHTML]().html;\n                var selected = false;\n                var _value13 = field.value && field.value[_xfa_object.$text]() || \"\";\n                for (var i = 0, ii = displayed.length; i < ii; i++) {\n                  var option = {\n                    name: \"option\",\n                    attributes: {\n                      value: values[i] || displayed[i],\n                      style: optionStyle\n                    },\n                    value: displayed[i]\n                  };\n                  if (values[i] === _value13) {\n                    option.attributes.selected = selected = true;\n                  }\n                  children.push(option);\n                }\n                if (!selected) {\n                  children.splice(0, 0, {\n                    name: \"option\",\n                    attributes: {\n                      hidden: true,\n                      selected: true\n                    },\n                    value: \" \"\n                  });\n                }\n              }\n              var selectAttributes = {\n                class: [\"xfaSelect\"],\n                fieldId: field[_xfa_object.$uid],\n                dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],\n                style: style,\n                \"aria-label\": ariaLabel(field),\n                \"aria-required\": false\n              };\n              if (isRequired(field)) {\n                selectAttributes[\"aria-required\"] = true;\n                selectAttributes.required = true;\n              }\n              if (this.open === \"multiSelect\") {\n                selectAttributes.multiple = true;\n              }\n              return _utils.HTMLResult.success({\n                name: \"label\",\n                attributes: {\n                  class: [\"xfaLabel\"]\n                },\n                children: [{\n                  name: \"select\",\n                  children: children,\n                  attributes: selectAttributes\n                }]\n              });\n            }\n          }]);\n          return ChoiceList;\n        }(_xfa_object.XFAObject);\n        var Color = /*#__PURE__*/function (_xfa_object$XFAObject18) {\n          _inherits(Color, _xfa_object$XFAObject18);\n          function Color(attributes) {\n            var _this125;\n            _classCallCheck(this, Color);\n            _this125 = _possibleConstructorReturn(this, _getPrototypeOf(Color).call(this, TEMPLATE_NS_ID, \"color\", true));\n            _this125.cSpace = (0, _utils.getStringOption)(attributes.cSpace, [\"SRGB\"]);\n            _this125.id = attributes.id || \"\";\n            _this125.use = attributes.use || \"\";\n            _this125.usehref = attributes.usehref || \"\";\n            _this125.value = attributes.value ? (0, _utils.getColor)(attributes.value) : \"\";\n            _this125.extras = null;\n            return _this125;\n          }\n          _createClass(Color, [{\n            key: _xfa_object.$hasSettableValue,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              return this.value ? _util.Util.makeHexColor(this.value.r, this.value.g, this.value.b) : null;\n            }\n          }]);\n          return Color;\n        }(_xfa_object.XFAObject);\n        var Comb = /*#__PURE__*/function (_xfa_object$XFAObject19) {\n          _inherits(Comb, _xfa_object$XFAObject19);\n          function Comb(attributes) {\n            var _this126;\n            _classCallCheck(this, Comb);\n            _this126 = _possibleConstructorReturn(this, _getPrototypeOf(Comb).call(this, TEMPLATE_NS_ID, \"comb\"));\n            _this126.id = attributes.id || \"\";\n            _this126.numberOfCells = (0, _utils.getInteger)({\n              data: attributes.numberOfCells,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this126.use = attributes.use || \"\";\n            _this126.usehref = attributes.usehref || \"\";\n            return _this126;\n          }\n          return Comb;\n        }(_xfa_object.XFAObject);\n        var Connect = /*#__PURE__*/function (_xfa_object$XFAObject20) {\n          _inherits(Connect, _xfa_object$XFAObject20);\n          function Connect(attributes) {\n            var _this127;\n            _classCallCheck(this, Connect);\n            _this127 = _possibleConstructorReturn(this, _getPrototypeOf(Connect).call(this, TEMPLATE_NS_ID, \"connect\", true));\n            _this127.connection = attributes.connection || \"\";\n            _this127.id = attributes.id || \"\";\n            _this127.ref = attributes.ref || \"\";\n            _this127.usage = (0, _utils.getStringOption)(attributes.usage, [\"exportAndImport\", \"exportOnly\", \"importOnly\"]);\n            _this127.use = attributes.use || \"\";\n            _this127.usehref = attributes.usehref || \"\";\n            _this127.picture = null;\n            return _this127;\n          }\n          return Connect;\n        }(_xfa_object.XFAObject);\n        var ContentArea = /*#__PURE__*/function (_xfa_object$XFAObject21) {\n          _inherits(ContentArea, _xfa_object$XFAObject21);\n          function ContentArea(attributes) {\n            var _this128;\n            _classCallCheck(this, ContentArea);\n            _this128 = _possibleConstructorReturn(this, _getPrototypeOf(ContentArea).call(this, TEMPLATE_NS_ID, \"contentArea\", true));\n            _this128.h = (0, _utils.getMeasurement)(attributes.h);\n            _this128.id = attributes.id || \"\";\n            _this128.name = attributes.name || \"\";\n            _this128.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this128.use = attributes.use || \"\";\n            _this128.usehref = attributes.usehref || \"\";\n            _this128.w = (0, _utils.getMeasurement)(attributes.w);\n            _this128.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this128.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this128.desc = null;\n            _this128.extras = null;\n            return _this128;\n          }\n          _createClass(ContentArea, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var left = (0, _html_utils.measureToString)(this.x);\n              var top = (0, _html_utils.measureToString)(this.y);\n              var style = {\n                left: left,\n                top: top,\n                width: (0, _html_utils.measureToString)(this.w),\n                height: (0, _html_utils.measureToString)(this.h)\n              };\n              var classNames = [\"xfaContentarea\"];\n              if ((0, _html_utils.isPrintOnly)(this)) {\n                classNames.push(\"xfaPrintOnly\");\n              }\n              return _utils.HTMLResult.success({\n                name: \"div\",\n                children: [],\n                attributes: {\n                  style: style,\n                  class: classNames,\n                  id: this[_xfa_object.$uid]\n                }\n              });\n            }\n          }]);\n          return ContentArea;\n        }(_xfa_object.XFAObject);\n        var Corner = /*#__PURE__*/function (_xfa_object$XFAObject22) {\n          _inherits(Corner, _xfa_object$XFAObject22);\n          function Corner(attributes) {\n            var _this129;\n            _classCallCheck(this, Corner);\n            _this129 = _possibleConstructorReturn(this, _getPrototypeOf(Corner).call(this, TEMPLATE_NS_ID, \"corner\", true));\n            _this129.id = attributes.id || \"\";\n            _this129.inverted = (0, _utils.getInteger)({\n              data: attributes.inverted,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this129.join = (0, _utils.getStringOption)(attributes.join, [\"square\", \"round\"]);\n            _this129.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this129.radius = (0, _utils.getMeasurement)(attributes.radius);\n            _this129.stroke = (0, _utils.getStringOption)(attributes.stroke, [\"solid\", \"dashDot\", \"dashDotDot\", \"dashed\", \"dotted\", \"embossed\", \"etched\", \"lowered\", \"raised\"]);\n            _this129.thickness = (0, _utils.getMeasurement)(attributes.thickness, \"0.5pt\");\n            _this129.use = attributes.use || \"\";\n            _this129.usehref = attributes.usehref || \"\";\n            _this129.color = null;\n            _this129.extras = null;\n            return _this129;\n          }\n          _createClass(Corner, [{\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var style = (0, _html_utils.toStyle)(this, \"visibility\");\n              style.radius = (0, _html_utils.measureToString)(this.join === \"square\" ? 0 : this.radius);\n              return style;\n            }\n          }]);\n          return Corner;\n        }(_xfa_object.XFAObject);\n        var DateElement = /*#__PURE__*/function (_xfa_object$ContentOb) {\n          _inherits(DateElement, _xfa_object$ContentOb);\n          function DateElement(attributes) {\n            var _this130;\n            _classCallCheck(this, DateElement);\n            _this130 = _possibleConstructorReturn(this, _getPrototypeOf(DateElement).call(this, TEMPLATE_NS_ID, \"date\"));\n            _this130.id = attributes.id || \"\";\n            _this130.name = attributes.name || \"\";\n            _this130.use = attributes.use || \"\";\n            _this130.usehref = attributes.usehref || \"\";\n            return _this130;\n          }\n          _createClass(DateElement, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var date = this[_xfa_object.$content].trim();\n              this[_xfa_object.$content] = date ? new Date(date) : null;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return DateElement;\n        }(_xfa_object.ContentObject);\n        var DateTime = /*#__PURE__*/function (_xfa_object$ContentOb2) {\n          _inherits(DateTime, _xfa_object$ContentOb2);\n          function DateTime(attributes) {\n            var _this131;\n            _classCallCheck(this, DateTime);\n            _this131 = _possibleConstructorReturn(this, _getPrototypeOf(DateTime).call(this, TEMPLATE_NS_ID, \"dateTime\"));\n            _this131.id = attributes.id || \"\";\n            _this131.name = attributes.name || \"\";\n            _this131.use = attributes.use || \"\";\n            _this131.usehref = attributes.usehref || \"\";\n            return _this131;\n          }\n          _createClass(DateTime, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var date = this[_xfa_object.$content].trim();\n              this[_xfa_object.$content] = date ? new Date(date) : null;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return DateTime;\n        }(_xfa_object.ContentObject);\n        var DateTimeEdit = /*#__PURE__*/function (_xfa_object$XFAObject23) {\n          _inherits(DateTimeEdit, _xfa_object$XFAObject23);\n          function DateTimeEdit(attributes) {\n            var _this132;\n            _classCallCheck(this, DateTimeEdit);\n            _this132 = _possibleConstructorReturn(this, _getPrototypeOf(DateTimeEdit).call(this, TEMPLATE_NS_ID, \"dateTimeEdit\", true));\n            _this132.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, [\"auto\", \"off\", \"on\"]);\n            _this132.id = attributes.id || \"\";\n            _this132.picker = (0, _utils.getStringOption)(attributes.picker, [\"host\", \"none\"]);\n            _this132.use = attributes.use || \"\";\n            _this132.usehref = attributes.usehref || \"\";\n            _this132.border = null;\n            _this132.comb = null;\n            _this132.extras = null;\n            _this132.margin = null;\n            return _this132;\n          }\n          _createClass(DateTimeEdit, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(this, \"border\", \"font\", \"margin\");\n              var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              var html = {\n                name: \"input\",\n                attributes: {\n                  type: \"text\",\n                  fieldId: field[_xfa_object.$uid],\n                  dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],\n                  class: [\"xfaTextfield\"],\n                  style: style,\n                  \"aria-label\": ariaLabel(field),\n                  \"aria-required\": false\n                }\n              };\n              if (isRequired(field)) {\n                html.attributes[\"aria-required\"] = true;\n                html.attributes.required = true;\n              }\n              return _utils.HTMLResult.success({\n                name: \"label\",\n                attributes: {\n                  class: [\"xfaLabel\"]\n                },\n                children: [html]\n              });\n            }\n          }]);\n          return DateTimeEdit;\n        }(_xfa_object.XFAObject);\n        var Decimal = /*#__PURE__*/function (_xfa_object$ContentOb3) {\n          _inherits(Decimal, _xfa_object$ContentOb3);\n          function Decimal(attributes) {\n            var _this133;\n            _classCallCheck(this, Decimal);\n            _this133 = _possibleConstructorReturn(this, _getPrototypeOf(Decimal).call(this, TEMPLATE_NS_ID, \"decimal\"));\n            _this133.fracDigits = (0, _utils.getInteger)({\n              data: attributes.fracDigits,\n              defaultValue: 2,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this133.id = attributes.id || \"\";\n            _this133.leadDigits = (0, _utils.getInteger)({\n              data: attributes.leadDigits,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this133.name = attributes.name || \"\";\n            _this133.use = attributes.use || \"\";\n            _this133.usehref = attributes.usehref || \"\";\n            return _this133;\n          }\n          _createClass(Decimal, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var number = parseFloat(this[_xfa_object.$content].trim());\n              this[_xfa_object.$content] = isNaN(number) ? null : number;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return Decimal;\n        }(_xfa_object.ContentObject);\n        var DefaultUi = /*#__PURE__*/function (_xfa_object$XFAObject24) {\n          _inherits(DefaultUi, _xfa_object$XFAObject24);\n          function DefaultUi(attributes) {\n            var _this134;\n            _classCallCheck(this, DefaultUi);\n            _this134 = _possibleConstructorReturn(this, _getPrototypeOf(DefaultUi).call(this, TEMPLATE_NS_ID, \"defaultUi\", true));\n            _this134.id = attributes.id || \"\";\n            _this134.use = attributes.use || \"\";\n            _this134.usehref = attributes.usehref || \"\";\n            _this134.extras = null;\n            return _this134;\n          }\n          return DefaultUi;\n        }(_xfa_object.XFAObject);\n        var Desc = /*#__PURE__*/function (_xfa_object$XFAObject25) {\n          _inherits(Desc, _xfa_object$XFAObject25);\n          function Desc(attributes) {\n            var _this135;\n            _classCallCheck(this, Desc);\n            _this135 = _possibleConstructorReturn(this, _getPrototypeOf(Desc).call(this, TEMPLATE_NS_ID, \"desc\", true));\n            _this135.id = attributes.id || \"\";\n            _this135.use = attributes.use || \"\";\n            _this135.usehref = attributes.usehref || \"\";\n            _this135.boolean = new _xfa_object.XFAObjectArray();\n            _this135.date = new _xfa_object.XFAObjectArray();\n            _this135.dateTime = new _xfa_object.XFAObjectArray();\n            _this135.decimal = new _xfa_object.XFAObjectArray();\n            _this135.exData = new _xfa_object.XFAObjectArray();\n            _this135.float = new _xfa_object.XFAObjectArray();\n            _this135.image = new _xfa_object.XFAObjectArray();\n            _this135.integer = new _xfa_object.XFAObjectArray();\n            _this135.text = new _xfa_object.XFAObjectArray();\n            _this135.time = new _xfa_object.XFAObjectArray();\n            return _this135;\n          }\n          return Desc;\n        }(_xfa_object.XFAObject);\n        var DigestMethod = /*#__PURE__*/function (_xfa_object$OptionObj) {\n          _inherits(DigestMethod, _xfa_object$OptionObj);\n          function DigestMethod(attributes) {\n            var _this136;\n            _classCallCheck(this, DigestMethod);\n            _this136 = _possibleConstructorReturn(this, _getPrototypeOf(DigestMethod).call(this, TEMPLATE_NS_ID, \"digestMethod\", [\"\", \"SHA1\", \"SHA256\", \"SHA512\", \"RIPEMD160\"]));\n            _this136.id = attributes.id || \"\";\n            _this136.use = attributes.use || \"\";\n            _this136.usehref = attributes.usehref || \"\";\n            return _this136;\n          }\n          return DigestMethod;\n        }(_xfa_object.OptionObject);\n        var DigestMethods = /*#__PURE__*/function (_xfa_object$XFAObject26) {\n          _inherits(DigestMethods, _xfa_object$XFAObject26);\n          function DigestMethods(attributes) {\n            var _this137;\n            _classCallCheck(this, DigestMethods);\n            _this137 = _possibleConstructorReturn(this, _getPrototypeOf(DigestMethods).call(this, TEMPLATE_NS_ID, \"digestMethods\", true));\n            _this137.id = attributes.id || \"\";\n            _this137.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this137.use = attributes.use || \"\";\n            _this137.usehref = attributes.usehref || \"\";\n            _this137.digestMethod = new _xfa_object.XFAObjectArray();\n            return _this137;\n          }\n          return DigestMethods;\n        }(_xfa_object.XFAObject);\n        var Draw = /*#__PURE__*/function (_xfa_object$XFAObject27) {\n          _inherits(Draw, _xfa_object$XFAObject27);\n          function Draw(attributes) {\n            var _this138;\n            _classCallCheck(this, Draw);\n            _this138 = _possibleConstructorReturn(this, _getPrototypeOf(Draw).call(this, TEMPLATE_NS_ID, \"draw\", true));\n            _this138.anchorType = (0, _utils.getStringOption)(attributes.anchorType, [\"topLeft\", \"bottomCenter\", \"bottomLeft\", \"bottomRight\", \"middleCenter\", \"middleLeft\", \"middleRight\", \"topCenter\", \"topRight\"]);\n            _this138.colSpan = (0, _utils.getInteger)({\n              data: attributes.colSpan,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n >= 1 || n === -1;\n              }\n            });\n            _this138.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : \"\";\n            _this138.hAlign = (0, _utils.getStringOption)(attributes.hAlign, [\"left\", \"center\", \"justify\", \"justifyAll\", \"radix\", \"right\"]);\n            _this138.id = attributes.id || \"\";\n            _this138.locale = attributes.locale || \"\";\n            _this138.maxH = (0, _utils.getMeasurement)(attributes.maxH, \"0pt\");\n            _this138.maxW = (0, _utils.getMeasurement)(attributes.maxW, \"0pt\");\n            _this138.minH = (0, _utils.getMeasurement)(attributes.minH, \"0pt\");\n            _this138.minW = (0, _utils.getMeasurement)(attributes.minW, \"0pt\");\n            _this138.name = attributes.name || \"\";\n            _this138.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this138.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this138.rotate = (0, _utils.getInteger)({\n              data: attributes.rotate,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x % 90 === 0;\n              }\n            });\n            _this138.use = attributes.use || \"\";\n            _this138.usehref = attributes.usehref || \"\";\n            _this138.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : \"\";\n            _this138.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this138.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this138.assist = null;\n            _this138.border = null;\n            _this138.caption = null;\n            _this138.desc = null;\n            _this138.extras = null;\n            _this138.font = null;\n            _this138.keep = null;\n            _this138.margin = null;\n            _this138.para = null;\n            _this138.traversal = null;\n            _this138.ui = null;\n            _this138.value = null;\n            _this138.setProperty = new _xfa_object.XFAObjectArray();\n            return _this138;\n          }\n          _createClass(Draw, [{\n            key: _xfa_object.$setValue,\n            value: function (_value14) {\n              function value(_x127) {\n                return _value14.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value14.toString();\n              };\n              return value;\n            }(function (value) {\n              _setValue(this, value);\n            })\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              setTabIndex(this);\n              if (this.presence === \"hidden\" || this.presence === \"inactive\") {\n                return _utils.HTMLResult.EMPTY;\n              }\n              (0, _html_utils.fixDimensions)(this);\n              this[_xfa_object.$pushPara]();\n              var savedW = this.w;\n              var savedH = this.h;\n              var _ref92 = (0, _html_utils.layoutNode)(this, availableSpace),\n                w = _ref92.w,\n                h = _ref92.h,\n                isBroken = _ref92.isBroken;\n              if (w && this.w === \"\") {\n                if (isBroken && this[_xfa_object.$getSubformParent]()[_xfa_object.$isThereMoreWidth]()) {\n                  this[_xfa_object.$popPara]();\n                  return _utils.HTMLResult.FAILURE;\n                }\n                this.w = w;\n              }\n              if (h && this.h === \"\") {\n                this.h = h;\n              }\n              setFirstUnsplittable(this);\n              if (!(0, _layout.checkDimensions)(this, availableSpace)) {\n                this.w = savedW;\n                this.h = savedH;\n                this[_xfa_object.$popPara]();\n                return _utils.HTMLResult.FAILURE;\n              }\n              unsetFirstUnsplittable(this);\n              var style = (0, _html_utils.toStyle)(this, \"font\", \"hAlign\", \"dimensions\", \"position\", \"presence\", \"rotate\", \"anchorType\", \"border\", \"margin\");\n              (0, _html_utils.setMinMaxDimensions)(this, style);\n              if (style.margin) {\n                style.padding = style.margin;\n                delete style.margin;\n              }\n              var classNames = [\"xfaDraw\"];\n              if (this.font) {\n                classNames.push(\"xfaFont\");\n              }\n              if ((0, _html_utils.isPrintOnly)(this)) {\n                classNames.push(\"xfaPrintOnly\");\n              }\n              var attributes = {\n                style: style,\n                id: this[_xfa_object.$uid],\n                class: classNames\n              };\n              if (this.name) {\n                attributes.xfaName = this.name;\n              }\n              var html = {\n                name: \"div\",\n                attributes: attributes,\n                children: []\n              };\n              applyAssist(this, attributes);\n              var bbox = (0, _html_utils.computeBbox)(this, html, availableSpace);\n              var value = this.value ? this.value[_xfa_object.$toHTML](availableSpace).html : null;\n              if (value === null) {\n                this.w = savedW;\n                this.h = savedH;\n                this[_xfa_object.$popPara]();\n                return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n              }\n              html.children.push(value);\n              (0, _html_utils.setPara)(this, style, value);\n              this.w = savedW;\n              this.h = savedH;\n              this[_xfa_object.$popPara]();\n              return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n            }\n          }]);\n          return Draw;\n        }(_xfa_object.XFAObject);\n        var Edge = /*#__PURE__*/function (_xfa_object$XFAObject28) {\n          _inherits(Edge, _xfa_object$XFAObject28);\n          function Edge(attributes) {\n            var _this139;\n            _classCallCheck(this, Edge);\n            _this139 = _possibleConstructorReturn(this, _getPrototypeOf(Edge).call(this, TEMPLATE_NS_ID, \"edge\", true));\n            _this139.cap = (0, _utils.getStringOption)(attributes.cap, [\"square\", \"butt\", \"round\"]);\n            _this139.id = attributes.id || \"\";\n            _this139.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this139.stroke = (0, _utils.getStringOption)(attributes.stroke, [\"solid\", \"dashDot\", \"dashDotDot\", \"dashed\", \"dotted\", \"embossed\", \"etched\", \"lowered\", \"raised\"]);\n            _this139.thickness = (0, _utils.getMeasurement)(attributes.thickness, \"0.5pt\");\n            _this139.use = attributes.use || \"\";\n            _this139.usehref = attributes.usehref || \"\";\n            _this139.color = null;\n            _this139.extras = null;\n            return _this139;\n          }\n          _createClass(Edge, [{\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var style = (0, _html_utils.toStyle)(this, \"visibility\");\n              Object.assign(style, {\n                linecap: this.cap,\n                width: (0, _html_utils.measureToString)(this.thickness),\n                color: this.color ? this.color[_xfa_object.$toStyle]() : \"#000000\",\n                style: \"\"\n              });\n              if (this.presence !== \"visible\") {\n                style.style = \"none\";\n              } else {\n                switch (this.stroke) {\n                  case \"solid\":\n                    style.style = \"solid\";\n                    break;\n                  case \"dashDot\":\n                    style.style = \"dashed\";\n                    break;\n                  case \"dashDotDot\":\n                    style.style = \"dashed\";\n                    break;\n                  case \"dashed\":\n                    style.style = \"dashed\";\n                    break;\n                  case \"dotted\":\n                    style.style = \"dotted\";\n                    break;\n                  case \"embossed\":\n                    style.style = \"ridge\";\n                    break;\n                  case \"etched\":\n                    style.style = \"groove\";\n                    break;\n                  case \"lowered\":\n                    style.style = \"inset\";\n                    break;\n                  case \"raised\":\n                    style.style = \"outset\";\n                    break;\n                }\n              }\n              return style;\n            }\n          }]);\n          return Edge;\n        }(_xfa_object.XFAObject);\n        var Encoding = /*#__PURE__*/function (_xfa_object$OptionObj2) {\n          _inherits(Encoding, _xfa_object$OptionObj2);\n          function Encoding(attributes) {\n            var _this140;\n            _classCallCheck(this, Encoding);\n            _this140 = _possibleConstructorReturn(this, _getPrototypeOf(Encoding).call(this, TEMPLATE_NS_ID, \"encoding\", [\"adbe.x509.rsa_sha1\", \"adbe.pkcs7.detached\", \"adbe.pkcs7.sha1\"]));\n            _this140.id = attributes.id || \"\";\n            _this140.use = attributes.use || \"\";\n            _this140.usehref = attributes.usehref || \"\";\n            return _this140;\n          }\n          return Encoding;\n        }(_xfa_object.OptionObject);\n        var Encodings = /*#__PURE__*/function (_xfa_object$XFAObject29) {\n          _inherits(Encodings, _xfa_object$XFAObject29);\n          function Encodings(attributes) {\n            var _this141;\n            _classCallCheck(this, Encodings);\n            _this141 = _possibleConstructorReturn(this, _getPrototypeOf(Encodings).call(this, TEMPLATE_NS_ID, \"encodings\", true));\n            _this141.id = attributes.id || \"\";\n            _this141.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this141.use = attributes.use || \"\";\n            _this141.usehref = attributes.usehref || \"\";\n            _this141.encoding = new _xfa_object.XFAObjectArray();\n            return _this141;\n          }\n          return Encodings;\n        }(_xfa_object.XFAObject);\n        var Encrypt = /*#__PURE__*/function (_xfa_object$XFAObject30) {\n          _inherits(Encrypt, _xfa_object$XFAObject30);\n          function Encrypt(attributes) {\n            var _this142;\n            _classCallCheck(this, Encrypt);\n            _this142 = _possibleConstructorReturn(this, _getPrototypeOf(Encrypt).call(this, TEMPLATE_NS_ID, \"encrypt\", true));\n            _this142.id = attributes.id || \"\";\n            _this142.use = attributes.use || \"\";\n            _this142.usehref = attributes.usehref || \"\";\n            _this142.certificate = null;\n            return _this142;\n          }\n          return Encrypt;\n        }(_xfa_object.XFAObject);\n        var EncryptData = /*#__PURE__*/function (_xfa_object$XFAObject31) {\n          _inherits(EncryptData, _xfa_object$XFAObject31);\n          function EncryptData(attributes) {\n            var _this143;\n            _classCallCheck(this, EncryptData);\n            _this143 = _possibleConstructorReturn(this, _getPrototypeOf(EncryptData).call(this, TEMPLATE_NS_ID, \"encryptData\", true));\n            _this143.id = attributes.id || \"\";\n            _this143.operation = (0, _utils.getStringOption)(attributes.operation, [\"encrypt\", \"decrypt\"]);\n            _this143.target = attributes.target || \"\";\n            _this143.use = attributes.use || \"\";\n            _this143.usehref = attributes.usehref || \"\";\n            _this143.filter = null;\n            _this143.manifest = null;\n            return _this143;\n          }\n          return EncryptData;\n        }(_xfa_object.XFAObject);\n        var Encryption = /*#__PURE__*/function (_xfa_object$XFAObject32) {\n          _inherits(Encryption, _xfa_object$XFAObject32);\n          function Encryption(attributes) {\n            var _this144;\n            _classCallCheck(this, Encryption);\n            _this144 = _possibleConstructorReturn(this, _getPrototypeOf(Encryption).call(this, TEMPLATE_NS_ID, \"encryption\", true));\n            _this144.id = attributes.id || \"\";\n            _this144.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this144.use = attributes.use || \"\";\n            _this144.usehref = attributes.usehref || \"\";\n            _this144.certificate = new _xfa_object.XFAObjectArray();\n            return _this144;\n          }\n          return Encryption;\n        }(_xfa_object.XFAObject);\n        var EncryptionMethod = /*#__PURE__*/function (_xfa_object$OptionObj3) {\n          _inherits(EncryptionMethod, _xfa_object$OptionObj3);\n          function EncryptionMethod(attributes) {\n            var _this145;\n            _classCallCheck(this, EncryptionMethod);\n            _this145 = _possibleConstructorReturn(this, _getPrototypeOf(EncryptionMethod).call(this, TEMPLATE_NS_ID, \"encryptionMethod\", [\"\", \"AES256-CBC\", \"TRIPLEDES-CBC\", \"AES128-CBC\", \"AES192-CBC\"]));\n            _this145.id = attributes.id || \"\";\n            _this145.use = attributes.use || \"\";\n            _this145.usehref = attributes.usehref || \"\";\n            return _this145;\n          }\n          return EncryptionMethod;\n        }(_xfa_object.OptionObject);\n        var EncryptionMethods = /*#__PURE__*/function (_xfa_object$XFAObject33) {\n          _inherits(EncryptionMethods, _xfa_object$XFAObject33);\n          function EncryptionMethods(attributes) {\n            var _this146;\n            _classCallCheck(this, EncryptionMethods);\n            _this146 = _possibleConstructorReturn(this, _getPrototypeOf(EncryptionMethods).call(this, TEMPLATE_NS_ID, \"encryptionMethods\", true));\n            _this146.id = attributes.id || \"\";\n            _this146.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this146.use = attributes.use || \"\";\n            _this146.usehref = attributes.usehref || \"\";\n            _this146.encryptionMethod = new _xfa_object.XFAObjectArray();\n            return _this146;\n          }\n          return EncryptionMethods;\n        }(_xfa_object.XFAObject);\n        var Event = /*#__PURE__*/function (_xfa_object$XFAObject34) {\n          _inherits(Event, _xfa_object$XFAObject34);\n          function Event(attributes) {\n            var _this147;\n            _classCallCheck(this, Event);\n            _this147 = _possibleConstructorReturn(this, _getPrototypeOf(Event).call(this, TEMPLATE_NS_ID, \"event\", true));\n            _this147.activity = (0, _utils.getStringOption)(attributes.activity, [\"click\", \"change\", \"docClose\", \"docReady\", \"enter\", \"exit\", \"full\", \"indexChange\", \"initialize\", \"mouseDown\", \"mouseEnter\", \"mouseExit\", \"mouseUp\", \"postExecute\", \"postOpen\", \"postPrint\", \"postSave\", \"postSign\", \"postSubmit\", \"preExecute\", \"preOpen\", \"prePrint\", \"preSave\", \"preSign\", \"preSubmit\", \"ready\", \"validationState\"]);\n            _this147.id = attributes.id || \"\";\n            _this147.listen = (0, _utils.getStringOption)(attributes.listen, [\"refOnly\", \"refAndDescendents\"]);\n            _this147.name = attributes.name || \"\";\n            _this147.ref = attributes.ref || \"\";\n            _this147.use = attributes.use || \"\";\n            _this147.usehref = attributes.usehref || \"\";\n            _this147.extras = null;\n            _this147.encryptData = null;\n            _this147.execute = null;\n            _this147.script = null;\n            _this147.signData = null;\n            _this147.submit = null;\n            return _this147;\n          }\n          return Event;\n        }(_xfa_object.XFAObject);\n        var ExData = /*#__PURE__*/function (_xfa_object$ContentOb4) {\n          _inherits(ExData, _xfa_object$ContentOb4);\n          function ExData(attributes) {\n            var _this148;\n            _classCallCheck(this, ExData);\n            _this148 = _possibleConstructorReturn(this, _getPrototypeOf(ExData).call(this, TEMPLATE_NS_ID, \"exData\"));\n            _this148.contentType = attributes.contentType || \"\";\n            _this148.href = attributes.href || \"\";\n            _this148.id = attributes.id || \"\";\n            _this148.maxLength = (0, _utils.getInteger)({\n              data: attributes.maxLength,\n              defaultValue: -1,\n              validate: function validate(x) {\n                return x >= -1;\n              }\n            });\n            _this148.name = attributes.name || \"\";\n            _this148.rid = attributes.rid || \"\";\n            _this148.transferEncoding = (0, _utils.getStringOption)(attributes.transferEncoding, [\"none\", \"base64\", \"package\"]);\n            _this148.use = attributes.use || \"\";\n            _this148.usehref = attributes.usehref || \"\";\n            return _this148;\n          }\n          _createClass(ExData, [{\n            key: _xfa_object.$isCDATAXml,\n            value: function value() {\n              return this.contentType === \"text/html\";\n            }\n          }, {\n            key: _xfa_object.$onChild,\n            value: function value(child) {\n              if (this.contentType === \"text/html\" && child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {\n                this[_xfa_object.$content] = child;\n                return true;\n              }\n              if (this.contentType === \"text/xml\") {\n                this[_xfa_object.$content] = child;\n                return true;\n              }\n              return false;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              if (this.contentType !== \"text/html\" || !this[_xfa_object.$content]) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              return this[_xfa_object.$content][_xfa_object.$toHTML](availableSpace);\n            }\n          }]);\n          return ExData;\n        }(_xfa_object.ContentObject);\n        var ExObject = /*#__PURE__*/function (_xfa_object$XFAObject35) {\n          _inherits(ExObject, _xfa_object$XFAObject35);\n          function ExObject(attributes) {\n            var _this149;\n            _classCallCheck(this, ExObject);\n            _this149 = _possibleConstructorReturn(this, _getPrototypeOf(ExObject).call(this, TEMPLATE_NS_ID, \"exObject\", true));\n            _this149.archive = attributes.archive || \"\";\n            _this149.classId = attributes.classId || \"\";\n            _this149.codeBase = attributes.codeBase || \"\";\n            _this149.codeType = attributes.codeType || \"\";\n            _this149.id = attributes.id || \"\";\n            _this149.name = attributes.name || \"\";\n            _this149.use = attributes.use || \"\";\n            _this149.usehref = attributes.usehref || \"\";\n            _this149.extras = null;\n            _this149.boolean = new _xfa_object.XFAObjectArray();\n            _this149.date = new _xfa_object.XFAObjectArray();\n            _this149.dateTime = new _xfa_object.XFAObjectArray();\n            _this149.decimal = new _xfa_object.XFAObjectArray();\n            _this149.exData = new _xfa_object.XFAObjectArray();\n            _this149.exObject = new _xfa_object.XFAObjectArray();\n            _this149.float = new _xfa_object.XFAObjectArray();\n            _this149.image = new _xfa_object.XFAObjectArray();\n            _this149.integer = new _xfa_object.XFAObjectArray();\n            _this149.text = new _xfa_object.XFAObjectArray();\n            _this149.time = new _xfa_object.XFAObjectArray();\n            return _this149;\n          }\n          return ExObject;\n        }(_xfa_object.XFAObject);\n        var ExclGroup = /*#__PURE__*/function (_xfa_object$XFAObject36) {\n          _inherits(ExclGroup, _xfa_object$XFAObject36);\n          function ExclGroup(attributes) {\n            var _this150;\n            _classCallCheck(this, ExclGroup);\n            _this150 = _possibleConstructorReturn(this, _getPrototypeOf(ExclGroup).call(this, TEMPLATE_NS_ID, \"exclGroup\", true));\n            _this150.access = (0, _utils.getStringOption)(attributes.access, [\"open\", \"nonInteractive\", \"protected\", \"readOnly\"]);\n            _this150.accessKey = attributes.accessKey || \"\";\n            _this150.anchorType = (0, _utils.getStringOption)(attributes.anchorType, [\"topLeft\", \"bottomCenter\", \"bottomLeft\", \"bottomRight\", \"middleCenter\", \"middleLeft\", \"middleRight\", \"topCenter\", \"topRight\"]);\n            _this150.colSpan = (0, _utils.getInteger)({\n              data: attributes.colSpan,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n >= 1 || n === -1;\n              }\n            });\n            _this150.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : \"\";\n            _this150.hAlign = (0, _utils.getStringOption)(attributes.hAlign, [\"left\", \"center\", \"justify\", \"justifyAll\", \"radix\", \"right\"]);\n            _this150.id = attributes.id || \"\";\n            _this150.layout = (0, _utils.getStringOption)(attributes.layout, [\"position\", \"lr-tb\", \"rl-row\", \"rl-tb\", \"row\", \"table\", \"tb\"]);\n            _this150.maxH = (0, _utils.getMeasurement)(attributes.maxH, \"0pt\");\n            _this150.maxW = (0, _utils.getMeasurement)(attributes.maxW, \"0pt\");\n            _this150.minH = (0, _utils.getMeasurement)(attributes.minH, \"0pt\");\n            _this150.minW = (0, _utils.getMeasurement)(attributes.minW, \"0pt\");\n            _this150.name = attributes.name || \"\";\n            _this150.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this150.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this150.use = attributes.use || \"\";\n            _this150.usehref = attributes.usehref || \"\";\n            _this150.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : \"\";\n            _this150.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this150.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this150.assist = null;\n            _this150.bind = null;\n            _this150.border = null;\n            _this150.calculate = null;\n            _this150.caption = null;\n            _this150.desc = null;\n            _this150.extras = null;\n            _this150.margin = null;\n            _this150.para = null;\n            _this150.traversal = null;\n            _this150.validate = null;\n            _this150.connect = new _xfa_object.XFAObjectArray();\n            _this150.event = new _xfa_object.XFAObjectArray();\n            _this150.field = new _xfa_object.XFAObjectArray();\n            _this150.setProperty = new _xfa_object.XFAObjectArray();\n            return _this150;\n          }\n          _createClass(ExclGroup, [{\n            key: _xfa_object.$isBindable,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$hasSettableValue,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$setValue,\n            value: function (_value15) {\n              function value(_x128) {\n                return _value15.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value15.toString();\n              };\n              return value;\n            }(function (value) {\n              var _iterator155 = _createForOfIteratorHelper(this.field.children),\n                _step155;\n              try {\n                for (_iterator155.s(); !(_step155 = _iterator155.n()).done;) {\n                  var field = _step155.value;\n                  if (!field.value) {\n                    var nodeValue = new Value({});\n                    field[_xfa_object.$appendChild](nodeValue);\n                    field.value = nodeValue;\n                  }\n                  field.value[_xfa_object.$setValue](value);\n                }\n              } catch (err) {\n                _iterator155.e(err);\n              } finally {\n                _iterator155.f();\n              }\n            })\n          }, {\n            key: _xfa_object.$isThereMoreWidth,\n            value: function value() {\n              return this.layout.endsWith(\"-tb\") && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine > 0 || this[_xfa_object.$getParent]()[_xfa_object.$isThereMoreWidth]();\n            }\n          }, {\n            key: _xfa_object.$isSplittable,\n            value: function value() {\n              var parent = this[_xfa_object.$getSubformParent]();\n              if (!parent[_xfa_object.$isSplittable]()) {\n                return false;\n              }\n              if (this[_xfa_object.$extra]._isSplittable !== undefined) {\n                return this[_xfa_object.$extra]._isSplittable;\n              }\n              if (this.layout === \"position\" || this.layout.includes(\"row\")) {\n                this[_xfa_object.$extra]._isSplittable = false;\n                return false;\n              }\n              if (parent.layout && parent.layout.endsWith(\"-tb\") && parent[_xfa_object.$extra].numberInLine !== 0) {\n                return false;\n              }\n              this[_xfa_object.$extra]._isSplittable = true;\n              return true;\n            }\n          }, {\n            key: _xfa_object.$flushHTML,\n            value: function value() {\n              return (0, _layout.flushHTML)(this);\n            }\n          }, {\n            key: _xfa_object.$addHTML,\n            value: function value(html, bbox) {\n              (0, _layout.addHTML)(this, html, bbox);\n            }\n          }, {\n            key: _xfa_object.$getAvailableSpace,\n            value: function value() {\n              return (0, _layout.getAvailableSpace)(this);\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              setTabIndex(this);\n              if (this.presence === \"hidden\" || this.presence === \"inactive\" || this.h === 0 || this.w === 0) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              (0, _html_utils.fixDimensions)(this);\n              var children = [];\n              var attributes = {\n                id: this[_xfa_object.$uid],\n                class: []\n              };\n              (0, _html_utils.setAccess)(this, attributes.class);\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = Object.create(null);\n              }\n              Object.assign(this[_xfa_object.$extra], {\n                children: children,\n                attributes: attributes,\n                attempt: 0,\n                line: null,\n                numberInLine: 0,\n                availableSpace: {\n                  width: Math.min(this.w || Infinity, availableSpace.width),\n                  height: Math.min(this.h || Infinity, availableSpace.height)\n                },\n                width: 0,\n                height: 0,\n                prevHeight: 0,\n                currentWidth: 0\n              });\n              var isSplittable = this[_xfa_object.$isSplittable]();\n              if (!isSplittable) {\n                setFirstUnsplittable(this);\n              }\n              if (!(0, _layout.checkDimensions)(this, availableSpace)) {\n                return _utils.HTMLResult.FAILURE;\n              }\n              var filter = new Set([\"field\"]);\n              if (this.layout.includes(\"row\")) {\n                var columnWidths = this[_xfa_object.$getSubformParent]().columnWidths;\n                if (Array.isArray(columnWidths) && columnWidths.length > 0) {\n                  this[_xfa_object.$extra].columnWidths = columnWidths;\n                  this[_xfa_object.$extra].currentColumn = 0;\n                }\n              }\n              var style = (0, _html_utils.toStyle)(this, \"anchorType\", \"dimensions\", \"position\", \"presence\", \"border\", \"margin\", \"hAlign\");\n              var classNames = [\"xfaExclgroup\"];\n              var cl = (0, _html_utils.layoutClass)(this);\n              if (cl) {\n                classNames.push(cl);\n              }\n              if ((0, _html_utils.isPrintOnly)(this)) {\n                classNames.push(\"xfaPrintOnly\");\n              }\n              attributes.style = style;\n              attributes.class = classNames;\n              if (this.name) {\n                attributes.xfaName = this.name;\n              }\n              this[_xfa_object.$pushPara]();\n              var isLrTb = this.layout === \"lr-tb\" || this.layout === \"rl-tb\";\n              var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;\n              for (; this[_xfa_object.$extra].attempt < maxRun; this[_xfa_object.$extra].attempt++) {\n                if (isLrTb && this[_xfa_object.$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {\n                  this[_xfa_object.$extra].numberInLine = 0;\n                }\n                var result = this[_xfa_object.$childrenToHTML]({\n                  filter: filter,\n                  include: true\n                });\n                if (result.success) {\n                  break;\n                }\n                if (result.isBreak()) {\n                  this[_xfa_object.$popPara]();\n                  return result;\n                }\n                if (isLrTb && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine === 0 && !this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                  this[_xfa_object.$extra].attempt = maxRun;\n                  break;\n                }\n              }\n              this[_xfa_object.$popPara]();\n              if (!isSplittable) {\n                unsetFirstUnsplittable(this);\n              }\n              if (this[_xfa_object.$extra].attempt === maxRun) {\n                if (!isSplittable) {\n                  delete this[_xfa_object.$extra];\n                }\n                return _utils.HTMLResult.FAILURE;\n              }\n              var marginH = 0;\n              var marginV = 0;\n              if (this.margin) {\n                marginH = this.margin.leftInset + this.margin.rightInset;\n                marginV = this.margin.topInset + this.margin.bottomInset;\n              }\n              var width = Math.max(this[_xfa_object.$extra].width + marginH, this.w || 0);\n              var height = Math.max(this[_xfa_object.$extra].height + marginV, this.h || 0);\n              var bbox = [this.x, this.y, width, height];\n              if (this.w === \"\") {\n                style.width = (0, _html_utils.measureToString)(width);\n              }\n              if (this.h === \"\") {\n                style.height = (0, _html_utils.measureToString)(height);\n              }\n              var html = {\n                name: \"div\",\n                attributes: attributes,\n                children: children\n              };\n              applyAssist(this, attributes);\n              delete this[_xfa_object.$extra];\n              return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n            }\n          }]);\n          return ExclGroup;\n        }(_xfa_object.XFAObject);\n        var Execute = /*#__PURE__*/function (_xfa_object$XFAObject37) {\n          _inherits(Execute, _xfa_object$XFAObject37);\n          function Execute(attributes) {\n            var _this151;\n            _classCallCheck(this, Execute);\n            _this151 = _possibleConstructorReturn(this, _getPrototypeOf(Execute).call(this, TEMPLATE_NS_ID, \"execute\"));\n            _this151.connection = attributes.connection || \"\";\n            _this151.executeType = (0, _utils.getStringOption)(attributes.executeType, [\"import\", \"remerge\"]);\n            _this151.id = attributes.id || \"\";\n            _this151.runAt = (0, _utils.getStringOption)(attributes.runAt, [\"client\", \"both\", \"server\"]);\n            _this151.use = attributes.use || \"\";\n            _this151.usehref = attributes.usehref || \"\";\n            return _this151;\n          }\n          return Execute;\n        }(_xfa_object.XFAObject);\n        var Extras = /*#__PURE__*/function (_xfa_object$XFAObject38) {\n          _inherits(Extras, _xfa_object$XFAObject38);\n          function Extras(attributes) {\n            var _this152;\n            _classCallCheck(this, Extras);\n            _this152 = _possibleConstructorReturn(this, _getPrototypeOf(Extras).call(this, TEMPLATE_NS_ID, \"extras\", true));\n            _this152.id = attributes.id || \"\";\n            _this152.name = attributes.name || \"\";\n            _this152.use = attributes.use || \"\";\n            _this152.usehref = attributes.usehref || \"\";\n            _this152.boolean = new _xfa_object.XFAObjectArray();\n            _this152.date = new _xfa_object.XFAObjectArray();\n            _this152.dateTime = new _xfa_object.XFAObjectArray();\n            _this152.decimal = new _xfa_object.XFAObjectArray();\n            _this152.exData = new _xfa_object.XFAObjectArray();\n            _this152.extras = new _xfa_object.XFAObjectArray();\n            _this152.float = new _xfa_object.XFAObjectArray();\n            _this152.image = new _xfa_object.XFAObjectArray();\n            _this152.integer = new _xfa_object.XFAObjectArray();\n            _this152.text = new _xfa_object.XFAObjectArray();\n            _this152.time = new _xfa_object.XFAObjectArray();\n            return _this152;\n          }\n          return Extras;\n        }(_xfa_object.XFAObject);\n        var Field = /*#__PURE__*/function (_xfa_object$XFAObject39) {\n          _inherits(Field, _xfa_object$XFAObject39);\n          function Field(attributes) {\n            var _this153;\n            _classCallCheck(this, Field);\n            _this153 = _possibleConstructorReturn(this, _getPrototypeOf(Field).call(this, TEMPLATE_NS_ID, \"field\", true));\n            _this153.access = (0, _utils.getStringOption)(attributes.access, [\"open\", \"nonInteractive\", \"protected\", \"readOnly\"]);\n            _this153.accessKey = attributes.accessKey || \"\";\n            _this153.anchorType = (0, _utils.getStringOption)(attributes.anchorType, [\"topLeft\", \"bottomCenter\", \"bottomLeft\", \"bottomRight\", \"middleCenter\", \"middleLeft\", \"middleRight\", \"topCenter\", \"topRight\"]);\n            _this153.colSpan = (0, _utils.getInteger)({\n              data: attributes.colSpan,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n >= 1 || n === -1;\n              }\n            });\n            _this153.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : \"\";\n            _this153.hAlign = (0, _utils.getStringOption)(attributes.hAlign, [\"left\", \"center\", \"justify\", \"justifyAll\", \"radix\", \"right\"]);\n            _this153.id = attributes.id || \"\";\n            _this153.locale = attributes.locale || \"\";\n            _this153.maxH = (0, _utils.getMeasurement)(attributes.maxH, \"0pt\");\n            _this153.maxW = (0, _utils.getMeasurement)(attributes.maxW, \"0pt\");\n            _this153.minH = (0, _utils.getMeasurement)(attributes.minH, \"0pt\");\n            _this153.minW = (0, _utils.getMeasurement)(attributes.minW, \"0pt\");\n            _this153.name = attributes.name || \"\";\n            _this153.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this153.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this153.rotate = (0, _utils.getInteger)({\n              data: attributes.rotate,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x % 90 === 0;\n              }\n            });\n            _this153.use = attributes.use || \"\";\n            _this153.usehref = attributes.usehref || \"\";\n            _this153.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : \"\";\n            _this153.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this153.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this153.assist = null;\n            _this153.bind = null;\n            _this153.border = null;\n            _this153.calculate = null;\n            _this153.caption = null;\n            _this153.desc = null;\n            _this153.extras = null;\n            _this153.font = null;\n            _this153.format = null;\n            _this153.items = new _xfa_object.XFAObjectArray(2);\n            _this153.keep = null;\n            _this153.margin = null;\n            _this153.para = null;\n            _this153.traversal = null;\n            _this153.ui = null;\n            _this153.validate = null;\n            _this153.value = null;\n            _this153.bindItems = new _xfa_object.XFAObjectArray();\n            _this153.connect = new _xfa_object.XFAObjectArray();\n            _this153.event = new _xfa_object.XFAObjectArray();\n            _this153.setProperty = new _xfa_object.XFAObjectArray();\n            return _this153;\n          }\n          _createClass(Field, [{\n            key: _xfa_object.$isBindable,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$setValue,\n            value: function (_value16) {\n              function value(_x129) {\n                return _value16.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value16.toString();\n              };\n              return value;\n            }(function (value) {\n              _setValue(this, value);\n            })\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              setTabIndex(this);\n              if (!this.ui) {\n                this.ui = new Ui({});\n                this.ui[_xfa_object.$globalData] = this[_xfa_object.$globalData];\n                this[_xfa_object.$appendChild](this.ui);\n                var node;\n                switch (this.items.children.length) {\n                  case 0:\n                    node = new TextEdit({});\n                    this.ui.textEdit = node;\n                    break;\n                  case 1:\n                    node = new CheckButton({});\n                    this.ui.checkButton = node;\n                    break;\n                  case 2:\n                    node = new ChoiceList({});\n                    this.ui.choiceList = node;\n                    break;\n                }\n                this.ui[_xfa_object.$appendChild](node);\n              }\n              if (!this.ui || this.presence === \"hidden\" || this.presence === \"inactive\" || this.h === 0 || this.w === 0) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              if (this.caption) {\n                delete this.caption[_xfa_object.$extra];\n              }\n              this[_xfa_object.$pushPara]();\n              var caption = this.caption ? this.caption[_xfa_object.$toHTML](availableSpace).html : null;\n              var savedW = this.w;\n              var savedH = this.h;\n              var marginH = 0;\n              var marginV = 0;\n              if (this.margin) {\n                marginH = this.margin.leftInset + this.margin.rightInset;\n                marginV = this.margin.topInset + this.margin.bottomInset;\n              }\n              var borderDims = null;\n              if (this.w === \"\" || this.h === \"\") {\n                var width = null;\n                var height = null;\n                var uiW = 0;\n                var uiH = 0;\n                if (this.ui.checkButton) {\n                  uiW = uiH = this.ui.checkButton.size;\n                } else {\n                  var _ref93 = (0, _html_utils.layoutNode)(this, availableSpace),\n                    w = _ref93.w,\n                    h = _ref93.h;\n                  if (w !== null) {\n                    uiW = w;\n                    uiH = h;\n                  } else {\n                    uiH = (0, _fonts.getMetrics)(this.font, true).lineNoGap;\n                  }\n                }\n                borderDims = getBorderDims(this.ui[_xfa_object.$getExtra]());\n                uiW += borderDims.w;\n                uiH += borderDims.h;\n                if (this.caption) {\n                  var _this$caption$_xfa_ob = this.caption[_xfa_object.$getExtra](availableSpace),\n                    _w = _this$caption$_xfa_ob.w,\n                    _h = _this$caption$_xfa_ob.h,\n                    isBroken = _this$caption$_xfa_ob.isBroken;\n                  if (isBroken && this[_xfa_object.$getSubformParent]()[_xfa_object.$isThereMoreWidth]()) {\n                    this[_xfa_object.$popPara]();\n                    return _utils.HTMLResult.FAILURE;\n                  }\n                  width = _w;\n                  height = _h;\n                  switch (this.caption.placement) {\n                    case \"left\":\n                    case \"right\":\n                    case \"inline\":\n                      width += uiW;\n                      break;\n                    case \"top\":\n                    case \"bottom\":\n                      height += uiH;\n                      break;\n                  }\n                } else {\n                  width = uiW;\n                  height = uiH;\n                }\n                if (width && this.w === \"\") {\n                  width += marginH;\n                  this.w = Math.min(this.maxW <= 0 ? Infinity : this.maxW, this.minW + 1 < width ? width : this.minW);\n                }\n                if (height && this.h === \"\") {\n                  height += marginV;\n                  this.h = Math.min(this.maxH <= 0 ? Infinity : this.maxH, this.minH + 1 < height ? height : this.minH);\n                }\n              }\n              this[_xfa_object.$popPara]();\n              (0, _html_utils.fixDimensions)(this);\n              setFirstUnsplittable(this);\n              if (!(0, _layout.checkDimensions)(this, availableSpace)) {\n                this.w = savedW;\n                this.h = savedH;\n                this[_xfa_object.$popPara]();\n                return _utils.HTMLResult.FAILURE;\n              }\n              unsetFirstUnsplittable(this);\n              var style = (0, _html_utils.toStyle)(this, \"font\", \"dimensions\", \"position\", \"rotate\", \"anchorType\", \"presence\", \"margin\", \"hAlign\");\n              (0, _html_utils.setMinMaxDimensions)(this, style);\n              var classNames = [\"xfaField\"];\n              if (this.font) {\n                classNames.push(\"xfaFont\");\n              }\n              if ((0, _html_utils.isPrintOnly)(this)) {\n                classNames.push(\"xfaPrintOnly\");\n              }\n              var attributes = {\n                style: style,\n                id: this[_xfa_object.$uid],\n                class: classNames\n              };\n              if (style.margin) {\n                style.padding = style.margin;\n                delete style.margin;\n              }\n              (0, _html_utils.setAccess)(this, classNames);\n              if (this.name) {\n                attributes.xfaName = this.name;\n              }\n              var children = [];\n              var html = {\n                name: \"div\",\n                attributes: attributes,\n                children: children\n              };\n              applyAssist(this, attributes);\n              var borderStyle = this.border ? this.border[_xfa_object.$toStyle]() : null;\n              var bbox = (0, _html_utils.computeBbox)(this, html, availableSpace);\n              var ui = this.ui[_xfa_object.$toHTML]().html;\n              if (!ui) {\n                Object.assign(style, borderStyle);\n                return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n              }\n              if (this[_xfa_object.$tabIndex]) {\n                if (ui.children && ui.children[0]) {\n                  ui.children[0].attributes.tabindex = this[_xfa_object.$tabIndex];\n                } else {\n                  ui.attributes.tabindex = this[_xfa_object.$tabIndex];\n                }\n              }\n              if (!ui.attributes.style) {\n                ui.attributes.style = Object.create(null);\n              }\n              var aElement = null;\n              if (this.ui.button) {\n                if (ui.children.length === 1) {\n                  var _ui$children$splice = ui.children.splice(0, 1);\n                  var _ui$children$splice2 = _slicedToArray(_ui$children$splice, 1);\n                  aElement = _ui$children$splice2[0];\n                }\n                Object.assign(ui.attributes.style, borderStyle);\n              } else {\n                Object.assign(style, borderStyle);\n              }\n              children.push(ui);\n              if (this.value) {\n                if (this.ui.imageEdit) {\n                  ui.children.push(this.value[_xfa_object.$toHTML]().html);\n                } else if (!this.ui.button) {\n                  var _value17 = \"\";\n                  if (this.value.exData) {\n                    _value17 = this.value.exData[_xfa_object.$text]();\n                  } else if (this.value.text) {\n                    _value17 = this.value.text[_xfa_object.$getExtra]();\n                  } else {\n                    var htmlValue = this.value[_xfa_object.$toHTML]().html;\n                    if (htmlValue !== null) {\n                      _value17 = htmlValue.children[0].value;\n                    }\n                  }\n                  if (this.ui.textEdit && this.value.text && this.value.text.maxChars) {\n                    ui.children[0].attributes.maxLength = this.value.text.maxChars;\n                  }\n                  if (_value17) {\n                    if (this.ui.numericEdit) {\n                      _value17 = parseFloat(_value17);\n                      _value17 = isNaN(_value17) ? \"\" : _value17.toString();\n                    }\n                    if (ui.children[0].name === \"textarea\") {\n                      ui.children[0].attributes.textContent = _value17;\n                    } else {\n                      ui.children[0].attributes.value = _value17;\n                    }\n                  }\n                }\n              }\n              if (!this.ui.imageEdit && ui.children && ui.children[0] && this.h) {\n                borderDims = borderDims || getBorderDims(this.ui[_xfa_object.$getExtra]());\n                var captionHeight = 0;\n                if (this.caption && [\"top\", \"bottom\"].includes(this.caption.placement)) {\n                  captionHeight = this.caption.reserve;\n                  if (captionHeight <= 0) {\n                    captionHeight = this.caption[_xfa_object.$getExtra](availableSpace).h;\n                  }\n                  var inputHeight = this.h - captionHeight - marginV - borderDims.h;\n                  ui.children[0].attributes.style.height = (0, _html_utils.measureToString)(inputHeight);\n                } else {\n                  ui.children[0].attributes.style.height = \"100%\";\n                }\n              }\n              if (aElement) {\n                ui.children.push(aElement);\n              }\n              if (!caption) {\n                if (ui.attributes.class) {\n                  ui.attributes.class.push(\"xfaLeft\");\n                }\n                this.w = savedW;\n                this.h = savedH;\n                return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n              }\n              if (this.ui.button) {\n                if (style.padding) {\n                  delete style.padding;\n                }\n                if (caption.name === \"div\") {\n                  caption.name = \"span\";\n                }\n                ui.children.push(caption);\n                return _utils.HTMLResult.success(html, bbox);\n              } else if (this.ui.checkButton) {\n                caption.attributes.class[0] = \"xfaCaptionForCheckButton\";\n              }\n              if (!ui.attributes.class) {\n                ui.attributes.class = [];\n              }\n              ui.children.splice(0, 0, caption);\n              switch (this.caption.placement) {\n                case \"left\":\n                  ui.attributes.class.push(\"xfaLeft\");\n                  break;\n                case \"right\":\n                  ui.attributes.class.push(\"xfaRight\");\n                  break;\n                case \"top\":\n                  ui.attributes.class.push(\"xfaTop\");\n                  break;\n                case \"bottom\":\n                  ui.attributes.class.push(\"xfaBottom\");\n                  break;\n                case \"inline\":\n                  ui.attributes.class.push(\"xfaLeft\");\n                  break;\n              }\n              this.w = savedW;\n              this.h = savedH;\n              return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n            }\n          }]);\n          return Field;\n        }(_xfa_object.XFAObject);\n        exports.Field = Field;\n        var Fill = /*#__PURE__*/function (_xfa_object$XFAObject40) {\n          _inherits(Fill, _xfa_object$XFAObject40);\n          function Fill(attributes) {\n            var _this154;\n            _classCallCheck(this, Fill);\n            _this154 = _possibleConstructorReturn(this, _getPrototypeOf(Fill).call(this, TEMPLATE_NS_ID, \"fill\", true));\n            _this154.id = attributes.id || \"\";\n            _this154.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this154.use = attributes.use || \"\";\n            _this154.usehref = attributes.usehref || \"\";\n            _this154.color = null;\n            _this154.extras = null;\n            _this154.linear = null;\n            _this154.pattern = null;\n            _this154.radial = null;\n            _this154.solid = null;\n            _this154.stipple = null;\n            return _this154;\n          }\n          _createClass(Fill, [{\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var parent = this[_xfa_object.$getParent]();\n              var grandpa = parent[_xfa_object.$getParent]();\n              var ggrandpa = grandpa[_xfa_object.$getParent]();\n              var style = Object.create(null);\n              var propName = \"color\";\n              var altPropName = propName;\n              if (parent instanceof Border) {\n                propName = \"background-color\";\n                altPropName = \"background\";\n                if (ggrandpa instanceof Ui) {\n                  style.backgroundColor = \"white\";\n                }\n              }\n              if (parent instanceof Rectangle || parent instanceof Arc) {\n                propName = altPropName = \"fill\";\n                style.fill = \"white\";\n              }\n              var _iterator156 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step156;\n              try {\n                for (_iterator156.s(); !(_step156 = _iterator156.n()).done;) {\n                  var name = _step156.value;\n                  if (name === \"extras\" || name === \"color\") {\n                    continue;\n                  }\n                  var obj = this[name];\n                  if (!(obj instanceof _xfa_object.XFAObject)) {\n                    continue;\n                  }\n                  var _color3 = obj[_xfa_object.$toStyle](this.color);\n                  if (_color3) {\n                    style[_color3.startsWith(\"#\") ? propName : altPropName] = _color3;\n                  }\n                  return style;\n                }\n              } catch (err) {\n                _iterator156.e(err);\n              } finally {\n                _iterator156.f();\n              }\n              if (this.color && this.color.value) {\n                var color = this.color[_xfa_object.$toStyle]();\n                style[color.startsWith(\"#\") ? propName : altPropName] = color;\n              }\n              return style;\n            }\n          }]);\n          return Fill;\n        }(_xfa_object.XFAObject);\n        var Filter = /*#__PURE__*/function (_xfa_object$XFAObject41) {\n          _inherits(Filter, _xfa_object$XFAObject41);\n          function Filter(attributes) {\n            var _this155;\n            _classCallCheck(this, Filter);\n            _this155 = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, TEMPLATE_NS_ID, \"filter\", true));\n            _this155.addRevocationInfo = (0, _utils.getStringOption)(attributes.addRevocationInfo, [\"\", \"required\", \"optional\", \"none\"]);\n            _this155.id = attributes.id || \"\";\n            _this155.name = attributes.name || \"\";\n            _this155.use = attributes.use || \"\";\n            _this155.usehref = attributes.usehref || \"\";\n            _this155.version = (0, _utils.getInteger)({\n              data: _this155.version,\n              defaultValue: 5,\n              validate: function validate(x) {\n                return x >= 1 && x <= 5;\n              }\n            });\n            _this155.appearanceFilter = null;\n            _this155.certificates = null;\n            _this155.digestMethods = null;\n            _this155.encodings = null;\n            _this155.encryptionMethods = null;\n            _this155.handler = null;\n            _this155.lockDocument = null;\n            _this155.mdp = null;\n            _this155.reasons = null;\n            _this155.timeStamp = null;\n            return _this155;\n          }\n          return Filter;\n        }(_xfa_object.XFAObject);\n        var Float = /*#__PURE__*/function (_xfa_object$ContentOb5) {\n          _inherits(Float, _xfa_object$ContentOb5);\n          function Float(attributes) {\n            var _this156;\n            _classCallCheck(this, Float);\n            _this156 = _possibleConstructorReturn(this, _getPrototypeOf(Float).call(this, TEMPLATE_NS_ID, \"float\"));\n            _this156.id = attributes.id || \"\";\n            _this156.name = attributes.name || \"\";\n            _this156.use = attributes.use || \"\";\n            _this156.usehref = attributes.usehref || \"\";\n            return _this156;\n          }\n          _createClass(Float, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var number = parseFloat(this[_xfa_object.$content].trim());\n              this[_xfa_object.$content] = isNaN(number) ? null : number;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return Float;\n        }(_xfa_object.ContentObject);\n        var Font = /*#__PURE__*/function (_xfa_object$XFAObject42) {\n          _inherits(Font, _xfa_object$XFAObject42);\n          function Font(attributes) {\n            var _this157;\n            _classCallCheck(this, Font);\n            _this157 = _possibleConstructorReturn(this, _getPrototypeOf(Font).call(this, TEMPLATE_NS_ID, \"font\", true));\n            _this157.baselineShift = (0, _utils.getMeasurement)(attributes.baselineShift);\n            _this157.fontHorizontalScale = (0, _utils.getFloat)({\n              data: attributes.fontHorizontalScale,\n              defaultValue: 100,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this157.fontVerticalScale = (0, _utils.getFloat)({\n              data: attributes.fontVerticalScale,\n              defaultValue: 100,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this157.id = attributes.id || \"\";\n            _this157.kerningMode = (0, _utils.getStringOption)(attributes.kerningMode, [\"none\", \"pair\"]);\n            _this157.letterSpacing = (0, _utils.getMeasurement)(attributes.letterSpacing, \"0\");\n            _this157.lineThrough = (0, _utils.getInteger)({\n              data: attributes.lineThrough,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1 || x === 2;\n              }\n            });\n            _this157.lineThroughPeriod = (0, _utils.getStringOption)(attributes.lineThroughPeriod, [\"all\", \"word\"]);\n            _this157.overline = (0, _utils.getInteger)({\n              data: attributes.overline,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1 || x === 2;\n              }\n            });\n            _this157.overlinePeriod = (0, _utils.getStringOption)(attributes.overlinePeriod, [\"all\", \"word\"]);\n            _this157.posture = (0, _utils.getStringOption)(attributes.posture, [\"normal\", \"italic\"]);\n            _this157.size = (0, _utils.getMeasurement)(attributes.size, \"10pt\");\n            _this157.typeface = attributes.typeface || \"Courier\";\n            _this157.underline = (0, _utils.getInteger)({\n              data: attributes.underline,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1 || x === 2;\n              }\n            });\n            _this157.underlinePeriod = (0, _utils.getStringOption)(attributes.underlinePeriod, [\"all\", \"word\"]);\n            _this157.use = attributes.use || \"\";\n            _this157.usehref = attributes.usehref || \"\";\n            _this157.weight = (0, _utils.getStringOption)(attributes.weight, [\"normal\", \"bold\"]);\n            _this157.extras = null;\n            _this157.fill = null;\n            return _this157;\n          }\n          _createClass(Font, [{\n            key: _xfa_object.$clean,\n            value: function value(builder) {\n              _get(_getPrototypeOf(Font.prototype), _xfa_object.$clean, this).call(this, builder);\n              this[_xfa_object.$globalData].usedTypefaces.add(this.typeface);\n            }\n          }, {\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var style = (0, _html_utils.toStyle)(this, \"fill\");\n              var color = style.color;\n              if (color) {\n                if (color === \"#000000\") {\n                  delete style.color;\n                } else if (!color.startsWith(\"#\")) {\n                  style.background = color;\n                  style.backgroundClip = \"text\";\n                  style.color = \"transparent\";\n                }\n              }\n              if (this.baselineShift) {\n                style.verticalAlign = (0, _html_utils.measureToString)(this.baselineShift);\n              }\n              style.fontKerning = this.kerningMode === \"none\" ? \"none\" : \"normal\";\n              style.letterSpacing = (0, _html_utils.measureToString)(this.letterSpacing);\n              if (this.lineThrough !== 0) {\n                style.textDecoration = \"line-through\";\n                if (this.lineThrough === 2) {\n                  style.textDecorationStyle = \"double\";\n                }\n              }\n              if (this.overline !== 0) {\n                style.textDecoration = \"overline\";\n                if (this.overline === 2) {\n                  style.textDecorationStyle = \"double\";\n                }\n              }\n              style.fontStyle = this.posture;\n              style.fontSize = (0, _html_utils.measureToString)(0.99 * this.size);\n              (0, _html_utils.setFontFamily)(this, this, this[_xfa_object.$globalData].fontFinder, style);\n              if (this.underline !== 0) {\n                style.textDecoration = \"underline\";\n                if (this.underline === 2) {\n                  style.textDecorationStyle = \"double\";\n                }\n              }\n              style.fontWeight = this.weight;\n              return style;\n            }\n          }]);\n          return Font;\n        }(_xfa_object.XFAObject);\n        var Format = /*#__PURE__*/function (_xfa_object$XFAObject43) {\n          _inherits(Format, _xfa_object$XFAObject43);\n          function Format(attributes) {\n            var _this158;\n            _classCallCheck(this, Format);\n            _this158 = _possibleConstructorReturn(this, _getPrototypeOf(Format).call(this, TEMPLATE_NS_ID, \"format\", true));\n            _this158.id = attributes.id || \"\";\n            _this158.use = attributes.use || \"\";\n            _this158.usehref = attributes.usehref || \"\";\n            _this158.extras = null;\n            _this158.picture = null;\n            return _this158;\n          }\n          return Format;\n        }(_xfa_object.XFAObject);\n        var Handler = /*#__PURE__*/function (_xfa_object$StringObj3) {\n          _inherits(Handler, _xfa_object$StringObj3);\n          function Handler(attributes) {\n            var _this159;\n            _classCallCheck(this, Handler);\n            _this159 = _possibleConstructorReturn(this, _getPrototypeOf(Handler).call(this, TEMPLATE_NS_ID, \"handler\"));\n            _this159.id = attributes.id || \"\";\n            _this159.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this159.use = attributes.use || \"\";\n            _this159.usehref = attributes.usehref || \"\";\n            return _this159;\n          }\n          return Handler;\n        }(_xfa_object.StringObject);\n        var Hyphenation = /*#__PURE__*/function (_xfa_object$XFAObject44) {\n          _inherits(Hyphenation, _xfa_object$XFAObject44);\n          function Hyphenation(attributes) {\n            var _this160;\n            _classCallCheck(this, Hyphenation);\n            _this160 = _possibleConstructorReturn(this, _getPrototypeOf(Hyphenation).call(this, TEMPLATE_NS_ID, \"hyphenation\"));\n            _this160.excludeAllCaps = (0, _utils.getInteger)({\n              data: attributes.excludeAllCaps,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this160.excludeInitialCap = (0, _utils.getInteger)({\n              data: attributes.excludeInitialCap,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this160.hyphenate = (0, _utils.getInteger)({\n              data: attributes.hyphenate,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this160.id = attributes.id || \"\";\n            _this160.pushCharacterCount = (0, _utils.getInteger)({\n              data: attributes.pushCharacterCount,\n              defaultValue: 3,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this160.remainCharacterCount = (0, _utils.getInteger)({\n              data: attributes.remainCharacterCount,\n              defaultValue: 3,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this160.use = attributes.use || \"\";\n            _this160.usehref = attributes.usehref || \"\";\n            _this160.wordCharacterCount = (0, _utils.getInteger)({\n              data: attributes.wordCharacterCount,\n              defaultValue: 7,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            return _this160;\n          }\n          return Hyphenation;\n        }(_xfa_object.XFAObject);\n        var Image = /*#__PURE__*/function (_xfa_object$StringObj4) {\n          _inherits(Image, _xfa_object$StringObj4);\n          function Image(attributes) {\n            var _this161;\n            _classCallCheck(this, Image);\n            _this161 = _possibleConstructorReturn(this, _getPrototypeOf(Image).call(this, TEMPLATE_NS_ID, \"image\"));\n            _this161.aspect = (0, _utils.getStringOption)(attributes.aspect, [\"fit\", \"actual\", \"height\", \"none\", \"width\"]);\n            _this161.contentType = attributes.contentType || \"\";\n            _this161.href = attributes.href || \"\";\n            _this161.id = attributes.id || \"\";\n            _this161.name = attributes.name || \"\";\n            _this161.transferEncoding = (0, _utils.getStringOption)(attributes.transferEncoding, [\"base64\", \"none\", \"package\"]);\n            _this161.use = attributes.use || \"\";\n            _this161.usehref = attributes.usehref || \"\";\n            return _this161;\n          }\n          _createClass(Image, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              if (this.contentType && !MIMES.has(this.contentType.toLowerCase())) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              var buffer = this[_xfa_object.$globalData].images && this[_xfa_object.$globalData].images.get(this.href);\n              if (!buffer && (this.href || !this[_xfa_object.$content])) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              if (!buffer && this.transferEncoding === \"base64\") {\n                buffer = (0, _util.stringToBytes)(atob(this[_xfa_object.$content]));\n              }\n              if (!buffer) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              if (!this.contentType) {\n                var _iterator157 = _createForOfIteratorHelper(IMAGES_HEADERS),\n                  _step157;\n                try {\n                  for (_iterator157.s(); !(_step157 = _iterator157.n()).done;) {\n                    var _step157$value = _slicedToArray(_step157.value, 2),\n                      header = _step157$value[0],\n                      type = _step157$value[1];\n                    if (buffer.length > header.length && header.every(function (x, i) {\n                      return x === buffer[i];\n                    })) {\n                      this.contentType = type;\n                      break;\n                    }\n                  }\n                } catch (err) {\n                  _iterator157.e(err);\n                } finally {\n                  _iterator157.f();\n                }\n                if (!this.contentType) {\n                  return _utils.HTMLResult.EMPTY;\n                }\n              }\n              var blob = new Blob([buffer], {\n                type: this.contentType\n              });\n              var style;\n              switch (this.aspect) {\n                case \"fit\":\n                case \"actual\":\n                  break;\n                case \"height\":\n                  style = {\n                    height: \"100%\",\n                    objectFit: \"fill\"\n                  };\n                  break;\n                case \"none\":\n                  style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    objectFit: \"fill\"\n                  };\n                  break;\n                case \"width\":\n                  style = {\n                    width: \"100%\",\n                    objectFit: \"fill\"\n                  };\n                  break;\n              }\n              var parent = this[_xfa_object.$getParent]();\n              return _utils.HTMLResult.success({\n                name: \"img\",\n                attributes: {\n                  class: [\"xfaImage\"],\n                  style: style,\n                  src: URL.createObjectURL(blob),\n                  alt: parent ? ariaLabel(parent[_xfa_object.$getParent]()) : null\n                }\n              });\n            }\n          }]);\n          return Image;\n        }(_xfa_object.StringObject);\n        var ImageEdit = /*#__PURE__*/function (_xfa_object$XFAObject45) {\n          _inherits(ImageEdit, _xfa_object$XFAObject45);\n          function ImageEdit(attributes) {\n            var _this162;\n            _classCallCheck(this, ImageEdit);\n            _this162 = _possibleConstructorReturn(this, _getPrototypeOf(ImageEdit).call(this, TEMPLATE_NS_ID, \"imageEdit\", true));\n            _this162.data = (0, _utils.getStringOption)(attributes.data, [\"link\", \"embed\"]);\n            _this162.id = attributes.id || \"\";\n            _this162.use = attributes.use || \"\";\n            _this162.usehref = attributes.usehref || \"\";\n            _this162.border = null;\n            _this162.extras = null;\n            _this162.margin = null;\n            return _this162;\n          }\n          _createClass(ImageEdit, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              if (this.data === \"embed\") {\n                return _utils.HTMLResult.success({\n                  name: \"div\",\n                  children: [],\n                  attributes: {}\n                });\n              }\n              return _utils.HTMLResult.EMPTY;\n            }\n          }]);\n          return ImageEdit;\n        }(_xfa_object.XFAObject);\n        var Integer = /*#__PURE__*/function (_xfa_object$ContentOb6) {\n          _inherits(Integer, _xfa_object$ContentOb6);\n          function Integer(attributes) {\n            var _this163;\n            _classCallCheck(this, Integer);\n            _this163 = _possibleConstructorReturn(this, _getPrototypeOf(Integer).call(this, TEMPLATE_NS_ID, \"integer\"));\n            _this163.id = attributes.id || \"\";\n            _this163.name = attributes.name || \"\";\n            _this163.use = attributes.use || \"\";\n            _this163.usehref = attributes.usehref || \"\";\n            return _this163;\n          }\n          _createClass(Integer, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var number = parseInt(this[_xfa_object.$content].trim(), 10);\n              this[_xfa_object.$content] = isNaN(number) ? null : number;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return Integer;\n        }(_xfa_object.ContentObject);\n        var Issuers = /*#__PURE__*/function (_xfa_object$XFAObject46) {\n          _inherits(Issuers, _xfa_object$XFAObject46);\n          function Issuers(attributes) {\n            var _this164;\n            _classCallCheck(this, Issuers);\n            _this164 = _possibleConstructorReturn(this, _getPrototypeOf(Issuers).call(this, TEMPLATE_NS_ID, \"issuers\", true));\n            _this164.id = attributes.id || \"\";\n            _this164.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this164.use = attributes.use || \"\";\n            _this164.usehref = attributes.usehref || \"\";\n            _this164.certificate = new _xfa_object.XFAObjectArray();\n            return _this164;\n          }\n          return Issuers;\n        }(_xfa_object.XFAObject);\n        var Items = /*#__PURE__*/function (_xfa_object$XFAObject47) {\n          _inherits(Items, _xfa_object$XFAObject47);\n          function Items(attributes) {\n            var _this165;\n            _classCallCheck(this, Items);\n            _this165 = _possibleConstructorReturn(this, _getPrototypeOf(Items).call(this, TEMPLATE_NS_ID, \"items\", true));\n            _this165.id = attributes.id || \"\";\n            _this165.name = attributes.name || \"\";\n            _this165.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this165.ref = attributes.ref || \"\";\n            _this165.save = (0, _utils.getInteger)({\n              data: attributes.save,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this165.use = attributes.use || \"\";\n            _this165.usehref = attributes.usehref || \"\";\n            _this165.boolean = new _xfa_object.XFAObjectArray();\n            _this165.date = new _xfa_object.XFAObjectArray();\n            _this165.dateTime = new _xfa_object.XFAObjectArray();\n            _this165.decimal = new _xfa_object.XFAObjectArray();\n            _this165.exData = new _xfa_object.XFAObjectArray();\n            _this165.float = new _xfa_object.XFAObjectArray();\n            _this165.image = new _xfa_object.XFAObjectArray();\n            _this165.integer = new _xfa_object.XFAObjectArray();\n            _this165.text = new _xfa_object.XFAObjectArray();\n            _this165.time = new _xfa_object.XFAObjectArray();\n            return _this165;\n          }\n          _createClass(Items, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              var output = [];\n              var _iterator158 = _createForOfIteratorHelper(this[_xfa_object.$getChildren]()),\n                _step158;\n              try {\n                for (_iterator158.s(); !(_step158 = _iterator158.n()).done;) {\n                  var child = _step158.value;\n                  output.push(child[_xfa_object.$text]());\n                }\n              } catch (err) {\n                _iterator158.e(err);\n              } finally {\n                _iterator158.f();\n              }\n              return _utils.HTMLResult.success(output);\n            }\n          }]);\n          return Items;\n        }(_xfa_object.XFAObject);\n        exports.Items = Items;\n        var Keep = /*#__PURE__*/function (_xfa_object$XFAObject48) {\n          _inherits(Keep, _xfa_object$XFAObject48);\n          function Keep(attributes) {\n            var _this166;\n            _classCallCheck(this, Keep);\n            _this166 = _possibleConstructorReturn(this, _getPrototypeOf(Keep).call(this, TEMPLATE_NS_ID, \"keep\", true));\n            _this166.id = attributes.id || \"\";\n            var options = [\"none\", \"contentArea\", \"pageArea\"];\n            _this166.intact = (0, _utils.getStringOption)(attributes.intact, options);\n            _this166.next = (0, _utils.getStringOption)(attributes.next, options);\n            _this166.previous = (0, _utils.getStringOption)(attributes.previous, options);\n            _this166.use = attributes.use || \"\";\n            _this166.usehref = attributes.usehref || \"\";\n            _this166.extras = null;\n            return _this166;\n          }\n          return Keep;\n        }(_xfa_object.XFAObject);\n        var KeyUsage = /*#__PURE__*/function (_xfa_object$XFAObject49) {\n          _inherits(KeyUsage, _xfa_object$XFAObject49);\n          function KeyUsage(attributes) {\n            var _this167;\n            _classCallCheck(this, KeyUsage);\n            _this167 = _possibleConstructorReturn(this, _getPrototypeOf(KeyUsage).call(this, TEMPLATE_NS_ID, \"keyUsage\"));\n            var options = [\"\", \"yes\", \"no\"];\n            _this167.crlSign = (0, _utils.getStringOption)(attributes.crlSign, options);\n            _this167.dataEncipherment = (0, _utils.getStringOption)(attributes.dataEncipherment, options);\n            _this167.decipherOnly = (0, _utils.getStringOption)(attributes.decipherOnly, options);\n            _this167.digitalSignature = (0, _utils.getStringOption)(attributes.digitalSignature, options);\n            _this167.encipherOnly = (0, _utils.getStringOption)(attributes.encipherOnly, options);\n            _this167.id = attributes.id || \"\";\n            _this167.keyAgreement = (0, _utils.getStringOption)(attributes.keyAgreement, options);\n            _this167.keyCertSign = (0, _utils.getStringOption)(attributes.keyCertSign, options);\n            _this167.keyEncipherment = (0, _utils.getStringOption)(attributes.keyEncipherment, options);\n            _this167.nonRepudiation = (0, _utils.getStringOption)(attributes.nonRepudiation, options);\n            _this167.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this167.use = attributes.use || \"\";\n            _this167.usehref = attributes.usehref || \"\";\n            return _this167;\n          }\n          return KeyUsage;\n        }(_xfa_object.XFAObject);\n        var Line = /*#__PURE__*/function (_xfa_object$XFAObject50) {\n          _inherits(Line, _xfa_object$XFAObject50);\n          function Line(attributes) {\n            var _this168;\n            _classCallCheck(this, Line);\n            _this168 = _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, TEMPLATE_NS_ID, \"line\", true));\n            _this168.hand = (0, _utils.getStringOption)(attributes.hand, [\"even\", \"left\", \"right\"]);\n            _this168.id = attributes.id || \"\";\n            _this168.slope = (0, _utils.getStringOption)(attributes.slope, [\"\\\\\", \"/\"]);\n            _this168.use = attributes.use || \"\";\n            _this168.usehref = attributes.usehref || \"\";\n            _this168.edge = null;\n            return _this168;\n          }\n          _createClass(Line, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              var edge = this.edge || new Edge({});\n              var edgeStyle = edge[_xfa_object.$toStyle]();\n              var style = Object.create(null);\n              var thickness = edge.presence === \"visible\" ? edge.thickness : 0;\n              style.strokeWidth = (0, _html_utils.measureToString)(thickness);\n              style.stroke = edgeStyle.color;\n              var x1, y1, x2, y2;\n              var width = \"100%\";\n              var height = \"100%\";\n              if (parent.w <= thickness) {\n                x1 = \"50%\";\n                y1 = 0;\n                x2 = \"50%\";\n                y2 = \"100%\";\n                width = style.strokeWidth;\n              } else if (parent.h <= thickness) {\n                x1 = 0;\n                y1 = \"50%\";\n                x2 = \"100%\";\n                y2 = \"50%\";\n                height = style.strokeWidth;\n              } else {\n                if (this.slope === \"\\\\\") {\n                  x1 = 0;\n                  y1 = 0;\n                  x2 = \"100%\";\n                  y2 = \"100%\";\n                } else {\n                  x1 = 0;\n                  y1 = \"100%\";\n                  x2 = \"100%\";\n                  y2 = 0;\n                }\n              }\n              var line = {\n                name: \"line\",\n                attributes: {\n                  xmlns: SVG_NS,\n                  x1: x1,\n                  y1: y1,\n                  x2: x2,\n                  y2: y2,\n                  style: style\n                }\n              };\n              var svg = {\n                name: \"svg\",\n                children: [line],\n                attributes: {\n                  xmlns: SVG_NS,\n                  width: width,\n                  height: height,\n                  style: {\n                    overflow: \"visible\"\n                  }\n                }\n              };\n              if (hasMargin(parent)) {\n                return _utils.HTMLResult.success({\n                  name: \"div\",\n                  attributes: {\n                    style: {\n                      display: \"inline\",\n                      width: \"100%\",\n                      height: \"100%\"\n                    }\n                  },\n                  children: [svg]\n                });\n              }\n              svg.attributes.style.position = \"absolute\";\n              return _utils.HTMLResult.success(svg);\n            }\n          }]);\n          return Line;\n        }(_xfa_object.XFAObject);\n        var Linear = /*#__PURE__*/function (_xfa_object$XFAObject51) {\n          _inherits(Linear, _xfa_object$XFAObject51);\n          function Linear(attributes) {\n            var _this169;\n            _classCallCheck(this, Linear);\n            _this169 = _possibleConstructorReturn(this, _getPrototypeOf(Linear).call(this, TEMPLATE_NS_ID, \"linear\", true));\n            _this169.id = attributes.id || \"\";\n            _this169.type = (0, _utils.getStringOption)(attributes.type, [\"toRight\", \"toBottom\", \"toLeft\", \"toTop\"]);\n            _this169.use = attributes.use || \"\";\n            _this169.usehref = attributes.usehref || \"\";\n            _this169.color = null;\n            _this169.extras = null;\n            return _this169;\n          }\n          _createClass(Linear, [{\n            key: _xfa_object.$toStyle,\n            value: function value(startColor) {\n              startColor = startColor ? startColor[_xfa_object.$toStyle]() : \"#FFFFFF\";\n              var transf = this.type.replace(/([RBLT])/, \" $1\").toLowerCase();\n              var endColor = this.color ? this.color[_xfa_object.$toStyle]() : \"#000000\";\n              return \"linear-gradient(\".concat(transf, \", \").concat(startColor, \", \").concat(endColor, \")\");\n            }\n          }]);\n          return Linear;\n        }(_xfa_object.XFAObject);\n        var LockDocument = /*#__PURE__*/function (_xfa_object$ContentOb7) {\n          _inherits(LockDocument, _xfa_object$ContentOb7);\n          function LockDocument(attributes) {\n            var _this170;\n            _classCallCheck(this, LockDocument);\n            _this170 = _possibleConstructorReturn(this, _getPrototypeOf(LockDocument).call(this, TEMPLATE_NS_ID, \"lockDocument\"));\n            _this170.id = attributes.id || \"\";\n            _this170.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this170.use = attributes.use || \"\";\n            _this170.usehref = attributes.usehref || \"\";\n            return _this170;\n          }\n          _createClass(LockDocument, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = (0, _utils.getStringOption)(this[_xfa_object.$content], [\"auto\", \"0\", \"1\"]);\n            }\n          }]);\n          return LockDocument;\n        }(_xfa_object.ContentObject);\n        var Manifest = /*#__PURE__*/function (_xfa_object$XFAObject52) {\n          _inherits(Manifest, _xfa_object$XFAObject52);\n          function Manifest(attributes) {\n            var _this171;\n            _classCallCheck(this, Manifest);\n            _this171 = _possibleConstructorReturn(this, _getPrototypeOf(Manifest).call(this, TEMPLATE_NS_ID, \"manifest\", true));\n            _this171.action = (0, _utils.getStringOption)(attributes.action, [\"include\", \"all\", \"exclude\"]);\n            _this171.id = attributes.id || \"\";\n            _this171.name = attributes.name || \"\";\n            _this171.use = attributes.use || \"\";\n            _this171.usehref = attributes.usehref || \"\";\n            _this171.extras = null;\n            _this171.ref = new _xfa_object.XFAObjectArray();\n            return _this171;\n          }\n          return Manifest;\n        }(_xfa_object.XFAObject);\n        var Margin = /*#__PURE__*/function (_xfa_object$XFAObject53) {\n          _inherits(Margin, _xfa_object$XFAObject53);\n          function Margin(attributes) {\n            var _this172;\n            _classCallCheck(this, Margin);\n            _this172 = _possibleConstructorReturn(this, _getPrototypeOf(Margin).call(this, TEMPLATE_NS_ID, \"margin\", true));\n            _this172.bottomInset = (0, _utils.getMeasurement)(attributes.bottomInset, \"0\");\n            _this172.id = attributes.id || \"\";\n            _this172.leftInset = (0, _utils.getMeasurement)(attributes.leftInset, \"0\");\n            _this172.rightInset = (0, _utils.getMeasurement)(attributes.rightInset, \"0\");\n            _this172.topInset = (0, _utils.getMeasurement)(attributes.topInset, \"0\");\n            _this172.use = attributes.use || \"\";\n            _this172.usehref = attributes.usehref || \"\";\n            _this172.extras = null;\n            return _this172;\n          }\n          _createClass(Margin, [{\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              return {\n                margin: (0, _html_utils.measureToString)(this.topInset) + \" \" + (0, _html_utils.measureToString)(this.rightInset) + \" \" + (0, _html_utils.measureToString)(this.bottomInset) + \" \" + (0, _html_utils.measureToString)(this.leftInset)\n              };\n            }\n          }]);\n          return Margin;\n        }(_xfa_object.XFAObject);\n        var Mdp = /*#__PURE__*/function (_xfa_object$XFAObject54) {\n          _inherits(Mdp, _xfa_object$XFAObject54);\n          function Mdp(attributes) {\n            var _this173;\n            _classCallCheck(this, Mdp);\n            _this173 = _possibleConstructorReturn(this, _getPrototypeOf(Mdp).call(this, TEMPLATE_NS_ID, \"mdp\"));\n            _this173.id = attributes.id || \"\";\n            _this173.permissions = (0, _utils.getInteger)({\n              data: attributes.permissions,\n              defaultValue: 2,\n              validate: function validate(x) {\n                return x === 1 || x === 3;\n              }\n            });\n            _this173.signatureType = (0, _utils.getStringOption)(attributes.signatureType, [\"filler\", \"author\"]);\n            _this173.use = attributes.use || \"\";\n            _this173.usehref = attributes.usehref || \"\";\n            return _this173;\n          }\n          return Mdp;\n        }(_xfa_object.XFAObject);\n        var Medium = /*#__PURE__*/function (_xfa_object$XFAObject55) {\n          _inherits(Medium, _xfa_object$XFAObject55);\n          function Medium(attributes) {\n            var _this174;\n            _classCallCheck(this, Medium);\n            _this174 = _possibleConstructorReturn(this, _getPrototypeOf(Medium).call(this, TEMPLATE_NS_ID, \"medium\"));\n            _this174.id = attributes.id || \"\";\n            _this174.imagingBBox = (0, _utils.getBBox)(attributes.imagingBBox);\n            _this174.long = (0, _utils.getMeasurement)(attributes.long);\n            _this174.orientation = (0, _utils.getStringOption)(attributes.orientation, [\"portrait\", \"landscape\"]);\n            _this174.short = (0, _utils.getMeasurement)(attributes.short);\n            _this174.stock = attributes.stock || \"\";\n            _this174.trayIn = (0, _utils.getStringOption)(attributes.trayIn, [\"auto\", \"delegate\", \"pageFront\"]);\n            _this174.trayOut = (0, _utils.getStringOption)(attributes.trayOut, [\"auto\", \"delegate\"]);\n            _this174.use = attributes.use || \"\";\n            _this174.usehref = attributes.usehref || \"\";\n            return _this174;\n          }\n          return Medium;\n        }(_xfa_object.XFAObject);\n        var Message = /*#__PURE__*/function (_xfa_object$XFAObject56) {\n          _inherits(Message, _xfa_object$XFAObject56);\n          function Message(attributes) {\n            var _this175;\n            _classCallCheck(this, Message);\n            _this175 = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, TEMPLATE_NS_ID, \"message\", true));\n            _this175.id = attributes.id || \"\";\n            _this175.use = attributes.use || \"\";\n            _this175.usehref = attributes.usehref || \"\";\n            _this175.text = new _xfa_object.XFAObjectArray();\n            return _this175;\n          }\n          return Message;\n        }(_xfa_object.XFAObject);\n        var NumericEdit = /*#__PURE__*/function (_xfa_object$XFAObject57) {\n          _inherits(NumericEdit, _xfa_object$XFAObject57);\n          function NumericEdit(attributes) {\n            var _this176;\n            _classCallCheck(this, NumericEdit);\n            _this176 = _possibleConstructorReturn(this, _getPrototypeOf(NumericEdit).call(this, TEMPLATE_NS_ID, \"numericEdit\", true));\n            _this176.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, [\"auto\", \"off\", \"on\"]);\n            _this176.id = attributes.id || \"\";\n            _this176.use = attributes.use || \"\";\n            _this176.usehref = attributes.usehref || \"\";\n            _this176.border = null;\n            _this176.comb = null;\n            _this176.extras = null;\n            _this176.margin = null;\n            return _this176;\n          }\n          _createClass(NumericEdit, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(this, \"border\", \"font\", \"margin\");\n              var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              var html = {\n                name: \"input\",\n                attributes: {\n                  type: \"text\",\n                  fieldId: field[_xfa_object.$uid],\n                  dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],\n                  class: [\"xfaTextfield\"],\n                  style: style,\n                  \"aria-label\": ariaLabel(field),\n                  \"aria-required\": false\n                }\n              };\n              if (isRequired(field)) {\n                html.attributes[\"aria-required\"] = true;\n                html.attributes.required = true;\n              }\n              return _utils.HTMLResult.success({\n                name: \"label\",\n                attributes: {\n                  class: [\"xfaLabel\"]\n                },\n                children: [html]\n              });\n            }\n          }]);\n          return NumericEdit;\n        }(_xfa_object.XFAObject);\n        var Occur = /*#__PURE__*/function (_xfa_object$XFAObject58) {\n          _inherits(Occur, _xfa_object$XFAObject58);\n          function Occur(attributes) {\n            var _this177;\n            _classCallCheck(this, Occur);\n            _this177 = _possibleConstructorReturn(this, _getPrototypeOf(Occur).call(this, TEMPLATE_NS_ID, \"occur\", true));\n            _this177.id = attributes.id || \"\";\n            _this177.initial = attributes.initial !== \"\" ? (0, _utils.getInteger)({\n              data: attributes.initial,\n              defaultValue: \"\",\n              validate: function validate(x) {\n                return true;\n              }\n            }) : \"\";\n            _this177.max = attributes.max !== \"\" ? (0, _utils.getInteger)({\n              data: attributes.max,\n              defaultValue: 1,\n              validate: function validate(x) {\n                return true;\n              }\n            }) : \"\";\n            _this177.min = attributes.min !== \"\" ? (0, _utils.getInteger)({\n              data: attributes.min,\n              defaultValue: 1,\n              validate: function validate(x) {\n                return true;\n              }\n            }) : \"\";\n            _this177.use = attributes.use || \"\";\n            _this177.usehref = attributes.usehref || \"\";\n            _this177.extras = null;\n            return _this177;\n          }\n          _createClass(Occur, [{\n            key: _xfa_object.$clean,\n            value: function value() {\n              var parent = this[_xfa_object.$getParent]();\n              var originalMin = this.min;\n              if (this.min === \"\") {\n                this.min = parent instanceof PageArea || parent instanceof PageSet ? 0 : 1;\n              }\n              if (this.max === \"\") {\n                if (originalMin === \"\") {\n                  this.max = parent instanceof PageArea || parent instanceof PageSet ? -1 : 1;\n                } else {\n                  this.max = this.min;\n                }\n              }\n              if (this.max !== -1 && this.max < this.min) {\n                this.max = this.min;\n              }\n              if (this.initial === \"\") {\n                this.initial = parent instanceof Template ? 1 : this.min;\n              }\n            }\n          }]);\n          return Occur;\n        }(_xfa_object.XFAObject);\n        var Oid = /*#__PURE__*/function (_xfa_object$StringObj5) {\n          _inherits(Oid, _xfa_object$StringObj5);\n          function Oid(attributes) {\n            var _this178;\n            _classCallCheck(this, Oid);\n            _this178 = _possibleConstructorReturn(this, _getPrototypeOf(Oid).call(this, TEMPLATE_NS_ID, \"oid\"));\n            _this178.id = attributes.id || \"\";\n            _this178.name = attributes.name || \"\";\n            _this178.use = attributes.use || \"\";\n            _this178.usehref = attributes.usehref || \"\";\n            return _this178;\n          }\n          return Oid;\n        }(_xfa_object.StringObject);\n        var Oids = /*#__PURE__*/function (_xfa_object$XFAObject59) {\n          _inherits(Oids, _xfa_object$XFAObject59);\n          function Oids(attributes) {\n            var _this179;\n            _classCallCheck(this, Oids);\n            _this179 = _possibleConstructorReturn(this, _getPrototypeOf(Oids).call(this, TEMPLATE_NS_ID, \"oids\", true));\n            _this179.id = attributes.id || \"\";\n            _this179.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this179.use = attributes.use || \"\";\n            _this179.usehref = attributes.usehref || \"\";\n            _this179.oid = new _xfa_object.XFAObjectArray();\n            return _this179;\n          }\n          return Oids;\n        }(_xfa_object.XFAObject);\n        var Overflow = /*#__PURE__*/function (_xfa_object$XFAObject60) {\n          _inherits(Overflow, _xfa_object$XFAObject60);\n          function Overflow(attributes) {\n            var _this180;\n            _classCallCheck(this, Overflow);\n            _this180 = _possibleConstructorReturn(this, _getPrototypeOf(Overflow).call(this, TEMPLATE_NS_ID, \"overflow\"));\n            _this180.id = attributes.id || \"\";\n            _this180.leader = attributes.leader || \"\";\n            _this180.target = attributes.target || \"\";\n            _this180.trailer = attributes.trailer || \"\";\n            _this180.use = attributes.use || \"\";\n            _this180.usehref = attributes.usehref || \"\";\n            return _this180;\n          }\n          _createClass(Overflow, [{\n            key: _xfa_object.$getExtra,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                var parent = this[_xfa_object.$getParent]();\n                var root = this[_xfa_object.$getTemplateRoot]();\n                var target = root[_xfa_object.$searchNode](this.target, parent);\n                var leader = root[_xfa_object.$searchNode](this.leader, parent);\n                var trailer = root[_xfa_object.$searchNode](this.trailer, parent);\n                this[_xfa_object.$extra] = {\n                  target: target && target[0] || null,\n                  leader: leader && leader[0] || null,\n                  trailer: trailer && trailer[0] || null,\n                  addLeader: false,\n                  addTrailer: false\n                };\n              }\n              return this[_xfa_object.$extra];\n            }\n          }]);\n          return Overflow;\n        }(_xfa_object.XFAObject);\n        var PageArea = /*#__PURE__*/function (_xfa_object$XFAObject61) {\n          _inherits(PageArea, _xfa_object$XFAObject61);\n          function PageArea(attributes) {\n            var _this181;\n            _classCallCheck(this, PageArea);\n            _this181 = _possibleConstructorReturn(this, _getPrototypeOf(PageArea).call(this, TEMPLATE_NS_ID, \"pageArea\", true));\n            _this181.blankOrNotBlank = (0, _utils.getStringOption)(attributes.blankOrNotBlank, [\"any\", \"blank\", \"notBlank\"]);\n            _this181.id = attributes.id || \"\";\n            _this181.initialNumber = (0, _utils.getInteger)({\n              data: attributes.initialNumber,\n              defaultValue: 1,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this181.name = attributes.name || \"\";\n            _this181.numbered = (0, _utils.getInteger)({\n              data: attributes.numbered,\n              defaultValue: 1,\n              validate: function validate(x) {\n                return true;\n              }\n            });\n            _this181.oddOrEven = (0, _utils.getStringOption)(attributes.oddOrEven, [\"any\", \"even\", \"odd\"]);\n            _this181.pagePosition = (0, _utils.getStringOption)(attributes.pagePosition, [\"any\", \"first\", \"last\", \"only\", \"rest\"]);\n            _this181.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this181.use = attributes.use || \"\";\n            _this181.usehref = attributes.usehref || \"\";\n            _this181.desc = null;\n            _this181.extras = null;\n            _this181.medium = null;\n            _this181.occur = null;\n            _this181.area = new _xfa_object.XFAObjectArray();\n            _this181.contentArea = new _xfa_object.XFAObjectArray();\n            _this181.draw = new _xfa_object.XFAObjectArray();\n            _this181.exclGroup = new _xfa_object.XFAObjectArray();\n            _this181.field = new _xfa_object.XFAObjectArray();\n            _this181.subform = new _xfa_object.XFAObjectArray();\n            return _this181;\n          }\n          _createClass(PageArea, [{\n            key: _xfa_object.$isUsable,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = {\n                  numberOfUse: 0\n                };\n                return true;\n              }\n              return !this.occur || this.occur.max === -1 || this[_xfa_object.$extra].numberOfUse < this.occur.max;\n            }\n          }, {\n            key: _xfa_object.$cleanPage,\n            value: function value() {\n              delete this[_xfa_object.$extra];\n            }\n          }, {\n            key: _xfa_object.$getNextPage,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = {\n                  numberOfUse: 0\n                };\n              }\n              var parent = this[_xfa_object.$getParent]();\n              if (parent.relation === \"orderedOccurrence\") {\n                if (this[_xfa_object.$isUsable]()) {\n                  this[_xfa_object.$extra].numberOfUse += 1;\n                  return this;\n                }\n              }\n              return parent[_xfa_object.$getNextPage]();\n            }\n          }, {\n            key: _xfa_object.$getAvailableSpace,\n            value: function value() {\n              return this[_xfa_object.$extra].space || {\n                width: 0,\n                height: 0\n              };\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = {\n                  numberOfUse: 1\n                };\n              }\n              var children = [];\n              this[_xfa_object.$extra].children = children;\n              var style = Object.create(null);\n              if (this.medium && this.medium.short && this.medium.long) {\n                style.width = (0, _html_utils.measureToString)(this.medium.short);\n                style.height = (0, _html_utils.measureToString)(this.medium.long);\n                this[_xfa_object.$extra].space = {\n                  width: this.medium.short,\n                  height: this.medium.long\n                };\n                if (this.medium.orientation === \"landscape\") {\n                  var x = style.width;\n                  style.width = style.height;\n                  style.height = x;\n                  this[_xfa_object.$extra].space = {\n                    width: this.medium.long,\n                    height: this.medium.short\n                  };\n                }\n              } else {\n                (0, _util.warn)(\"XFA - No medium specified in pageArea: please file a bug.\");\n              }\n              this[_xfa_object.$childrenToHTML]({\n                filter: new Set([\"area\", \"draw\", \"field\", \"subform\"]),\n                include: true\n              });\n              this[_xfa_object.$childrenToHTML]({\n                filter: new Set([\"contentArea\"]),\n                include: true\n              });\n              return _utils.HTMLResult.success({\n                name: \"div\",\n                children: children,\n                attributes: {\n                  class: [\"xfaPage\"],\n                  id: this[_xfa_object.$uid],\n                  style: style,\n                  xfaName: this.name\n                }\n              });\n            }\n          }]);\n          return PageArea;\n        }(_xfa_object.XFAObject);\n        var PageSet = /*#__PURE__*/function (_xfa_object$XFAObject62) {\n          _inherits(PageSet, _xfa_object$XFAObject62);\n          function PageSet(attributes) {\n            var _this182;\n            _classCallCheck(this, PageSet);\n            _this182 = _possibleConstructorReturn(this, _getPrototypeOf(PageSet).call(this, TEMPLATE_NS_ID, \"pageSet\", true));\n            _this182.duplexImposition = (0, _utils.getStringOption)(attributes.duplexImposition, [\"longEdge\", \"shortEdge\"]);\n            _this182.id = attributes.id || \"\";\n            _this182.name = attributes.name || \"\";\n            _this182.relation = (0, _utils.getStringOption)(attributes.relation, [\"orderedOccurrence\", \"duplexPaginated\", \"simplexPaginated\"]);\n            _this182.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this182.use = attributes.use || \"\";\n            _this182.usehref = attributes.usehref || \"\";\n            _this182.extras = null;\n            _this182.occur = null;\n            _this182.pageArea = new _xfa_object.XFAObjectArray();\n            _this182.pageSet = new _xfa_object.XFAObjectArray();\n            return _this182;\n          }\n          _createClass(PageSet, [{\n            key: _xfa_object.$cleanPage,\n            value: function value() {\n              var _iterator159 = _createForOfIteratorHelper(this.pageArea.children),\n                _step159;\n              try {\n                for (_iterator159.s(); !(_step159 = _iterator159.n()).done;) {\n                  var page = _step159.value;\n                  page[_xfa_object.$cleanPage]();\n                }\n              } catch (err) {\n                _iterator159.e(err);\n              } finally {\n                _iterator159.f();\n              }\n              var _iterator160 = _createForOfIteratorHelper(this.pageSet.children),\n                _step160;\n              try {\n                for (_iterator160.s(); !(_step160 = _iterator160.n()).done;) {\n                  var _page = _step160.value;\n                  _page[_xfa_object.$cleanPage]();\n                }\n              } catch (err) {\n                _iterator160.e(err);\n              } finally {\n                _iterator160.f();\n              }\n            }\n          }, {\n            key: _xfa_object.$isUsable,\n            value: function value() {\n              return !this.occur || this.occur.max === -1 || this[_xfa_object.$extra].numberOfUse < this.occur.max;\n            }\n          }, {\n            key: _xfa_object.$getNextPage,\n            value: function value() {\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = {\n                  numberOfUse: 1,\n                  pageIndex: -1,\n                  pageSetIndex: -1\n                };\n              }\n              if (this.relation === \"orderedOccurrence\") {\n                if (this[_xfa_object.$extra].pageIndex + 1 < this.pageArea.children.length) {\n                  this[_xfa_object.$extra].pageIndex += 1;\n                  var pageArea = this.pageArea.children[this[_xfa_object.$extra].pageIndex];\n                  return pageArea[_xfa_object.$getNextPage]();\n                }\n                if (this[_xfa_object.$extra].pageSetIndex + 1 < this.pageSet.children.length) {\n                  this[_xfa_object.$extra].pageSetIndex += 1;\n                  return this.pageSet.children[this[_xfa_object.$extra].pageSetIndex][_xfa_object.$getNextPage]();\n                }\n                if (this[_xfa_object.$isUsable]()) {\n                  this[_xfa_object.$extra].numberOfUse += 1;\n                  this[_xfa_object.$extra].pageIndex = -1;\n                  this[_xfa_object.$extra].pageSetIndex = -1;\n                  return this[_xfa_object.$getNextPage]();\n                }\n                var parent = this[_xfa_object.$getParent]();\n                if (parent instanceof PageSet) {\n                  return parent[_xfa_object.$getNextPage]();\n                }\n                this[_xfa_object.$cleanPage]();\n                return this[_xfa_object.$getNextPage]();\n              }\n              var pageNumber = this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].pageNumber;\n              var parity = pageNumber % 2 === 0 ? \"even\" : \"odd\";\n              var position = pageNumber === 0 ? \"first\" : \"rest\";\n              var page = this.pageArea.children.find(function (p) {\n                return p.oddOrEven === parity && p.pagePosition === position;\n              });\n              if (page) {\n                return page;\n              }\n              page = this.pageArea.children.find(function (p) {\n                return p.oddOrEven === \"any\" && p.pagePosition === position;\n              });\n              if (page) {\n                return page;\n              }\n              page = this.pageArea.children.find(function (p) {\n                return p.oddOrEven === \"any\" && p.pagePosition === \"any\";\n              });\n              if (page) {\n                return page;\n              }\n              return this.pageArea.children[0];\n            }\n          }]);\n          return PageSet;\n        }(_xfa_object.XFAObject);\n        var Para = /*#__PURE__*/function (_xfa_object$XFAObject63) {\n          _inherits(Para, _xfa_object$XFAObject63);\n          function Para(attributes) {\n            var _this183;\n            _classCallCheck(this, Para);\n            _this183 = _possibleConstructorReturn(this, _getPrototypeOf(Para).call(this, TEMPLATE_NS_ID, \"para\", true));\n            _this183.hAlign = (0, _utils.getStringOption)(attributes.hAlign, [\"left\", \"center\", \"justify\", \"justifyAll\", \"radix\", \"right\"]);\n            _this183.id = attributes.id || \"\";\n            _this183.lineHeight = attributes.lineHeight ? (0, _utils.getMeasurement)(attributes.lineHeight, \"0pt\") : \"\";\n            _this183.marginLeft = attributes.marginLeft ? (0, _utils.getMeasurement)(attributes.marginLeft, \"0pt\") : \"\";\n            _this183.marginRight = attributes.marginRight ? (0, _utils.getMeasurement)(attributes.marginRight, \"0pt\") : \"\";\n            _this183.orphans = (0, _utils.getInteger)({\n              data: attributes.orphans,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this183.preserve = attributes.preserve || \"\";\n            _this183.radixOffset = attributes.radixOffset ? (0, _utils.getMeasurement)(attributes.radixOffset, \"0pt\") : \"\";\n            _this183.spaceAbove = attributes.spaceAbove ? (0, _utils.getMeasurement)(attributes.spaceAbove, \"0pt\") : \"\";\n            _this183.spaceBelow = attributes.spaceBelow ? (0, _utils.getMeasurement)(attributes.spaceBelow, \"0pt\") : \"\";\n            _this183.tabDefault = attributes.tabDefault ? (0, _utils.getMeasurement)(_this183.tabDefault) : \"\";\n            _this183.tabStops = (attributes.tabStops || \"\").trim().split(/\\s+/).map(function (x, i) {\n              return i % 2 === 1 ? (0, _utils.getMeasurement)(x) : x;\n            });\n            _this183.textIndent = attributes.textIndent ? (0, _utils.getMeasurement)(attributes.textIndent, \"0pt\") : \"\";\n            _this183.use = attributes.use || \"\";\n            _this183.usehref = attributes.usehref || \"\";\n            _this183.vAlign = (0, _utils.getStringOption)(attributes.vAlign, [\"top\", \"bottom\", \"middle\"]);\n            _this183.widows = (0, _utils.getInteger)({\n              data: attributes.widows,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this183.hyphenation = null;\n            return _this183;\n          }\n          _createClass(Para, [{\n            key: _xfa_object.$toStyle,\n            value: function value() {\n              var style = (0, _html_utils.toStyle)(this, \"hAlign\");\n              if (this.marginLeft !== \"\") {\n                style.paddingLeft = (0, _html_utils.measureToString)(this.marginLeft);\n              }\n              if (this.marginRight !== \"\") {\n                style.paddingight = (0, _html_utils.measureToString)(this.marginRight);\n              }\n              if (this.spaceAbove !== \"\") {\n                style.paddingTop = (0, _html_utils.measureToString)(this.spaceAbove);\n              }\n              if (this.spaceBelow !== \"\") {\n                style.paddingBottom = (0, _html_utils.measureToString)(this.spaceBelow);\n              }\n              if (this.textIndent !== \"\") {\n                style.textIndent = (0, _html_utils.measureToString)(this.textIndent);\n                (0, _html_utils.fixTextIndent)(style);\n              }\n              if (this.lineHeight > 0) {\n                style.lineHeight = (0, _html_utils.measureToString)(this.lineHeight);\n              }\n              if (this.tabDefault !== \"\") {\n                style.tabSize = (0, _html_utils.measureToString)(this.tabDefault);\n              }\n              if (this.tabStops.length > 0) {}\n              if (this.hyphenatation) {\n                Object.assign(style, this.hyphenatation[_xfa_object.$toStyle]());\n              }\n              return style;\n            }\n          }]);\n          return Para;\n        }(_xfa_object.XFAObject);\n        var PasswordEdit = /*#__PURE__*/function (_xfa_object$XFAObject64) {\n          _inherits(PasswordEdit, _xfa_object$XFAObject64);\n          function PasswordEdit(attributes) {\n            var _this184;\n            _classCallCheck(this, PasswordEdit);\n            _this184 = _possibleConstructorReturn(this, _getPrototypeOf(PasswordEdit).call(this, TEMPLATE_NS_ID, \"passwordEdit\", true));\n            _this184.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, [\"auto\", \"off\", \"on\"]);\n            _this184.id = attributes.id || \"\";\n            _this184.passwordChar = attributes.passwordChar || \"*\";\n            _this184.use = attributes.use || \"\";\n            _this184.usehref = attributes.usehref || \"\";\n            _this184.border = null;\n            _this184.extras = null;\n            _this184.margin = null;\n            return _this184;\n          }\n          return PasswordEdit;\n        }(_xfa_object.XFAObject);\n        var Pattern = /*#__PURE__*/function (_xfa_object$XFAObject65) {\n          _inherits(Pattern, _xfa_object$XFAObject65);\n          function Pattern(attributes) {\n            var _this185;\n            _classCallCheck(this, Pattern);\n            _this185 = _possibleConstructorReturn(this, _getPrototypeOf(Pattern).call(this, TEMPLATE_NS_ID, \"pattern\", true));\n            _this185.id = attributes.id || \"\";\n            _this185.type = (0, _utils.getStringOption)(attributes.type, [\"crossHatch\", \"crossDiagonal\", \"diagonalLeft\", \"diagonalRight\", \"horizontal\", \"vertical\"]);\n            _this185.use = attributes.use || \"\";\n            _this185.usehref = attributes.usehref || \"\";\n            _this185.color = null;\n            _this185.extras = null;\n            return _this185;\n          }\n          _createClass(Pattern, [{\n            key: _xfa_object.$toStyle,\n            value: function value(startColor) {\n              startColor = startColor ? startColor[_xfa_object.$toStyle]() : \"#FFFFFF\";\n              var endColor = this.color ? this.color[_xfa_object.$toStyle]() : \"#000000\";\n              var width = 5;\n              var cmd = \"repeating-linear-gradient\";\n              var colors = \"\".concat(startColor, \",\").concat(startColor, \" \").concat(width, \"px,\").concat(endColor, \" \").concat(width, \"px,\").concat(endColor, \" \").concat(2 * width, \"px\");\n              switch (this.type) {\n                case \"crossHatch\":\n                  return \"\".concat(cmd, \"(to top,\").concat(colors, \") \").concat(cmd, \"(to right,\").concat(colors, \")\");\n                case \"crossDiagonal\":\n                  return \"\".concat(cmd, \"(45deg,\").concat(colors, \") \").concat(cmd, \"(-45deg,\").concat(colors, \")\");\n                case \"diagonalLeft\":\n                  return \"\".concat(cmd, \"(45deg,\").concat(colors, \")\");\n                case \"diagonalRight\":\n                  return \"\".concat(cmd, \"(-45deg,\").concat(colors, \")\");\n                case \"horizontal\":\n                  return \"\".concat(cmd, \"(to top,\").concat(colors, \")\");\n                case \"vertical\":\n                  return \"\".concat(cmd, \"(to right,\").concat(colors, \")\");\n              }\n              return \"\";\n            }\n          }]);\n          return Pattern;\n        }(_xfa_object.XFAObject);\n        var Picture = /*#__PURE__*/function (_xfa_object$StringObj6) {\n          _inherits(Picture, _xfa_object$StringObj6);\n          function Picture(attributes) {\n            var _this186;\n            _classCallCheck(this, Picture);\n            _this186 = _possibleConstructorReturn(this, _getPrototypeOf(Picture).call(this, TEMPLATE_NS_ID, \"picture\"));\n            _this186.id = attributes.id || \"\";\n            _this186.use = attributes.use || \"\";\n            _this186.usehref = attributes.usehref || \"\";\n            return _this186;\n          }\n          return Picture;\n        }(_xfa_object.StringObject);\n        var Proto = /*#__PURE__*/function (_xfa_object$XFAObject66) {\n          _inherits(Proto, _xfa_object$XFAObject66);\n          function Proto(attributes) {\n            var _this187;\n            _classCallCheck(this, Proto);\n            _this187 = _possibleConstructorReturn(this, _getPrototypeOf(Proto).call(this, TEMPLATE_NS_ID, \"proto\", true));\n            _this187.appearanceFilter = new _xfa_object.XFAObjectArray();\n            _this187.arc = new _xfa_object.XFAObjectArray();\n            _this187.area = new _xfa_object.XFAObjectArray();\n            _this187.assist = new _xfa_object.XFAObjectArray();\n            _this187.barcode = new _xfa_object.XFAObjectArray();\n            _this187.bindItems = new _xfa_object.XFAObjectArray();\n            _this187.bookend = new _xfa_object.XFAObjectArray();\n            _this187.boolean = new _xfa_object.XFAObjectArray();\n            _this187.border = new _xfa_object.XFAObjectArray();\n            _this187.break = new _xfa_object.XFAObjectArray();\n            _this187.breakAfter = new _xfa_object.XFAObjectArray();\n            _this187.breakBefore = new _xfa_object.XFAObjectArray();\n            _this187.button = new _xfa_object.XFAObjectArray();\n            _this187.calculate = new _xfa_object.XFAObjectArray();\n            _this187.caption = new _xfa_object.XFAObjectArray();\n            _this187.certificate = new _xfa_object.XFAObjectArray();\n            _this187.certificates = new _xfa_object.XFAObjectArray();\n            _this187.checkButton = new _xfa_object.XFAObjectArray();\n            _this187.choiceList = new _xfa_object.XFAObjectArray();\n            _this187.color = new _xfa_object.XFAObjectArray();\n            _this187.comb = new _xfa_object.XFAObjectArray();\n            _this187.connect = new _xfa_object.XFAObjectArray();\n            _this187.contentArea = new _xfa_object.XFAObjectArray();\n            _this187.corner = new _xfa_object.XFAObjectArray();\n            _this187.date = new _xfa_object.XFAObjectArray();\n            _this187.dateTime = new _xfa_object.XFAObjectArray();\n            _this187.dateTimeEdit = new _xfa_object.XFAObjectArray();\n            _this187.decimal = new _xfa_object.XFAObjectArray();\n            _this187.defaultUi = new _xfa_object.XFAObjectArray();\n            _this187.desc = new _xfa_object.XFAObjectArray();\n            _this187.digestMethod = new _xfa_object.XFAObjectArray();\n            _this187.digestMethods = new _xfa_object.XFAObjectArray();\n            _this187.draw = new _xfa_object.XFAObjectArray();\n            _this187.edge = new _xfa_object.XFAObjectArray();\n            _this187.encoding = new _xfa_object.XFAObjectArray();\n            _this187.encodings = new _xfa_object.XFAObjectArray();\n            _this187.encrypt = new _xfa_object.XFAObjectArray();\n            _this187.encryptData = new _xfa_object.XFAObjectArray();\n            _this187.encryption = new _xfa_object.XFAObjectArray();\n            _this187.encryptionMethod = new _xfa_object.XFAObjectArray();\n            _this187.encryptionMethods = new _xfa_object.XFAObjectArray();\n            _this187.event = new _xfa_object.XFAObjectArray();\n            _this187.exData = new _xfa_object.XFAObjectArray();\n            _this187.exObject = new _xfa_object.XFAObjectArray();\n            _this187.exclGroup = new _xfa_object.XFAObjectArray();\n            _this187.execute = new _xfa_object.XFAObjectArray();\n            _this187.extras = new _xfa_object.XFAObjectArray();\n            _this187.field = new _xfa_object.XFAObjectArray();\n            _this187.fill = new _xfa_object.XFAObjectArray();\n            _this187.filter = new _xfa_object.XFAObjectArray();\n            _this187.float = new _xfa_object.XFAObjectArray();\n            _this187.font = new _xfa_object.XFAObjectArray();\n            _this187.format = new _xfa_object.XFAObjectArray();\n            _this187.handler = new _xfa_object.XFAObjectArray();\n            _this187.hyphenation = new _xfa_object.XFAObjectArray();\n            _this187.image = new _xfa_object.XFAObjectArray();\n            _this187.imageEdit = new _xfa_object.XFAObjectArray();\n            _this187.integer = new _xfa_object.XFAObjectArray();\n            _this187.issuers = new _xfa_object.XFAObjectArray();\n            _this187.items = new _xfa_object.XFAObjectArray();\n            _this187.keep = new _xfa_object.XFAObjectArray();\n            _this187.keyUsage = new _xfa_object.XFAObjectArray();\n            _this187.line = new _xfa_object.XFAObjectArray();\n            _this187.linear = new _xfa_object.XFAObjectArray();\n            _this187.lockDocument = new _xfa_object.XFAObjectArray();\n            _this187.manifest = new _xfa_object.XFAObjectArray();\n            _this187.margin = new _xfa_object.XFAObjectArray();\n            _this187.mdp = new _xfa_object.XFAObjectArray();\n            _this187.medium = new _xfa_object.XFAObjectArray();\n            _this187.message = new _xfa_object.XFAObjectArray();\n            _this187.numericEdit = new _xfa_object.XFAObjectArray();\n            _this187.occur = new _xfa_object.XFAObjectArray();\n            _this187.oid = new _xfa_object.XFAObjectArray();\n            _this187.oids = new _xfa_object.XFAObjectArray();\n            _this187.overflow = new _xfa_object.XFAObjectArray();\n            _this187.pageArea = new _xfa_object.XFAObjectArray();\n            _this187.pageSet = new _xfa_object.XFAObjectArray();\n            _this187.para = new _xfa_object.XFAObjectArray();\n            _this187.passwordEdit = new _xfa_object.XFAObjectArray();\n            _this187.pattern = new _xfa_object.XFAObjectArray();\n            _this187.picture = new _xfa_object.XFAObjectArray();\n            _this187.radial = new _xfa_object.XFAObjectArray();\n            _this187.reason = new _xfa_object.XFAObjectArray();\n            _this187.reasons = new _xfa_object.XFAObjectArray();\n            _this187.rectangle = new _xfa_object.XFAObjectArray();\n            _this187.ref = new _xfa_object.XFAObjectArray();\n            _this187.script = new _xfa_object.XFAObjectArray();\n            _this187.setProperty = new _xfa_object.XFAObjectArray();\n            _this187.signData = new _xfa_object.XFAObjectArray();\n            _this187.signature = new _xfa_object.XFAObjectArray();\n            _this187.signing = new _xfa_object.XFAObjectArray();\n            _this187.solid = new _xfa_object.XFAObjectArray();\n            _this187.speak = new _xfa_object.XFAObjectArray();\n            _this187.stipple = new _xfa_object.XFAObjectArray();\n            _this187.subform = new _xfa_object.XFAObjectArray();\n            _this187.subformSet = new _xfa_object.XFAObjectArray();\n            _this187.subjectDN = new _xfa_object.XFAObjectArray();\n            _this187.subjectDNs = new _xfa_object.XFAObjectArray();\n            _this187.submit = new _xfa_object.XFAObjectArray();\n            _this187.text = new _xfa_object.XFAObjectArray();\n            _this187.textEdit = new _xfa_object.XFAObjectArray();\n            _this187.time = new _xfa_object.XFAObjectArray();\n            _this187.timeStamp = new _xfa_object.XFAObjectArray();\n            _this187.toolTip = new _xfa_object.XFAObjectArray();\n            _this187.traversal = new _xfa_object.XFAObjectArray();\n            _this187.traverse = new _xfa_object.XFAObjectArray();\n            _this187.ui = new _xfa_object.XFAObjectArray();\n            _this187.validate = new _xfa_object.XFAObjectArray();\n            _this187.value = new _xfa_object.XFAObjectArray();\n            _this187.variables = new _xfa_object.XFAObjectArray();\n            return _this187;\n          }\n          return Proto;\n        }(_xfa_object.XFAObject);\n        var Radial = /*#__PURE__*/function (_xfa_object$XFAObject67) {\n          _inherits(Radial, _xfa_object$XFAObject67);\n          function Radial(attributes) {\n            var _this188;\n            _classCallCheck(this, Radial);\n            _this188 = _possibleConstructorReturn(this, _getPrototypeOf(Radial).call(this, TEMPLATE_NS_ID, \"radial\", true));\n            _this188.id = attributes.id || \"\";\n            _this188.type = (0, _utils.getStringOption)(attributes.type, [\"toEdge\", \"toCenter\"]);\n            _this188.use = attributes.use || \"\";\n            _this188.usehref = attributes.usehref || \"\";\n            _this188.color = null;\n            _this188.extras = null;\n            return _this188;\n          }\n          _createClass(Radial, [{\n            key: _xfa_object.$toStyle,\n            value: function value(startColor) {\n              startColor = startColor ? startColor[_xfa_object.$toStyle]() : \"#FFFFFF\";\n              var endColor = this.color ? this.color[_xfa_object.$toStyle]() : \"#000000\";\n              var colors = this.type === \"toEdge\" ? \"\".concat(startColor, \",\").concat(endColor) : \"\".concat(endColor, \",\").concat(startColor);\n              return \"radial-gradient(circle at center, \".concat(colors, \")\");\n            }\n          }]);\n          return Radial;\n        }(_xfa_object.XFAObject);\n        var Reason = /*#__PURE__*/function (_xfa_object$StringObj7) {\n          _inherits(Reason, _xfa_object$StringObj7);\n          function Reason(attributes) {\n            var _this189;\n            _classCallCheck(this, Reason);\n            _this189 = _possibleConstructorReturn(this, _getPrototypeOf(Reason).call(this, TEMPLATE_NS_ID, \"reason\"));\n            _this189.id = attributes.id || \"\";\n            _this189.name = attributes.name || \"\";\n            _this189.use = attributes.use || \"\";\n            _this189.usehref = attributes.usehref || \"\";\n            return _this189;\n          }\n          return Reason;\n        }(_xfa_object.StringObject);\n        var Reasons = /*#__PURE__*/function (_xfa_object$XFAObject68) {\n          _inherits(Reasons, _xfa_object$XFAObject68);\n          function Reasons(attributes) {\n            var _this190;\n            _classCallCheck(this, Reasons);\n            _this190 = _possibleConstructorReturn(this, _getPrototypeOf(Reasons).call(this, TEMPLATE_NS_ID, \"reasons\", true));\n            _this190.id = attributes.id || \"\";\n            _this190.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this190.use = attributes.use || \"\";\n            _this190.usehref = attributes.usehref || \"\";\n            _this190.reason = new _xfa_object.XFAObjectArray();\n            return _this190;\n          }\n          return Reasons;\n        }(_xfa_object.XFAObject);\n        var Rectangle = /*#__PURE__*/function (_xfa_object$XFAObject69) {\n          _inherits(Rectangle, _xfa_object$XFAObject69);\n          function Rectangle(attributes) {\n            var _this191;\n            _classCallCheck(this, Rectangle);\n            _this191 = _possibleConstructorReturn(this, _getPrototypeOf(Rectangle).call(this, TEMPLATE_NS_ID, \"rectangle\", true));\n            _this191.hand = (0, _utils.getStringOption)(attributes.hand, [\"even\", \"left\", \"right\"]);\n            _this191.id = attributes.id || \"\";\n            _this191.use = attributes.use || \"\";\n            _this191.usehref = attributes.usehref || \"\";\n            _this191.corner = new _xfa_object.XFAObjectArray(4);\n            _this191.edge = new _xfa_object.XFAObjectArray(4);\n            _this191.fill = null;\n            return _this191;\n          }\n          _createClass(Rectangle, [{\n            key: _xfa_object.$toHTML,\n            value: function value() {\n              var edge = this.edge.children.length ? this.edge.children[0] : new Edge({});\n              var edgeStyle = edge[_xfa_object.$toStyle]();\n              var style = Object.create(null);\n              if (this.fill && this.fill.presence === \"visible\") {\n                Object.assign(style, this.fill[_xfa_object.$toStyle]());\n              } else {\n                style.fill = \"transparent\";\n              }\n              style.strokeWidth = (0, _html_utils.measureToString)(edge.presence === \"visible\" ? edge.thickness : 0);\n              style.stroke = edgeStyle.color;\n              var corner = this.corner.children.length ? this.corner.children[0] : new Corner({});\n              var cornerStyle = corner[_xfa_object.$toStyle]();\n              var rect = {\n                name: \"rect\",\n                attributes: {\n                  xmlns: SVG_NS,\n                  width: \"100%\",\n                  height: \"100%\",\n                  x: 0,\n                  y: 0,\n                  rx: cornerStyle.radius,\n                  ry: cornerStyle.radius,\n                  style: style\n                }\n              };\n              var svg = {\n                name: \"svg\",\n                children: [rect],\n                attributes: {\n                  xmlns: SVG_NS,\n                  style: {\n                    overflow: \"visible\"\n                  },\n                  width: \"100%\",\n                  height: \"100%\"\n                }\n              };\n              var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              if (hasMargin(parent)) {\n                return _utils.HTMLResult.success({\n                  name: \"div\",\n                  attributes: {\n                    style: {\n                      display: \"inline\",\n                      width: \"100%\",\n                      height: \"100%\"\n                    }\n                  },\n                  children: [svg]\n                });\n              }\n              svg.attributes.style.position = \"absolute\";\n              return _utils.HTMLResult.success(svg);\n            }\n          }]);\n          return Rectangle;\n        }(_xfa_object.XFAObject);\n        var RefElement = /*#__PURE__*/function (_xfa_object$StringObj8) {\n          _inherits(RefElement, _xfa_object$StringObj8);\n          function RefElement(attributes) {\n            var _this192;\n            _classCallCheck(this, RefElement);\n            _this192 = _possibleConstructorReturn(this, _getPrototypeOf(RefElement).call(this, TEMPLATE_NS_ID, \"ref\"));\n            _this192.id = attributes.id || \"\";\n            _this192.use = attributes.use || \"\";\n            _this192.usehref = attributes.usehref || \"\";\n            return _this192;\n          }\n          return RefElement;\n        }(_xfa_object.StringObject);\n        var Script = /*#__PURE__*/function (_xfa_object$StringObj9) {\n          _inherits(Script, _xfa_object$StringObj9);\n          function Script(attributes) {\n            var _this193;\n            _classCallCheck(this, Script);\n            _this193 = _possibleConstructorReturn(this, _getPrototypeOf(Script).call(this, TEMPLATE_NS_ID, \"script\"));\n            _this193.binding = attributes.binding || \"\";\n            _this193.contentType = attributes.contentType || \"\";\n            _this193.id = attributes.id || \"\";\n            _this193.name = attributes.name || \"\";\n            _this193.runAt = (0, _utils.getStringOption)(attributes.runAt, [\"client\", \"both\", \"server\"]);\n            _this193.use = attributes.use || \"\";\n            _this193.usehref = attributes.usehref || \"\";\n            return _this193;\n          }\n          return Script;\n        }(_xfa_object.StringObject);\n        var SetProperty = /*#__PURE__*/function (_xfa_object$XFAObject70) {\n          _inherits(SetProperty, _xfa_object$XFAObject70);\n          function SetProperty(attributes) {\n            var _this194;\n            _classCallCheck(this, SetProperty);\n            _this194 = _possibleConstructorReturn(this, _getPrototypeOf(SetProperty).call(this, TEMPLATE_NS_ID, \"setProperty\"));\n            _this194.connection = attributes.connection || \"\";\n            _this194.ref = attributes.ref || \"\";\n            _this194.target = attributes.target || \"\";\n            return _this194;\n          }\n          return SetProperty;\n        }(_xfa_object.XFAObject);\n        exports.SetProperty = SetProperty;\n        var SignData = /*#__PURE__*/function (_xfa_object$XFAObject71) {\n          _inherits(SignData, _xfa_object$XFAObject71);\n          function SignData(attributes) {\n            var _this195;\n            _classCallCheck(this, SignData);\n            _this195 = _possibleConstructorReturn(this, _getPrototypeOf(SignData).call(this, TEMPLATE_NS_ID, \"signData\", true));\n            _this195.id = attributes.id || \"\";\n            _this195.operation = (0, _utils.getStringOption)(attributes.operation, [\"sign\", \"clear\", \"verify\"]);\n            _this195.ref = attributes.ref || \"\";\n            _this195.target = attributes.target || \"\";\n            _this195.use = attributes.use || \"\";\n            _this195.usehref = attributes.usehref || \"\";\n            _this195.filter = null;\n            _this195.manifest = null;\n            return _this195;\n          }\n          return SignData;\n        }(_xfa_object.XFAObject);\n        var Signature = /*#__PURE__*/function (_xfa_object$XFAObject72) {\n          _inherits(Signature, _xfa_object$XFAObject72);\n          function Signature(attributes) {\n            var _this196;\n            _classCallCheck(this, Signature);\n            _this196 = _possibleConstructorReturn(this, _getPrototypeOf(Signature).call(this, TEMPLATE_NS_ID, \"signature\", true));\n            _this196.id = attributes.id || \"\";\n            _this196.type = (0, _utils.getStringOption)(attributes.type, [\"PDF1.3\", \"PDF1.6\"]);\n            _this196.use = attributes.use || \"\";\n            _this196.usehref = attributes.usehref || \"\";\n            _this196.border = null;\n            _this196.extras = null;\n            _this196.filter = null;\n            _this196.manifest = null;\n            _this196.margin = null;\n            return _this196;\n          }\n          return Signature;\n        }(_xfa_object.XFAObject);\n        var Signing = /*#__PURE__*/function (_xfa_object$XFAObject73) {\n          _inherits(Signing, _xfa_object$XFAObject73);\n          function Signing(attributes) {\n            var _this197;\n            _classCallCheck(this, Signing);\n            _this197 = _possibleConstructorReturn(this, _getPrototypeOf(Signing).call(this, TEMPLATE_NS_ID, \"signing\", true));\n            _this197.id = attributes.id || \"\";\n            _this197.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this197.use = attributes.use || \"\";\n            _this197.usehref = attributes.usehref || \"\";\n            _this197.certificate = new _xfa_object.XFAObjectArray();\n            return _this197;\n          }\n          return Signing;\n        }(_xfa_object.XFAObject);\n        var Solid = /*#__PURE__*/function (_xfa_object$XFAObject74) {\n          _inherits(Solid, _xfa_object$XFAObject74);\n          function Solid(attributes) {\n            var _this198;\n            _classCallCheck(this, Solid);\n            _this198 = _possibleConstructorReturn(this, _getPrototypeOf(Solid).call(this, TEMPLATE_NS_ID, \"solid\", true));\n            _this198.id = attributes.id || \"\";\n            _this198.use = attributes.use || \"\";\n            _this198.usehref = attributes.usehref || \"\";\n            _this198.extras = null;\n            return _this198;\n          }\n          _createClass(Solid, [{\n            key: _xfa_object.$toStyle,\n            value: function value(startColor) {\n              return startColor ? startColor[_xfa_object.$toStyle]() : \"#FFFFFF\";\n            }\n          }]);\n          return Solid;\n        }(_xfa_object.XFAObject);\n        var Speak = /*#__PURE__*/function (_xfa_object$StringObj10) {\n          _inherits(Speak, _xfa_object$StringObj10);\n          function Speak(attributes) {\n            var _this199;\n            _classCallCheck(this, Speak);\n            _this199 = _possibleConstructorReturn(this, _getPrototypeOf(Speak).call(this, TEMPLATE_NS_ID, \"speak\"));\n            _this199.disable = (0, _utils.getInteger)({\n              data: attributes.disable,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this199.id = attributes.id || \"\";\n            _this199.priority = (0, _utils.getStringOption)(attributes.priority, [\"custom\", \"caption\", \"name\", \"toolTip\"]);\n            _this199.rid = attributes.rid || \"\";\n            _this199.use = attributes.use || \"\";\n            _this199.usehref = attributes.usehref || \"\";\n            return _this199;\n          }\n          return Speak;\n        }(_xfa_object.StringObject);\n        var Stipple = /*#__PURE__*/function (_xfa_object$XFAObject75) {\n          _inherits(Stipple, _xfa_object$XFAObject75);\n          function Stipple(attributes) {\n            var _this200;\n            _classCallCheck(this, Stipple);\n            _this200 = _possibleConstructorReturn(this, _getPrototypeOf(Stipple).call(this, TEMPLATE_NS_ID, \"stipple\", true));\n            _this200.id = attributes.id || \"\";\n            _this200.rate = (0, _utils.getInteger)({\n              data: attributes.rate,\n              defaultValue: 50,\n              validate: function validate(x) {\n                return x >= 0 && x <= 100;\n              }\n            });\n            _this200.use = attributes.use || \"\";\n            _this200.usehref = attributes.usehref || \"\";\n            _this200.color = null;\n            _this200.extras = null;\n            return _this200;\n          }\n          _createClass(Stipple, [{\n            key: _xfa_object.$toStyle,\n            value: function value(bgColor) {\n              var alpha = this.rate / 100;\n              return _util.Util.makeHexColor(Math.round(bgColor.value.r * (1 - alpha) + this.value.r * alpha), Math.round(bgColor.value.g * (1 - alpha) + this.value.g * alpha), Math.round(bgColor.value.b * (1 - alpha) + this.value.b * alpha));\n            }\n          }]);\n          return Stipple;\n        }(_xfa_object.XFAObject);\n        var Subform = /*#__PURE__*/function (_xfa_object$XFAObject76) {\n          _inherits(Subform, _xfa_object$XFAObject76);\n          function Subform(attributes) {\n            var _this201;\n            _classCallCheck(this, Subform);\n            _this201 = _possibleConstructorReturn(this, _getPrototypeOf(Subform).call(this, TEMPLATE_NS_ID, \"subform\", true));\n            _this201.access = (0, _utils.getStringOption)(attributes.access, [\"open\", \"nonInteractive\", \"protected\", \"readOnly\"]);\n            _this201.allowMacro = (0, _utils.getInteger)({\n              data: attributes.allowMacro,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this201.anchorType = (0, _utils.getStringOption)(attributes.anchorType, [\"topLeft\", \"bottomCenter\", \"bottomLeft\", \"bottomRight\", \"middleCenter\", \"middleLeft\", \"middleRight\", \"topCenter\", \"topRight\"]);\n            _this201.colSpan = (0, _utils.getInteger)({\n              data: attributes.colSpan,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n >= 1 || n === -1;\n              }\n            });\n            _this201.columnWidths = (attributes.columnWidths || \"\").trim().split(/\\s+/).map(function (x) {\n              return x === \"-1\" ? -1 : (0, _utils.getMeasurement)(x);\n            });\n            _this201.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : \"\";\n            _this201.hAlign = (0, _utils.getStringOption)(attributes.hAlign, [\"left\", \"center\", \"justify\", \"justifyAll\", \"radix\", \"right\"]);\n            _this201.id = attributes.id || \"\";\n            _this201.layout = (0, _utils.getStringOption)(attributes.layout, [\"position\", \"lr-tb\", \"rl-row\", \"rl-tb\", \"row\", \"table\", \"tb\"]);\n            _this201.locale = attributes.locale || \"\";\n            _this201.maxH = (0, _utils.getMeasurement)(attributes.maxH, \"0pt\");\n            _this201.maxW = (0, _utils.getMeasurement)(attributes.maxW, \"0pt\");\n            _this201.mergeMode = (0, _utils.getStringOption)(attributes.mergeMode, [\"consumeData\", \"matchTemplate\"]);\n            _this201.minH = (0, _utils.getMeasurement)(attributes.minH, \"0pt\");\n            _this201.minW = (0, _utils.getMeasurement)(attributes.minW, \"0pt\");\n            _this201.name = attributes.name || \"\";\n            _this201.presence = (0, _utils.getStringOption)(attributes.presence, [\"visible\", \"hidden\", \"inactive\", \"invisible\"]);\n            _this201.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this201.restoreState = (0, _utils.getStringOption)(attributes.restoreState, [\"manual\", \"auto\"]);\n            _this201.scope = (0, _utils.getStringOption)(attributes.scope, [\"name\", \"none\"]);\n            _this201.use = attributes.use || \"\";\n            _this201.usehref = attributes.usehref || \"\";\n            _this201.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : \"\";\n            _this201.x = (0, _utils.getMeasurement)(attributes.x, \"0pt\");\n            _this201.y = (0, _utils.getMeasurement)(attributes.y, \"0pt\");\n            _this201.assist = null;\n            _this201.bind = null;\n            _this201.bookend = null;\n            _this201.border = null;\n            _this201.break = null;\n            _this201.calculate = null;\n            _this201.desc = null;\n            _this201.extras = null;\n            _this201.keep = null;\n            _this201.margin = null;\n            _this201.occur = null;\n            _this201.overflow = null;\n            _this201.pageSet = null;\n            _this201.para = null;\n            _this201.traversal = null;\n            _this201.validate = null;\n            _this201.variables = null;\n            _this201.area = new _xfa_object.XFAObjectArray();\n            _this201.breakAfter = new _xfa_object.XFAObjectArray();\n            _this201.breakBefore = new _xfa_object.XFAObjectArray();\n            _this201.connect = new _xfa_object.XFAObjectArray();\n            _this201.draw = new _xfa_object.XFAObjectArray();\n            _this201.event = new _xfa_object.XFAObjectArray();\n            _this201.exObject = new _xfa_object.XFAObjectArray();\n            _this201.exclGroup = new _xfa_object.XFAObjectArray();\n            _this201.field = new _xfa_object.XFAObjectArray();\n            _this201.proto = new _xfa_object.XFAObjectArray();\n            _this201.setProperty = new _xfa_object.XFAObjectArray();\n            _this201.subform = new _xfa_object.XFAObjectArray();\n            _this201.subformSet = new _xfa_object.XFAObjectArray();\n            return _this201;\n          }\n          _createClass(Subform, [{\n            key: _xfa_object.$getSubformParent,\n            value: function value() {\n              var parent = this[_xfa_object.$getParent]();\n              if (parent instanceof SubformSet) {\n                return parent[_xfa_object.$getSubformParent]();\n              }\n              return parent;\n            }\n          }, {\n            key: _xfa_object.$isBindable,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$isThereMoreWidth,\n            value: function value() {\n              return this.layout.endsWith(\"-tb\") && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine > 0 || this[_xfa_object.$getParent]()[_xfa_object.$isThereMoreWidth]();\n            }\n          }, {\n            key: _xfa_object.$getContainedChildren,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n              return _regeneratorRuntime().wrap(function value$(_context69) {\n                while (1) {\n                  switch (_context69.prev = _context69.next) {\n                    case 0:\n                      return _context69.delegateYield(getContainedChildren(this), \"t0\", 1);\n                    case 1:\n                    case \"end\":\n                      return _context69.stop();\n                  }\n                }\n              }, value, this);\n            })\n          }, {\n            key: _xfa_object.$flushHTML,\n            value: function value() {\n              return (0, _layout.flushHTML)(this);\n            }\n          }, {\n            key: _xfa_object.$addHTML,\n            value: function value(html, bbox) {\n              (0, _layout.addHTML)(this, html, bbox);\n            }\n          }, {\n            key: _xfa_object.$getAvailableSpace,\n            value: function value() {\n              return (0, _layout.getAvailableSpace)(this);\n            }\n          }, {\n            key: _xfa_object.$isSplittable,\n            value: function value() {\n              var parent = this[_xfa_object.$getSubformParent]();\n              if (!parent[_xfa_object.$isSplittable]()) {\n                return false;\n              }\n              if (this[_xfa_object.$extra]._isSplittable !== undefined) {\n                return this[_xfa_object.$extra]._isSplittable;\n              }\n              if (this.layout === \"position\" || this.layout.includes(\"row\")) {\n                this[_xfa_object.$extra]._isSplittable = false;\n                return false;\n              }\n              if (this.keep && this.keep.intact !== \"none\") {\n                this[_xfa_object.$extra]._isSplittable = false;\n                return false;\n              }\n              if (parent.layout && parent.layout.endsWith(\"-tb\") && parent[_xfa_object.$extra].numberInLine !== 0) {\n                return false;\n              }\n              this[_xfa_object.$extra]._isSplittable = true;\n              return true;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              setTabIndex(this);\n              if (this.break) {\n                if (this.break.after !== \"auto\" || this.break.afterTarget !== \"\") {\n                  var node = new BreakAfter({\n                    targetType: this.break.after,\n                    target: this.break.afterTarget,\n                    startNew: this.break.startNew.toString()\n                  });\n                  node[_xfa_object.$globalData] = this[_xfa_object.$globalData];\n                  this[_xfa_object.$appendChild](node);\n                  this.breakAfter.push(node);\n                }\n                if (this.break.before !== \"auto\" || this.break.beforeTarget !== \"\") {\n                  var _node = new BreakBefore({\n                    targetType: this.break.before,\n                    target: this.break.beforeTarget,\n                    startNew: this.break.startNew.toString()\n                  });\n                  _node[_xfa_object.$globalData] = this[_xfa_object.$globalData];\n                  this[_xfa_object.$appendChild](_node);\n                  this.breakBefore.push(_node);\n                }\n                if (this.break.overflowTarget !== \"\") {\n                  var _node2 = new Overflow({\n                    target: this.break.overflowTarget,\n                    leader: this.break.overflowLeader,\n                    trailer: this.break.overflowTrailer\n                  });\n                  _node2[_xfa_object.$globalData] = this[_xfa_object.$globalData];\n                  this[_xfa_object.$appendChild](_node2);\n                  this.overflow.push(_node2);\n                }\n                this[_xfa_object.$removeChild](this.break);\n                this.break = null;\n              }\n              if (this.presence === \"hidden\" || this.presence === \"inactive\") {\n                return _utils.HTMLResult.EMPTY;\n              }\n              if (this.breakBefore.children.length > 1 || this.breakAfter.children.length > 1) {\n                (0, _util.warn)(\"XFA - Several breakBefore or breakAfter in subforms: please file a bug.\");\n              }\n              if (this.breakBefore.children.length >= 1) {\n                var breakBefore = this.breakBefore.children[0];\n                if (handleBreak(breakBefore)) {\n                  return _utils.HTMLResult.breakNode(breakBefore);\n                }\n              }\n              if (this[_xfa_object.$extra] && this[_xfa_object.$extra].afterBreakAfter) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              (0, _html_utils.fixDimensions)(this);\n              var children = [];\n              var attributes = {\n                id: this[_xfa_object.$uid],\n                class: []\n              };\n              (0, _html_utils.setAccess)(this, attributes.class);\n              if (!this[_xfa_object.$extra]) {\n                this[_xfa_object.$extra] = Object.create(null);\n              }\n              Object.assign(this[_xfa_object.$extra], {\n                children: children,\n                line: null,\n                attributes: attributes,\n                attempt: 0,\n                numberInLine: 0,\n                availableSpace: {\n                  width: Math.min(this.w || Infinity, availableSpace.width),\n                  height: Math.min(this.h || Infinity, availableSpace.height)\n                },\n                width: 0,\n                height: 0,\n                prevHeight: 0,\n                currentWidth: 0\n              });\n              var root = this[_xfa_object.$getTemplateRoot]();\n              var savedNoLayoutFailure = root[_xfa_object.$extra].noLayoutFailure;\n              var isSplittable = this[_xfa_object.$isSplittable]();\n              if (!isSplittable) {\n                setFirstUnsplittable(this);\n              }\n              if (!(0, _layout.checkDimensions)(this, availableSpace)) {\n                return _utils.HTMLResult.FAILURE;\n              }\n              var filter = new Set([\"area\", \"draw\", \"exclGroup\", \"field\", \"subform\", \"subformSet\"]);\n              if (this.layout.includes(\"row\")) {\n                var columnWidths = this[_xfa_object.$getSubformParent]().columnWidths;\n                if (Array.isArray(columnWidths) && columnWidths.length > 0) {\n                  this[_xfa_object.$extra].columnWidths = columnWidths;\n                  this[_xfa_object.$extra].currentColumn = 0;\n                }\n              }\n              var style = (0, _html_utils.toStyle)(this, \"anchorType\", \"dimensions\", \"position\", \"presence\", \"border\", \"margin\", \"hAlign\");\n              var classNames = [\"xfaSubform\"];\n              var cl = (0, _html_utils.layoutClass)(this);\n              if (cl) {\n                classNames.push(cl);\n              }\n              attributes.style = style;\n              attributes.class = classNames;\n              if (this.name) {\n                attributes.xfaName = this.name;\n              }\n              if (this.overflow) {\n                var overflowExtra = this.overflow[_xfa_object.$getExtra]();\n                if (overflowExtra.addLeader) {\n                  overflowExtra.addLeader = false;\n                  handleOverflow(this, overflowExtra.leader, availableSpace);\n                }\n              }\n              this[_xfa_object.$pushPara]();\n              var isLrTb = this.layout === \"lr-tb\" || this.layout === \"rl-tb\";\n              var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;\n              for (; this[_xfa_object.$extra].attempt < maxRun; this[_xfa_object.$extra].attempt++) {\n                if (isLrTb && this[_xfa_object.$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {\n                  this[_xfa_object.$extra].numberInLine = 0;\n                }\n                var _result = this[_xfa_object.$childrenToHTML]({\n                  filter: filter,\n                  include: true\n                });\n                if (_result.success) {\n                  break;\n                }\n                if (_result.isBreak()) {\n                  this[_xfa_object.$popPara]();\n                  return _result;\n                }\n                if (isLrTb && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine === 0 && !root[_xfa_object.$extra].noLayoutFailure) {\n                  this[_xfa_object.$extra].attempt = maxRun;\n                  break;\n                }\n              }\n              this[_xfa_object.$popPara]();\n              if (!isSplittable) {\n                unsetFirstUnsplittable(this);\n              }\n              root[_xfa_object.$extra].noLayoutFailure = savedNoLayoutFailure;\n              if (this[_xfa_object.$extra].attempt === maxRun) {\n                if (this.overflow) {\n                  this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].overflowNode = this.overflow;\n                }\n                if (!isSplittable) {\n                  delete this[_xfa_object.$extra];\n                }\n                return _utils.HTMLResult.FAILURE;\n              }\n              if (this.overflow) {\n                var _overflowExtra = this.overflow[_xfa_object.$getExtra]();\n                if (_overflowExtra.addTrailer) {\n                  _overflowExtra.addTrailer = false;\n                  handleOverflow(this, _overflowExtra.trailer, availableSpace);\n                }\n              }\n              var marginH = 0;\n              var marginV = 0;\n              if (this.margin) {\n                marginH = this.margin.leftInset + this.margin.rightInset;\n                marginV = this.margin.topInset + this.margin.bottomInset;\n              }\n              var width = Math.max(this[_xfa_object.$extra].width + marginH, this.w || 0);\n              var height = Math.max(this[_xfa_object.$extra].height + marginV, this.h || 0);\n              var bbox = [this.x, this.y, width, height];\n              if (this.w === \"\") {\n                style.width = (0, _html_utils.measureToString)(width);\n              }\n              if (this.h === \"\") {\n                style.height = (0, _html_utils.measureToString)(height);\n              }\n              if ((style.width === \"0px\" || style.height === \"0px\") && children.length === 0) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              var html = {\n                name: \"div\",\n                attributes: attributes,\n                children: children\n              };\n              applyAssist(this, attributes);\n              var result = _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);\n              if (this.breakAfter.children.length >= 1) {\n                var breakAfter = this.breakAfter.children[0];\n                if (handleBreak(breakAfter)) {\n                  this[_xfa_object.$extra].afterBreakAfter = result;\n                  return _utils.HTMLResult.breakNode(breakAfter);\n                }\n              }\n              delete this[_xfa_object.$extra];\n              return result;\n            }\n          }]);\n          return Subform;\n        }(_xfa_object.XFAObject);\n        var SubformSet = /*#__PURE__*/function (_xfa_object$XFAObject77) {\n          _inherits(SubformSet, _xfa_object$XFAObject77);\n          function SubformSet(attributes) {\n            var _this202;\n            _classCallCheck(this, SubformSet);\n            _this202 = _possibleConstructorReturn(this, _getPrototypeOf(SubformSet).call(this, TEMPLATE_NS_ID, \"subformSet\", true));\n            _this202.id = attributes.id || \"\";\n            _this202.name = attributes.name || \"\";\n            _this202.relation = (0, _utils.getStringOption)(attributes.relation, [\"ordered\", \"choice\", \"unordered\"]);\n            _this202.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this202.use = attributes.use || \"\";\n            _this202.usehref = attributes.usehref || \"\";\n            _this202.bookend = null;\n            _this202.break = null;\n            _this202.desc = null;\n            _this202.extras = null;\n            _this202.occur = null;\n            _this202.overflow = null;\n            _this202.breakAfter = new _xfa_object.XFAObjectArray();\n            _this202.breakBefore = new _xfa_object.XFAObjectArray();\n            _this202.subform = new _xfa_object.XFAObjectArray();\n            _this202.subformSet = new _xfa_object.XFAObjectArray();\n            return _this202;\n          }\n          _createClass(SubformSet, [{\n            key: _xfa_object.$getContainedChildren,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n              return _regeneratorRuntime().wrap(function value$(_context70) {\n                while (1) {\n                  switch (_context70.prev = _context70.next) {\n                    case 0:\n                      return _context70.delegateYield(getContainedChildren(this), \"t0\", 1);\n                    case 1:\n                    case \"end\":\n                      return _context70.stop();\n                  }\n                }\n              }, value, this);\n            })\n          }, {\n            key: _xfa_object.$getSubformParent,\n            value: function value() {\n              var parent = this[_xfa_object.$getParent]();\n              while (!(parent instanceof Subform)) {\n                parent = parent[_xfa_object.$getParent]();\n              }\n              return parent;\n            }\n          }, {\n            key: _xfa_object.$isBindable,\n            value: function value() {\n              return true;\n            }\n          }]);\n          return SubformSet;\n        }(_xfa_object.XFAObject);\n        var SubjectDN = /*#__PURE__*/function (_xfa_object$ContentOb8) {\n          _inherits(SubjectDN, _xfa_object$ContentOb8);\n          function SubjectDN(attributes) {\n            var _this203;\n            _classCallCheck(this, SubjectDN);\n            _this203 = _possibleConstructorReturn(this, _getPrototypeOf(SubjectDN).call(this, TEMPLATE_NS_ID, \"subjectDN\"));\n            _this203.delimiter = attributes.delimiter || \",\";\n            _this203.id = attributes.id || \"\";\n            _this203.name = attributes.name || \"\";\n            _this203.use = attributes.use || \"\";\n            _this203.usehref = attributes.usehref || \"\";\n            return _this203;\n          }\n          _createClass(SubjectDN, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = new Map(this[_xfa_object.$content].split(this.delimiter).map(function (kv) {\n                kv = kv.split(\"=\", 2);\n                kv[0] = kv[0].trim();\n                return kv;\n              }));\n            }\n          }]);\n          return SubjectDN;\n        }(_xfa_object.ContentObject);\n        var SubjectDNs = /*#__PURE__*/function (_xfa_object$XFAObject78) {\n          _inherits(SubjectDNs, _xfa_object$XFAObject78);\n          function SubjectDNs(attributes) {\n            var _this204;\n            _classCallCheck(this, SubjectDNs);\n            _this204 = _possibleConstructorReturn(this, _getPrototypeOf(SubjectDNs).call(this, TEMPLATE_NS_ID, \"subjectDNs\", true));\n            _this204.id = attributes.id || \"\";\n            _this204.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this204.use = attributes.use || \"\";\n            _this204.usehref = attributes.usehref || \"\";\n            _this204.subjectDN = new _xfa_object.XFAObjectArray();\n            return _this204;\n          }\n          return SubjectDNs;\n        }(_xfa_object.XFAObject);\n        var Submit = /*#__PURE__*/function (_xfa_object$XFAObject79) {\n          _inherits(Submit, _xfa_object$XFAObject79);\n          function Submit(attributes) {\n            var _this205;\n            _classCallCheck(this, Submit);\n            _this205 = _possibleConstructorReturn(this, _getPrototypeOf(Submit).call(this, TEMPLATE_NS_ID, \"submit\", true));\n            _this205.embedPDF = (0, _utils.getInteger)({\n              data: attributes.embedPDF,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this205.format = (0, _utils.getStringOption)(attributes.format, [\"xdp\", \"formdata\", \"pdf\", \"urlencoded\", \"xfd\", \"xml\"]);\n            _this205.id = attributes.id || \"\";\n            _this205.target = attributes.target || \"\";\n            _this205.textEncoding = (0, _utils.getKeyword)({\n              data: attributes.textEncoding ? attributes.textEncoding.toLowerCase() : \"\",\n              defaultValue: \"\",\n              validate: function validate(k) {\n                return [\"utf-8\", \"big-five\", \"fontspecific\", \"gbk\", \"gb-18030\", \"gb-2312\", \"ksc-5601\", \"none\", \"shift-jis\", \"ucs-2\", \"utf-16\"].includes(k) || k.match(/iso-8859-\\d{2}/);\n              }\n            });\n            _this205.use = attributes.use || \"\";\n            _this205.usehref = attributes.usehref || \"\";\n            _this205.xdpContent = attributes.xdpContent || \"\";\n            _this205.encrypt = null;\n            _this205.encryptData = new _xfa_object.XFAObjectArray();\n            _this205.signData = new _xfa_object.XFAObjectArray();\n            return _this205;\n          }\n          return Submit;\n        }(_xfa_object.XFAObject);\n        var Template = /*#__PURE__*/function (_xfa_object$XFAObject80) {\n          _inherits(Template, _xfa_object$XFAObject80);\n          function Template(attributes) {\n            var _this206;\n            _classCallCheck(this, Template);\n            _this206 = _possibleConstructorReturn(this, _getPrototypeOf(Template).call(this, TEMPLATE_NS_ID, \"template\", true));\n            _this206.baseProfile = (0, _utils.getStringOption)(attributes.baseProfile, [\"full\", \"interactiveForms\"]);\n            _this206.extras = null;\n            _this206.subform = new _xfa_object.XFAObjectArray();\n            return _this206;\n          }\n          _createClass(Template, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              if (this.subform.children.length === 0) {\n                (0, _util.warn)(\"XFA - No subforms in template node.\");\n              }\n              if (this.subform.children.length >= 2) {\n                (0, _util.warn)(\"XFA - Several subforms in template node: please file a bug.\");\n              }\n              this[_xfa_object.$tabIndex] = DEFAULT_TAB_INDEX;\n            }\n          }, {\n            key: _xfa_object.$isSplittable,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$searchNode,\n            value: function value(expr, container) {\n              if (expr.startsWith(\"#\")) {\n                return [this[_xfa_object.$ids].get(expr.slice(1))];\n              }\n              return (0, _som.searchNode)(this, container, expr, true, true);\n            }\n          }, {\n            key: _xfa_object.$toPages,\n            value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n              var _this207 = this;\n              var root, pageAreas, mainHtml, pageArea, breakBefore, breakBeforeTarget, target, pageAreaParent, targetPageArea, leader, trailer, hasSomething, hasSomethingCounter, startIndex, _loop7, _ret2;\n              return _regeneratorRuntime().wrap(function value$(_context72) {\n                while (1) {\n                  switch (_context72.prev = _context72.next) {\n                    case 0:\n                      if (this.subform.children.length) {\n                        _context72.next = 2;\n                        break;\n                      }\n                      return _context72.abrupt(\"return\", _utils.HTMLResult.success({\n                        name: \"div\",\n                        children: []\n                      }));\n                    case 2:\n                      this[_xfa_object.$extra] = {\n                        overflowNode: null,\n                        firstUnsplittable: null,\n                        currentContentArea: null,\n                        currentPageArea: null,\n                        noLayoutFailure: false,\n                        pageNumber: 1,\n                        pagePosition: \"first\",\n                        oddOrEven: \"odd\",\n                        blankOrNotBlank: \"nonBlank\",\n                        paraStack: []\n                      };\n                      root = this.subform.children[0];\n                      root.pageSet[_xfa_object.$cleanPage]();\n                      pageAreas = root.pageSet.pageArea.children;\n                      mainHtml = {\n                        name: \"div\",\n                        children: []\n                      };\n                      pageArea = null;\n                      breakBefore = null;\n                      breakBeforeTarget = null;\n                      if (root.breakBefore.children.length >= 1) {\n                        breakBefore = root.breakBefore.children[0];\n                        breakBeforeTarget = breakBefore.target;\n                      } else if (root.subform.children.length >= 1 && root.subform.children[0].breakBefore.children.length >= 1) {\n                        breakBefore = root.subform.children[0].breakBefore.children[0];\n                        breakBeforeTarget = breakBefore.target;\n                      } else if (root.break && root.break.beforeTarget) {\n                        breakBefore = root.break;\n                        breakBeforeTarget = breakBefore.beforeTarget;\n                      } else if (root.subform.children.length >= 1 && root.subform.children[0].break && root.subform.children[0].break.beforeTarget) {\n                        breakBefore = root.subform.children[0].break;\n                        breakBeforeTarget = breakBefore.beforeTarget;\n                      }\n                      if (breakBefore) {\n                        target = this[_xfa_object.$searchNode](breakBeforeTarget, breakBefore[_xfa_object.$getParent]());\n                        if (target instanceof PageArea) {\n                          pageArea = target;\n                          breakBefore[_xfa_object.$extra] = {};\n                        }\n                      }\n                      if (!pageArea) {\n                        pageArea = pageAreas[0];\n                      }\n                      pageArea[_xfa_object.$extra] = {\n                        numberOfUse: 1\n                      };\n                      pageAreaParent = pageArea[_xfa_object.$getParent]();\n                      pageAreaParent[_xfa_object.$extra] = {\n                        numberOfUse: 1,\n                        pageIndex: pageAreaParent.pageArea.children.indexOf(pageArea),\n                        pageSetIndex: 0\n                      };\n                      leader = null;\n                      trailer = null;\n                      hasSomething = true;\n                      hasSomethingCounter = 0;\n                      startIndex = 0;\n                      _loop7 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop7() {\n                        var page, contentAreas, htmlContentAreas, flush, i, ii, contentArea, space, html, node, _node3, overflowExtra, _target, currentIndex, index;\n                        return _regeneratorRuntime().wrap(function _loop7$(_context71) {\n                          while (1) {\n                            switch (_context71.prev = _context71.next) {\n                              case 0:\n                                if (hasSomething) {\n                                  _context71.next = 7;\n                                  break;\n                                }\n                                mainHtml.children.pop();\n                                if (!(++hasSomethingCounter === MAX_EMPTY_PAGES)) {\n                                  _context71.next = 5;\n                                  break;\n                                }\n                                (0, _util.warn)(\"XFA - Something goes wrong: please file a bug.\");\n                                return _context71.abrupt(\"return\", {\n                                  v: mainHtml\n                                });\n                              case 5:\n                                _context71.next = 8;\n                                break;\n                              case 7:\n                                hasSomethingCounter = 0;\n                              case 8:\n                                targetPageArea = null;\n                                _this207[_xfa_object.$extra].currentPageArea = pageArea;\n                                page = pageArea[_xfa_object.$toHTML]().html;\n                                mainHtml.children.push(page);\n                                if (leader) {\n                                  _this207[_xfa_object.$extra].noLayoutFailure = true;\n                                  page.children.push(leader[_xfa_object.$toHTML](pageArea[_xfa_object.$extra].space).html);\n                                  leader = null;\n                                }\n                                if (trailer) {\n                                  _this207[_xfa_object.$extra].noLayoutFailure = true;\n                                  page.children.push(trailer[_xfa_object.$toHTML](pageArea[_xfa_object.$extra].space).html);\n                                  trailer = null;\n                                }\n                                contentAreas = pageArea.contentArea.children;\n                                htmlContentAreas = page.children.filter(function (node) {\n                                  return node.attributes.class.includes(\"xfaContentarea\");\n                                });\n                                hasSomething = false;\n                                _this207[_xfa_object.$extra].firstUnsplittable = null;\n                                _this207[_xfa_object.$extra].noLayoutFailure = false;\n                                flush = function flush(index) {\n                                  var html = root[_xfa_object.$flushHTML]();\n                                  if (html) {\n                                    hasSomething = hasSomething || html.children && html.children.length !== 0;\n                                    htmlContentAreas[index].children.push(html);\n                                  }\n                                };\n                                i = startIndex, ii = contentAreas.length;\n                              case 21:\n                                if (!(i < ii)) {\n                                  _context71.next = 56;\n                                  break;\n                                }\n                                contentArea = _this207[_xfa_object.$extra].currentContentArea = contentAreas[i];\n                                space = {\n                                  width: contentArea.w,\n                                  height: contentArea.h\n                                };\n                                startIndex = 0;\n                                if (leader) {\n                                  htmlContentAreas[i].children.push(leader[_xfa_object.$toHTML](space).html);\n                                  leader = null;\n                                }\n                                if (trailer) {\n                                  htmlContentAreas[i].children.push(trailer[_xfa_object.$toHTML](space).html);\n                                  trailer = null;\n                                }\n                                html = root[_xfa_object.$toHTML](space);\n                                if (!html.success) {\n                                  _context71.next = 31;\n                                  break;\n                                }\n                                if (html.html) {\n                                  hasSomething = hasSomething || html.html.children && html.html.children.length !== 0;\n                                  htmlContentAreas[i].children.push(html.html);\n                                } else if (!hasSomething && mainHtml.children.length > 1) {\n                                  mainHtml.children.pop();\n                                }\n                                return _context71.abrupt(\"return\", {\n                                  v: mainHtml\n                                });\n                              case 31:\n                                if (!html.isBreak()) {\n                                  _context71.next = 40;\n                                  break;\n                                }\n                                node = html.breakNode;\n                                flush(i);\n                                if (!(node.targetType === \"auto\")) {\n                                  _context71.next = 36;\n                                  break;\n                                }\n                                return _context71.abrupt(\"continue\", 53);\n                              case 36:\n                                if (node.leader) {\n                                  leader = _this207[_xfa_object.$searchNode](node.leader, node[_xfa_object.$getParent]());\n                                  leader = leader ? leader[0] : null;\n                                }\n                                if (node.trailer) {\n                                  trailer = _this207[_xfa_object.$searchNode](node.trailer, node[_xfa_object.$getParent]());\n                                  trailer = trailer ? trailer[0] : null;\n                                }\n                                if (node.targetType === \"pageArea\") {\n                                  targetPageArea = node[_xfa_object.$extra].target;\n                                  i = Infinity;\n                                } else if (!node[_xfa_object.$extra].target) {\n                                  i = node[_xfa_object.$extra].index;\n                                } else {\n                                  targetPageArea = node[_xfa_object.$extra].target;\n                                  startIndex = node[_xfa_object.$extra].index + 1;\n                                  i = Infinity;\n                                }\n                                return _context71.abrupt(\"continue\", 53);\n                              case 40:\n                                if (!_this207[_xfa_object.$extra].overflowNode) {\n                                  _context71.next = 52;\n                                  break;\n                                }\n                                _node3 = _this207[_xfa_object.$extra].overflowNode;\n                                _this207[_xfa_object.$extra].overflowNode = null;\n                                overflowExtra = _node3[_xfa_object.$getExtra]();\n                                _target = overflowExtra.target;\n                                overflowExtra.addLeader = overflowExtra.leader !== null;\n                                overflowExtra.addTrailer = overflowExtra.trailer !== null;\n                                flush(i);\n                                currentIndex = i;\n                                i = Infinity;\n                                if (_target instanceof PageArea) {\n                                  targetPageArea = _target;\n                                } else if (_target instanceof ContentArea) {\n                                  index = contentAreas.indexOf(_target);\n                                  if (index !== -1) {\n                                    if (index > currentIndex) {\n                                      i = index - 1;\n                                    } else {\n                                      startIndex = index;\n                                    }\n                                  } else {\n                                    targetPageArea = _target[_xfa_object.$getParent]();\n                                    startIndex = targetPageArea.contentArea.children.indexOf(_target);\n                                  }\n                                }\n                                return _context71.abrupt(\"continue\", 53);\n                              case 52:\n                                flush(i);\n                              case 53:\n                                i++;\n                                _context71.next = 21;\n                                break;\n                              case 56:\n                                _this207[_xfa_object.$extra].pageNumber += 1;\n                                if (targetPageArea) {\n                                  if (targetPageArea[_xfa_object.$isUsable]()) {\n                                    targetPageArea[_xfa_object.$extra].numberOfUse += 1;\n                                  } else {\n                                    targetPageArea = null;\n                                  }\n                                }\n                                pageArea = targetPageArea || pageArea[_xfa_object.$getNextPage]();\n                                _context71.next = 61;\n                                return null;\n                              case 61:\n                              case \"end\":\n                                return _context71.stop();\n                            }\n                          }\n                        }, _loop7);\n                      });\n                    case 22:\n                      if (!true) {\n                        _context72.next = 29;\n                        break;\n                      }\n                      return _context72.delegateYield(_loop7(), \"t0\", 24);\n                    case 24:\n                      _ret2 = _context72.t0;\n                      if (!(typeof _ret2 === \"object\")) {\n                        _context72.next = 27;\n                        break;\n                      }\n                      return _context72.abrupt(\"return\", _ret2.v);\n                    case 27:\n                      _context72.next = 22;\n                      break;\n                    case 29:\n                    case \"end\":\n                      return _context72.stop();\n                  }\n                }\n              }, value, this);\n            })\n          }]);\n          return Template;\n        }(_xfa_object.XFAObject);\n        exports.Template = Template;\n        var Text = /*#__PURE__*/function (_xfa_object$ContentOb9) {\n          _inherits(Text, _xfa_object$ContentOb9);\n          function Text(attributes) {\n            var _this208;\n            _classCallCheck(this, Text);\n            _this208 = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this, TEMPLATE_NS_ID, \"text\"));\n            _this208.id = attributes.id || \"\";\n            _this208.maxChars = (0, _utils.getInteger)({\n              data: attributes.maxChars,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x >= 0;\n              }\n            });\n            _this208.name = attributes.name || \"\";\n            _this208.rid = attributes.rid || \"\";\n            _this208.use = attributes.use || \"\";\n            _this208.usehref = attributes.usehref || \"\";\n            return _this208;\n          }\n          _createClass(Text, [{\n            key: _xfa_object.$acceptWhitespace,\n            value: function value() {\n              return true;\n            }\n          }, {\n            key: _xfa_object.$onChild,\n            value: function value(child) {\n              if (child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {\n                this[_xfa_object.$content] = child;\n                return true;\n              }\n              (0, _util.warn)(\"XFA - Invalid content in Text: \".concat(child[_xfa_object.$nodeName], \".\"));\n              return false;\n            }\n          }, {\n            key: _xfa_object.$onText,\n            value: function value(str) {\n              if (this[_xfa_object.$content] instanceof _xfa_object.XFAObject) {\n                return;\n              }\n              _get(_getPrototypeOf(Text.prototype), _xfa_object.$onText, this).call(this, str);\n            }\n          }, {\n            key: _xfa_object.$finalize,\n            value: function value() {\n              if (typeof this[_xfa_object.$content] === \"string\") {\n                this[_xfa_object.$content] = this[_xfa_object.$content].replace(/\\r\\n/g, \"\\n\");\n              }\n            }\n          }, {\n            key: _xfa_object.$getExtra,\n            value: function value() {\n              if (typeof this[_xfa_object.$content] === \"string\") {\n                return this[_xfa_object.$content].split(/[\\u2029\\u2028\\n]/).reduce(function (acc, line) {\n                  if (line) {\n                    acc.push(line);\n                  }\n                  return acc;\n                }, []).join(\"\\n\");\n              }\n              return this[_xfa_object.$content][_xfa_object.$text]();\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              if (typeof this[_xfa_object.$content] === \"string\") {\n                var html = valueToHtml(this[_xfa_object.$content]).html;\n                if (this[_xfa_object.$content].includes(\"\\u2029\")) {\n                  html.name = \"div\";\n                  html.children = [];\n                  this[_xfa_object.$content].split(\"\\u2029\").map(function (para) {\n                    return para.split(/[\\u2028\\n]/).reduce(function (acc, line) {\n                      acc.push({\n                        name: \"span\",\n                        value: line\n                      }, {\n                        name: \"br\"\n                      });\n                      return acc;\n                    }, []);\n                  }).forEach(function (lines) {\n                    html.children.push({\n                      name: \"p\",\n                      children: lines\n                    });\n                  });\n                } else if (/[\\u2028\\n]/.test(this[_xfa_object.$content])) {\n                  html.name = \"div\";\n                  html.children = [];\n                  this[_xfa_object.$content].split(/[\\u2028\\n]/).forEach(function (line) {\n                    html.children.push({\n                      name: \"span\",\n                      value: line\n                    }, {\n                      name: \"br\"\n                    });\n                  });\n                }\n                return _utils.HTMLResult.success(html);\n              }\n              return this[_xfa_object.$content][_xfa_object.$toHTML](availableSpace);\n            }\n          }]);\n          return Text;\n        }(_xfa_object.ContentObject);\n        exports.Text = Text;\n        var TextEdit = /*#__PURE__*/function (_xfa_object$XFAObject81) {\n          _inherits(TextEdit, _xfa_object$XFAObject81);\n          function TextEdit(attributes) {\n            var _this209;\n            _classCallCheck(this, TextEdit);\n            _this209 = _possibleConstructorReturn(this, _getPrototypeOf(TextEdit).call(this, TEMPLATE_NS_ID, \"textEdit\", true));\n            _this209.allowRichText = (0, _utils.getInteger)({\n              data: attributes.allowRichText,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this209.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, [\"auto\", \"off\", \"on\"]);\n            _this209.id = attributes.id || \"\";\n            _this209.multiLine = (0, _utils.getInteger)({\n              data: attributes.multiLine,\n              defaultValue: \"\",\n              validate: function validate(x) {\n                return x === 0 || x === 1;\n              }\n            });\n            _this209.use = attributes.use || \"\";\n            _this209.usehref = attributes.usehref || \"\";\n            _this209.vScrollPolicy = (0, _utils.getStringOption)(attributes.vScrollPolicy, [\"auto\", \"off\", \"on\"]);\n            _this209.border = null;\n            _this209.comb = null;\n            _this209.extras = null;\n            _this209.margin = null;\n            return _this209;\n          }\n          _createClass(TextEdit, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var style = (0, _html_utils.toStyle)(this, \"border\", \"font\", \"margin\");\n              var html;\n              var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();\n              if (this.multiLine === \"\") {\n                this.multiLine = field instanceof Draw ? 1 : 0;\n              }\n              if (this.multiLine === 1) {\n                html = {\n                  name: \"textarea\",\n                  attributes: {\n                    dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],\n                    fieldId: field[_xfa_object.$uid],\n                    class: [\"xfaTextfield\"],\n                    style: style,\n                    \"aria-label\": ariaLabel(field),\n                    \"aria-required\": false\n                  }\n                };\n              } else {\n                html = {\n                  name: \"input\",\n                  attributes: {\n                    type: \"text\",\n                    dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],\n                    fieldId: field[_xfa_object.$uid],\n                    class: [\"xfaTextfield\"],\n                    style: style,\n                    \"aria-label\": ariaLabel(field),\n                    \"aria-required\": false\n                  }\n                };\n              }\n              if (isRequired(field)) {\n                html.attributes[\"aria-required\"] = true;\n                html.attributes.required = true;\n              }\n              return _utils.HTMLResult.success({\n                name: \"label\",\n                attributes: {\n                  class: [\"xfaLabel\"]\n                },\n                children: [html]\n              });\n            }\n          }]);\n          return TextEdit;\n        }(_xfa_object.XFAObject);\n        var Time = /*#__PURE__*/function (_xfa_object$StringObj11) {\n          _inherits(Time, _xfa_object$StringObj11);\n          function Time(attributes) {\n            var _this210;\n            _classCallCheck(this, Time);\n            _this210 = _possibleConstructorReturn(this, _getPrototypeOf(Time).call(this, TEMPLATE_NS_ID, \"time\"));\n            _this210.id = attributes.id || \"\";\n            _this210.name = attributes.name || \"\";\n            _this210.use = attributes.use || \"\";\n            _this210.usehref = attributes.usehref || \"\";\n            return _this210;\n          }\n          _createClass(Time, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var date = this[_xfa_object.$content].trim();\n              this[_xfa_object.$content] = date ? new Date(date) : null;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : \"\");\n            }\n          }]);\n          return Time;\n        }(_xfa_object.StringObject);\n        var TimeStamp = /*#__PURE__*/function (_xfa_object$XFAObject82) {\n          _inherits(TimeStamp, _xfa_object$XFAObject82);\n          function TimeStamp(attributes) {\n            var _this211;\n            _classCallCheck(this, TimeStamp);\n            _this211 = _possibleConstructorReturn(this, _getPrototypeOf(TimeStamp).call(this, TEMPLATE_NS_ID, \"timeStamp\"));\n            _this211.id = attributes.id || \"\";\n            _this211.server = attributes.server || \"\";\n            _this211.type = (0, _utils.getStringOption)(attributes.type, [\"optional\", \"required\"]);\n            _this211.use = attributes.use || \"\";\n            _this211.usehref = attributes.usehref || \"\";\n            return _this211;\n          }\n          return TimeStamp;\n        }(_xfa_object.XFAObject);\n        var ToolTip = /*#__PURE__*/function (_xfa_object$StringObj12) {\n          _inherits(ToolTip, _xfa_object$StringObj12);\n          function ToolTip(attributes) {\n            var _this212;\n            _classCallCheck(this, ToolTip);\n            _this212 = _possibleConstructorReturn(this, _getPrototypeOf(ToolTip).call(this, TEMPLATE_NS_ID, \"toolTip\"));\n            _this212.id = attributes.id || \"\";\n            _this212.rid = attributes.rid || \"\";\n            _this212.use = attributes.use || \"\";\n            _this212.usehref = attributes.usehref || \"\";\n            return _this212;\n          }\n          return ToolTip;\n        }(_xfa_object.StringObject);\n        var Traversal = /*#__PURE__*/function (_xfa_object$XFAObject83) {\n          _inherits(Traversal, _xfa_object$XFAObject83);\n          function Traversal(attributes) {\n            var _this213;\n            _classCallCheck(this, Traversal);\n            _this213 = _possibleConstructorReturn(this, _getPrototypeOf(Traversal).call(this, TEMPLATE_NS_ID, \"traversal\", true));\n            _this213.id = attributes.id || \"\";\n            _this213.use = attributes.use || \"\";\n            _this213.usehref = attributes.usehref || \"\";\n            _this213.extras = null;\n            _this213.traverse = new _xfa_object.XFAObjectArray();\n            return _this213;\n          }\n          return Traversal;\n        }(_xfa_object.XFAObject);\n        var Traverse = /*#__PURE__*/function (_xfa_object$XFAObject84) {\n          _inherits(Traverse, _xfa_object$XFAObject84);\n          function Traverse(attributes) {\n            var _this214;\n            _classCallCheck(this, Traverse);\n            _this214 = _possibleConstructorReturn(this, _getPrototypeOf(Traverse).call(this, TEMPLATE_NS_ID, \"traverse\", true));\n            _this214.id = attributes.id || \"\";\n            _this214.operation = (0, _utils.getStringOption)(attributes.operation, [\"next\", \"back\", \"down\", \"first\", \"left\", \"right\", \"up\"]);\n            _this214.ref = attributes.ref || \"\";\n            _this214.use = attributes.use || \"\";\n            _this214.usehref = attributes.usehref || \"\";\n            _this214.extras = null;\n            _this214.script = null;\n            return _this214;\n          }\n          _createClass(Traverse, [{\n            key: _xfa_object.$isTransparent,\n            value: function value() {\n              return false;\n            }\n          }, {\n            key: \"name\",\n            get: function get() {\n              return this.operation;\n            }\n          }]);\n          return Traverse;\n        }(_xfa_object.XFAObject);\n        var Ui = /*#__PURE__*/function (_xfa_object$XFAObject85) {\n          _inherits(Ui, _xfa_object$XFAObject85);\n          function Ui(attributes) {\n            var _this215;\n            _classCallCheck(this, Ui);\n            _this215 = _possibleConstructorReturn(this, _getPrototypeOf(Ui).call(this, TEMPLATE_NS_ID, \"ui\", true));\n            _this215.id = attributes.id || \"\";\n            _this215.use = attributes.use || \"\";\n            _this215.usehref = attributes.usehref || \"\";\n            _this215.extras = null;\n            _this215.picture = null;\n            _this215.barcode = null;\n            _this215.button = null;\n            _this215.checkButton = null;\n            _this215.choiceList = null;\n            _this215.dateTimeEdit = null;\n            _this215.defaultUi = null;\n            _this215.imageEdit = null;\n            _this215.numericEdit = null;\n            _this215.passwordEdit = null;\n            _this215.signature = null;\n            _this215.textEdit = null;\n            return _this215;\n          }\n          _createClass(Ui, [{\n            key: _xfa_object.$getExtra,\n            value: function value() {\n              if (this[_xfa_object.$extra] === undefined) {\n                var _iterator161 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                  _step161;\n                try {\n                  for (_iterator161.s(); !(_step161 = _iterator161.n()).done;) {\n                    var name = _step161.value;\n                    if (name === \"extras\" || name === \"picture\") {\n                      continue;\n                    }\n                    var obj = this[name];\n                    if (!(obj instanceof _xfa_object.XFAObject)) {\n                      continue;\n                    }\n                    this[_xfa_object.$extra] = obj;\n                    return obj;\n                  }\n                } catch (err) {\n                  _iterator161.e(err);\n                } finally {\n                  _iterator161.f();\n                }\n                this[_xfa_object.$extra] = null;\n              }\n              return this[_xfa_object.$extra];\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var obj = this[_xfa_object.$getExtra]();\n              if (obj) {\n                return obj[_xfa_object.$toHTML](availableSpace);\n              }\n              return _utils.HTMLResult.EMPTY;\n            }\n          }]);\n          return Ui;\n        }(_xfa_object.XFAObject);\n        var Validate = /*#__PURE__*/function (_xfa_object$XFAObject86) {\n          _inherits(Validate, _xfa_object$XFAObject86);\n          function Validate(attributes) {\n            var _this216;\n            _classCallCheck(this, Validate);\n            _this216 = _possibleConstructorReturn(this, _getPrototypeOf(Validate).call(this, TEMPLATE_NS_ID, \"validate\", true));\n            _this216.formatTest = (0, _utils.getStringOption)(attributes.formatTest, [\"warning\", \"disabled\", \"error\"]);\n            _this216.id = attributes.id || \"\";\n            _this216.nullTest = (0, _utils.getStringOption)(attributes.nullTest, [\"disabled\", \"error\", \"warning\"]);\n            _this216.scriptTest = (0, _utils.getStringOption)(attributes.scriptTest, [\"error\", \"disabled\", \"warning\"]);\n            _this216.use = attributes.use || \"\";\n            _this216.usehref = attributes.usehref || \"\";\n            _this216.extras = null;\n            _this216.message = null;\n            _this216.picture = null;\n            _this216.script = null;\n            return _this216;\n          }\n          return Validate;\n        }(_xfa_object.XFAObject);\n        var Value = /*#__PURE__*/function (_xfa_object$XFAObject87) {\n          _inherits(Value, _xfa_object$XFAObject87);\n          function Value(attributes) {\n            var _this217;\n            _classCallCheck(this, Value);\n            _this217 = _possibleConstructorReturn(this, _getPrototypeOf(Value).call(this, TEMPLATE_NS_ID, \"value\", true));\n            _this217.id = attributes.id || \"\";\n            _this217.override = (0, _utils.getInteger)({\n              data: attributes.override,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this217.relevant = (0, _utils.getRelevant)(attributes.relevant);\n            _this217.use = attributes.use || \"\";\n            _this217.usehref = attributes.usehref || \"\";\n            _this217.arc = null;\n            _this217.boolean = null;\n            _this217.date = null;\n            _this217.dateTime = null;\n            _this217.decimal = null;\n            _this217.exData = null;\n            _this217.float = null;\n            _this217.image = null;\n            _this217.integer = null;\n            _this217.line = null;\n            _this217.rectangle = null;\n            _this217.text = null;\n            _this217.time = null;\n            return _this217;\n          }\n          _createClass(Value, [{\n            key: _xfa_object.$setValue,\n            value: function (_value18) {\n              function value(_x130) {\n                return _value18.apply(this, arguments);\n              }\n              value.toString = function () {\n                return _value18.toString();\n              };\n              return value;\n            }(function (value) {\n              var parent = this[_xfa_object.$getParent]();\n              if (parent instanceof Field) {\n                if (parent.ui && parent.ui.imageEdit) {\n                  if (!this.image) {\n                    this.image = new Image({});\n                    this[_xfa_object.$appendChild](this.image);\n                  }\n                  this.image[_xfa_object.$content] = value[_xfa_object.$content];\n                  return;\n                }\n              }\n              var valueName = value[_xfa_object.$nodeName];\n              if (this[valueName] !== null) {\n                this[valueName][_xfa_object.$content] = value[_xfa_object.$content];\n                return;\n              }\n              var _iterator162 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step162;\n              try {\n                for (_iterator162.s(); !(_step162 = _iterator162.n()).done;) {\n                  var name = _step162.value;\n                  var obj = this[name];\n                  if (obj instanceof _xfa_object.XFAObject) {\n                    this[name] = null;\n                    this[_xfa_object.$removeChild](obj);\n                  }\n                }\n              } catch (err) {\n                _iterator162.e(err);\n              } finally {\n                _iterator162.f();\n              }\n              this[value[_xfa_object.$nodeName]] = value;\n              this[_xfa_object.$appendChild](value);\n            })\n          }, {\n            key: _xfa_object.$text,\n            value: function value() {\n              if (this.exData) {\n                if (typeof this.exData[_xfa_object.$content] === \"string\") {\n                  return this.exData[_xfa_object.$content].trim();\n                }\n                return this.exData[_xfa_object.$content][_xfa_object.$text]().trim();\n              }\n              var _iterator163 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step163;\n              try {\n                for (_iterator163.s(); !(_step163 = _iterator163.n()).done;) {\n                  var name = _step163.value;\n                  if (name === \"image\") {\n                    continue;\n                  }\n                  var obj = this[name];\n                  if (obj instanceof _xfa_object.XFAObject) {\n                    return (obj[_xfa_object.$content] || \"\").toString().trim();\n                  }\n                }\n              } catch (err) {\n                _iterator163.e(err);\n              } finally {\n                _iterator163.f();\n              }\n              return null;\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var _iterator164 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step164;\n              try {\n                for (_iterator164.s(); !(_step164 = _iterator164.n()).done;) {\n                  var name = _step164.value;\n                  var obj = this[name];\n                  if (!(obj instanceof _xfa_object.XFAObject)) {\n                    continue;\n                  }\n                  return obj[_xfa_object.$toHTML](availableSpace);\n                }\n              } catch (err) {\n                _iterator164.e(err);\n              } finally {\n                _iterator164.f();\n              }\n              return _utils.HTMLResult.EMPTY;\n            }\n          }]);\n          return Value;\n        }(_xfa_object.XFAObject);\n        exports.Value = Value;\n        var Variables = /*#__PURE__*/function (_xfa_object$XFAObject88) {\n          _inherits(Variables, _xfa_object$XFAObject88);\n          function Variables(attributes) {\n            var _this218;\n            _classCallCheck(this, Variables);\n            _this218 = _possibleConstructorReturn(this, _getPrototypeOf(Variables).call(this, TEMPLATE_NS_ID, \"variables\", true));\n            _this218.id = attributes.id || \"\";\n            _this218.use = attributes.use || \"\";\n            _this218.usehref = attributes.usehref || \"\";\n            _this218.boolean = new _xfa_object.XFAObjectArray();\n            _this218.date = new _xfa_object.XFAObjectArray();\n            _this218.dateTime = new _xfa_object.XFAObjectArray();\n            _this218.decimal = new _xfa_object.XFAObjectArray();\n            _this218.exData = new _xfa_object.XFAObjectArray();\n            _this218.float = new _xfa_object.XFAObjectArray();\n            _this218.image = new _xfa_object.XFAObjectArray();\n            _this218.integer = new _xfa_object.XFAObjectArray();\n            _this218.manifest = new _xfa_object.XFAObjectArray();\n            _this218.script = new _xfa_object.XFAObjectArray();\n            _this218.text = new _xfa_object.XFAObjectArray();\n            _this218.time = new _xfa_object.XFAObjectArray();\n            return _this218;\n          }\n          _createClass(Variables, [{\n            key: _xfa_object.$isTransparent,\n            value: function value() {\n              return true;\n            }\n          }]);\n          return Variables;\n        }(_xfa_object.XFAObject);\n        var TemplateNamespace = /*#__PURE__*/function () {\n          function TemplateNamespace() {\n            _classCallCheck(this, TemplateNamespace);\n          }\n          _createClass(TemplateNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (TemplateNamespace.hasOwnProperty(name)) {\n                var node = TemplateNamespace[name](attributes);\n                node[_xfa_object.$setSetAttributes](attributes);\n                return node;\n              }\n              return undefined;\n            }\n          }, {\n            key: \"appearanceFilter\",\n            value: function appearanceFilter(attrs) {\n              return new AppearanceFilter(attrs);\n            }\n          }, {\n            key: \"arc\",\n            value: function arc(attrs) {\n              return new Arc(attrs);\n            }\n          }, {\n            key: \"area\",\n            value: function area(attrs) {\n              return new Area(attrs);\n            }\n          }, {\n            key: \"assist\",\n            value: function assist(attrs) {\n              return new Assist(attrs);\n            }\n          }, {\n            key: \"barcode\",\n            value: function barcode(attrs) {\n              return new Barcode(attrs);\n            }\n          }, {\n            key: \"bind\",\n            value: function bind(attrs) {\n              return new Bind(attrs);\n            }\n          }, {\n            key: \"bindItems\",\n            value: function bindItems(attrs) {\n              return new BindItems(attrs);\n            }\n          }, {\n            key: \"bookend\",\n            value: function bookend(attrs) {\n              return new Bookend(attrs);\n            }\n          }, {\n            key: \"boolean\",\n            value: function boolean(attrs) {\n              return new BooleanElement(attrs);\n            }\n          }, {\n            key: \"border\",\n            value: function border(attrs) {\n              return new Border(attrs);\n            }\n          }, {\n            key: \"break\",\n            value: function _break(attrs) {\n              return new Break(attrs);\n            }\n          }, {\n            key: \"breakAfter\",\n            value: function breakAfter(attrs) {\n              return new BreakAfter(attrs);\n            }\n          }, {\n            key: \"breakBefore\",\n            value: function breakBefore(attrs) {\n              return new BreakBefore(attrs);\n            }\n          }, {\n            key: \"button\",\n            value: function button(attrs) {\n              return new Button(attrs);\n            }\n          }, {\n            key: \"calculate\",\n            value: function calculate(attrs) {\n              return new Calculate(attrs);\n            }\n          }, {\n            key: \"caption\",\n            value: function caption(attrs) {\n              return new Caption(attrs);\n            }\n          }, {\n            key: \"certificate\",\n            value: function certificate(attrs) {\n              return new Certificate(attrs);\n            }\n          }, {\n            key: \"certificates\",\n            value: function certificates(attrs) {\n              return new Certificates(attrs);\n            }\n          }, {\n            key: \"checkButton\",\n            value: function checkButton(attrs) {\n              return new CheckButton(attrs);\n            }\n          }, {\n            key: \"choiceList\",\n            value: function choiceList(attrs) {\n              return new ChoiceList(attrs);\n            }\n          }, {\n            key: \"color\",\n            value: function color(attrs) {\n              return new Color(attrs);\n            }\n          }, {\n            key: \"comb\",\n            value: function comb(attrs) {\n              return new Comb(attrs);\n            }\n          }, {\n            key: \"connect\",\n            value: function connect(attrs) {\n              return new Connect(attrs);\n            }\n          }, {\n            key: \"contentArea\",\n            value: function contentArea(attrs) {\n              return new ContentArea(attrs);\n            }\n          }, {\n            key: \"corner\",\n            value: function corner(attrs) {\n              return new Corner(attrs);\n            }\n          }, {\n            key: \"date\",\n            value: function date(attrs) {\n              return new DateElement(attrs);\n            }\n          }, {\n            key: \"dateTime\",\n            value: function dateTime(attrs) {\n              return new DateTime(attrs);\n            }\n          }, {\n            key: \"dateTimeEdit\",\n            value: function dateTimeEdit(attrs) {\n              return new DateTimeEdit(attrs);\n            }\n          }, {\n            key: \"decimal\",\n            value: function decimal(attrs) {\n              return new Decimal(attrs);\n            }\n          }, {\n            key: \"defaultUi\",\n            value: function defaultUi(attrs) {\n              return new DefaultUi(attrs);\n            }\n          }, {\n            key: \"desc\",\n            value: function desc(attrs) {\n              return new Desc(attrs);\n            }\n          }, {\n            key: \"digestMethod\",\n            value: function digestMethod(attrs) {\n              return new DigestMethod(attrs);\n            }\n          }, {\n            key: \"digestMethods\",\n            value: function digestMethods(attrs) {\n              return new DigestMethods(attrs);\n            }\n          }, {\n            key: \"draw\",\n            value: function draw(attrs) {\n              return new Draw(attrs);\n            }\n          }, {\n            key: \"edge\",\n            value: function edge(attrs) {\n              return new Edge(attrs);\n            }\n          }, {\n            key: \"encoding\",\n            value: function encoding(attrs) {\n              return new Encoding(attrs);\n            }\n          }, {\n            key: \"encodings\",\n            value: function encodings(attrs) {\n              return new Encodings(attrs);\n            }\n          }, {\n            key: \"encrypt\",\n            value: function encrypt(attrs) {\n              return new Encrypt(attrs);\n            }\n          }, {\n            key: \"encryptData\",\n            value: function encryptData(attrs) {\n              return new EncryptData(attrs);\n            }\n          }, {\n            key: \"encryption\",\n            value: function encryption(attrs) {\n              return new Encryption(attrs);\n            }\n          }, {\n            key: \"encryptionMethod\",\n            value: function encryptionMethod(attrs) {\n              return new EncryptionMethod(attrs);\n            }\n          }, {\n            key: \"encryptionMethods\",\n            value: function encryptionMethods(attrs) {\n              return new EncryptionMethods(attrs);\n            }\n          }, {\n            key: \"event\",\n            value: function event(attrs) {\n              return new Event(attrs);\n            }\n          }, {\n            key: \"exData\",\n            value: function exData(attrs) {\n              return new ExData(attrs);\n            }\n          }, {\n            key: \"exObject\",\n            value: function exObject(attrs) {\n              return new ExObject(attrs);\n            }\n          }, {\n            key: \"exclGroup\",\n            value: function exclGroup(attrs) {\n              return new ExclGroup(attrs);\n            }\n          }, {\n            key: \"execute\",\n            value: function execute(attrs) {\n              return new Execute(attrs);\n            }\n          }, {\n            key: \"extras\",\n            value: function extras(attrs) {\n              return new Extras(attrs);\n            }\n          }, {\n            key: \"field\",\n            value: function field(attrs) {\n              return new Field(attrs);\n            }\n          }, {\n            key: \"fill\",\n            value: function fill(attrs) {\n              return new Fill(attrs);\n            }\n          }, {\n            key: \"filter\",\n            value: function filter(attrs) {\n              return new Filter(attrs);\n            }\n          }, {\n            key: \"float\",\n            value: function float(attrs) {\n              return new Float(attrs);\n            }\n          }, {\n            key: \"font\",\n            value: function font(attrs) {\n              return new Font(attrs);\n            }\n          }, {\n            key: \"format\",\n            value: function format(attrs) {\n              return new Format(attrs);\n            }\n          }, {\n            key: \"handler\",\n            value: function handler(attrs) {\n              return new Handler(attrs);\n            }\n          }, {\n            key: \"hyphenation\",\n            value: function hyphenation(attrs) {\n              return new Hyphenation(attrs);\n            }\n          }, {\n            key: \"image\",\n            value: function image(attrs) {\n              return new Image(attrs);\n            }\n          }, {\n            key: \"imageEdit\",\n            value: function imageEdit(attrs) {\n              return new ImageEdit(attrs);\n            }\n          }, {\n            key: \"integer\",\n            value: function integer(attrs) {\n              return new Integer(attrs);\n            }\n          }, {\n            key: \"issuers\",\n            value: function issuers(attrs) {\n              return new Issuers(attrs);\n            }\n          }, {\n            key: \"items\",\n            value: function items(attrs) {\n              return new Items(attrs);\n            }\n          }, {\n            key: \"keep\",\n            value: function keep(attrs) {\n              return new Keep(attrs);\n            }\n          }, {\n            key: \"keyUsage\",\n            value: function keyUsage(attrs) {\n              return new KeyUsage(attrs);\n            }\n          }, {\n            key: \"line\",\n            value: function line(attrs) {\n              return new Line(attrs);\n            }\n          }, {\n            key: \"linear\",\n            value: function linear(attrs) {\n              return new Linear(attrs);\n            }\n          }, {\n            key: \"lockDocument\",\n            value: function lockDocument(attrs) {\n              return new LockDocument(attrs);\n            }\n          }, {\n            key: \"manifest\",\n            value: function manifest(attrs) {\n              return new Manifest(attrs);\n            }\n          }, {\n            key: \"margin\",\n            value: function margin(attrs) {\n              return new Margin(attrs);\n            }\n          }, {\n            key: \"mdp\",\n            value: function mdp(attrs) {\n              return new Mdp(attrs);\n            }\n          }, {\n            key: \"medium\",\n            value: function medium(attrs) {\n              return new Medium(attrs);\n            }\n          }, {\n            key: \"message\",\n            value: function message(attrs) {\n              return new Message(attrs);\n            }\n          }, {\n            key: \"numericEdit\",\n            value: function numericEdit(attrs) {\n              return new NumericEdit(attrs);\n            }\n          }, {\n            key: \"occur\",\n            value: function occur(attrs) {\n              return new Occur(attrs);\n            }\n          }, {\n            key: \"oid\",\n            value: function oid(attrs) {\n              return new Oid(attrs);\n            }\n          }, {\n            key: \"oids\",\n            value: function oids(attrs) {\n              return new Oids(attrs);\n            }\n          }, {\n            key: \"overflow\",\n            value: function overflow(attrs) {\n              return new Overflow(attrs);\n            }\n          }, {\n            key: \"pageArea\",\n            value: function pageArea(attrs) {\n              return new PageArea(attrs);\n            }\n          }, {\n            key: \"pageSet\",\n            value: function pageSet(attrs) {\n              return new PageSet(attrs);\n            }\n          }, {\n            key: \"para\",\n            value: function para(attrs) {\n              return new Para(attrs);\n            }\n          }, {\n            key: \"passwordEdit\",\n            value: function passwordEdit(attrs) {\n              return new PasswordEdit(attrs);\n            }\n          }, {\n            key: \"pattern\",\n            value: function pattern(attrs) {\n              return new Pattern(attrs);\n            }\n          }, {\n            key: \"picture\",\n            value: function picture(attrs) {\n              return new Picture(attrs);\n            }\n          }, {\n            key: \"proto\",\n            value: function proto(attrs) {\n              return new Proto(attrs);\n            }\n          }, {\n            key: \"radial\",\n            value: function radial(attrs) {\n              return new Radial(attrs);\n            }\n          }, {\n            key: \"reason\",\n            value: function reason(attrs) {\n              return new Reason(attrs);\n            }\n          }, {\n            key: \"reasons\",\n            value: function reasons(attrs) {\n              return new Reasons(attrs);\n            }\n          }, {\n            key: \"rectangle\",\n            value: function rectangle(attrs) {\n              return new Rectangle(attrs);\n            }\n          }, {\n            key: \"ref\",\n            value: function ref(attrs) {\n              return new RefElement(attrs);\n            }\n          }, {\n            key: \"script\",\n            value: function script(attrs) {\n              return new Script(attrs);\n            }\n          }, {\n            key: \"setProperty\",\n            value: function setProperty(attrs) {\n              return new SetProperty(attrs);\n            }\n          }, {\n            key: \"signData\",\n            value: function signData(attrs) {\n              return new SignData(attrs);\n            }\n          }, {\n            key: \"signature\",\n            value: function signature(attrs) {\n              return new Signature(attrs);\n            }\n          }, {\n            key: \"signing\",\n            value: function signing(attrs) {\n              return new Signing(attrs);\n            }\n          }, {\n            key: \"solid\",\n            value: function solid(attrs) {\n              return new Solid(attrs);\n            }\n          }, {\n            key: \"speak\",\n            value: function speak(attrs) {\n              return new Speak(attrs);\n            }\n          }, {\n            key: \"stipple\",\n            value: function stipple(attrs) {\n              return new Stipple(attrs);\n            }\n          }, {\n            key: \"subform\",\n            value: function subform(attrs) {\n              return new Subform(attrs);\n            }\n          }, {\n            key: \"subformSet\",\n            value: function subformSet(attrs) {\n              return new SubformSet(attrs);\n            }\n          }, {\n            key: \"subjectDN\",\n            value: function subjectDN(attrs) {\n              return new SubjectDN(attrs);\n            }\n          }, {\n            key: \"subjectDNs\",\n            value: function subjectDNs(attrs) {\n              return new SubjectDNs(attrs);\n            }\n          }, {\n            key: \"submit\",\n            value: function submit(attrs) {\n              return new Submit(attrs);\n            }\n          }, {\n            key: \"template\",\n            value: function template(attrs) {\n              return new Template(attrs);\n            }\n          }, {\n            key: \"text\",\n            value: function text(attrs) {\n              return new Text(attrs);\n            }\n          }, {\n            key: \"textEdit\",\n            value: function textEdit(attrs) {\n              return new TextEdit(attrs);\n            }\n          }, {\n            key: \"time\",\n            value: function time(attrs) {\n              return new Time(attrs);\n            }\n          }, {\n            key: \"timeStamp\",\n            value: function timeStamp(attrs) {\n              return new TimeStamp(attrs);\n            }\n          }, {\n            key: \"toolTip\",\n            value: function toolTip(attrs) {\n              return new ToolTip(attrs);\n            }\n          }, {\n            key: \"traversal\",\n            value: function traversal(attrs) {\n              return new Traversal(attrs);\n            }\n          }, {\n            key: \"traverse\",\n            value: function traverse(attrs) {\n              return new Traverse(attrs);\n            }\n          }, {\n            key: \"ui\",\n            value: function ui(attrs) {\n              return new Ui(attrs);\n            }\n          }, {\n            key: \"validate\",\n            value: function validate(attrs) {\n              return new Validate(attrs);\n            }\n          }, {\n            key: \"value\",\n            value: function value(attrs) {\n              return new Value(attrs);\n            }\n          }, {\n            key: \"variables\",\n            value: function variables(attrs) {\n              return new Variables(attrs);\n            }\n          }]);\n          return TemplateNamespace;\n        }();\n        exports.TemplateNamespace = TemplateNamespace;\n\n        /***/\n      }, /* 83 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.addHTML = addHTML;\n        exports.checkDimensions = checkDimensions;\n        exports.flushHTML = flushHTML;\n        exports.getAvailableSpace = getAvailableSpace;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _html_utils = __w_pdfjs_require__(84);\n        function createLine(node, children) {\n          return {\n            name: \"div\",\n            attributes: {\n              class: [node.layout === \"lr-tb\" ? \"xfaLr\" : \"xfaRl\"]\n            },\n            children: children\n          };\n        }\n        function flushHTML(node) {\n          if (!node[_xfa_object.$extra]) {\n            return null;\n          }\n          var attributes = node[_xfa_object.$extra].attributes;\n          var html = {\n            name: \"div\",\n            attributes: attributes,\n            children: node[_xfa_object.$extra].children\n          };\n          if (node[_xfa_object.$extra].failingNode) {\n            var htmlFromFailing = node[_xfa_object.$extra].failingNode[_xfa_object.$flushHTML]();\n            if (htmlFromFailing) {\n              if (node.layout.endsWith(\"-tb\")) {\n                html.children.push(createLine(node, [htmlFromFailing]));\n              } else {\n                html.children.push(htmlFromFailing);\n              }\n            }\n          }\n          if (html.children.length === 0) {\n            return null;\n          }\n          return html;\n        }\n        function addHTML(node, html, bbox) {\n          var extra = node[_xfa_object.$extra];\n          var availableSpace = extra.availableSpace;\n          var _bbox3 = _slicedToArray(bbox, 4),\n            x = _bbox3[0],\n            y = _bbox3[1],\n            w = _bbox3[2],\n            h = _bbox3[3];\n          switch (node.layout) {\n            case \"position\":\n              {\n                extra.width = Math.max(extra.width, x + w);\n                extra.height = Math.max(extra.height, y + h);\n                extra.children.push(html);\n                break;\n              }\n            case \"lr-tb\":\n            case \"rl-tb\":\n              if (!extra.line || extra.attempt === 1) {\n                extra.line = createLine(node, []);\n                extra.children.push(extra.line);\n                extra.numberInLine = 0;\n              }\n              extra.numberInLine += 1;\n              extra.line.children.push(html);\n              if (extra.attempt === 0) {\n                extra.currentWidth += w;\n                extra.height = Math.max(extra.height, extra.prevHeight + h);\n              } else {\n                extra.currentWidth = w;\n                extra.prevHeight = extra.height;\n                extra.height += h;\n                extra.attempt = 0;\n              }\n              extra.width = Math.max(extra.width, extra.currentWidth);\n              break;\n            case \"rl-row\":\n            case \"row\":\n              {\n                extra.children.push(html);\n                extra.width += w;\n                extra.height = Math.max(extra.height, h);\n                var height = (0, _html_utils.measureToString)(extra.height);\n                var _iterator165 = _createForOfIteratorHelper(extra.children),\n                  _step165;\n                try {\n                  for (_iterator165.s(); !(_step165 = _iterator165.n()).done;) {\n                    var child = _step165.value;\n                    child.attributes.style.height = height;\n                  }\n                } catch (err) {\n                  _iterator165.e(err);\n                } finally {\n                  _iterator165.f();\n                }\n                break;\n              }\n            case \"table\":\n              {\n                extra.width = Math.min(availableSpace.width, Math.max(extra.width, w));\n                extra.height += h;\n                extra.children.push(html);\n                break;\n              }\n            case \"tb\":\n              {\n                extra.width = Math.min(availableSpace.width, Math.max(extra.width, w));\n                extra.height += h;\n                extra.children.push(html);\n                break;\n              }\n          }\n        }\n        function getAvailableSpace(node) {\n          var availableSpace = node[_xfa_object.$extra].availableSpace;\n          var marginV = node.margin ? node.margin.topInset + node.margin.bottomInset : 0;\n          var marginH = node.margin ? node.margin.leftInset + node.margin.rightInset : 0;\n          switch (node.layout) {\n            case \"lr-tb\":\n            case \"rl-tb\":\n              if (node[_xfa_object.$extra].attempt === 0) {\n                return {\n                  width: availableSpace.width - marginH - node[_xfa_object.$extra].currentWidth,\n                  height: availableSpace.height - marginV - node[_xfa_object.$extra].prevHeight\n                };\n              }\n              return {\n                width: availableSpace.width - marginH,\n                height: availableSpace.height - marginV - node[_xfa_object.$extra].height\n              };\n            case \"rl-row\":\n            case \"row\":\n              var width = node[_xfa_object.$extra].columnWidths.slice(node[_xfa_object.$extra].currentColumn).reduce(function (a, x) {\n                return a + x;\n              });\n              return {\n                width: width,\n                height: availableSpace.height - marginH\n              };\n            case \"table\":\n            case \"tb\":\n              return {\n                width: availableSpace.width - marginH,\n                height: availableSpace.height - marginV - node[_xfa_object.$extra].height\n              };\n            case \"position\":\n            default:\n              return availableSpace;\n          }\n        }\n        function getTransformedBBox(node) {\n          var w = node.w === \"\" ? NaN : node.w;\n          var h = node.h === \"\" ? NaN : node.h;\n          var centerX = 0,\n            centerY = 0;\n          switch (node.anchorType || \"\") {\n            case \"bottomCenter\":\n              centerX = w / 2;\n              centerY = h;\n              break;\n            case \"bottomLeft\":\n              centerX = 0;\n              centerY = h;\n              break;\n            case \"bottomRight\":\n              centerX = w;\n              centerY = h;\n              break;\n            case \"middleCenter\":\n              centerX = w / 2;\n              centerY = h / 2;\n              break;\n            case \"middleLeft\":\n              centerX = 0;\n              centerY = h / 2;\n              break;\n            case \"middleRight\":\n              centerX = w;\n              centerY = h / 2;\n              break;\n            case \"topCenter\":\n              centerX = w / 2;\n              centerY = 0;\n              break;\n            case \"topRight\":\n              centerX = w;\n              centerY = 0;\n              break;\n          }\n          var x, y;\n          switch (node.rotate || 0) {\n            case 0:\n              x = -centerX;\n              y = -centerY;\n              break;\n            case 90:\n              x = -centerY;\n              y = centerX;\n              var _ref94 = [h, -w];\n              w = _ref94[0];\n              h = _ref94[1];\n              break;\n            case 180:\n              x = centerX;\n              y = centerY;\n              var _ref95 = [-w, -h];\n              w = _ref95[0];\n              h = _ref95[1];\n              break;\n            case 270:\n              x = centerY;\n              y = -centerX;\n              var _ref96 = [-h, w];\n              w = _ref96[0];\n              h = _ref96[1];\n              break;\n          }\n          return [node.x + x + Math.min(0, w), node.y + y + Math.min(0, h), Math.abs(w), Math.abs(h)];\n        }\n        function checkDimensions(node, space) {\n          if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].firstUnsplittable === null) {\n            return true;\n          }\n          if (node.w === 0 || node.h === 0) {\n            return true;\n          }\n          var ERROR = 2;\n          var parent = node[_xfa_object.$getSubformParent]();\n          var attempt = parent[_xfa_object.$extra] && parent[_xfa_object.$extra].attempt || 0;\n          var _getTransformedBBox = getTransformedBBox(node),\n            _getTransformedBBox2 = _slicedToArray(_getTransformedBBox, 4),\n            y = _getTransformedBBox2[1],\n            w = _getTransformedBBox2[2],\n            h = _getTransformedBBox2[3];\n          switch (parent.layout) {\n            case \"lr-tb\":\n            case \"rl-tb\":\n              if (attempt === 0) {\n                if (!node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                  if (node.h !== \"\" && Math.round(h - space.height) > ERROR) {\n                    return false;\n                  }\n                  if (node.w !== \"\") {\n                    if (Math.round(w - space.width) <= ERROR) {\n                      return true;\n                    }\n                    if (parent[_xfa_object.$extra].numberInLine === 0) {\n                      return space.height > ERROR;\n                    }\n                    return false;\n                  }\n                  return space.width > ERROR;\n                }\n                if (node.w !== \"\") {\n                  return Math.round(w - space.width) <= ERROR;\n                }\n                return space.width > ERROR;\n              }\n              if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                return true;\n              }\n              if (node.h !== \"\" && Math.round(h - space.height) > ERROR) {\n                return false;\n              }\n              if (node.w === \"\" || Math.round(w - space.width) <= ERROR) {\n                return space.height > ERROR;\n              }\n              if (parent[_xfa_object.$isThereMoreWidth]()) {\n                return false;\n              }\n              return space.height > ERROR;\n            case \"table\":\n            case \"tb\":\n              if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                return true;\n              }\n              if (node.h !== \"\" && !node[_xfa_object.$isSplittable]()) {\n                return Math.round(h - space.height) <= ERROR;\n              }\n              if (node.w === \"\" || Math.round(w - space.width) <= ERROR) {\n                return space.height > ERROR;\n              }\n              if (parent[_xfa_object.$isThereMoreWidth]()) {\n                return false;\n              }\n              return space.height > ERROR;\n            case \"position\":\n              if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                return true;\n              }\n              if (node.h === \"\" || Math.round(h + y - space.height) <= ERROR) {\n                return true;\n              }\n              var area = node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].currentContentArea;\n              return h + y > area.h;\n            case \"rl-row\":\n            case \"row\":\n              if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {\n                return true;\n              }\n              if (node.h !== \"\") {\n                return Math.round(h - space.height) <= ERROR;\n              }\n              return true;\n            default:\n              return true;\n          }\n        }\n\n        /***/\n      }, /* 84 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.computeBbox = computeBbox;\n        exports.createWrapper = createWrapper;\n        exports.fixDimensions = fixDimensions;\n        exports.fixTextIndent = fixTextIndent;\n        exports.fixURL = fixURL;\n        exports.isPrintOnly = isPrintOnly;\n        exports.layoutClass = layoutClass;\n        exports.layoutNode = layoutNode;\n        exports.measureToString = measureToString;\n        exports.setAccess = setAccess;\n        exports.setFontFamily = setFontFamily;\n        exports.setMinMaxDimensions = setMinMaxDimensions;\n        exports.setPara = setPara;\n        exports.toStyle = toStyle;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _util = __w_pdfjs_require__(2);\n        var _utils = __w_pdfjs_require__(78);\n        var _fonts = __w_pdfjs_require__(85);\n        var _text = __w_pdfjs_require__(86);\n        function measureToString(m) {\n          if (typeof m === \"string\") {\n            return \"0px\";\n          }\n          return Number.isInteger(m) ? \"\".concat(m, \"px\") : \"\".concat(m.toFixed(2), \"px\");\n        }\n        var converters = {\n          anchorType: function anchorType(node, style) {\n            var parent = node[_xfa_object.$getSubformParent]();\n            if (!parent || parent.layout && parent.layout !== \"position\") {\n              return;\n            }\n            if (!(\"transform\" in style)) {\n              style.transform = \"\";\n            }\n            switch (node.anchorType) {\n              case \"bottomCenter\":\n                style.transform += \"translate(-50%, -100%)\";\n                break;\n              case \"bottomLeft\":\n                style.transform += \"translate(0,-100%)\";\n                break;\n              case \"bottomRight\":\n                style.transform += \"translate(-100%,-100%)\";\n                break;\n              case \"middleCenter\":\n                style.transform += \"translate(-50%,-50%)\";\n                break;\n              case \"middleLeft\":\n                style.transform += \"translate(0,-50%)\";\n                break;\n              case \"middleRight\":\n                style.transform += \"translate(-100%,-50%)\";\n                break;\n              case \"topCenter\":\n                style.transform += \"translate(-50%,0)\";\n                break;\n              case \"topRight\":\n                style.transform += \"translate(-100%,0)\";\n                break;\n            }\n          },\n          dimensions: function dimensions(node, style) {\n            var parent = node[_xfa_object.$getSubformParent]();\n            var width = node.w;\n            var height = node.h;\n            if (parent.layout && parent.layout.includes(\"row\")) {\n              var extra = parent[_xfa_object.$extra];\n              var colSpan = node.colSpan;\n              var w;\n              if (colSpan === -1) {\n                w = extra.columnWidths.slice(extra.currentColumn).reduce(function (a, x) {\n                  return a + x;\n                }, 0);\n                extra.currentColumn = 0;\n              } else {\n                w = extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan).reduce(function (a, x) {\n                  return a + x;\n                }, 0);\n                extra.currentColumn = (extra.currentColumn + node.colSpan) % extra.columnWidths.length;\n              }\n              if (!isNaN(w)) {\n                width = node.w = w;\n              }\n            }\n            if (width !== \"\") {\n              style.width = measureToString(width);\n            } else {\n              style.width = \"auto\";\n            }\n            if (height !== \"\") {\n              style.height = measureToString(height);\n            } else {\n              style.height = \"auto\";\n            }\n          },\n          position: function position(node, style) {\n            var parent = node[_xfa_object.$getSubformParent]();\n            if (parent && parent.layout && parent.layout !== \"position\") {\n              return;\n            }\n            style.position = \"absolute\";\n            style.left = measureToString(node.x);\n            style.top = measureToString(node.y);\n          },\n          rotate: function rotate(node, style) {\n            if (node.rotate) {\n              if (!(\"transform\" in style)) {\n                style.transform = \"\";\n              }\n              style.transform += \"rotate(-\".concat(node.rotate, \"deg)\");\n              style.transformOrigin = \"top left\";\n            }\n          },\n          presence: function presence(node, style) {\n            switch (node.presence) {\n              case \"invisible\":\n                style.visibility = \"hidden\";\n                break;\n              case \"hidden\":\n              case \"inactive\":\n                style.display = \"none\";\n                break;\n            }\n          },\n          hAlign: function hAlign(node, style) {\n            if (node[_xfa_object.$nodeName] === \"para\") {\n              switch (node.hAlign) {\n                case \"justifyAll\":\n                  style.textAlign = \"justify-all\";\n                  break;\n                case \"radix\":\n                  style.textAlign = \"left\";\n                  break;\n                default:\n                  style.textAlign = node.hAlign;\n              }\n            } else {\n              switch (node.hAlign) {\n                case \"left\":\n                  style.alignSelf = \"start\";\n                  break;\n                case \"center\":\n                  style.alignSelf = \"center\";\n                  break;\n                case \"right\":\n                  style.alignSelf = \"end\";\n                  break;\n              }\n            }\n          },\n          margin: function margin(node, style) {\n            if (node.margin) {\n              style.margin = node.margin[_xfa_object.$toStyle]().margin;\n            }\n          }\n        };\n        function setMinMaxDimensions(node, style) {\n          var parent = node[_xfa_object.$getSubformParent]();\n          if (parent.layout === \"position\") {\n            if (node.minW > 0) {\n              style.minWidth = measureToString(node.minW);\n            }\n            if (node.maxW > 0) {\n              style.maxWidth = measureToString(node.maxW);\n            }\n            if (node.minH > 0) {\n              style.minHeight = measureToString(node.minH);\n            }\n            if (node.maxH > 0) {\n              style.maxHeight = measureToString(node.maxH);\n            }\n          }\n        }\n        function layoutText(text, xfaFont, margin, lineHeight, fontFinder, width) {\n          var measure = new _text.TextMeasure(xfaFont, margin, lineHeight, fontFinder);\n          if (typeof text === \"string\") {\n            measure.addString(text);\n          } else {\n            text[_xfa_object.$pushGlyphs](measure);\n          }\n          return measure.compute(width);\n        }\n        function layoutNode(node, availableSpace) {\n          var height = null;\n          var width = null;\n          var isBroken = false;\n          if ((!node.w || !node.h) && node.value) {\n            var marginH = 0;\n            var marginV = 0;\n            if (node.margin) {\n              marginH = node.margin.leftInset + node.margin.rightInset;\n              marginV = node.margin.topInset + node.margin.bottomInset;\n            }\n            var lineHeight = null;\n            var margin = null;\n            if (node.para) {\n              margin = Object.create(null);\n              lineHeight = node.para.lineHeight === \"\" ? null : node.para.lineHeight;\n              margin.top = node.para.spaceAbove === \"\" ? 0 : node.para.spaceAbove;\n              margin.bottom = node.para.spaceBelow === \"\" ? 0 : node.para.spaceBelow;\n              margin.left = node.para.marginLeft === \"\" ? 0 : node.para.marginLeft;\n              margin.right = node.para.marginRight === \"\" ? 0 : node.para.marginRight;\n            }\n            var font = node.font;\n            if (!font) {\n              var root = node[_xfa_object.$getTemplateRoot]();\n              var parent = node[_xfa_object.$getParent]();\n              while (parent && parent !== root) {\n                if (parent.font) {\n                  font = parent.font;\n                  break;\n                }\n                parent = parent[_xfa_object.$getParent]();\n              }\n            }\n            var maxWidth = (node.w || availableSpace.width) - marginH;\n            var fontFinder = node[_xfa_object.$globalData].fontFinder;\n            if (node.value.exData && node.value.exData[_xfa_object.$content] && node.value.exData.contentType === \"text/html\") {\n              var res = layoutText(node.value.exData[_xfa_object.$content], font, margin, lineHeight, fontFinder, maxWidth);\n              width = res.width;\n              height = res.height;\n              isBroken = res.isBroken;\n            } else {\n              var text = node.value[_xfa_object.$text]();\n              if (text) {\n                var _res2 = layoutText(text, font, margin, lineHeight, fontFinder, maxWidth);\n                width = _res2.width;\n                height = _res2.height;\n                isBroken = _res2.isBroken;\n              }\n            }\n            if (width !== null && !node.w) {\n              width += marginH;\n            }\n            if (height !== null && !node.h) {\n              height += marginV;\n            }\n          }\n          return {\n            w: width,\n            h: height,\n            isBroken: isBroken\n          };\n        }\n        function computeBbox(node, html, availableSpace) {\n          var bbox;\n          if (node.w !== \"\" && node.h !== \"\") {\n            bbox = [node.x, node.y, node.w, node.h];\n          } else {\n            if (!availableSpace) {\n              return null;\n            }\n            var width = node.w;\n            if (width === \"\") {\n              if (node.maxW === 0) {\n                var parent = node[_xfa_object.$getSubformParent]();\n                if (parent.layout === \"position\" && parent.w !== \"\") {\n                  width = 0;\n                } else {\n                  width = node.minW;\n                }\n              } else {\n                width = Math.min(node.maxW, availableSpace.width);\n              }\n              html.attributes.style.width = measureToString(width);\n            }\n            var height = node.h;\n            if (height === \"\") {\n              if (node.maxH === 0) {\n                var _parent3 = node[_xfa_object.$getSubformParent]();\n                if (_parent3.layout === \"position\" && _parent3.h !== \"\") {\n                  height = 0;\n                } else {\n                  height = node.minH;\n                }\n              } else {\n                height = Math.min(node.maxH, availableSpace.height);\n              }\n              html.attributes.style.height = measureToString(height);\n            }\n            bbox = [node.x, node.y, width, height];\n          }\n          return bbox;\n        }\n        function fixDimensions(node) {\n          var parent = node[_xfa_object.$getSubformParent]();\n          if (parent.layout && parent.layout.includes(\"row\")) {\n            var extra = parent[_xfa_object.$extra];\n            var colSpan = node.colSpan;\n            var width;\n            if (colSpan === -1) {\n              width = extra.columnWidths.slice(extra.currentColumn).reduce(function (a, w) {\n                return a + w;\n              }, 0);\n            } else {\n              width = extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan).reduce(function (a, w) {\n                return a + w;\n              }, 0);\n            }\n            if (!isNaN(width)) {\n              node.w = width;\n            }\n          }\n          if (parent.layout && parent.layout !== \"position\") {\n            node.x = node.y = 0;\n          }\n          if (node.layout === \"table\") {\n            if (node.w === \"\" && Array.isArray(node.columnWidths)) {\n              node.w = node.columnWidths.reduce(function (a, x) {\n                return a + x;\n              }, 0);\n            }\n          }\n        }\n        function layoutClass(node) {\n          switch (node.layout) {\n            case \"position\":\n              return \"xfaPosition\";\n            case \"lr-tb\":\n              return \"xfaLrTb\";\n            case \"rl-row\":\n              return \"xfaRlRow\";\n            case \"rl-tb\":\n              return \"xfaRlTb\";\n            case \"row\":\n              return \"xfaRow\";\n            case \"table\":\n              return \"xfaTable\";\n            case \"tb\":\n              return \"xfaTb\";\n            default:\n              return \"xfaPosition\";\n          }\n        }\n        function toStyle(node) {\n          var style = Object.create(null);\n          for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n            names[_key3 - 1] = arguments[_key3];\n          }\n          for (var _i62 = 0, _names = names; _i62 < _names.length; _i62++) {\n            var name = _names[_i62];\n            var _value19 = node[name];\n            if (_value19 === null) {\n              continue;\n            }\n            if (converters.hasOwnProperty(name)) {\n              converters[name](node, style);\n              continue;\n            }\n            if (_value19 instanceof _xfa_object.XFAObject) {\n              var newStyle = _value19[_xfa_object.$toStyle]();\n              if (newStyle) {\n                Object.assign(style, newStyle);\n              } else {\n                (0, _util.warn)(\"(DEBUG) - XFA - style for \".concat(name, \" not implemented yet\"));\n              }\n            }\n          }\n          return style;\n        }\n        function createWrapper(node, html) {\n          var attributes = html.attributes;\n          var style = attributes.style;\n          var wrapper = {\n            name: \"div\",\n            attributes: {\n              class: [\"xfaWrapper\"],\n              style: Object.create(null)\n            },\n            children: []\n          };\n          attributes.class.push(\"xfaWrapped\");\n          if (node.border) {\n            var _node$border$_xfa_obj = node.border[_xfa_object.$extra],\n              widths = _node$border$_xfa_obj.widths,\n              insets = _node$border$_xfa_obj.insets;\n            var width, height;\n            var top = insets[0];\n            var left = insets[3];\n            var insetsH = insets[0] + insets[2];\n            var insetsW = insets[1] + insets[3];\n            switch (node.border.hand) {\n              case \"even\":\n                top -= widths[0] / 2;\n                left -= widths[3] / 2;\n                width = \"calc(100% + \".concat((widths[1] + widths[3]) / 2 - insetsW, \"px)\");\n                height = \"calc(100% + \".concat((widths[0] + widths[2]) / 2 - insetsH, \"px)\");\n                break;\n              case \"left\":\n                top -= widths[0];\n                left -= widths[3];\n                width = \"calc(100% + \".concat(widths[1] + widths[3] - insetsW, \"px)\");\n                height = \"calc(100% + \".concat(widths[0] + widths[2] - insetsH, \"px)\");\n                break;\n              case \"right\":\n                width = insetsW ? \"calc(100% - \".concat(insetsW, \"px)\") : \"100%\";\n                height = insetsH ? \"calc(100% - \".concat(insetsH, \"px)\") : \"100%\";\n                break;\n            }\n            var classNames = [\"xfaBorder\"];\n            if (isPrintOnly(node.border)) {\n              classNames.push(\"xfaPrintOnly\");\n            }\n            var border = {\n              name: \"div\",\n              attributes: {\n                class: classNames,\n                style: {\n                  top: \"\".concat(top, \"px\"),\n                  left: \"\".concat(left, \"px\"),\n                  width: width,\n                  height: height\n                }\n              },\n              children: []\n            };\n            for (var _i63 = 0, _arr4 = [\"border\", \"borderWidth\", \"borderColor\", \"borderRadius\", \"borderStyle\"]; _i63 < _arr4.length; _i63++) {\n              var key = _arr4[_i63];\n              if (style[key] !== undefined) {\n                border.attributes.style[key] = style[key];\n                delete style[key];\n              }\n            }\n            wrapper.children.push(border, html);\n          } else {\n            wrapper.children.push(html);\n          }\n          for (var _i64 = 0, _arr5 = [\"background\", \"backgroundClip\", \"top\", \"left\", \"width\", \"height\", \"minWidth\", \"minHeight\", \"maxWidth\", \"maxHeight\", \"transform\", \"transformOrigin\", \"visibility\"]; _i64 < _arr5.length; _i64++) {\n            var _key4 = _arr5[_i64];\n            if (style[_key4] !== undefined) {\n              wrapper.attributes.style[_key4] = style[_key4];\n              delete style[_key4];\n            }\n          }\n          if (style.position === \"absolute\") {\n            wrapper.attributes.style.position = \"absolute\";\n          } else {\n            wrapper.attributes.style.position = \"relative\";\n          }\n          delete style.position;\n          if (style.alignSelf) {\n            wrapper.attributes.style.alignSelf = style.alignSelf;\n            delete style.alignSelf;\n          }\n          return wrapper;\n        }\n        function fixTextIndent(styles) {\n          var indent = (0, _utils.getMeasurement)(styles.textIndent, \"0px\");\n          if (indent >= 0) {\n            return;\n          }\n          var align = styles.textAlign === \"right\" ? \"right\" : \"left\";\n          var name = \"padding\" + (align === \"left\" ? \"Left\" : \"Right\");\n          var padding = (0, _utils.getMeasurement)(styles[name], \"0px\");\n          styles[name] = \"\".concat(padding - indent, \"px\");\n        }\n        function setAccess(node, classNames) {\n          switch (node.access) {\n            case \"nonInteractive\":\n              classNames.push(\"xfaNonInteractive\");\n              break;\n            case \"readOnly\":\n              classNames.push(\"xfaReadOnly\");\n              break;\n            case \"protected\":\n              classNames.push(\"xfaDisabled\");\n              break;\n          }\n        }\n        function isPrintOnly(node) {\n          return node.relevant.length > 0 && !node.relevant[0].excluded && node.relevant[0].viewname === \"print\";\n        }\n        function getCurrentPara(node) {\n          var stack = node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].paraStack;\n          return stack.length ? stack.at(-1) : null;\n        }\n        function setPara(node, nodeStyle, value) {\n          if (value.attributes.class && value.attributes.class.includes(\"xfaRich\")) {\n            if (nodeStyle) {\n              if (node.h === \"\") {\n                nodeStyle.height = \"auto\";\n              }\n              if (node.w === \"\") {\n                nodeStyle.width = \"auto\";\n              }\n            }\n            var para = getCurrentPara(node);\n            if (para) {\n              var valueStyle = value.attributes.style;\n              valueStyle.display = \"flex\";\n              valueStyle.flexDirection = \"column\";\n              switch (para.vAlign) {\n                case \"top\":\n                  valueStyle.justifyContent = \"start\";\n                  break;\n                case \"bottom\":\n                  valueStyle.justifyContent = \"end\";\n                  break;\n                case \"middle\":\n                  valueStyle.justifyContent = \"center\";\n                  break;\n              }\n              var paraStyle = para[_xfa_object.$toStyle]();\n              for (var _i65 = 0, _Object$entries5 = Object.entries(paraStyle); _i65 < _Object$entries5.length; _i65++) {\n                var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i65], 2),\n                  key = _Object$entries5$_i[0],\n                  val = _Object$entries5$_i[1];\n                if (!(key in valueStyle)) {\n                  valueStyle[key] = val;\n                }\n              }\n            }\n          }\n        }\n        function setFontFamily(xfaFont, node, fontFinder, style) {\n          if (!fontFinder) {\n            delete style.fontFamily;\n            return;\n          }\n          var name = (0, _utils.stripQuotes)(xfaFont.typeface);\n          style.fontFamily = \"\\\"\".concat(name, \"\\\"\");\n          var typeface = fontFinder.find(name);\n          if (typeface) {\n            var fontFamily = typeface.regular.cssFontInfo.fontFamily;\n            if (fontFamily !== name) {\n              style.fontFamily = \"\\\"\".concat(fontFamily, \"\\\"\");\n            }\n            var para = getCurrentPara(node);\n            if (para && para.lineHeight !== \"\") {\n              return;\n            }\n            if (style.lineHeight) {\n              return;\n            }\n            var pdfFont = (0, _fonts.selectFont)(xfaFont, typeface);\n            if (pdfFont) {\n              style.lineHeight = Math.max(1.2, pdfFont.lineHeight);\n            }\n          }\n        }\n        function fixURL(str) {\n          var absoluteUrl = (0, _util.createValidAbsoluteUrl)(str, null, {\n            addDefaultProtocol: true,\n            tryConvertEncoding: true\n          });\n          return absoluteUrl ? absoluteUrl.href : null;\n        }\n\n        /***/\n      }, /* 85 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontFinder = void 0;\n        exports.getMetrics = getMetrics;\n        exports.selectFont = selectFont;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _utils = __w_pdfjs_require__(78);\n        var _util = __w_pdfjs_require__(2);\n        var FontFinder = /*#__PURE__*/function () {\n          function FontFinder(pdfFonts) {\n            _classCallCheck(this, FontFinder);\n            this.fonts = new Map();\n            this.cache = new Map();\n            this.warned = new Set();\n            this.defaultFont = null;\n            this.add(pdfFonts);\n          }\n          _createClass(FontFinder, [{\n            key: \"add\",\n            value: function add(pdfFonts) {\n              var reallyMissingFonts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              var _iterator166 = _createForOfIteratorHelper(pdfFonts),\n                _step166;\n              try {\n                for (_iterator166.s(); !(_step166 = _iterator166.n()).done;) {\n                  var pdfFont = _step166.value;\n                  this.addPdfFont(pdfFont);\n                }\n              } catch (err) {\n                _iterator166.e(err);\n              } finally {\n                _iterator166.f();\n              }\n              var _iterator167 = _createForOfIteratorHelper(this.fonts.values()),\n                _step167;\n              try {\n                for (_iterator167.s(); !(_step167 = _iterator167.n()).done;) {\n                  var _pdfFont = _step167.value;\n                  if (!_pdfFont.regular) {\n                    _pdfFont.regular = _pdfFont.italic || _pdfFont.bold || _pdfFont.bolditalic;\n                  }\n                }\n              } catch (err) {\n                _iterator167.e(err);\n              } finally {\n                _iterator167.f();\n              }\n              if (!reallyMissingFonts || reallyMissingFonts.size === 0) {\n                return;\n              }\n              var myriad = this.fonts.get(\"PdfJS-Fallback-PdfJS-XFA\");\n              var _iterator168 = _createForOfIteratorHelper(reallyMissingFonts),\n                _step168;\n              try {\n                for (_iterator168.s(); !(_step168 = _iterator168.n()).done;) {\n                  var missing = _step168.value;\n                  this.fonts.set(missing, myriad);\n                }\n              } catch (err) {\n                _iterator168.e(err);\n              } finally {\n                _iterator168.f();\n              }\n            }\n          }, {\n            key: \"addPdfFont\",\n            value: function addPdfFont(pdfFont) {\n              var cssFontInfo = pdfFont.cssFontInfo;\n              var name = cssFontInfo.fontFamily;\n              var font = this.fonts.get(name);\n              if (!font) {\n                font = Object.create(null);\n                this.fonts.set(name, font);\n                if (!this.defaultFont) {\n                  this.defaultFont = font;\n                }\n              }\n              var property = \"\";\n              var fontWeight = parseFloat(cssFontInfo.fontWeight);\n              if (parseFloat(cssFontInfo.italicAngle) !== 0) {\n                property = fontWeight >= 700 ? \"bolditalic\" : \"italic\";\n              } else if (fontWeight >= 700) {\n                property = \"bold\";\n              }\n              if (!property) {\n                if (pdfFont.name.includes(\"Bold\") || pdfFont.psName && pdfFont.psName.includes(\"Bold\")) {\n                  property = \"bold\";\n                }\n                if (pdfFont.name.includes(\"Italic\") || pdfFont.name.endsWith(\"It\") || pdfFont.psName && (pdfFont.psName.includes(\"Italic\") || pdfFont.psName.endsWith(\"It\"))) {\n                  property += \"italic\";\n                }\n              }\n              if (!property) {\n                property = \"regular\";\n              }\n              font[property] = pdfFont;\n            }\n          }, {\n            key: \"getDefault\",\n            value: function getDefault() {\n              return this.defaultFont;\n            }\n          }, {\n            key: \"find\",\n            value: function find(fontName) {\n              var mustWarn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n              var font = this.fonts.get(fontName) || this.cache.get(fontName);\n              if (font) {\n                return font;\n              }\n              var pattern = /,|-|_| |bolditalic|bold|italic|regular|it/gi;\n              var name = fontName.replace(pattern, \"\");\n              font = this.fonts.get(name);\n              if (font) {\n                this.cache.set(fontName, font);\n                return font;\n              }\n              name = name.toLowerCase();\n              var maybe = [];\n              var _iterator169 = _createForOfIteratorHelper(this.fonts.entries()),\n                _step169;\n              try {\n                for (_iterator169.s(); !(_step169 = _iterator169.n()).done;) {\n                  var _step169$value = _slicedToArray(_step169.value, 2),\n                    _family = _step169$value[0],\n                    _pdfFont4 = _step169$value[1];\n                  if (_family.replace(pattern, \"\").toLowerCase().startsWith(name)) {\n                    maybe.push(_pdfFont4);\n                  }\n                }\n              } catch (err) {\n                _iterator169.e(err);\n              } finally {\n                _iterator169.f();\n              }\n              if (maybe.length === 0) {\n                var _iterator170 = _createForOfIteratorHelper(this.fonts.entries()),\n                  _step170;\n                try {\n                  for (_iterator170.s(); !(_step170 = _iterator170.n()).done;) {\n                    var _step170$value = _slicedToArray(_step170.value, 2),\n                      pdfFont = _step170$value[1];\n                    if (pdfFont.regular.name && pdfFont.regular.name.replace(pattern, \"\").toLowerCase().startsWith(name)) {\n                      maybe.push(pdfFont);\n                    }\n                  }\n                } catch (err) {\n                  _iterator170.e(err);\n                } finally {\n                  _iterator170.f();\n                }\n              }\n              if (maybe.length === 0) {\n                name = name.replace(/psmt|mt/gi, \"\");\n                var _iterator171 = _createForOfIteratorHelper(this.fonts.entries()),\n                  _step171;\n                try {\n                  for (_iterator171.s(); !(_step171 = _iterator171.n()).done;) {\n                    var _step171$value = _slicedToArray(_step171.value, 2),\n                      family = _step171$value[0],\n                      _pdfFont2 = _step171$value[1];\n                    if (family.replace(pattern, \"\").toLowerCase().startsWith(name)) {\n                      maybe.push(_pdfFont2);\n                    }\n                  }\n                } catch (err) {\n                  _iterator171.e(err);\n                } finally {\n                  _iterator171.f();\n                }\n              }\n              if (maybe.length === 0) {\n                var _iterator172 = _createForOfIteratorHelper(this.fonts.values()),\n                  _step172;\n                try {\n                  for (_iterator172.s(); !(_step172 = _iterator172.n()).done;) {\n                    var _pdfFont3 = _step172.value;\n                    if (_pdfFont3.regular.name && _pdfFont3.regular.name.replace(pattern, \"\").toLowerCase().startsWith(name)) {\n                      maybe.push(_pdfFont3);\n                    }\n                  }\n                } catch (err) {\n                  _iterator172.e(err);\n                } finally {\n                  _iterator172.f();\n                }\n              }\n              if (maybe.length >= 1) {\n                if (maybe.length !== 1 && mustWarn) {\n                  (0, _util.warn)(\"XFA - Too many choices to guess the correct font: \".concat(fontName));\n                }\n                this.cache.set(fontName, maybe[0]);\n                return maybe[0];\n              }\n              if (mustWarn && !this.warned.has(fontName)) {\n                this.warned.add(fontName);\n                (0, _util.warn)(\"XFA - Cannot find the font: \".concat(fontName));\n              }\n              return null;\n            }\n          }]);\n          return FontFinder;\n        }();\n        exports.FontFinder = FontFinder;\n        function selectFont(xfaFont, typeface) {\n          if (xfaFont.posture === \"italic\") {\n            if (xfaFont.weight === \"bold\") {\n              return typeface.bolditalic;\n            }\n            return typeface.italic;\n          } else if (xfaFont.weight === \"bold\") {\n            return typeface.bold;\n          }\n          return typeface.regular;\n        }\n        function getMetrics(xfaFont) {\n          var real = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          var pdfFont = null;\n          if (xfaFont) {\n            var name = (0, _utils.stripQuotes)(xfaFont.typeface);\n            var typeface = xfaFont[_xfa_object.$globalData].fontFinder.find(name);\n            pdfFont = selectFont(xfaFont, typeface);\n          }\n          if (!pdfFont) {\n            return {\n              lineHeight: 12,\n              lineGap: 2,\n              lineNoGap: 10\n            };\n          }\n          var size = xfaFont.size || 10;\n          var lineHeight = pdfFont.lineHeight ? Math.max(real ? 0 : 1.2, pdfFont.lineHeight) : 1.2;\n          var lineGap = pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;\n          return {\n            lineHeight: lineHeight * size,\n            lineGap: lineGap * size,\n            lineNoGap: Math.max(1, lineHeight - lineGap) * size\n          };\n        }\n\n        /***/\n      }, /* 86 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.TextMeasure = void 0;\n        var _fonts = __w_pdfjs_require__(85);\n        var WIDTH_FACTOR = 1.02;\n        var FontInfo = /*#__PURE__*/function () {\n          function FontInfo(xfaFont, margin, lineHeight, fontFinder) {\n            _classCallCheck(this, FontInfo);\n            this.lineHeight = lineHeight;\n            this.paraMargin = margin || {\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0\n            };\n            if (!xfaFont) {\n              var _this$defaultFont = this.defaultFont(fontFinder);\n              var _this$defaultFont2 = _slicedToArray(_this$defaultFont, 2);\n              this.pdfFont = _this$defaultFont2[0];\n              this.xfaFont = _this$defaultFont2[1];\n              return;\n            }\n            this.xfaFont = {\n              typeface: xfaFont.typeface,\n              posture: xfaFont.posture,\n              weight: xfaFont.weight,\n              size: xfaFont.size,\n              letterSpacing: xfaFont.letterSpacing\n            };\n            var typeface = fontFinder.find(xfaFont.typeface);\n            if (!typeface) {\n              var _this$defaultFont3 = this.defaultFont(fontFinder);\n              var _this$defaultFont4 = _slicedToArray(_this$defaultFont3, 2);\n              this.pdfFont = _this$defaultFont4[0];\n              this.xfaFont = _this$defaultFont4[1];\n              return;\n            }\n            this.pdfFont = (0, _fonts.selectFont)(xfaFont, typeface);\n            if (!this.pdfFont) {\n              var _this$defaultFont5 = this.defaultFont(fontFinder);\n              var _this$defaultFont6 = _slicedToArray(_this$defaultFont5, 2);\n              this.pdfFont = _this$defaultFont6[0];\n              this.xfaFont = _this$defaultFont6[1];\n            }\n          }\n          _createClass(FontInfo, [{\n            key: \"defaultFont\",\n            value: function defaultFont(fontFinder) {\n              var font = fontFinder.find(\"Helvetica\", false) || fontFinder.find(\"Myriad Pro\", false) || fontFinder.find(\"Arial\", false) || fontFinder.getDefault();\n              if (font && font.regular) {\n                var pdfFont = font.regular;\n                var info = pdfFont.cssFontInfo;\n                var _xfaFont = {\n                  typeface: info.fontFamily,\n                  posture: \"normal\",\n                  weight: \"normal\",\n                  size: 10,\n                  letterSpacing: 0\n                };\n                return [pdfFont, _xfaFont];\n              }\n              var xfaFont = {\n                typeface: \"Courier\",\n                posture: \"normal\",\n                weight: \"normal\",\n                size: 10,\n                letterSpacing: 0\n              };\n              return [null, xfaFont];\n            }\n          }]);\n          return FontInfo;\n        }();\n        var FontSelector = /*#__PURE__*/function () {\n          function FontSelector(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder) {\n            _classCallCheck(this, FontSelector);\n            this.fontFinder = fontFinder;\n            this.stack = [new FontInfo(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder)];\n          }\n          _createClass(FontSelector, [{\n            key: \"pushData\",\n            value: function pushData(xfaFont, margin, lineHeight) {\n              var lastFont = this.stack.at(-1);\n              for (var _i66 = 0, _arr6 = [\"typeface\", \"posture\", \"weight\", \"size\", \"letterSpacing\"]; _i66 < _arr6.length; _i66++) {\n                var name = _arr6[_i66];\n                if (!xfaFont[name]) {\n                  xfaFont[name] = lastFont.xfaFont[name];\n                }\n              }\n              for (var _i67 = 0, _arr7 = [\"top\", \"bottom\", \"left\", \"right\"]; _i67 < _arr7.length; _i67++) {\n                var _name2 = _arr7[_i67];\n                if (isNaN(margin[_name2])) {\n                  margin[_name2] = lastFont.paraMargin[_name2];\n                }\n              }\n              var fontInfo = new FontInfo(xfaFont, margin, lineHeight || lastFont.lineHeight, this.fontFinder);\n              if (!fontInfo.pdfFont) {\n                fontInfo.pdfFont = lastFont.pdfFont;\n              }\n              this.stack.push(fontInfo);\n            }\n          }, {\n            key: \"popFont\",\n            value: function popFont() {\n              this.stack.pop();\n            }\n          }, {\n            key: \"topFont\",\n            value: function topFont() {\n              return this.stack.at(-1);\n            }\n          }]);\n          return FontSelector;\n        }();\n        var TextMeasure = /*#__PURE__*/function () {\n          function TextMeasure(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts) {\n            _classCallCheck(this, TextMeasure);\n            this.glyphs = [];\n            this.fontSelector = new FontSelector(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts);\n            this.extraHeight = 0;\n          }\n          _createClass(TextMeasure, [{\n            key: \"pushData\",\n            value: function pushData(xfaFont, margin, lineHeight) {\n              this.fontSelector.pushData(xfaFont, margin, lineHeight);\n            }\n          }, {\n            key: \"popFont\",\n            value: function popFont(xfaFont) {\n              return this.fontSelector.popFont();\n            }\n          }, {\n            key: \"addPara\",\n            value: function addPara() {\n              var lastFont = this.fontSelector.topFont();\n              this.extraHeight += lastFont.paraMargin.top + lastFont.paraMargin.bottom;\n            }\n          }, {\n            key: \"addString\",\n            value: function addString(str) {\n              if (!str) {\n                return;\n              }\n              var lastFont = this.fontSelector.topFont();\n              var fontSize = lastFont.xfaFont.size;\n              if (lastFont.pdfFont) {\n                var letterSpacing = lastFont.xfaFont.letterSpacing;\n                var pdfFont = lastFont.pdfFont;\n                var fontLineHeight = pdfFont.lineHeight || 1.2;\n                var lineHeight = lastFont.lineHeight || Math.max(1.2, fontLineHeight) * fontSize;\n                var lineGap = pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;\n                var noGap = fontLineHeight - lineGap;\n                var firstLineHeight = Math.max(1, noGap) * fontSize;\n                var scale = fontSize / 1000;\n                var fallbackWidth = pdfFont.defaultWidth || pdfFont.charsToGlyphs(\" \")[0].width;\n                var _iterator173 = _createForOfIteratorHelper(str.split(/[\\u2029\\n]/)),\n                  _step173;\n                try {\n                  for (_iterator173.s(); !(_step173 = _iterator173.n()).done;) {\n                    var line = _step173.value;\n                    var encodedLine = pdfFont.encodeString(line).join(\"\");\n                    var glyphs = pdfFont.charsToGlyphs(encodedLine);\n                    var _iterator174 = _createForOfIteratorHelper(glyphs),\n                      _step174;\n                    try {\n                      for (_iterator174.s(); !(_step174 = _iterator174.n()).done;) {\n                        var glyph = _step174.value;\n                        var width = glyph.width || fallbackWidth;\n                        this.glyphs.push([width * scale + letterSpacing, lineHeight, firstLineHeight, glyph.unicode, false]);\n                      }\n                    } catch (err) {\n                      _iterator174.e(err);\n                    } finally {\n                      _iterator174.f();\n                    }\n                    this.glyphs.push([0, 0, 0, \"\\n\", true]);\n                  }\n                } catch (err) {\n                  _iterator173.e(err);\n                } finally {\n                  _iterator173.f();\n                }\n                this.glyphs.pop();\n                return;\n              }\n              var _iterator175 = _createForOfIteratorHelper(str.split(/[\\u2029\\n]/)),\n                _step175;\n              try {\n                for (_iterator175.s(); !(_step175 = _iterator175.n()).done;) {\n                  var _line2 = _step175.value;\n                  var _iterator176 = _createForOfIteratorHelper(_line2.split(\"\")),\n                    _step176;\n                  try {\n                    for (_iterator176.s(); !(_step176 = _iterator176.n()).done;) {\n                      var char = _step176.value;\n                      this.glyphs.push([fontSize, 1.2 * fontSize, fontSize, char, false]);\n                    }\n                  } catch (err) {\n                    _iterator176.e(err);\n                  } finally {\n                    _iterator176.f();\n                  }\n                  this.glyphs.push([0, 0, 0, \"\\n\", true]);\n                }\n              } catch (err) {\n                _iterator175.e(err);\n              } finally {\n                _iterator175.f();\n              }\n              this.glyphs.pop();\n            }\n          }, {\n            key: \"compute\",\n            value: function compute(maxWidth) {\n              var lastSpacePos = -1,\n                lastSpaceWidth = 0,\n                width = 0,\n                height = 0,\n                currentLineWidth = 0,\n                currentLineHeight = 0;\n              var isBroken = false;\n              var isFirstLine = true;\n              for (var i = 0, ii = this.glyphs.length; i < ii; i++) {\n                var _this$glyphs$i = _slicedToArray(this.glyphs[i], 5),\n                  glyphWidth = _this$glyphs$i[0],\n                  lineHeight = _this$glyphs$i[1],\n                  firstLineHeight = _this$glyphs$i[2],\n                  char = _this$glyphs$i[3],\n                  isEOL = _this$glyphs$i[4];\n                var isSpace = char === \" \";\n                var glyphHeight = isFirstLine ? firstLineHeight : lineHeight;\n                if (isEOL) {\n                  width = Math.max(width, currentLineWidth);\n                  currentLineWidth = 0;\n                  height += currentLineHeight;\n                  currentLineHeight = glyphHeight;\n                  lastSpacePos = -1;\n                  lastSpaceWidth = 0;\n                  isFirstLine = false;\n                  continue;\n                }\n                if (isSpace) {\n                  if (currentLineWidth + glyphWidth > maxWidth) {\n                    width = Math.max(width, currentLineWidth);\n                    currentLineWidth = 0;\n                    height += currentLineHeight;\n                    currentLineHeight = glyphHeight;\n                    lastSpacePos = -1;\n                    lastSpaceWidth = 0;\n                    isBroken = true;\n                    isFirstLine = false;\n                  } else {\n                    currentLineHeight = Math.max(glyphHeight, currentLineHeight);\n                    lastSpaceWidth = currentLineWidth;\n                    currentLineWidth += glyphWidth;\n                    lastSpacePos = i;\n                  }\n                  continue;\n                }\n                if (currentLineWidth + glyphWidth > maxWidth) {\n                  height += currentLineHeight;\n                  currentLineHeight = glyphHeight;\n                  if (lastSpacePos !== -1) {\n                    i = lastSpacePos;\n                    width = Math.max(width, lastSpaceWidth);\n                    currentLineWidth = 0;\n                    lastSpacePos = -1;\n                    lastSpaceWidth = 0;\n                  } else {\n                    width = Math.max(width, currentLineWidth);\n                    currentLineWidth = glyphWidth;\n                  }\n                  isBroken = true;\n                  isFirstLine = false;\n                  continue;\n                }\n                currentLineWidth += glyphWidth;\n                currentLineHeight = Math.max(glyphHeight, currentLineHeight);\n              }\n              width = Math.max(width, currentLineWidth);\n              height += currentLineHeight + this.extraHeight;\n              return {\n                width: WIDTH_FACTOR * width,\n                height: height,\n                isBroken: isBroken\n              };\n            }\n          }]);\n          return TextMeasure;\n        }();\n        exports.TextMeasure = TextMeasure;\n\n        /***/\n      }, /* 87 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.DataHandler = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var DataHandler = /*#__PURE__*/function () {\n          function DataHandler(root, data) {\n            _classCallCheck(this, DataHandler);\n            this.data = data;\n            this.dataset = root.datasets || null;\n          }\n          _createClass(DataHandler, [{\n            key: \"serialize\",\n            value: function serialize(storage) {\n              var stack = [[-1, this.data[_xfa_object.$getChildren]()]];\n              while (stack.length > 0) {\n                var last = stack.at(-1);\n                var _last = _slicedToArray(last, 2),\n                  i = _last[0],\n                  children = _last[1];\n                if (i + 1 === children.length) {\n                  stack.pop();\n                  continue;\n                }\n                var child = children[++last[0]];\n                var storageEntry = storage.get(child[_xfa_object.$uid]);\n                if (storageEntry) {\n                  child[_xfa_object.$setValue](storageEntry);\n                } else {\n                  var attributes = child[_xfa_object.$getAttributes]();\n                  var _iterator177 = _createForOfIteratorHelper(attributes.values()),\n                    _step177;\n                  try {\n                    for (_iterator177.s(); !(_step177 = _iterator177.n()).done;) {\n                      var _value20 = _step177.value;\n                      var entry = storage.get(_value20[_xfa_object.$uid]);\n                      if (entry) {\n                        _value20[_xfa_object.$setValue](entry);\n                        break;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator177.e(err);\n                  } finally {\n                    _iterator177.f();\n                  }\n                }\n                var nodes = child[_xfa_object.$getChildren]();\n                if (nodes.length > 0) {\n                  stack.push([-1, nodes]);\n                }\n              }\n              var buf = [\"<xfa:datasets xmlns:xfa=\\\"http://www.xfa.org/schema/xfa-data/1.0/\\\">\"];\n              if (this.dataset) {\n                var _iterator178 = _createForOfIteratorHelper(this.dataset[_xfa_object.$getChildren]()),\n                  _step178;\n                try {\n                  for (_iterator178.s(); !(_step178 = _iterator178.n()).done;) {\n                    var _child3 = _step178.value;\n                    if (_child3[_xfa_object.$nodeName] !== \"data\") {\n                      _child3[_xfa_object.$toString](buf);\n                    }\n                  }\n                } catch (err) {\n                  _iterator178.e(err);\n                } finally {\n                  _iterator178.f();\n                }\n              }\n              this.data[_xfa_object.$toString](buf);\n              buf.push(\"</xfa:datasets>\");\n              return buf.join(\"\");\n            }\n          }]);\n          return DataHandler;\n        }();\n        exports.DataHandler = DataHandler;\n\n        /***/\n      }, /* 88 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XFAParser = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _xml_parser = __w_pdfjs_require__(66);\n        var _builder = __w_pdfjs_require__(89);\n        var _util = __w_pdfjs_require__(2);\n        var XFAParser = /*#__PURE__*/function (_xml_parser$XMLParser) {\n          _inherits(XFAParser, _xml_parser$XMLParser);\n          function XFAParser() {\n            var _this219;\n            var rootNameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            var richText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            _classCallCheck(this, XFAParser);\n            _this219 = _possibleConstructorReturn(this, _getPrototypeOf(XFAParser).call(this));\n            _this219._builder = new _builder.Builder(rootNameSpace);\n            _this219._stack = [];\n            _this219._globalData = {\n              usedTypefaces: new Set()\n            };\n            _this219._ids = new Map();\n            _this219._current = _this219._builder.buildRoot(_this219._ids);\n            _this219._errorCode = _xml_parser.XMLParserErrorCode.NoError;\n            _this219._whiteRegex = /^\\s+$/;\n            _this219._nbsps = /\\xa0+/g;\n            _this219._richText = richText;\n            return _this219;\n          }\n          _createClass(XFAParser, [{\n            key: \"parse\",\n            value: function parse(data) {\n              this.parseXml(data);\n              if (this._errorCode !== _xml_parser.XMLParserErrorCode.NoError) {\n                return undefined;\n              }\n              this._current[_xfa_object.$finalize]();\n              return this._current.element;\n            }\n          }, {\n            key: \"onText\",\n            value: function onText(text) {\n              text = text.replace(this._nbsps, function (match) {\n                return match.slice(1) + \" \";\n              });\n              if (this._richText || this._current[_xfa_object.$acceptWhitespace]()) {\n                this._current[_xfa_object.$onText](text, this._richText);\n                return;\n              }\n              if (this._whiteRegex.test(text)) {\n                return;\n              }\n              this._current[_xfa_object.$onText](text.trim());\n            }\n          }, {\n            key: \"onCdata\",\n            value: function onCdata(text) {\n              this._current[_xfa_object.$onText](text);\n            }\n          }, {\n            key: \"_mkAttributes\",\n            value: function _mkAttributes(attributes, tagName) {\n              var namespace = null;\n              var prefixes = null;\n              var attributeObj = Object.create({});\n              var _iterator179 = _createForOfIteratorHelper(attributes),\n                _step179;\n              try {\n                for (_iterator179.s(); !(_step179 = _iterator179.n()).done;) {\n                  var _step179$value = _step179.value,\n                    name = _step179$value.name,\n                    _value21 = _step179$value.value;\n                  if (name === \"xmlns\") {\n                    if (!namespace) {\n                      namespace = _value21;\n                    } else {\n                      (0, _util.warn)(\"XFA - multiple namespace definition in <\".concat(tagName, \">\"));\n                    }\n                  } else if (name.startsWith(\"xmlns:\")) {\n                    var prefix = name.substring(\"xmlns:\".length);\n                    if (!prefixes) {\n                      prefixes = [];\n                    }\n                    prefixes.push({\n                      prefix: prefix,\n                      value: _value21\n                    });\n                  } else {\n                    var i = name.indexOf(\":\");\n                    if (i === -1) {\n                      attributeObj[name] = _value21;\n                    } else {\n                      var nsAttrs = attributeObj[_xfa_object.$nsAttributes];\n                      if (!nsAttrs) {\n                        nsAttrs = attributeObj[_xfa_object.$nsAttributes] = Object.create(null);\n                      }\n                      var _ref97 = [name.slice(0, i), name.slice(i + 1)],\n                        ns = _ref97[0],\n                        attrName = _ref97[1];\n                      var attrs = nsAttrs[ns];\n                      if (!attrs) {\n                        attrs = nsAttrs[ns] = Object.create(null);\n                      }\n                      attrs[attrName] = _value21;\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator179.e(err);\n              } finally {\n                _iterator179.f();\n              }\n              return [namespace, prefixes, attributeObj];\n            }\n          }, {\n            key: \"_getNameAndPrefix\",\n            value: function _getNameAndPrefix(name, nsAgnostic) {\n              var i = name.indexOf(\":\");\n              if (i === -1) {\n                return [name, null];\n              }\n              return [name.substring(i + 1), nsAgnostic ? \"\" : name.substring(0, i)];\n            }\n          }, {\n            key: \"onBeginElement\",\n            value: function onBeginElement(tagName, attributes, isEmpty) {\n              var _this$_mkAttributes = this._mkAttributes(attributes, tagName),\n                _this$_mkAttributes2 = _slicedToArray(_this$_mkAttributes, 3),\n                namespace = _this$_mkAttributes2[0],\n                prefixes = _this$_mkAttributes2[1],\n                attributesObj = _this$_mkAttributes2[2];\n              var _this$_getNameAndPref = this._getNameAndPrefix(tagName, this._builder.isNsAgnostic()),\n                _this$_getNameAndPref2 = _slicedToArray(_this$_getNameAndPref, 2),\n                name = _this$_getNameAndPref2[0],\n                nsPrefix = _this$_getNameAndPref2[1];\n              var node = this._builder.build({\n                nsPrefix: nsPrefix,\n                name: name,\n                attributes: attributesObj,\n                namespace: namespace,\n                prefixes: prefixes\n              });\n              node[_xfa_object.$globalData] = this._globalData;\n              if (isEmpty) {\n                node[_xfa_object.$finalize]();\n                if (this._current[_xfa_object.$onChild](node)) {\n                  node[_xfa_object.$setId](this._ids);\n                }\n                node[_xfa_object.$clean](this._builder);\n                return;\n              }\n              this._stack.push(this._current);\n              this._current = node;\n            }\n          }, {\n            key: \"onEndElement\",\n            value: function onEndElement(name) {\n              var node = this._current;\n              if (node[_xfa_object.$isCDATAXml]() && typeof node[_xfa_object.$content] === \"string\") {\n                var parser = new XFAParser();\n                parser._globalData = this._globalData;\n                var root = parser.parse(node[_xfa_object.$content]);\n                node[_xfa_object.$content] = null;\n                node[_xfa_object.$onChild](root);\n              }\n              node[_xfa_object.$finalize]();\n              this._current = this._stack.pop();\n              if (this._current[_xfa_object.$onChild](node)) {\n                node[_xfa_object.$setId](this._ids);\n              }\n              node[_xfa_object.$clean](this._builder);\n            }\n          }, {\n            key: \"onError\",\n            value: function onError(code) {\n              this._errorCode = code;\n            }\n          }]);\n          return XFAParser;\n        }(_xml_parser.XMLParserBase);\n        exports.XFAParser = XFAParser;\n\n        /***/\n      }, /* 89 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Builder = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _setup = __w_pdfjs_require__(90);\n        var _template = __w_pdfjs_require__(82);\n        var _unknown = __w_pdfjs_require__(99);\n        var _util = __w_pdfjs_require__(2);\n        var Root = /*#__PURE__*/function (_xfa_object$XFAObject89) {\n          _inherits(Root, _xfa_object$XFAObject89);\n          function Root(ids) {\n            var _this220;\n            _classCallCheck(this, Root);\n            _this220 = _possibleConstructorReturn(this, _getPrototypeOf(Root).call(this, -1, \"root\", Object.create(null)));\n            _this220.element = null;\n            _this220[_xfa_object.$ids] = ids;\n            return _this220;\n          }\n          _createClass(Root, [{\n            key: _xfa_object.$onChild,\n            value: function value(child) {\n              this.element = child;\n              return true;\n            }\n          }, {\n            key: _xfa_object.$finalize,\n            value: function value() {\n              _get(_getPrototypeOf(Root.prototype), _xfa_object.$finalize, this).call(this);\n              if (this.element.template instanceof _template.Template) {\n                this[_xfa_object.$ids].set(_xfa_object.$root, this.element);\n                this.element.template[_xfa_object.$resolvePrototypes](this[_xfa_object.$ids]);\n                this.element.template[_xfa_object.$ids] = this[_xfa_object.$ids];\n              }\n            }\n          }]);\n          return Root;\n        }(_xfa_object.XFAObject);\n        var Empty = /*#__PURE__*/function (_xfa_object$XFAObject90) {\n          _inherits(Empty, _xfa_object$XFAObject90);\n          function Empty() {\n            _classCallCheck(this, Empty);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Empty).call(this, -1, \"\", Object.create(null)));\n          }\n          _createClass(Empty, [{\n            key: _xfa_object.$onChild,\n            value: function value(_) {\n              return false;\n            }\n          }]);\n          return Empty;\n        }(_xfa_object.XFAObject);\n        var Builder = /*#__PURE__*/function () {\n          function Builder() {\n            var rootNameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            _classCallCheck(this, Builder);\n            this._namespaceStack = [];\n            this._nsAgnosticLevel = 0;\n            this._namespacePrefixes = new Map();\n            this._namespaces = new Map();\n            this._nextNsId = Math.max.apply(Math, _toConsumableArray(Object.values(_namespaces.NamespaceIds).map(function (_ref98) {\n              var id = _ref98.id;\n              return id;\n            })));\n            this._currentNamespace = rootNameSpace || new _unknown.UnknownNamespace(++this._nextNsId);\n          }\n          _createClass(Builder, [{\n            key: \"buildRoot\",\n            value: function buildRoot(ids) {\n              return new Root(ids);\n            }\n          }, {\n            key: \"build\",\n            value: function build(_ref99) {\n              var nsPrefix = _ref99.nsPrefix,\n                name = _ref99.name,\n                attributes = _ref99.attributes,\n                namespace = _ref99.namespace,\n                prefixes = _ref99.prefixes;\n              var hasNamespaceDef = namespace !== null;\n              if (hasNamespaceDef) {\n                this._namespaceStack.push(this._currentNamespace);\n                this._currentNamespace = this._searchNamespace(namespace);\n              }\n              if (prefixes) {\n                this._addNamespacePrefix(prefixes);\n              }\n              if (attributes.hasOwnProperty(_xfa_object.$nsAttributes)) {\n                var dataTemplate = _setup.NamespaceSetUp.datasets;\n                var nsAttrs = attributes[_xfa_object.$nsAttributes];\n                var xfaAttrs = null;\n                for (var _i68 = 0, _Object$entries6 = Object.entries(nsAttrs); _i68 < _Object$entries6.length; _i68++) {\n                  var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i68], 2),\n                    ns = _Object$entries6$_i[0],\n                    attrs = _Object$entries6$_i[1];\n                  var nsToUse = this._getNamespaceToUse(ns);\n                  if (nsToUse === dataTemplate) {\n                    xfaAttrs = {\n                      xfa: attrs\n                    };\n                    break;\n                  }\n                }\n                if (xfaAttrs) {\n                  attributes[_xfa_object.$nsAttributes] = xfaAttrs;\n                } else {\n                  delete attributes[_xfa_object.$nsAttributes];\n                }\n              }\n              var namespaceToUse = this._getNamespaceToUse(nsPrefix);\n              var node = namespaceToUse && namespaceToUse[_namespaces.$buildXFAObject](name, attributes) || new Empty();\n              if (node[_xfa_object.$isNsAgnostic]()) {\n                this._nsAgnosticLevel++;\n              }\n              if (hasNamespaceDef || prefixes || node[_xfa_object.$isNsAgnostic]()) {\n                node[_xfa_object.$cleanup] = {\n                  hasNamespace: hasNamespaceDef,\n                  prefixes: prefixes,\n                  nsAgnostic: node[_xfa_object.$isNsAgnostic]()\n                };\n              }\n              return node;\n            }\n          }, {\n            key: \"isNsAgnostic\",\n            value: function isNsAgnostic() {\n              return this._nsAgnosticLevel > 0;\n            }\n          }, {\n            key: \"_searchNamespace\",\n            value: function _searchNamespace(nsName) {\n              var ns = this._namespaces.get(nsName);\n              if (ns) {\n                return ns;\n              }\n              for (var _i69 = 0, _Object$entries7 = Object.entries(_namespaces.NamespaceIds); _i69 < _Object$entries7.length; _i69++) {\n                var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i69], 2),\n                  name = _Object$entries7$_i[0],\n                  check = _Object$entries7$_i[1].check;\n                if (check(nsName)) {\n                  ns = _setup.NamespaceSetUp[name];\n                  if (ns) {\n                    this._namespaces.set(nsName, ns);\n                    return ns;\n                  }\n                  break;\n                }\n              }\n              ns = new _unknown.UnknownNamespace(++this._nextNsId);\n              this._namespaces.set(nsName, ns);\n              return ns;\n            }\n          }, {\n            key: \"_addNamespacePrefix\",\n            value: function _addNamespacePrefix(prefixes) {\n              var _iterator180 = _createForOfIteratorHelper(prefixes),\n                _step180;\n              try {\n                for (_iterator180.s(); !(_step180 = _iterator180.n()).done;) {\n                  var _step180$value = _step180.value,\n                    prefix = _step180$value.prefix,\n                    _value22 = _step180$value.value;\n                  var namespace = this._searchNamespace(_value22);\n                  var prefixStack = this._namespacePrefixes.get(prefix);\n                  if (!prefixStack) {\n                    prefixStack = [];\n                    this._namespacePrefixes.set(prefix, prefixStack);\n                  }\n                  prefixStack.push(namespace);\n                }\n              } catch (err) {\n                _iterator180.e(err);\n              } finally {\n                _iterator180.f();\n              }\n            }\n          }, {\n            key: \"_getNamespaceToUse\",\n            value: function _getNamespaceToUse(prefix) {\n              if (!prefix) {\n                return this._currentNamespace;\n              }\n              var prefixStack = this._namespacePrefixes.get(prefix);\n              if (prefixStack && prefixStack.length > 0) {\n                return prefixStack.at(-1);\n              }\n              (0, _util.warn)(\"Unknown namespace prefix: \".concat(prefix, \".\"));\n              return null;\n            }\n          }, {\n            key: \"clean\",\n            value: function clean(data) {\n              var _this221 = this;\n              var hasNamespace = data.hasNamespace,\n                prefixes = data.prefixes,\n                nsAgnostic = data.nsAgnostic;\n              if (hasNamespace) {\n                this._currentNamespace = this._namespaceStack.pop();\n              }\n              if (prefixes) {\n                prefixes.forEach(function (_ref100) {\n                  var prefix = _ref100.prefix;\n                  _this221._namespacePrefixes.get(prefix).pop();\n                });\n              }\n              if (nsAgnostic) {\n                this._nsAgnosticLevel--;\n              }\n            }\n          }]);\n          return Builder;\n        }();\n        exports.Builder = Builder;\n\n        /***/\n      }, /* 90 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NamespaceSetUp = void 0;\n        var _config = __w_pdfjs_require__(91);\n        var _connection_set = __w_pdfjs_require__(92);\n        var _datasets = __w_pdfjs_require__(93);\n        var _locale_set = __w_pdfjs_require__(94);\n        var _signature = __w_pdfjs_require__(95);\n        var _stylesheet = __w_pdfjs_require__(96);\n        var _template = __w_pdfjs_require__(82);\n        var _xdp = __w_pdfjs_require__(97);\n        var _xhtml = __w_pdfjs_require__(98);\n        var NamespaceSetUp = {\n          config: _config.ConfigNamespace,\n          connection: _connection_set.ConnectionSetNamespace,\n          datasets: _datasets.DatasetsNamespace,\n          localeSet: _locale_set.LocaleSetNamespace,\n          signature: _signature.SignatureNamespace,\n          stylesheet: _stylesheet.StylesheetNamespace,\n          template: _template.TemplateNamespace,\n          xdp: _xdp.XdpNamespace,\n          xhtml: _xhtml.XhtmlNamespace\n        };\n        exports.NamespaceSetUp = NamespaceSetUp;\n\n        /***/\n      }, /* 91 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ConfigNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _utils = __w_pdfjs_require__(78);\n        var _util = __w_pdfjs_require__(2);\n        var CONFIG_NS_ID = _namespaces.NamespaceIds.config.id;\n        var Acrobat = /*#__PURE__*/function (_xfa_object$XFAObject91) {\n          _inherits(Acrobat, _xfa_object$XFAObject91);\n          function Acrobat(attributes) {\n            var _this222;\n            _classCallCheck(this, Acrobat);\n            _this222 = _possibleConstructorReturn(this, _getPrototypeOf(Acrobat).call(this, CONFIG_NS_ID, \"acrobat\", true));\n            _this222.acrobat7 = null;\n            _this222.autoSave = null;\n            _this222.common = null;\n            _this222.validate = null;\n            _this222.validateApprovalSignatures = null;\n            _this222.submitUrl = new _xfa_object.XFAObjectArray();\n            return _this222;\n          }\n          return Acrobat;\n        }(_xfa_object.XFAObject);\n        var Acrobat7 = /*#__PURE__*/function (_xfa_object$XFAObject92) {\n          _inherits(Acrobat7, _xfa_object$XFAObject92);\n          function Acrobat7(attributes) {\n            var _this223;\n            _classCallCheck(this, Acrobat7);\n            _this223 = _possibleConstructorReturn(this, _getPrototypeOf(Acrobat7).call(this, CONFIG_NS_ID, \"acrobat7\", true));\n            _this223.dynamicRender = null;\n            return _this223;\n          }\n          return Acrobat7;\n        }(_xfa_object.XFAObject);\n        var _ADBE_JSConsole = /*#__PURE__*/function (_xfa_object$OptionObj4) {\n          _inherits(ADBE_JSConsole, _xfa_object$OptionObj4);\n          function ADBE_JSConsole(attributes) {\n            _classCallCheck(this, ADBE_JSConsole);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ADBE_JSConsole).call(this, CONFIG_NS_ID, \"ADBE_JSConsole\", [\"delegate\", \"Enable\", \"Disable\"]));\n          }\n          return ADBE_JSConsole;\n        }(_xfa_object.OptionObject);\n        var _ADBE_JSDebugger = /*#__PURE__*/function (_xfa_object$OptionObj5) {\n          _inherits(ADBE_JSDebugger, _xfa_object$OptionObj5);\n          function ADBE_JSDebugger(attributes) {\n            _classCallCheck(this, ADBE_JSDebugger);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ADBE_JSDebugger).call(this, CONFIG_NS_ID, \"ADBE_JSDebugger\", [\"delegate\", \"Enable\", \"Disable\"]));\n          }\n          return ADBE_JSDebugger;\n        }(_xfa_object.OptionObject);\n        var AddSilentPrint = /*#__PURE__*/function (_xfa_object$Option2) {\n          _inherits(AddSilentPrint, _xfa_object$Option2);\n          function AddSilentPrint(attributes) {\n            _classCallCheck(this, AddSilentPrint);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AddSilentPrint).call(this, CONFIG_NS_ID, \"addSilentPrint\"));\n          }\n          return AddSilentPrint;\n        }(_xfa_object.Option01);\n        var AddViewerPreferences = /*#__PURE__*/function (_xfa_object$Option3) {\n          _inherits(AddViewerPreferences, _xfa_object$Option3);\n          function AddViewerPreferences(attributes) {\n            _classCallCheck(this, AddViewerPreferences);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AddViewerPreferences).call(this, CONFIG_NS_ID, \"addViewerPreferences\"));\n          }\n          return AddViewerPreferences;\n        }(_xfa_object.Option01);\n        var AdjustData = /*#__PURE__*/function (_xfa_object$Option4) {\n          _inherits(AdjustData, _xfa_object$Option4);\n          function AdjustData(attributes) {\n            _classCallCheck(this, AdjustData);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AdjustData).call(this, CONFIG_NS_ID, \"adjustData\"));\n          }\n          return AdjustData;\n        }(_xfa_object.Option10);\n        var AdobeExtensionLevel = /*#__PURE__*/function (_xfa_object$IntegerOb) {\n          _inherits(AdobeExtensionLevel, _xfa_object$IntegerOb);\n          function AdobeExtensionLevel(attributes) {\n            _classCallCheck(this, AdobeExtensionLevel);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AdobeExtensionLevel).call(this, CONFIG_NS_ID, \"adobeExtensionLevel\", 0, function (n) {\n              return n >= 1 && n <= 8;\n            }));\n          }\n          return AdobeExtensionLevel;\n        }(_xfa_object.IntegerObject);\n        var Agent = /*#__PURE__*/function (_xfa_object$XFAObject93) {\n          _inherits(Agent, _xfa_object$XFAObject93);\n          function Agent(attributes) {\n            var _this224;\n            _classCallCheck(this, Agent);\n            _this224 = _possibleConstructorReturn(this, _getPrototypeOf(Agent).call(this, CONFIG_NS_ID, \"agent\", true));\n            _this224.name = attributes.name ? attributes.name.trim() : \"\";\n            _this224.common = new _xfa_object.XFAObjectArray();\n            return _this224;\n          }\n          return Agent;\n        }(_xfa_object.XFAObject);\n        var AlwaysEmbed = /*#__PURE__*/function (_xfa_object$ContentOb10) {\n          _inherits(AlwaysEmbed, _xfa_object$ContentOb10);\n          function AlwaysEmbed(attributes) {\n            _classCallCheck(this, AlwaysEmbed);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AlwaysEmbed).call(this, CONFIG_NS_ID, \"alwaysEmbed\"));\n          }\n          return AlwaysEmbed;\n        }(_xfa_object.ContentObject);\n        var Amd = /*#__PURE__*/function (_xfa_object$StringObj13) {\n          _inherits(Amd, _xfa_object$StringObj13);\n          function Amd(attributes) {\n            _classCallCheck(this, Amd);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Amd).call(this, CONFIG_NS_ID, \"amd\"));\n          }\n          return Amd;\n        }(_xfa_object.StringObject);\n        var Area = /*#__PURE__*/function (_xfa_object$XFAObject94) {\n          _inherits(Area, _xfa_object$XFAObject94);\n          function Area(attributes) {\n            var _this225;\n            _classCallCheck(this, Area);\n            _this225 = _possibleConstructorReturn(this, _getPrototypeOf(Area).call(this, CONFIG_NS_ID, \"area\"));\n            _this225.level = (0, _utils.getInteger)({\n              data: attributes.level,\n              defaultValue: 0,\n              validate: function validate(n) {\n                return n >= 1 && n <= 3;\n              }\n            });\n            _this225.name = (0, _utils.getStringOption)(attributes.name, [\"\", \"barcode\", \"coreinit\", \"deviceDriver\", \"font\", \"general\", \"layout\", \"merge\", \"script\", \"signature\", \"sourceSet\", \"templateCache\"]);\n            return _this225;\n          }\n          return Area;\n        }(_xfa_object.XFAObject);\n        var Attributes = /*#__PURE__*/function (_xfa_object$OptionObj6) {\n          _inherits(Attributes, _xfa_object$OptionObj6);\n          function Attributes(attributes) {\n            _classCallCheck(this, Attributes);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Attributes).call(this, CONFIG_NS_ID, \"attributes\", [\"preserve\", \"delegate\", \"ignore\"]));\n          }\n          return Attributes;\n        }(_xfa_object.OptionObject);\n        var AutoSave = /*#__PURE__*/function (_xfa_object$OptionObj7) {\n          _inherits(AutoSave, _xfa_object$OptionObj7);\n          function AutoSave(attributes) {\n            _classCallCheck(this, AutoSave);\n            return _possibleConstructorReturn(this, _getPrototypeOf(AutoSave).call(this, CONFIG_NS_ID, \"autoSave\", [\"disabled\", \"enabled\"]));\n          }\n          return AutoSave;\n        }(_xfa_object.OptionObject);\n        var Base = /*#__PURE__*/function (_xfa_object$StringObj14) {\n          _inherits(Base, _xfa_object$StringObj14);\n          function Base(attributes) {\n            _classCallCheck(this, Base);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Base).call(this, CONFIG_NS_ID, \"base\"));\n          }\n          return Base;\n        }(_xfa_object.StringObject);\n        var BatchOutput = /*#__PURE__*/function (_xfa_object$XFAObject95) {\n          _inherits(BatchOutput, _xfa_object$XFAObject95);\n          function BatchOutput(attributes) {\n            var _this226;\n            _classCallCheck(this, BatchOutput);\n            _this226 = _possibleConstructorReturn(this, _getPrototypeOf(BatchOutput).call(this, CONFIG_NS_ID, \"batchOutput\"));\n            _this226.format = (0, _utils.getStringOption)(attributes.format, [\"none\", \"concat\", \"zip\", \"zipCompress\"]);\n            return _this226;\n          }\n          return BatchOutput;\n        }(_xfa_object.XFAObject);\n        var BehaviorOverride = /*#__PURE__*/function (_xfa_object$ContentOb11) {\n          _inherits(BehaviorOverride, _xfa_object$ContentOb11);\n          function BehaviorOverride(attributes) {\n            _classCallCheck(this, BehaviorOverride);\n            return _possibleConstructorReturn(this, _getPrototypeOf(BehaviorOverride).call(this, CONFIG_NS_ID, \"behaviorOverride\"));\n          }\n          _createClass(BehaviorOverride, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = new Map(this[_xfa_object.$content].trim().split(/\\s+/).filter(function (x) {\n                return x.includes(\":\");\n              }).map(function (x) {\n                return x.split(\":\", 2);\n              }));\n            }\n          }]);\n          return BehaviorOverride;\n        }(_xfa_object.ContentObject);\n        var Cache = /*#__PURE__*/function (_xfa_object$XFAObject96) {\n          _inherits(Cache, _xfa_object$XFAObject96);\n          function Cache(attributes) {\n            var _this227;\n            _classCallCheck(this, Cache);\n            _this227 = _possibleConstructorReturn(this, _getPrototypeOf(Cache).call(this, CONFIG_NS_ID, \"cache\", true));\n            _this227.templateCache = null;\n            return _this227;\n          }\n          return Cache;\n        }(_xfa_object.XFAObject);\n        var Change = /*#__PURE__*/function (_xfa_object$Option5) {\n          _inherits(Change, _xfa_object$Option5);\n          function Change(attributes) {\n            _classCallCheck(this, Change);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Change).call(this, CONFIG_NS_ID, \"change\"));\n          }\n          return Change;\n        }(_xfa_object.Option01);\n        var Common = /*#__PURE__*/function (_xfa_object$XFAObject97) {\n          _inherits(Common, _xfa_object$XFAObject97);\n          function Common(attributes) {\n            var _this228;\n            _classCallCheck(this, Common);\n            _this228 = _possibleConstructorReturn(this, _getPrototypeOf(Common).call(this, CONFIG_NS_ID, \"common\", true));\n            _this228.data = null;\n            _this228.locale = null;\n            _this228.localeSet = null;\n            _this228.messaging = null;\n            _this228.suppressBanner = null;\n            _this228.template = null;\n            _this228.validationMessaging = null;\n            _this228.versionControl = null;\n            _this228.log = new _xfa_object.XFAObjectArray();\n            return _this228;\n          }\n          return Common;\n        }(_xfa_object.XFAObject);\n        var Compress = /*#__PURE__*/function (_xfa_object$XFAObject98) {\n          _inherits(Compress, _xfa_object$XFAObject98);\n          function Compress(attributes) {\n            var _this229;\n            _classCallCheck(this, Compress);\n            _this229 = _possibleConstructorReturn(this, _getPrototypeOf(Compress).call(this, CONFIG_NS_ID, \"compress\"));\n            _this229.scope = (0, _utils.getStringOption)(attributes.scope, [\"imageOnly\", \"document\"]);\n            return _this229;\n          }\n          return Compress;\n        }(_xfa_object.XFAObject);\n        var CompressLogicalStructure = /*#__PURE__*/function (_xfa_object$Option6) {\n          _inherits(CompressLogicalStructure, _xfa_object$Option6);\n          function CompressLogicalStructure(attributes) {\n            _classCallCheck(this, CompressLogicalStructure);\n            return _possibleConstructorReturn(this, _getPrototypeOf(CompressLogicalStructure).call(this, CONFIG_NS_ID, \"compressLogicalStructure\"));\n          }\n          return CompressLogicalStructure;\n        }(_xfa_object.Option01);\n        var CompressObjectStream = /*#__PURE__*/function (_xfa_object$Option7) {\n          _inherits(CompressObjectStream, _xfa_object$Option7);\n          function CompressObjectStream(attributes) {\n            _classCallCheck(this, CompressObjectStream);\n            return _possibleConstructorReturn(this, _getPrototypeOf(CompressObjectStream).call(this, CONFIG_NS_ID, \"compressObjectStream\"));\n          }\n          return CompressObjectStream;\n        }(_xfa_object.Option10);\n        var Compression = /*#__PURE__*/function (_xfa_object$XFAObject99) {\n          _inherits(Compression, _xfa_object$XFAObject99);\n          function Compression(attributes) {\n            var _this230;\n            _classCallCheck(this, Compression);\n            _this230 = _possibleConstructorReturn(this, _getPrototypeOf(Compression).call(this, CONFIG_NS_ID, \"compression\", true));\n            _this230.compressLogicalStructure = null;\n            _this230.compressObjectStream = null;\n            _this230.level = null;\n            _this230.type = null;\n            return _this230;\n          }\n          return Compression;\n        }(_xfa_object.XFAObject);\n        var Config = /*#__PURE__*/function (_xfa_object$XFAObject100) {\n          _inherits(Config, _xfa_object$XFAObject100);\n          function Config(attributes) {\n            var _this231;\n            _classCallCheck(this, Config);\n            _this231 = _possibleConstructorReturn(this, _getPrototypeOf(Config).call(this, CONFIG_NS_ID, \"config\", true));\n            _this231.acrobat = null;\n            _this231.present = null;\n            _this231.trace = null;\n            _this231.agent = new _xfa_object.XFAObjectArray();\n            return _this231;\n          }\n          return Config;\n        }(_xfa_object.XFAObject);\n        var Conformance = /*#__PURE__*/function (_xfa_object$OptionObj8) {\n          _inherits(Conformance, _xfa_object$OptionObj8);\n          function Conformance(attributes) {\n            _classCallCheck(this, Conformance);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Conformance).call(this, CONFIG_NS_ID, \"conformance\", [\"A\", \"B\"]));\n          }\n          return Conformance;\n        }(_xfa_object.OptionObject);\n        var ContentCopy = /*#__PURE__*/function (_xfa_object$Option8) {\n          _inherits(ContentCopy, _xfa_object$Option8);\n          function ContentCopy(attributes) {\n            _classCallCheck(this, ContentCopy);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ContentCopy).call(this, CONFIG_NS_ID, \"contentCopy\"));\n          }\n          return ContentCopy;\n        }(_xfa_object.Option01);\n        var Copies = /*#__PURE__*/function (_xfa_object$IntegerOb2) {\n          _inherits(Copies, _xfa_object$IntegerOb2);\n          function Copies(attributes) {\n            _classCallCheck(this, Copies);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Copies).call(this, CONFIG_NS_ID, \"copies\", 1, function (n) {\n              return n >= 1;\n            }));\n          }\n          return Copies;\n        }(_xfa_object.IntegerObject);\n        var Creator = /*#__PURE__*/function (_xfa_object$StringObj15) {\n          _inherits(Creator, _xfa_object$StringObj15);\n          function Creator(attributes) {\n            _classCallCheck(this, Creator);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Creator).call(this, CONFIG_NS_ID, \"creator\"));\n          }\n          return Creator;\n        }(_xfa_object.StringObject);\n        var CurrentPage = /*#__PURE__*/function (_xfa_object$IntegerOb3) {\n          _inherits(CurrentPage, _xfa_object$IntegerOb3);\n          function CurrentPage(attributes) {\n            _classCallCheck(this, CurrentPage);\n            return _possibleConstructorReturn(this, _getPrototypeOf(CurrentPage).call(this, CONFIG_NS_ID, \"currentPage\", 0, function (n) {\n              return n >= 0;\n            }));\n          }\n          return CurrentPage;\n        }(_xfa_object.IntegerObject);\n        var Data = /*#__PURE__*/function (_xfa_object$XFAObject101) {\n          _inherits(Data, _xfa_object$XFAObject101);\n          function Data(attributes) {\n            var _this232;\n            _classCallCheck(this, Data);\n            _this232 = _possibleConstructorReturn(this, _getPrototypeOf(Data).call(this, CONFIG_NS_ID, \"data\", true));\n            _this232.adjustData = null;\n            _this232.attributes = null;\n            _this232.incrementalLoad = null;\n            _this232.outputXSL = null;\n            _this232.range = null;\n            _this232.record = null;\n            _this232.startNode = null;\n            _this232.uri = null;\n            _this232.window = null;\n            _this232.xsl = null;\n            _this232.excludeNS = new _xfa_object.XFAObjectArray();\n            _this232.transform = new _xfa_object.XFAObjectArray();\n            return _this232;\n          }\n          return Data;\n        }(_xfa_object.XFAObject);\n        var Debug = /*#__PURE__*/function (_xfa_object$XFAObject102) {\n          _inherits(Debug, _xfa_object$XFAObject102);\n          function Debug(attributes) {\n            var _this233;\n            _classCallCheck(this, Debug);\n            _this233 = _possibleConstructorReturn(this, _getPrototypeOf(Debug).call(this, CONFIG_NS_ID, \"debug\", true));\n            _this233.uri = null;\n            return _this233;\n          }\n          return Debug;\n        }(_xfa_object.XFAObject);\n        var DefaultTypeface = /*#__PURE__*/function (_xfa_object$ContentOb12) {\n          _inherits(DefaultTypeface, _xfa_object$ContentOb12);\n          function DefaultTypeface(attributes) {\n            var _this234;\n            _classCallCheck(this, DefaultTypeface);\n            _this234 = _possibleConstructorReturn(this, _getPrototypeOf(DefaultTypeface).call(this, CONFIG_NS_ID, \"defaultTypeface\"));\n            _this234.writingScript = (0, _utils.getStringOption)(attributes.writingScript, [\"*\", \"Arabic\", \"Cyrillic\", \"EastEuropeanRoman\", \"Greek\", \"Hebrew\", \"Japanese\", \"Korean\", \"Roman\", \"SimplifiedChinese\", \"Thai\", \"TraditionalChinese\", \"Vietnamese\"]);\n            return _this234;\n          }\n          return DefaultTypeface;\n        }(_xfa_object.ContentObject);\n        var Destination = /*#__PURE__*/function (_xfa_object$OptionObj9) {\n          _inherits(Destination, _xfa_object$OptionObj9);\n          function Destination(attributes) {\n            _classCallCheck(this, Destination);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Destination).call(this, CONFIG_NS_ID, \"destination\", [\"pdf\", \"pcl\", \"ps\", \"webClient\", \"zpl\"]));\n          }\n          return Destination;\n        }(_xfa_object.OptionObject);\n        var DocumentAssembly = /*#__PURE__*/function (_xfa_object$Option9) {\n          _inherits(DocumentAssembly, _xfa_object$Option9);\n          function DocumentAssembly(attributes) {\n            _classCallCheck(this, DocumentAssembly);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DocumentAssembly).call(this, CONFIG_NS_ID, \"documentAssembly\"));\n          }\n          return DocumentAssembly;\n        }(_xfa_object.Option01);\n        var Driver = /*#__PURE__*/function (_xfa_object$XFAObject103) {\n          _inherits(Driver, _xfa_object$XFAObject103);\n          function Driver(attributes) {\n            var _this235;\n            _classCallCheck(this, Driver);\n            _this235 = _possibleConstructorReturn(this, _getPrototypeOf(Driver).call(this, CONFIG_NS_ID, \"driver\", true));\n            _this235.name = attributes.name ? attributes.name.trim() : \"\";\n            _this235.fontInfo = null;\n            _this235.xdc = null;\n            return _this235;\n          }\n          return Driver;\n        }(_xfa_object.XFAObject);\n        var DuplexOption = /*#__PURE__*/function (_xfa_object$OptionObj10) {\n          _inherits(DuplexOption, _xfa_object$OptionObj10);\n          function DuplexOption(attributes) {\n            _classCallCheck(this, DuplexOption);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DuplexOption).call(this, CONFIG_NS_ID, \"duplexOption\", [\"simplex\", \"duplexFlipLongEdge\", \"duplexFlipShortEdge\"]));\n          }\n          return DuplexOption;\n        }(_xfa_object.OptionObject);\n        var DynamicRender = /*#__PURE__*/function (_xfa_object$OptionObj11) {\n          _inherits(DynamicRender, _xfa_object$OptionObj11);\n          function DynamicRender(attributes) {\n            _classCallCheck(this, DynamicRender);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DynamicRender).call(this, CONFIG_NS_ID, \"dynamicRender\", [\"forbidden\", \"required\"]));\n          }\n          return DynamicRender;\n        }(_xfa_object.OptionObject);\n        var Embed = /*#__PURE__*/function (_xfa_object$Option10) {\n          _inherits(Embed, _xfa_object$Option10);\n          function Embed(attributes) {\n            _classCallCheck(this, Embed);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Embed).call(this, CONFIG_NS_ID, \"embed\"));\n          }\n          return Embed;\n        }(_xfa_object.Option01);\n        var Encrypt = /*#__PURE__*/function (_xfa_object$Option11) {\n          _inherits(Encrypt, _xfa_object$Option11);\n          function Encrypt(attributes) {\n            _classCallCheck(this, Encrypt);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Encrypt).call(this, CONFIG_NS_ID, \"encrypt\"));\n          }\n          return Encrypt;\n        }(_xfa_object.Option01);\n        var Encryption = /*#__PURE__*/function (_xfa_object$XFAObject104) {\n          _inherits(Encryption, _xfa_object$XFAObject104);\n          function Encryption(attributes) {\n            var _this236;\n            _classCallCheck(this, Encryption);\n            _this236 = _possibleConstructorReturn(this, _getPrototypeOf(Encryption).call(this, CONFIG_NS_ID, \"encryption\", true));\n            _this236.encrypt = null;\n            _this236.encryptionLevel = null;\n            _this236.permissions = null;\n            return _this236;\n          }\n          return Encryption;\n        }(_xfa_object.XFAObject);\n        var EncryptionLevel = /*#__PURE__*/function (_xfa_object$OptionObj12) {\n          _inherits(EncryptionLevel, _xfa_object$OptionObj12);\n          function EncryptionLevel(attributes) {\n            _classCallCheck(this, EncryptionLevel);\n            return _possibleConstructorReturn(this, _getPrototypeOf(EncryptionLevel).call(this, CONFIG_NS_ID, \"encryptionLevel\", [\"40bit\", \"128bit\"]));\n          }\n          return EncryptionLevel;\n        }(_xfa_object.OptionObject);\n        var Enforce = /*#__PURE__*/function (_xfa_object$StringObj16) {\n          _inherits(Enforce, _xfa_object$StringObj16);\n          function Enforce(attributes) {\n            _classCallCheck(this, Enforce);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Enforce).call(this, CONFIG_NS_ID, \"enforce\"));\n          }\n          return Enforce;\n        }(_xfa_object.StringObject);\n        var Equate = /*#__PURE__*/function (_xfa_object$XFAObject105) {\n          _inherits(Equate, _xfa_object$XFAObject105);\n          function Equate(attributes) {\n            var _this237;\n            _classCallCheck(this, Equate);\n            _this237 = _possibleConstructorReturn(this, _getPrototypeOf(Equate).call(this, CONFIG_NS_ID, \"equate\"));\n            _this237.force = (0, _utils.getInteger)({\n              data: attributes.force,\n              defaultValue: 1,\n              validate: function validate(n) {\n                return n === 0;\n              }\n            });\n            _this237.from = attributes.from || \"\";\n            _this237.to = attributes.to || \"\";\n            return _this237;\n          }\n          return Equate;\n        }(_xfa_object.XFAObject);\n        var EquateRange = /*#__PURE__*/function (_xfa_object$XFAObject106) {\n          _inherits(EquateRange, _xfa_object$XFAObject106);\n          function EquateRange(attributes) {\n            var _this238;\n            _classCallCheck(this, EquateRange);\n            _this238 = _possibleConstructorReturn(this, _getPrototypeOf(EquateRange).call(this, CONFIG_NS_ID, \"equateRange\"));\n            _this238.from = attributes.from || \"\";\n            _this238.to = attributes.to || \"\";\n            _this238._unicodeRange = attributes.unicodeRange || \"\";\n            return _this238;\n          }\n          _createClass(EquateRange, [{\n            key: \"unicodeRange\",\n            get: function get() {\n              var ranges = [];\n              var unicodeRegex = /U\\+([0-9a-fA-F]+)/;\n              var unicodeRange = this._unicodeRange;\n              var _iterator181 = _createForOfIteratorHelper(unicodeRange.split(\",\").map(function (x) {\n                  return x.trim();\n                }).filter(function (x) {\n                  return !!x;\n                })),\n                _step181;\n              try {\n                for (_iterator181.s(); !(_step181 = _iterator181.n()).done;) {\n                  var range = _step181.value;\n                  range = range.split(\"-\", 2).map(function (x) {\n                    var found = x.match(unicodeRegex);\n                    if (!found) {\n                      return 0;\n                    }\n                    return parseInt(found[1], 16);\n                  });\n                  if (range.length === 1) {\n                    range.push(range[0]);\n                  }\n                  ranges.push(range);\n                }\n              } catch (err) {\n                _iterator181.e(err);\n              } finally {\n                _iterator181.f();\n              }\n              return (0, _util.shadow)(this, \"unicodeRange\", ranges);\n            }\n          }]);\n          return EquateRange;\n        }(_xfa_object.XFAObject);\n        var Exclude = /*#__PURE__*/function (_xfa_object$ContentOb13) {\n          _inherits(Exclude, _xfa_object$ContentOb13);\n          function Exclude(attributes) {\n            _classCallCheck(this, Exclude);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Exclude).call(this, CONFIG_NS_ID, \"exclude\"));\n          }\n          _createClass(Exclude, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\\s+/).filter(function (x) {\n                return x && [\"calculate\", \"close\", \"enter\", \"exit\", \"initialize\", \"ready\", \"validate\"].includes(x);\n              });\n            }\n          }]);\n          return Exclude;\n        }(_xfa_object.ContentObject);\n        var ExcludeNS = /*#__PURE__*/function (_xfa_object$StringObj17) {\n          _inherits(ExcludeNS, _xfa_object$StringObj17);\n          function ExcludeNS(attributes) {\n            _classCallCheck(this, ExcludeNS);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ExcludeNS).call(this, CONFIG_NS_ID, \"excludeNS\"));\n          }\n          return ExcludeNS;\n        }(_xfa_object.StringObject);\n        var FlipLabel = /*#__PURE__*/function (_xfa_object$OptionObj13) {\n          _inherits(FlipLabel, _xfa_object$OptionObj13);\n          function FlipLabel(attributes) {\n            _classCallCheck(this, FlipLabel);\n            return _possibleConstructorReturn(this, _getPrototypeOf(FlipLabel).call(this, CONFIG_NS_ID, \"flipLabel\", [\"usePrinterSetting\", \"on\", \"off\"]));\n          }\n          return FlipLabel;\n        }(_xfa_object.OptionObject);\n        var FontInfo = /*#__PURE__*/function (_xfa_object$XFAObject107) {\n          _inherits(FontInfo, _xfa_object$XFAObject107);\n          function FontInfo(attributes) {\n            var _this239;\n            _classCallCheck(this, FontInfo);\n            _this239 = _possibleConstructorReturn(this, _getPrototypeOf(FontInfo).call(this, CONFIG_NS_ID, \"fontInfo\", true));\n            _this239.embed = null;\n            _this239.map = null;\n            _this239.subsetBelow = null;\n            _this239.alwaysEmbed = new _xfa_object.XFAObjectArray();\n            _this239.defaultTypeface = new _xfa_object.XFAObjectArray();\n            _this239.neverEmbed = new _xfa_object.XFAObjectArray();\n            return _this239;\n          }\n          return FontInfo;\n        }(_xfa_object.XFAObject);\n        var FormFieldFilling = /*#__PURE__*/function (_xfa_object$Option12) {\n          _inherits(FormFieldFilling, _xfa_object$Option12);\n          function FormFieldFilling(attributes) {\n            _classCallCheck(this, FormFieldFilling);\n            return _possibleConstructorReturn(this, _getPrototypeOf(FormFieldFilling).call(this, CONFIG_NS_ID, \"formFieldFilling\"));\n          }\n          return FormFieldFilling;\n        }(_xfa_object.Option01);\n        var GroupParent = /*#__PURE__*/function (_xfa_object$StringObj18) {\n          _inherits(GroupParent, _xfa_object$StringObj18);\n          function GroupParent(attributes) {\n            _classCallCheck(this, GroupParent);\n            return _possibleConstructorReturn(this, _getPrototypeOf(GroupParent).call(this, CONFIG_NS_ID, \"groupParent\"));\n          }\n          return GroupParent;\n        }(_xfa_object.StringObject);\n        var IfEmpty = /*#__PURE__*/function (_xfa_object$OptionObj14) {\n          _inherits(IfEmpty, _xfa_object$OptionObj14);\n          function IfEmpty(attributes) {\n            _classCallCheck(this, IfEmpty);\n            return _possibleConstructorReturn(this, _getPrototypeOf(IfEmpty).call(this, CONFIG_NS_ID, \"ifEmpty\", [\"dataValue\", \"dataGroup\", \"ignore\", \"remove\"]));\n          }\n          return IfEmpty;\n        }(_xfa_object.OptionObject);\n        var IncludeXDPContent = /*#__PURE__*/function (_xfa_object$StringObj19) {\n          _inherits(IncludeXDPContent, _xfa_object$StringObj19);\n          function IncludeXDPContent(attributes) {\n            _classCallCheck(this, IncludeXDPContent);\n            return _possibleConstructorReturn(this, _getPrototypeOf(IncludeXDPContent).call(this, CONFIG_NS_ID, \"includeXDPContent\"));\n          }\n          return IncludeXDPContent;\n        }(_xfa_object.StringObject);\n        var IncrementalLoad = /*#__PURE__*/function (_xfa_object$OptionObj15) {\n          _inherits(IncrementalLoad, _xfa_object$OptionObj15);\n          function IncrementalLoad(attributes) {\n            _classCallCheck(this, IncrementalLoad);\n            return _possibleConstructorReturn(this, _getPrototypeOf(IncrementalLoad).call(this, CONFIG_NS_ID, \"incrementalLoad\", [\"none\", \"forwardOnly\"]));\n          }\n          return IncrementalLoad;\n        }(_xfa_object.OptionObject);\n        var IncrementalMerge = /*#__PURE__*/function (_xfa_object$Option13) {\n          _inherits(IncrementalMerge, _xfa_object$Option13);\n          function IncrementalMerge(attributes) {\n            _classCallCheck(this, IncrementalMerge);\n            return _possibleConstructorReturn(this, _getPrototypeOf(IncrementalMerge).call(this, CONFIG_NS_ID, \"incrementalMerge\"));\n          }\n          return IncrementalMerge;\n        }(_xfa_object.Option01);\n        var Interactive = /*#__PURE__*/function (_xfa_object$Option14) {\n          _inherits(Interactive, _xfa_object$Option14);\n          function Interactive(attributes) {\n            _classCallCheck(this, Interactive);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Interactive).call(this, CONFIG_NS_ID, \"interactive\"));\n          }\n          return Interactive;\n        }(_xfa_object.Option01);\n        var Jog = /*#__PURE__*/function (_xfa_object$OptionObj16) {\n          _inherits(Jog, _xfa_object$OptionObj16);\n          function Jog(attributes) {\n            _classCallCheck(this, Jog);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Jog).call(this, CONFIG_NS_ID, \"jog\", [\"usePrinterSetting\", \"none\", \"pageSet\"]));\n          }\n          return Jog;\n        }(_xfa_object.OptionObject);\n        var LabelPrinter = /*#__PURE__*/function (_xfa_object$XFAObject108) {\n          _inherits(LabelPrinter, _xfa_object$XFAObject108);\n          function LabelPrinter(attributes) {\n            var _this240;\n            _classCallCheck(this, LabelPrinter);\n            _this240 = _possibleConstructorReturn(this, _getPrototypeOf(LabelPrinter).call(this, CONFIG_NS_ID, \"labelPrinter\", true));\n            _this240.name = (0, _utils.getStringOption)(attributes.name, [\"zpl\", \"dpl\", \"ipl\", \"tcpl\"]);\n            _this240.batchOutput = null;\n            _this240.flipLabel = null;\n            _this240.fontInfo = null;\n            _this240.xdc = null;\n            return _this240;\n          }\n          return LabelPrinter;\n        }(_xfa_object.XFAObject);\n        var Layout = /*#__PURE__*/function (_xfa_object$OptionObj17) {\n          _inherits(Layout, _xfa_object$OptionObj17);\n          function Layout(attributes) {\n            _classCallCheck(this, Layout);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Layout).call(this, CONFIG_NS_ID, \"layout\", [\"paginate\", \"panel\"]));\n          }\n          return Layout;\n        }(_xfa_object.OptionObject);\n        var Level = /*#__PURE__*/function (_xfa_object$IntegerOb4) {\n          _inherits(Level, _xfa_object$IntegerOb4);\n          function Level(attributes) {\n            _classCallCheck(this, Level);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Level).call(this, CONFIG_NS_ID, \"level\", 0, function (n) {\n              return n > 0;\n            }));\n          }\n          return Level;\n        }(_xfa_object.IntegerObject);\n        var Linearized = /*#__PURE__*/function (_xfa_object$Option15) {\n          _inherits(Linearized, _xfa_object$Option15);\n          function Linearized(attributes) {\n            _classCallCheck(this, Linearized);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Linearized).call(this, CONFIG_NS_ID, \"linearized\"));\n          }\n          return Linearized;\n        }(_xfa_object.Option01);\n        var Locale = /*#__PURE__*/function (_xfa_object$StringObj20) {\n          _inherits(Locale, _xfa_object$StringObj20);\n          function Locale(attributes) {\n            _classCallCheck(this, Locale);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Locale).call(this, CONFIG_NS_ID, \"locale\"));\n          }\n          return Locale;\n        }(_xfa_object.StringObject);\n        var LocaleSet = /*#__PURE__*/function (_xfa_object$StringObj21) {\n          _inherits(LocaleSet, _xfa_object$StringObj21);\n          function LocaleSet(attributes) {\n            _classCallCheck(this, LocaleSet);\n            return _possibleConstructorReturn(this, _getPrototypeOf(LocaleSet).call(this, CONFIG_NS_ID, \"localeSet\"));\n          }\n          return LocaleSet;\n        }(_xfa_object.StringObject);\n        var Log = /*#__PURE__*/function (_xfa_object$XFAObject109) {\n          _inherits(Log, _xfa_object$XFAObject109);\n          function Log(attributes) {\n            var _this241;\n            _classCallCheck(this, Log);\n            _this241 = _possibleConstructorReturn(this, _getPrototypeOf(Log).call(this, CONFIG_NS_ID, \"log\", true));\n            _this241.mode = null;\n            _this241.threshold = null;\n            _this241.to = null;\n            _this241.uri = null;\n            return _this241;\n          }\n          return Log;\n        }(_xfa_object.XFAObject);\n        var MapElement = /*#__PURE__*/function (_xfa_object$XFAObject110) {\n          _inherits(MapElement, _xfa_object$XFAObject110);\n          function MapElement(attributes) {\n            var _this242;\n            _classCallCheck(this, MapElement);\n            _this242 = _possibleConstructorReturn(this, _getPrototypeOf(MapElement).call(this, CONFIG_NS_ID, \"map\", true));\n            _this242.equate = new _xfa_object.XFAObjectArray();\n            _this242.equateRange = new _xfa_object.XFAObjectArray();\n            return _this242;\n          }\n          return MapElement;\n        }(_xfa_object.XFAObject);\n        var MediumInfo = /*#__PURE__*/function (_xfa_object$XFAObject111) {\n          _inherits(MediumInfo, _xfa_object$XFAObject111);\n          function MediumInfo(attributes) {\n            var _this243;\n            _classCallCheck(this, MediumInfo);\n            _this243 = _possibleConstructorReturn(this, _getPrototypeOf(MediumInfo).call(this, CONFIG_NS_ID, \"mediumInfo\", true));\n            _this243.map = null;\n            return _this243;\n          }\n          return MediumInfo;\n        }(_xfa_object.XFAObject);\n        var Message = /*#__PURE__*/function (_xfa_object$XFAObject112) {\n          _inherits(Message, _xfa_object$XFAObject112);\n          function Message(attributes) {\n            var _this244;\n            _classCallCheck(this, Message);\n            _this244 = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, CONFIG_NS_ID, \"message\", true));\n            _this244.msgId = null;\n            _this244.severity = null;\n            return _this244;\n          }\n          return Message;\n        }(_xfa_object.XFAObject);\n        var Messaging = /*#__PURE__*/function (_xfa_object$XFAObject113) {\n          _inherits(Messaging, _xfa_object$XFAObject113);\n          function Messaging(attributes) {\n            var _this245;\n            _classCallCheck(this, Messaging);\n            _this245 = _possibleConstructorReturn(this, _getPrototypeOf(Messaging).call(this, CONFIG_NS_ID, \"messaging\", true));\n            _this245.message = new _xfa_object.XFAObjectArray();\n            return _this245;\n          }\n          return Messaging;\n        }(_xfa_object.XFAObject);\n        var Mode = /*#__PURE__*/function (_xfa_object$OptionObj18) {\n          _inherits(Mode, _xfa_object$OptionObj18);\n          function Mode(attributes) {\n            _classCallCheck(this, Mode);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Mode).call(this, CONFIG_NS_ID, \"mode\", [\"append\", \"overwrite\"]));\n          }\n          return Mode;\n        }(_xfa_object.OptionObject);\n        var ModifyAnnots = /*#__PURE__*/function (_xfa_object$Option16) {\n          _inherits(ModifyAnnots, _xfa_object$Option16);\n          function ModifyAnnots(attributes) {\n            _classCallCheck(this, ModifyAnnots);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ModifyAnnots).call(this, CONFIG_NS_ID, \"modifyAnnots\"));\n          }\n          return ModifyAnnots;\n        }(_xfa_object.Option01);\n        var MsgId = /*#__PURE__*/function (_xfa_object$IntegerOb5) {\n          _inherits(MsgId, _xfa_object$IntegerOb5);\n          function MsgId(attributes) {\n            _classCallCheck(this, MsgId);\n            return _possibleConstructorReturn(this, _getPrototypeOf(MsgId).call(this, CONFIG_NS_ID, \"msgId\", 1, function (n) {\n              return n >= 1;\n            }));\n          }\n          return MsgId;\n        }(_xfa_object.IntegerObject);\n        var NameAttr = /*#__PURE__*/function (_xfa_object$StringObj22) {\n          _inherits(NameAttr, _xfa_object$StringObj22);\n          function NameAttr(attributes) {\n            _classCallCheck(this, NameAttr);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NameAttr).call(this, CONFIG_NS_ID, \"nameAttr\"));\n          }\n          return NameAttr;\n        }(_xfa_object.StringObject);\n        var NeverEmbed = /*#__PURE__*/function (_xfa_object$ContentOb14) {\n          _inherits(NeverEmbed, _xfa_object$ContentOb14);\n          function NeverEmbed(attributes) {\n            _classCallCheck(this, NeverEmbed);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NeverEmbed).call(this, CONFIG_NS_ID, \"neverEmbed\"));\n          }\n          return NeverEmbed;\n        }(_xfa_object.ContentObject);\n        var NumberOfCopies = /*#__PURE__*/function (_xfa_object$IntegerOb6) {\n          _inherits(NumberOfCopies, _xfa_object$IntegerOb6);\n          function NumberOfCopies(attributes) {\n            _classCallCheck(this, NumberOfCopies);\n            return _possibleConstructorReturn(this, _getPrototypeOf(NumberOfCopies).call(this, CONFIG_NS_ID, \"numberOfCopies\", null, function (n) {\n              return n >= 2 && n <= 5;\n            }));\n          }\n          return NumberOfCopies;\n        }(_xfa_object.IntegerObject);\n        var OpenAction = /*#__PURE__*/function (_xfa_object$XFAObject114) {\n          _inherits(OpenAction, _xfa_object$XFAObject114);\n          function OpenAction(attributes) {\n            var _this246;\n            _classCallCheck(this, OpenAction);\n            _this246 = _possibleConstructorReturn(this, _getPrototypeOf(OpenAction).call(this, CONFIG_NS_ID, \"openAction\", true));\n            _this246.destination = null;\n            return _this246;\n          }\n          return OpenAction;\n        }(_xfa_object.XFAObject);\n        var Output = /*#__PURE__*/function (_xfa_object$XFAObject115) {\n          _inherits(Output, _xfa_object$XFAObject115);\n          function Output(attributes) {\n            var _this247;\n            _classCallCheck(this, Output);\n            _this247 = _possibleConstructorReturn(this, _getPrototypeOf(Output).call(this, CONFIG_NS_ID, \"output\", true));\n            _this247.to = null;\n            _this247.type = null;\n            _this247.uri = null;\n            return _this247;\n          }\n          return Output;\n        }(_xfa_object.XFAObject);\n        var OutputBin = /*#__PURE__*/function (_xfa_object$StringObj23) {\n          _inherits(OutputBin, _xfa_object$StringObj23);\n          function OutputBin(attributes) {\n            _classCallCheck(this, OutputBin);\n            return _possibleConstructorReturn(this, _getPrototypeOf(OutputBin).call(this, CONFIG_NS_ID, \"outputBin\"));\n          }\n          return OutputBin;\n        }(_xfa_object.StringObject);\n        var OutputXSL = /*#__PURE__*/function (_xfa_object$XFAObject116) {\n          _inherits(OutputXSL, _xfa_object$XFAObject116);\n          function OutputXSL(attributes) {\n            var _this248;\n            _classCallCheck(this, OutputXSL);\n            _this248 = _possibleConstructorReturn(this, _getPrototypeOf(OutputXSL).call(this, CONFIG_NS_ID, \"outputXSL\", true));\n            _this248.uri = null;\n            return _this248;\n          }\n          return OutputXSL;\n        }(_xfa_object.XFAObject);\n        var Overprint = /*#__PURE__*/function (_xfa_object$OptionObj19) {\n          _inherits(Overprint, _xfa_object$OptionObj19);\n          function Overprint(attributes) {\n            _classCallCheck(this, Overprint);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Overprint).call(this, CONFIG_NS_ID, \"overprint\", [\"none\", \"both\", \"draw\", \"field\"]));\n          }\n          return Overprint;\n        }(_xfa_object.OptionObject);\n        var Packets = /*#__PURE__*/function (_xfa_object$StringObj24) {\n          _inherits(Packets, _xfa_object$StringObj24);\n          function Packets(attributes) {\n            _classCallCheck(this, Packets);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Packets).call(this, CONFIG_NS_ID, \"packets\"));\n          }\n          _createClass(Packets, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              if (this[_xfa_object.$content] === \"*\") {\n                return;\n              }\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\\s+/).filter(function (x) {\n                return [\"config\", \"datasets\", \"template\", \"xfdf\", \"xslt\"].includes(x);\n              });\n            }\n          }]);\n          return Packets;\n        }(_xfa_object.StringObject);\n        var PageOffset = /*#__PURE__*/function (_xfa_object$XFAObject117) {\n          _inherits(PageOffset, _xfa_object$XFAObject117);\n          function PageOffset(attributes) {\n            var _this249;\n            _classCallCheck(this, PageOffset);\n            _this249 = _possibleConstructorReturn(this, _getPrototypeOf(PageOffset).call(this, CONFIG_NS_ID, \"pageOffset\"));\n            _this249.x = (0, _utils.getInteger)({\n              data: attributes.x,\n              defaultValue: \"useXDCSetting\",\n              validate: function validate(n) {\n                return true;\n              }\n            });\n            _this249.y = (0, _utils.getInteger)({\n              data: attributes.y,\n              defaultValue: \"useXDCSetting\",\n              validate: function validate(n) {\n                return true;\n              }\n            });\n            return _this249;\n          }\n          return PageOffset;\n        }(_xfa_object.XFAObject);\n        var PageRange = /*#__PURE__*/function (_xfa_object$StringObj25) {\n          _inherits(PageRange, _xfa_object$StringObj25);\n          function PageRange(attributes) {\n            _classCallCheck(this, PageRange);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PageRange).call(this, CONFIG_NS_ID, \"pageRange\"));\n          }\n          _createClass(PageRange, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var numbers = this[_xfa_object.$content].trim().split(/\\s+/).map(function (x) {\n                return parseInt(x, 10);\n              });\n              var ranges = [];\n              for (var i = 0, ii = numbers.length; i < ii; i += 2) {\n                ranges.push(numbers.slice(i, i + 2));\n              }\n              this[_xfa_object.$content] = ranges;\n            }\n          }]);\n          return PageRange;\n        }(_xfa_object.StringObject);\n        var Pagination = /*#__PURE__*/function (_xfa_object$OptionObj20) {\n          _inherits(Pagination, _xfa_object$OptionObj20);\n          function Pagination(attributes) {\n            _classCallCheck(this, Pagination);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this, CONFIG_NS_ID, \"pagination\", [\"simplex\", \"duplexShortEdge\", \"duplexLongEdge\"]));\n          }\n          return Pagination;\n        }(_xfa_object.OptionObject);\n        var PaginationOverride = /*#__PURE__*/function (_xfa_object$OptionObj21) {\n          _inherits(PaginationOverride, _xfa_object$OptionObj21);\n          function PaginationOverride(attributes) {\n            _classCallCheck(this, PaginationOverride);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PaginationOverride).call(this, CONFIG_NS_ID, \"paginationOverride\", [\"none\", \"forceDuplex\", \"forceDuplexLongEdge\", \"forceDuplexShortEdge\", \"forceSimplex\"]));\n          }\n          return PaginationOverride;\n        }(_xfa_object.OptionObject);\n        var Part = /*#__PURE__*/function (_xfa_object$IntegerOb7) {\n          _inherits(Part, _xfa_object$IntegerOb7);\n          function Part(attributes) {\n            _classCallCheck(this, Part);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Part).call(this, CONFIG_NS_ID, \"part\", 1, function (n) {\n              return false;\n            }));\n          }\n          return Part;\n        }(_xfa_object.IntegerObject);\n        var Pcl = /*#__PURE__*/function (_xfa_object$XFAObject118) {\n          _inherits(Pcl, _xfa_object$XFAObject118);\n          function Pcl(attributes) {\n            var _this250;\n            _classCallCheck(this, Pcl);\n            _this250 = _possibleConstructorReturn(this, _getPrototypeOf(Pcl).call(this, CONFIG_NS_ID, \"pcl\", true));\n            _this250.name = attributes.name || \"\";\n            _this250.batchOutput = null;\n            _this250.fontInfo = null;\n            _this250.jog = null;\n            _this250.mediumInfo = null;\n            _this250.outputBin = null;\n            _this250.pageOffset = null;\n            _this250.staple = null;\n            _this250.xdc = null;\n            return _this250;\n          }\n          return Pcl;\n        }(_xfa_object.XFAObject);\n        var Pdf = /*#__PURE__*/function (_xfa_object$XFAObject119) {\n          _inherits(Pdf, _xfa_object$XFAObject119);\n          function Pdf(attributes) {\n            var _this251;\n            _classCallCheck(this, Pdf);\n            _this251 = _possibleConstructorReturn(this, _getPrototypeOf(Pdf).call(this, CONFIG_NS_ID, \"pdf\", true));\n            _this251.name = attributes.name || \"\";\n            _this251.adobeExtensionLevel = null;\n            _this251.batchOutput = null;\n            _this251.compression = null;\n            _this251.creator = null;\n            _this251.encryption = null;\n            _this251.fontInfo = null;\n            _this251.interactive = null;\n            _this251.linearized = null;\n            _this251.openAction = null;\n            _this251.pdfa = null;\n            _this251.producer = null;\n            _this251.renderPolicy = null;\n            _this251.scriptModel = null;\n            _this251.silentPrint = null;\n            _this251.submitFormat = null;\n            _this251.tagged = null;\n            _this251.version = null;\n            _this251.viewerPreferences = null;\n            _this251.xdc = null;\n            return _this251;\n          }\n          return Pdf;\n        }(_xfa_object.XFAObject);\n        var Pdfa = /*#__PURE__*/function (_xfa_object$XFAObject120) {\n          _inherits(Pdfa, _xfa_object$XFAObject120);\n          function Pdfa(attributes) {\n            var _this252;\n            _classCallCheck(this, Pdfa);\n            _this252 = _possibleConstructorReturn(this, _getPrototypeOf(Pdfa).call(this, CONFIG_NS_ID, \"pdfa\", true));\n            _this252.amd = null;\n            _this252.conformance = null;\n            _this252.includeXDPContent = null;\n            _this252.part = null;\n            return _this252;\n          }\n          return Pdfa;\n        }(_xfa_object.XFAObject);\n        var Permissions = /*#__PURE__*/function (_xfa_object$XFAObject121) {\n          _inherits(Permissions, _xfa_object$XFAObject121);\n          function Permissions(attributes) {\n            var _this253;\n            _classCallCheck(this, Permissions);\n            _this253 = _possibleConstructorReturn(this, _getPrototypeOf(Permissions).call(this, CONFIG_NS_ID, \"permissions\", true));\n            _this253.accessibleContent = null;\n            _this253.change = null;\n            _this253.contentCopy = null;\n            _this253.documentAssembly = null;\n            _this253.formFieldFilling = null;\n            _this253.modifyAnnots = null;\n            _this253.plaintextMetadata = null;\n            _this253.print = null;\n            _this253.printHighQuality = null;\n            return _this253;\n          }\n          return Permissions;\n        }(_xfa_object.XFAObject);\n        var PickTrayByPDFSize = /*#__PURE__*/function (_xfa_object$Option17) {\n          _inherits(PickTrayByPDFSize, _xfa_object$Option17);\n          function PickTrayByPDFSize(attributes) {\n            _classCallCheck(this, PickTrayByPDFSize);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PickTrayByPDFSize).call(this, CONFIG_NS_ID, \"pickTrayByPDFSize\"));\n          }\n          return PickTrayByPDFSize;\n        }(_xfa_object.Option01);\n        var Picture = /*#__PURE__*/function (_xfa_object$StringObj26) {\n          _inherits(Picture, _xfa_object$StringObj26);\n          function Picture(attributes) {\n            _classCallCheck(this, Picture);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Picture).call(this, CONFIG_NS_ID, \"picture\"));\n          }\n          return Picture;\n        }(_xfa_object.StringObject);\n        var PlaintextMetadata = /*#__PURE__*/function (_xfa_object$Option18) {\n          _inherits(PlaintextMetadata, _xfa_object$Option18);\n          function PlaintextMetadata(attributes) {\n            _classCallCheck(this, PlaintextMetadata);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PlaintextMetadata).call(this, CONFIG_NS_ID, \"plaintextMetadata\"));\n          }\n          return PlaintextMetadata;\n        }(_xfa_object.Option01);\n        var Presence = /*#__PURE__*/function (_xfa_object$OptionObj22) {\n          _inherits(Presence, _xfa_object$OptionObj22);\n          function Presence(attributes) {\n            _classCallCheck(this, Presence);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Presence).call(this, CONFIG_NS_ID, \"presence\", [\"preserve\", \"dissolve\", \"dissolveStructure\", \"ignore\", \"remove\"]));\n          }\n          return Presence;\n        }(_xfa_object.OptionObject);\n        var Present = /*#__PURE__*/function (_xfa_object$XFAObject122) {\n          _inherits(Present, _xfa_object$XFAObject122);\n          function Present(attributes) {\n            var _this254;\n            _classCallCheck(this, Present);\n            _this254 = _possibleConstructorReturn(this, _getPrototypeOf(Present).call(this, CONFIG_NS_ID, \"present\", true));\n            _this254.behaviorOverride = null;\n            _this254.cache = null;\n            _this254.common = null;\n            _this254.copies = null;\n            _this254.destination = null;\n            _this254.incrementalMerge = null;\n            _this254.layout = null;\n            _this254.output = null;\n            _this254.overprint = null;\n            _this254.pagination = null;\n            _this254.paginationOverride = null;\n            _this254.script = null;\n            _this254.validate = null;\n            _this254.xdp = null;\n            _this254.driver = new _xfa_object.XFAObjectArray();\n            _this254.labelPrinter = new _xfa_object.XFAObjectArray();\n            _this254.pcl = new _xfa_object.XFAObjectArray();\n            _this254.pdf = new _xfa_object.XFAObjectArray();\n            _this254.ps = new _xfa_object.XFAObjectArray();\n            _this254.submitUrl = new _xfa_object.XFAObjectArray();\n            _this254.webClient = new _xfa_object.XFAObjectArray();\n            _this254.zpl = new _xfa_object.XFAObjectArray();\n            return _this254;\n          }\n          return Present;\n        }(_xfa_object.XFAObject);\n        var Print = /*#__PURE__*/function (_xfa_object$Option19) {\n          _inherits(Print, _xfa_object$Option19);\n          function Print(attributes) {\n            _classCallCheck(this, Print);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Print).call(this, CONFIG_NS_ID, \"print\"));\n          }\n          return Print;\n        }(_xfa_object.Option01);\n        var PrintHighQuality = /*#__PURE__*/function (_xfa_object$Option20) {\n          _inherits(PrintHighQuality, _xfa_object$Option20);\n          function PrintHighQuality(attributes) {\n            _classCallCheck(this, PrintHighQuality);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PrintHighQuality).call(this, CONFIG_NS_ID, \"printHighQuality\"));\n          }\n          return PrintHighQuality;\n        }(_xfa_object.Option01);\n        var PrintScaling = /*#__PURE__*/function (_xfa_object$OptionObj23) {\n          _inherits(PrintScaling, _xfa_object$OptionObj23);\n          function PrintScaling(attributes) {\n            _classCallCheck(this, PrintScaling);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PrintScaling).call(this, CONFIG_NS_ID, \"printScaling\", [\"appdefault\", \"noScaling\"]));\n          }\n          return PrintScaling;\n        }(_xfa_object.OptionObject);\n        var PrinterName = /*#__PURE__*/function (_xfa_object$StringObj27) {\n          _inherits(PrinterName, _xfa_object$StringObj27);\n          function PrinterName(attributes) {\n            _classCallCheck(this, PrinterName);\n            return _possibleConstructorReturn(this, _getPrototypeOf(PrinterName).call(this, CONFIG_NS_ID, \"printerName\"));\n          }\n          return PrinterName;\n        }(_xfa_object.StringObject);\n        var Producer = /*#__PURE__*/function (_xfa_object$StringObj28) {\n          _inherits(Producer, _xfa_object$StringObj28);\n          function Producer(attributes) {\n            _classCallCheck(this, Producer);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Producer).call(this, CONFIG_NS_ID, \"producer\"));\n          }\n          return Producer;\n        }(_xfa_object.StringObject);\n        var Ps = /*#__PURE__*/function (_xfa_object$XFAObject123) {\n          _inherits(Ps, _xfa_object$XFAObject123);\n          function Ps(attributes) {\n            var _this255;\n            _classCallCheck(this, Ps);\n            _this255 = _possibleConstructorReturn(this, _getPrototypeOf(Ps).call(this, CONFIG_NS_ID, \"ps\", true));\n            _this255.name = attributes.name || \"\";\n            _this255.batchOutput = null;\n            _this255.fontInfo = null;\n            _this255.jog = null;\n            _this255.mediumInfo = null;\n            _this255.outputBin = null;\n            _this255.staple = null;\n            _this255.xdc = null;\n            return _this255;\n          }\n          return Ps;\n        }(_xfa_object.XFAObject);\n        var Range = /*#__PURE__*/function (_xfa_object$ContentOb15) {\n          _inherits(Range, _xfa_object$ContentOb15);\n          function Range(attributes) {\n            _classCallCheck(this, Range);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Range).call(this, CONFIG_NS_ID, \"range\"));\n          }\n          _createClass(Range, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\\s*,\\s*/, 2).map(function (range) {\n                return range.split(\"-\").map(function (x) {\n                  return parseInt(x.trim(), 10);\n                });\n              }).filter(function (range) {\n                return range.every(function (x) {\n                  return !isNaN(x);\n                });\n              }).map(function (range) {\n                if (range.length === 1) {\n                  range.push(range[0]);\n                }\n                return range;\n              });\n            }\n          }]);\n          return Range;\n        }(_xfa_object.ContentObject);\n        var Record = /*#__PURE__*/function (_xfa_object$ContentOb16) {\n          _inherits(Record, _xfa_object$ContentOb16);\n          function Record(attributes) {\n            _classCallCheck(this, Record);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Record).call(this, CONFIG_NS_ID, \"record\"));\n          }\n          _createClass(Record, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim();\n              var n = parseInt(this[_xfa_object.$content], 10);\n              if (!isNaN(n) && n >= 0) {\n                this[_xfa_object.$content] = n;\n              }\n            }\n          }]);\n          return Record;\n        }(_xfa_object.ContentObject);\n        var Relevant = /*#__PURE__*/function (_xfa_object$ContentOb17) {\n          _inherits(Relevant, _xfa_object$ContentOb17);\n          function Relevant(attributes) {\n            _classCallCheck(this, Relevant);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Relevant).call(this, CONFIG_NS_ID, \"relevant\"));\n          }\n          _createClass(Relevant, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\\s+/);\n            }\n          }]);\n          return Relevant;\n        }(_xfa_object.ContentObject);\n        var Rename = /*#__PURE__*/function (_xfa_object$ContentOb18) {\n          _inherits(Rename, _xfa_object$ContentOb18);\n          function Rename(attributes) {\n            _classCallCheck(this, Rename);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Rename).call(this, CONFIG_NS_ID, \"rename\"));\n          }\n          _createClass(Rename, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim();\n              if (this[_xfa_object.$content].toLowerCase().startsWith(\"xml\") || this[_xfa_object.$content].match(new RegExp(\"[\\\\p{L}_][\\\\p{L}\\\\d._\\\\p{M}-]*\", \"u\"))) {\n                (0, _util.warn)(\"XFA - Rename: invalid XFA name\");\n              }\n            }\n          }]);\n          return Rename;\n        }(_xfa_object.ContentObject);\n        var RenderPolicy = /*#__PURE__*/function (_xfa_object$OptionObj24) {\n          _inherits(RenderPolicy, _xfa_object$OptionObj24);\n          function RenderPolicy(attributes) {\n            _classCallCheck(this, RenderPolicy);\n            return _possibleConstructorReturn(this, _getPrototypeOf(RenderPolicy).call(this, CONFIG_NS_ID, \"renderPolicy\", [\"server\", \"client\"]));\n          }\n          return RenderPolicy;\n        }(_xfa_object.OptionObject);\n        var RunScripts = /*#__PURE__*/function (_xfa_object$OptionObj25) {\n          _inherits(RunScripts, _xfa_object$OptionObj25);\n          function RunScripts(attributes) {\n            _classCallCheck(this, RunScripts);\n            return _possibleConstructorReturn(this, _getPrototypeOf(RunScripts).call(this, CONFIG_NS_ID, \"runScripts\", [\"both\", \"client\", \"none\", \"server\"]));\n          }\n          return RunScripts;\n        }(_xfa_object.OptionObject);\n        var Script = /*#__PURE__*/function (_xfa_object$XFAObject124) {\n          _inherits(Script, _xfa_object$XFAObject124);\n          function Script(attributes) {\n            var _this256;\n            _classCallCheck(this, Script);\n            _this256 = _possibleConstructorReturn(this, _getPrototypeOf(Script).call(this, CONFIG_NS_ID, \"script\", true));\n            _this256.currentPage = null;\n            _this256.exclude = null;\n            _this256.runScripts = null;\n            return _this256;\n          }\n          return Script;\n        }(_xfa_object.XFAObject);\n        var ScriptModel = /*#__PURE__*/function (_xfa_object$OptionObj26) {\n          _inherits(ScriptModel, _xfa_object$OptionObj26);\n          function ScriptModel(attributes) {\n            _classCallCheck(this, ScriptModel);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ScriptModel).call(this, CONFIG_NS_ID, \"scriptModel\", [\"XFA\", \"none\"]));\n          }\n          return ScriptModel;\n        }(_xfa_object.OptionObject);\n        var Severity = /*#__PURE__*/function (_xfa_object$OptionObj27) {\n          _inherits(Severity, _xfa_object$OptionObj27);\n          function Severity(attributes) {\n            _classCallCheck(this, Severity);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Severity).call(this, CONFIG_NS_ID, \"severity\", [\"ignore\", \"error\", \"information\", \"trace\", \"warning\"]));\n          }\n          return Severity;\n        }(_xfa_object.OptionObject);\n        var SilentPrint = /*#__PURE__*/function (_xfa_object$XFAObject125) {\n          _inherits(SilentPrint, _xfa_object$XFAObject125);\n          function SilentPrint(attributes) {\n            var _this257;\n            _classCallCheck(this, SilentPrint);\n            _this257 = _possibleConstructorReturn(this, _getPrototypeOf(SilentPrint).call(this, CONFIG_NS_ID, \"silentPrint\", true));\n            _this257.addSilentPrint = null;\n            _this257.printerName = null;\n            return _this257;\n          }\n          return SilentPrint;\n        }(_xfa_object.XFAObject);\n        var Staple = /*#__PURE__*/function (_xfa_object$XFAObject126) {\n          _inherits(Staple, _xfa_object$XFAObject126);\n          function Staple(attributes) {\n            var _this258;\n            _classCallCheck(this, Staple);\n            _this258 = _possibleConstructorReturn(this, _getPrototypeOf(Staple).call(this, CONFIG_NS_ID, \"staple\"));\n            _this258.mode = (0, _utils.getStringOption)(attributes.mode, [\"usePrinterSetting\", \"on\", \"off\"]);\n            return _this258;\n          }\n          return Staple;\n        }(_xfa_object.XFAObject);\n        var StartNode = /*#__PURE__*/function (_xfa_object$StringObj29) {\n          _inherits(StartNode, _xfa_object$StringObj29);\n          function StartNode(attributes) {\n            _classCallCheck(this, StartNode);\n            return _possibleConstructorReturn(this, _getPrototypeOf(StartNode).call(this, CONFIG_NS_ID, \"startNode\"));\n          }\n          return StartNode;\n        }(_xfa_object.StringObject);\n        var StartPage = /*#__PURE__*/function (_xfa_object$IntegerOb8) {\n          _inherits(StartPage, _xfa_object$IntegerOb8);\n          function StartPage(attributes) {\n            _classCallCheck(this, StartPage);\n            return _possibleConstructorReturn(this, _getPrototypeOf(StartPage).call(this, CONFIG_NS_ID, \"startPage\", 0, function (n) {\n              return true;\n            }));\n          }\n          return StartPage;\n        }(_xfa_object.IntegerObject);\n        var SubmitFormat = /*#__PURE__*/function (_xfa_object$OptionObj28) {\n          _inherits(SubmitFormat, _xfa_object$OptionObj28);\n          function SubmitFormat(attributes) {\n            _classCallCheck(this, SubmitFormat);\n            return _possibleConstructorReturn(this, _getPrototypeOf(SubmitFormat).call(this, CONFIG_NS_ID, \"submitFormat\", [\"html\", \"delegate\", \"fdf\", \"xml\", \"pdf\"]));\n          }\n          return SubmitFormat;\n        }(_xfa_object.OptionObject);\n        var SubmitUrl = /*#__PURE__*/function (_xfa_object$StringObj30) {\n          _inherits(SubmitUrl, _xfa_object$StringObj30);\n          function SubmitUrl(attributes) {\n            _classCallCheck(this, SubmitUrl);\n            return _possibleConstructorReturn(this, _getPrototypeOf(SubmitUrl).call(this, CONFIG_NS_ID, \"submitUrl\"));\n          }\n          return SubmitUrl;\n        }(_xfa_object.StringObject);\n        var SubsetBelow = /*#__PURE__*/function (_xfa_object$IntegerOb9) {\n          _inherits(SubsetBelow, _xfa_object$IntegerOb9);\n          function SubsetBelow(attributes) {\n            _classCallCheck(this, SubsetBelow);\n            return _possibleConstructorReturn(this, _getPrototypeOf(SubsetBelow).call(this, CONFIG_NS_ID, \"subsetBelow\", 100, function (n) {\n              return n >= 0 && n <= 100;\n            }));\n          }\n          return SubsetBelow;\n        }(_xfa_object.IntegerObject);\n        var SuppressBanner = /*#__PURE__*/function (_xfa_object$Option21) {\n          _inherits(SuppressBanner, _xfa_object$Option21);\n          function SuppressBanner(attributes) {\n            _classCallCheck(this, SuppressBanner);\n            return _possibleConstructorReturn(this, _getPrototypeOf(SuppressBanner).call(this, CONFIG_NS_ID, \"suppressBanner\"));\n          }\n          return SuppressBanner;\n        }(_xfa_object.Option01);\n        var Tagged = /*#__PURE__*/function (_xfa_object$Option22) {\n          _inherits(Tagged, _xfa_object$Option22);\n          function Tagged(attributes) {\n            _classCallCheck(this, Tagged);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Tagged).call(this, CONFIG_NS_ID, \"tagged\"));\n          }\n          return Tagged;\n        }(_xfa_object.Option01);\n        var Template = /*#__PURE__*/function (_xfa_object$XFAObject127) {\n          _inherits(Template, _xfa_object$XFAObject127);\n          function Template(attributes) {\n            var _this259;\n            _classCallCheck(this, Template);\n            _this259 = _possibleConstructorReturn(this, _getPrototypeOf(Template).call(this, CONFIG_NS_ID, \"template\", true));\n            _this259.base = null;\n            _this259.relevant = null;\n            _this259.startPage = null;\n            _this259.uri = null;\n            _this259.xsl = null;\n            return _this259;\n          }\n          return Template;\n        }(_xfa_object.XFAObject);\n        var Threshold = /*#__PURE__*/function (_xfa_object$OptionObj29) {\n          _inherits(Threshold, _xfa_object$OptionObj29);\n          function Threshold(attributes) {\n            _classCallCheck(this, Threshold);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Threshold).call(this, CONFIG_NS_ID, \"threshold\", [\"trace\", \"error\", \"information\", \"warning\"]));\n          }\n          return Threshold;\n        }(_xfa_object.OptionObject);\n        var To = /*#__PURE__*/function (_xfa_object$OptionObj30) {\n          _inherits(To, _xfa_object$OptionObj30);\n          function To(attributes) {\n            _classCallCheck(this, To);\n            return _possibleConstructorReturn(this, _getPrototypeOf(To).call(this, CONFIG_NS_ID, \"to\", [\"null\", \"memory\", \"stderr\", \"stdout\", \"system\", \"uri\"]));\n          }\n          return To;\n        }(_xfa_object.OptionObject);\n        var TemplateCache = /*#__PURE__*/function (_xfa_object$XFAObject128) {\n          _inherits(TemplateCache, _xfa_object$XFAObject128);\n          function TemplateCache(attributes) {\n            var _this260;\n            _classCallCheck(this, TemplateCache);\n            _this260 = _possibleConstructorReturn(this, _getPrototypeOf(TemplateCache).call(this, CONFIG_NS_ID, \"templateCache\"));\n            _this260.maxEntries = (0, _utils.getInteger)({\n              data: attributes.maxEntries,\n              defaultValue: 5,\n              validate: function validate(n) {\n                return n >= 0;\n              }\n            });\n            return _this260;\n          }\n          return TemplateCache;\n        }(_xfa_object.XFAObject);\n        var Trace = /*#__PURE__*/function (_xfa_object$XFAObject129) {\n          _inherits(Trace, _xfa_object$XFAObject129);\n          function Trace(attributes) {\n            var _this261;\n            _classCallCheck(this, Trace);\n            _this261 = _possibleConstructorReturn(this, _getPrototypeOf(Trace).call(this, CONFIG_NS_ID, \"trace\", true));\n            _this261.area = new _xfa_object.XFAObjectArray();\n            return _this261;\n          }\n          return Trace;\n        }(_xfa_object.XFAObject);\n        var Transform = /*#__PURE__*/function (_xfa_object$XFAObject130) {\n          _inherits(Transform, _xfa_object$XFAObject130);\n          function Transform(attributes) {\n            var _this262;\n            _classCallCheck(this, Transform);\n            _this262 = _possibleConstructorReturn(this, _getPrototypeOf(Transform).call(this, CONFIG_NS_ID, \"transform\", true));\n            _this262.groupParent = null;\n            _this262.ifEmpty = null;\n            _this262.nameAttr = null;\n            _this262.picture = null;\n            _this262.presence = null;\n            _this262.rename = null;\n            _this262.whitespace = null;\n            return _this262;\n          }\n          return Transform;\n        }(_xfa_object.XFAObject);\n        var Type = /*#__PURE__*/function (_xfa_object$OptionObj31) {\n          _inherits(Type, _xfa_object$OptionObj31);\n          function Type(attributes) {\n            _classCallCheck(this, Type);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Type).call(this, CONFIG_NS_ID, \"type\", [\"none\", \"ascii85\", \"asciiHex\", \"ccittfax\", \"flate\", \"lzw\", \"runLength\", \"native\", \"xdp\", \"mergedXDP\"]));\n          }\n          return Type;\n        }(_xfa_object.OptionObject);\n        var Uri = /*#__PURE__*/function (_xfa_object$StringObj31) {\n          _inherits(Uri, _xfa_object$StringObj31);\n          function Uri(attributes) {\n            _classCallCheck(this, Uri);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Uri).call(this, CONFIG_NS_ID, \"uri\"));\n          }\n          return Uri;\n        }(_xfa_object.StringObject);\n        var Validate = /*#__PURE__*/function (_xfa_object$OptionObj32) {\n          _inherits(Validate, _xfa_object$OptionObj32);\n          function Validate(attributes) {\n            _classCallCheck(this, Validate);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Validate).call(this, CONFIG_NS_ID, \"validate\", [\"preSubmit\", \"prePrint\", \"preExecute\", \"preSave\"]));\n          }\n          return Validate;\n        }(_xfa_object.OptionObject);\n        var ValidateApprovalSignatures = /*#__PURE__*/function (_xfa_object$ContentOb19) {\n          _inherits(ValidateApprovalSignatures, _xfa_object$ContentOb19);\n          function ValidateApprovalSignatures(attributes) {\n            _classCallCheck(this, ValidateApprovalSignatures);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ValidateApprovalSignatures).call(this, CONFIG_NS_ID, \"validateApprovalSignatures\"));\n          }\n          _createClass(ValidateApprovalSignatures, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\\s+/).filter(function (x) {\n                return [\"docReady\", \"postSign\"].includes(x);\n              });\n            }\n          }]);\n          return ValidateApprovalSignatures;\n        }(_xfa_object.ContentObject);\n        var ValidationMessaging = /*#__PURE__*/function (_xfa_object$OptionObj33) {\n          _inherits(ValidationMessaging, _xfa_object$OptionObj33);\n          function ValidationMessaging(attributes) {\n            _classCallCheck(this, ValidationMessaging);\n            return _possibleConstructorReturn(this, _getPrototypeOf(ValidationMessaging).call(this, CONFIG_NS_ID, \"validationMessaging\", [\"allMessagesIndividually\", \"allMessagesTogether\", \"firstMessageOnly\", \"noMessages\"]));\n          }\n          return ValidationMessaging;\n        }(_xfa_object.OptionObject);\n        var Version = /*#__PURE__*/function (_xfa_object$OptionObj34) {\n          _inherits(Version, _xfa_object$OptionObj34);\n          function Version(attributes) {\n            _classCallCheck(this, Version);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Version).call(this, CONFIG_NS_ID, \"version\", [\"1.7\", \"1.6\", \"1.5\", \"1.4\", \"1.3\", \"1.2\"]));\n          }\n          return Version;\n        }(_xfa_object.OptionObject);\n        var VersionControl = /*#__PURE__*/function (_xfa_object$XFAObject131) {\n          _inherits(VersionControl, _xfa_object$XFAObject131);\n          function VersionControl(attributes) {\n            var _this263;\n            _classCallCheck(this, VersionControl);\n            _this263 = _possibleConstructorReturn(this, _getPrototypeOf(VersionControl).call(this, CONFIG_NS_ID, \"VersionControl\"));\n            _this263.outputBelow = (0, _utils.getStringOption)(attributes.outputBelow, [\"warn\", \"error\", \"update\"]);\n            _this263.sourceAbove = (0, _utils.getStringOption)(attributes.sourceAbove, [\"warn\", \"error\"]);\n            _this263.sourceBelow = (0, _utils.getStringOption)(attributes.sourceBelow, [\"update\", \"maintain\"]);\n            return _this263;\n          }\n          return VersionControl;\n        }(_xfa_object.XFAObject);\n        var ViewerPreferences = /*#__PURE__*/function (_xfa_object$XFAObject132) {\n          _inherits(ViewerPreferences, _xfa_object$XFAObject132);\n          function ViewerPreferences(attributes) {\n            var _this264;\n            _classCallCheck(this, ViewerPreferences);\n            _this264 = _possibleConstructorReturn(this, _getPrototypeOf(ViewerPreferences).call(this, CONFIG_NS_ID, \"viewerPreferences\", true));\n            _this264.ADBE_JSConsole = null;\n            _this264.ADBE_JSDebugger = null;\n            _this264.addViewerPreferences = null;\n            _this264.duplexOption = null;\n            _this264.enforce = null;\n            _this264.numberOfCopies = null;\n            _this264.pageRange = null;\n            _this264.pickTrayByPDFSize = null;\n            _this264.printScaling = null;\n            return _this264;\n          }\n          return ViewerPreferences;\n        }(_xfa_object.XFAObject);\n        var WebClient = /*#__PURE__*/function (_xfa_object$XFAObject133) {\n          _inherits(WebClient, _xfa_object$XFAObject133);\n          function WebClient(attributes) {\n            var _this265;\n            _classCallCheck(this, WebClient);\n            _this265 = _possibleConstructorReturn(this, _getPrototypeOf(WebClient).call(this, CONFIG_NS_ID, \"webClient\", true));\n            _this265.name = attributes.name ? attributes.name.trim() : \"\";\n            _this265.fontInfo = null;\n            _this265.xdc = null;\n            return _this265;\n          }\n          return WebClient;\n        }(_xfa_object.XFAObject);\n        var Whitespace = /*#__PURE__*/function (_xfa_object$OptionObj35) {\n          _inherits(Whitespace, _xfa_object$OptionObj35);\n          function Whitespace(attributes) {\n            _classCallCheck(this, Whitespace);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Whitespace).call(this, CONFIG_NS_ID, \"whitespace\", [\"preserve\", \"ltrim\", \"normalize\", \"rtrim\", \"trim\"]));\n          }\n          return Whitespace;\n        }(_xfa_object.OptionObject);\n        var Window = /*#__PURE__*/function (_xfa_object$ContentOb20) {\n          _inherits(Window, _xfa_object$ContentOb20);\n          function Window(attributes) {\n            _classCallCheck(this, Window);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Window).call(this, CONFIG_NS_ID, \"window\"));\n          }\n          _createClass(Window, [{\n            key: _xfa_object.$finalize,\n            value: function value() {\n              var pair = this[_xfa_object.$content].trim().split(/\\s*,\\s*/, 2).map(function (x) {\n                return parseInt(x, 10);\n              });\n              if (pair.some(function (x) {\n                return isNaN(x);\n              })) {\n                this[_xfa_object.$content] = [0, 0];\n                return;\n              }\n              if (pair.length === 1) {\n                pair.push(pair[0]);\n              }\n              this[_xfa_object.$content] = pair;\n            }\n          }]);\n          return Window;\n        }(_xfa_object.ContentObject);\n        var Xdc = /*#__PURE__*/function (_xfa_object$XFAObject134) {\n          _inherits(Xdc, _xfa_object$XFAObject134);\n          function Xdc(attributes) {\n            var _this266;\n            _classCallCheck(this, Xdc);\n            _this266 = _possibleConstructorReturn(this, _getPrototypeOf(Xdc).call(this, CONFIG_NS_ID, \"xdc\", true));\n            _this266.uri = new _xfa_object.XFAObjectArray();\n            _this266.xsl = new _xfa_object.XFAObjectArray();\n            return _this266;\n          }\n          return Xdc;\n        }(_xfa_object.XFAObject);\n        var Xdp = /*#__PURE__*/function (_xfa_object$XFAObject135) {\n          _inherits(Xdp, _xfa_object$XFAObject135);\n          function Xdp(attributes) {\n            var _this267;\n            _classCallCheck(this, Xdp);\n            _this267 = _possibleConstructorReturn(this, _getPrototypeOf(Xdp).call(this, CONFIG_NS_ID, \"xdp\", true));\n            _this267.packets = null;\n            return _this267;\n          }\n          return Xdp;\n        }(_xfa_object.XFAObject);\n        var Xsl = /*#__PURE__*/function (_xfa_object$XFAObject136) {\n          _inherits(Xsl, _xfa_object$XFAObject136);\n          function Xsl(attributes) {\n            var _this268;\n            _classCallCheck(this, Xsl);\n            _this268 = _possibleConstructorReturn(this, _getPrototypeOf(Xsl).call(this, CONFIG_NS_ID, \"xsl\", true));\n            _this268.debug = null;\n            _this268.uri = null;\n            return _this268;\n          }\n          return Xsl;\n        }(_xfa_object.XFAObject);\n        var Zpl = /*#__PURE__*/function (_xfa_object$XFAObject137) {\n          _inherits(Zpl, _xfa_object$XFAObject137);\n          function Zpl(attributes) {\n            var _this269;\n            _classCallCheck(this, Zpl);\n            _this269 = _possibleConstructorReturn(this, _getPrototypeOf(Zpl).call(this, CONFIG_NS_ID, \"zpl\", true));\n            _this269.name = attributes.name ? attributes.name.trim() : \"\";\n            _this269.batchOutput = null;\n            _this269.flipLabel = null;\n            _this269.fontInfo = null;\n            _this269.xdc = null;\n            return _this269;\n          }\n          return Zpl;\n        }(_xfa_object.XFAObject);\n        var ConfigNamespace = /*#__PURE__*/function () {\n          function ConfigNamespace() {\n            _classCallCheck(this, ConfigNamespace);\n          }\n          _createClass(ConfigNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (ConfigNamespace.hasOwnProperty(name)) {\n                return ConfigNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"acrobat\",\n            value: function acrobat(attrs) {\n              return new Acrobat(attrs);\n            }\n          }, {\n            key: \"acrobat7\",\n            value: function acrobat7(attrs) {\n              return new Acrobat7(attrs);\n            }\n          }, {\n            key: \"ADBE_JSConsole\",\n            value: function ADBE_JSConsole(attrs) {\n              return new _ADBE_JSConsole(attrs);\n            }\n          }, {\n            key: \"ADBE_JSDebugger\",\n            value: function ADBE_JSDebugger(attrs) {\n              return new _ADBE_JSDebugger(attrs);\n            }\n          }, {\n            key: \"addSilentPrint\",\n            value: function addSilentPrint(attrs) {\n              return new AddSilentPrint(attrs);\n            }\n          }, {\n            key: \"addViewerPreferences\",\n            value: function addViewerPreferences(attrs) {\n              return new AddViewerPreferences(attrs);\n            }\n          }, {\n            key: \"adjustData\",\n            value: function adjustData(attrs) {\n              return new AdjustData(attrs);\n            }\n          }, {\n            key: \"adobeExtensionLevel\",\n            value: function adobeExtensionLevel(attrs) {\n              return new AdobeExtensionLevel(attrs);\n            }\n          }, {\n            key: \"agent\",\n            value: function agent(attrs) {\n              return new Agent(attrs);\n            }\n          }, {\n            key: \"alwaysEmbed\",\n            value: function alwaysEmbed(attrs) {\n              return new AlwaysEmbed(attrs);\n            }\n          }, {\n            key: \"amd\",\n            value: function amd(attrs) {\n              return new Amd(attrs);\n            }\n          }, {\n            key: \"area\",\n            value: function area(attrs) {\n              return new Area(attrs);\n            }\n          }, {\n            key: \"attributes\",\n            value: function attributes(attrs) {\n              return new Attributes(attrs);\n            }\n          }, {\n            key: \"autoSave\",\n            value: function autoSave(attrs) {\n              return new AutoSave(attrs);\n            }\n          }, {\n            key: \"base\",\n            value: function base(attrs) {\n              return new Base(attrs);\n            }\n          }, {\n            key: \"batchOutput\",\n            value: function batchOutput(attrs) {\n              return new BatchOutput(attrs);\n            }\n          }, {\n            key: \"behaviorOverride\",\n            value: function behaviorOverride(attrs) {\n              return new BehaviorOverride(attrs);\n            }\n          }, {\n            key: \"cache\",\n            value: function cache(attrs) {\n              return new Cache(attrs);\n            }\n          }, {\n            key: \"change\",\n            value: function change(attrs) {\n              return new Change(attrs);\n            }\n          }, {\n            key: \"common\",\n            value: function common(attrs) {\n              return new Common(attrs);\n            }\n          }, {\n            key: \"compress\",\n            value: function compress(attrs) {\n              return new Compress(attrs);\n            }\n          }, {\n            key: \"compressLogicalStructure\",\n            value: function compressLogicalStructure(attrs) {\n              return new CompressLogicalStructure(attrs);\n            }\n          }, {\n            key: \"compressObjectStream\",\n            value: function compressObjectStream(attrs) {\n              return new CompressObjectStream(attrs);\n            }\n          }, {\n            key: \"compression\",\n            value: function compression(attrs) {\n              return new Compression(attrs);\n            }\n          }, {\n            key: \"config\",\n            value: function config(attrs) {\n              return new Config(attrs);\n            }\n          }, {\n            key: \"conformance\",\n            value: function conformance(attrs) {\n              return new Conformance(attrs);\n            }\n          }, {\n            key: \"contentCopy\",\n            value: function contentCopy(attrs) {\n              return new ContentCopy(attrs);\n            }\n          }, {\n            key: \"copies\",\n            value: function copies(attrs) {\n              return new Copies(attrs);\n            }\n          }, {\n            key: \"creator\",\n            value: function creator(attrs) {\n              return new Creator(attrs);\n            }\n          }, {\n            key: \"currentPage\",\n            value: function currentPage(attrs) {\n              return new CurrentPage(attrs);\n            }\n          }, {\n            key: \"data\",\n            value: function data(attrs) {\n              return new Data(attrs);\n            }\n          }, {\n            key: \"debug\",\n            value: function debug(attrs) {\n              return new Debug(attrs);\n            }\n          }, {\n            key: \"defaultTypeface\",\n            value: function defaultTypeface(attrs) {\n              return new DefaultTypeface(attrs);\n            }\n          }, {\n            key: \"destination\",\n            value: function destination(attrs) {\n              return new Destination(attrs);\n            }\n          }, {\n            key: \"documentAssembly\",\n            value: function documentAssembly(attrs) {\n              return new DocumentAssembly(attrs);\n            }\n          }, {\n            key: \"driver\",\n            value: function driver(attrs) {\n              return new Driver(attrs);\n            }\n          }, {\n            key: \"duplexOption\",\n            value: function duplexOption(attrs) {\n              return new DuplexOption(attrs);\n            }\n          }, {\n            key: \"dynamicRender\",\n            value: function dynamicRender(attrs) {\n              return new DynamicRender(attrs);\n            }\n          }, {\n            key: \"embed\",\n            value: function embed(attrs) {\n              return new Embed(attrs);\n            }\n          }, {\n            key: \"encrypt\",\n            value: function encrypt(attrs) {\n              return new Encrypt(attrs);\n            }\n          }, {\n            key: \"encryption\",\n            value: function encryption(attrs) {\n              return new Encryption(attrs);\n            }\n          }, {\n            key: \"encryptionLevel\",\n            value: function encryptionLevel(attrs) {\n              return new EncryptionLevel(attrs);\n            }\n          }, {\n            key: \"enforce\",\n            value: function enforce(attrs) {\n              return new Enforce(attrs);\n            }\n          }, {\n            key: \"equate\",\n            value: function equate(attrs) {\n              return new Equate(attrs);\n            }\n          }, {\n            key: \"equateRange\",\n            value: function equateRange(attrs) {\n              return new EquateRange(attrs);\n            }\n          }, {\n            key: \"exclude\",\n            value: function exclude(attrs) {\n              return new Exclude(attrs);\n            }\n          }, {\n            key: \"excludeNS\",\n            value: function excludeNS(attrs) {\n              return new ExcludeNS(attrs);\n            }\n          }, {\n            key: \"flipLabel\",\n            value: function flipLabel(attrs) {\n              return new FlipLabel(attrs);\n            }\n          }, {\n            key: \"fontInfo\",\n            value: function fontInfo(attrs) {\n              return new FontInfo(attrs);\n            }\n          }, {\n            key: \"formFieldFilling\",\n            value: function formFieldFilling(attrs) {\n              return new FormFieldFilling(attrs);\n            }\n          }, {\n            key: \"groupParent\",\n            value: function groupParent(attrs) {\n              return new GroupParent(attrs);\n            }\n          }, {\n            key: \"ifEmpty\",\n            value: function ifEmpty(attrs) {\n              return new IfEmpty(attrs);\n            }\n          }, {\n            key: \"includeXDPContent\",\n            value: function includeXDPContent(attrs) {\n              return new IncludeXDPContent(attrs);\n            }\n          }, {\n            key: \"incrementalLoad\",\n            value: function incrementalLoad(attrs) {\n              return new IncrementalLoad(attrs);\n            }\n          }, {\n            key: \"incrementalMerge\",\n            value: function incrementalMerge(attrs) {\n              return new IncrementalMerge(attrs);\n            }\n          }, {\n            key: \"interactive\",\n            value: function interactive(attrs) {\n              return new Interactive(attrs);\n            }\n          }, {\n            key: \"jog\",\n            value: function jog(attrs) {\n              return new Jog(attrs);\n            }\n          }, {\n            key: \"labelPrinter\",\n            value: function labelPrinter(attrs) {\n              return new LabelPrinter(attrs);\n            }\n          }, {\n            key: \"layout\",\n            value: function layout(attrs) {\n              return new Layout(attrs);\n            }\n          }, {\n            key: \"level\",\n            value: function level(attrs) {\n              return new Level(attrs);\n            }\n          }, {\n            key: \"linearized\",\n            value: function linearized(attrs) {\n              return new Linearized(attrs);\n            }\n          }, {\n            key: \"locale\",\n            value: function locale(attrs) {\n              return new Locale(attrs);\n            }\n          }, {\n            key: \"localeSet\",\n            value: function localeSet(attrs) {\n              return new LocaleSet(attrs);\n            }\n          }, {\n            key: \"log\",\n            value: function log(attrs) {\n              return new Log(attrs);\n            }\n          }, {\n            key: \"map\",\n            value: function map(attrs) {\n              return new MapElement(attrs);\n            }\n          }, {\n            key: \"mediumInfo\",\n            value: function mediumInfo(attrs) {\n              return new MediumInfo(attrs);\n            }\n          }, {\n            key: \"message\",\n            value: function message(attrs) {\n              return new Message(attrs);\n            }\n          }, {\n            key: \"messaging\",\n            value: function messaging(attrs) {\n              return new Messaging(attrs);\n            }\n          }, {\n            key: \"mode\",\n            value: function mode(attrs) {\n              return new Mode(attrs);\n            }\n          }, {\n            key: \"modifyAnnots\",\n            value: function modifyAnnots(attrs) {\n              return new ModifyAnnots(attrs);\n            }\n          }, {\n            key: \"msgId\",\n            value: function msgId(attrs) {\n              return new MsgId(attrs);\n            }\n          }, {\n            key: \"nameAttr\",\n            value: function nameAttr(attrs) {\n              return new NameAttr(attrs);\n            }\n          }, {\n            key: \"neverEmbed\",\n            value: function neverEmbed(attrs) {\n              return new NeverEmbed(attrs);\n            }\n          }, {\n            key: \"numberOfCopies\",\n            value: function numberOfCopies(attrs) {\n              return new NumberOfCopies(attrs);\n            }\n          }, {\n            key: \"openAction\",\n            value: function openAction(attrs) {\n              return new OpenAction(attrs);\n            }\n          }, {\n            key: \"output\",\n            value: function output(attrs) {\n              return new Output(attrs);\n            }\n          }, {\n            key: \"outputBin\",\n            value: function outputBin(attrs) {\n              return new OutputBin(attrs);\n            }\n          }, {\n            key: \"outputXSL\",\n            value: function outputXSL(attrs) {\n              return new OutputXSL(attrs);\n            }\n          }, {\n            key: \"overprint\",\n            value: function overprint(attrs) {\n              return new Overprint(attrs);\n            }\n          }, {\n            key: \"packets\",\n            value: function packets(attrs) {\n              return new Packets(attrs);\n            }\n          }, {\n            key: \"pageOffset\",\n            value: function pageOffset(attrs) {\n              return new PageOffset(attrs);\n            }\n          }, {\n            key: \"pageRange\",\n            value: function pageRange(attrs) {\n              return new PageRange(attrs);\n            }\n          }, {\n            key: \"pagination\",\n            value: function pagination(attrs) {\n              return new Pagination(attrs);\n            }\n          }, {\n            key: \"paginationOverride\",\n            value: function paginationOverride(attrs) {\n              return new PaginationOverride(attrs);\n            }\n          }, {\n            key: \"part\",\n            value: function part(attrs) {\n              return new Part(attrs);\n            }\n          }, {\n            key: \"pcl\",\n            value: function pcl(attrs) {\n              return new Pcl(attrs);\n            }\n          }, {\n            key: \"pdf\",\n            value: function pdf(attrs) {\n              return new Pdf(attrs);\n            }\n          }, {\n            key: \"pdfa\",\n            value: function pdfa(attrs) {\n              return new Pdfa(attrs);\n            }\n          }, {\n            key: \"permissions\",\n            value: function permissions(attrs) {\n              return new Permissions(attrs);\n            }\n          }, {\n            key: \"pickTrayByPDFSize\",\n            value: function pickTrayByPDFSize(attrs) {\n              return new PickTrayByPDFSize(attrs);\n            }\n          }, {\n            key: \"picture\",\n            value: function picture(attrs) {\n              return new Picture(attrs);\n            }\n          }, {\n            key: \"plaintextMetadata\",\n            value: function plaintextMetadata(attrs) {\n              return new PlaintextMetadata(attrs);\n            }\n          }, {\n            key: \"presence\",\n            value: function presence(attrs) {\n              return new Presence(attrs);\n            }\n          }, {\n            key: \"present\",\n            value: function present(attrs) {\n              return new Present(attrs);\n            }\n          }, {\n            key: \"print\",\n            value: function print(attrs) {\n              return new Print(attrs);\n            }\n          }, {\n            key: \"printHighQuality\",\n            value: function printHighQuality(attrs) {\n              return new PrintHighQuality(attrs);\n            }\n          }, {\n            key: \"printScaling\",\n            value: function printScaling(attrs) {\n              return new PrintScaling(attrs);\n            }\n          }, {\n            key: \"printerName\",\n            value: function printerName(attrs) {\n              return new PrinterName(attrs);\n            }\n          }, {\n            key: \"producer\",\n            value: function producer(attrs) {\n              return new Producer(attrs);\n            }\n          }, {\n            key: \"ps\",\n            value: function ps(attrs) {\n              return new Ps(attrs);\n            }\n          }, {\n            key: \"range\",\n            value: function range(attrs) {\n              return new Range(attrs);\n            }\n          }, {\n            key: \"record\",\n            value: function record(attrs) {\n              return new Record(attrs);\n            }\n          }, {\n            key: \"relevant\",\n            value: function relevant(attrs) {\n              return new Relevant(attrs);\n            }\n          }, {\n            key: \"rename\",\n            value: function rename(attrs) {\n              return new Rename(attrs);\n            }\n          }, {\n            key: \"renderPolicy\",\n            value: function renderPolicy(attrs) {\n              return new RenderPolicy(attrs);\n            }\n          }, {\n            key: \"runScripts\",\n            value: function runScripts(attrs) {\n              return new RunScripts(attrs);\n            }\n          }, {\n            key: \"script\",\n            value: function script(attrs) {\n              return new Script(attrs);\n            }\n          }, {\n            key: \"scriptModel\",\n            value: function scriptModel(attrs) {\n              return new ScriptModel(attrs);\n            }\n          }, {\n            key: \"severity\",\n            value: function severity(attrs) {\n              return new Severity(attrs);\n            }\n          }, {\n            key: \"silentPrint\",\n            value: function silentPrint(attrs) {\n              return new SilentPrint(attrs);\n            }\n          }, {\n            key: \"staple\",\n            value: function staple(attrs) {\n              return new Staple(attrs);\n            }\n          }, {\n            key: \"startNode\",\n            value: function startNode(attrs) {\n              return new StartNode(attrs);\n            }\n          }, {\n            key: \"startPage\",\n            value: function startPage(attrs) {\n              return new StartPage(attrs);\n            }\n          }, {\n            key: \"submitFormat\",\n            value: function submitFormat(attrs) {\n              return new SubmitFormat(attrs);\n            }\n          }, {\n            key: \"submitUrl\",\n            value: function submitUrl(attrs) {\n              return new SubmitUrl(attrs);\n            }\n          }, {\n            key: \"subsetBelow\",\n            value: function subsetBelow(attrs) {\n              return new SubsetBelow(attrs);\n            }\n          }, {\n            key: \"suppressBanner\",\n            value: function suppressBanner(attrs) {\n              return new SuppressBanner(attrs);\n            }\n          }, {\n            key: \"tagged\",\n            value: function tagged(attrs) {\n              return new Tagged(attrs);\n            }\n          }, {\n            key: \"template\",\n            value: function template(attrs) {\n              return new Template(attrs);\n            }\n          }, {\n            key: \"templateCache\",\n            value: function templateCache(attrs) {\n              return new TemplateCache(attrs);\n            }\n          }, {\n            key: \"threshold\",\n            value: function threshold(attrs) {\n              return new Threshold(attrs);\n            }\n          }, {\n            key: \"to\",\n            value: function to(attrs) {\n              return new To(attrs);\n            }\n          }, {\n            key: \"trace\",\n            value: function trace(attrs) {\n              return new Trace(attrs);\n            }\n          }, {\n            key: \"transform\",\n            value: function transform(attrs) {\n              return new Transform(attrs);\n            }\n          }, {\n            key: \"type\",\n            value: function type(attrs) {\n              return new Type(attrs);\n            }\n          }, {\n            key: \"uri\",\n            value: function uri(attrs) {\n              return new Uri(attrs);\n            }\n          }, {\n            key: \"validate\",\n            value: function validate(attrs) {\n              return new Validate(attrs);\n            }\n          }, {\n            key: \"validateApprovalSignatures\",\n            value: function validateApprovalSignatures(attrs) {\n              return new ValidateApprovalSignatures(attrs);\n            }\n          }, {\n            key: \"validationMessaging\",\n            value: function validationMessaging(attrs) {\n              return new ValidationMessaging(attrs);\n            }\n          }, {\n            key: \"version\",\n            value: function version(attrs) {\n              return new Version(attrs);\n            }\n          }, {\n            key: \"versionControl\",\n            value: function versionControl(attrs) {\n              return new VersionControl(attrs);\n            }\n          }, {\n            key: \"viewerPreferences\",\n            value: function viewerPreferences(attrs) {\n              return new ViewerPreferences(attrs);\n            }\n          }, {\n            key: \"webClient\",\n            value: function webClient(attrs) {\n              return new WebClient(attrs);\n            }\n          }, {\n            key: \"whitespace\",\n            value: function whitespace(attrs) {\n              return new Whitespace(attrs);\n            }\n          }, {\n            key: \"window\",\n            value: function window(attrs) {\n              return new Window(attrs);\n            }\n          }, {\n            key: \"xdc\",\n            value: function xdc(attrs) {\n              return new Xdc(attrs);\n            }\n          }, {\n            key: \"xdp\",\n            value: function xdp(attrs) {\n              return new Xdp(attrs);\n            }\n          }, {\n            key: \"xsl\",\n            value: function xsl(attrs) {\n              return new Xsl(attrs);\n            }\n          }, {\n            key: \"zpl\",\n            value: function zpl(attrs) {\n              return new Zpl(attrs);\n            }\n          }]);\n          return ConfigNamespace;\n        }();\n        exports.ConfigNamespace = ConfigNamespace;\n\n        /***/\n      }, /* 92 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ConnectionSetNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var CONNECTION_SET_NS_ID = _namespaces.NamespaceIds.connectionSet.id;\n        var ConnectionSet = /*#__PURE__*/function (_xfa_object$XFAObject138) {\n          _inherits(ConnectionSet, _xfa_object$XFAObject138);\n          function ConnectionSet(attributes) {\n            var _this270;\n            _classCallCheck(this, ConnectionSet);\n            _this270 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionSet).call(this, CONNECTION_SET_NS_ID, \"connectionSet\", true));\n            _this270.wsdlConnection = new _xfa_object.XFAObjectArray();\n            _this270.xmlConnection = new _xfa_object.XFAObjectArray();\n            _this270.xsdConnection = new _xfa_object.XFAObjectArray();\n            return _this270;\n          }\n          return ConnectionSet;\n        }(_xfa_object.XFAObject);\n        var EffectiveInputPolicy = /*#__PURE__*/function (_xfa_object$XFAObject139) {\n          _inherits(EffectiveInputPolicy, _xfa_object$XFAObject139);\n          function EffectiveInputPolicy(attributes) {\n            var _this271;\n            _classCallCheck(this, EffectiveInputPolicy);\n            _this271 = _possibleConstructorReturn(this, _getPrototypeOf(EffectiveInputPolicy).call(this, CONNECTION_SET_NS_ID, \"effectiveInputPolicy\"));\n            _this271.id = attributes.id || \"\";\n            _this271.name = attributes.name || \"\";\n            _this271.use = attributes.use || \"\";\n            _this271.usehref = attributes.usehref || \"\";\n            return _this271;\n          }\n          return EffectiveInputPolicy;\n        }(_xfa_object.XFAObject);\n        var EffectiveOutputPolicy = /*#__PURE__*/function (_xfa_object$XFAObject140) {\n          _inherits(EffectiveOutputPolicy, _xfa_object$XFAObject140);\n          function EffectiveOutputPolicy(attributes) {\n            var _this272;\n            _classCallCheck(this, EffectiveOutputPolicy);\n            _this272 = _possibleConstructorReturn(this, _getPrototypeOf(EffectiveOutputPolicy).call(this, CONNECTION_SET_NS_ID, \"effectiveOutputPolicy\"));\n            _this272.id = attributes.id || \"\";\n            _this272.name = attributes.name || \"\";\n            _this272.use = attributes.use || \"\";\n            _this272.usehref = attributes.usehref || \"\";\n            return _this272;\n          }\n          return EffectiveOutputPolicy;\n        }(_xfa_object.XFAObject);\n        var Operation = /*#__PURE__*/function (_xfa_object$StringObj32) {\n          _inherits(Operation, _xfa_object$StringObj32);\n          function Operation(attributes) {\n            var _this273;\n            _classCallCheck(this, Operation);\n            _this273 = _possibleConstructorReturn(this, _getPrototypeOf(Operation).call(this, CONNECTION_SET_NS_ID, \"operation\"));\n            _this273.id = attributes.id || \"\";\n            _this273.input = attributes.input || \"\";\n            _this273.name = attributes.name || \"\";\n            _this273.output = attributes.output || \"\";\n            _this273.use = attributes.use || \"\";\n            _this273.usehref = attributes.usehref || \"\";\n            return _this273;\n          }\n          return Operation;\n        }(_xfa_object.StringObject);\n        var RootElement = /*#__PURE__*/function (_xfa_object$StringObj33) {\n          _inherits(RootElement, _xfa_object$StringObj33);\n          function RootElement(attributes) {\n            var _this274;\n            _classCallCheck(this, RootElement);\n            _this274 = _possibleConstructorReturn(this, _getPrototypeOf(RootElement).call(this, CONNECTION_SET_NS_ID, \"rootElement\"));\n            _this274.id = attributes.id || \"\";\n            _this274.name = attributes.name || \"\";\n            _this274.use = attributes.use || \"\";\n            _this274.usehref = attributes.usehref || \"\";\n            return _this274;\n          }\n          return RootElement;\n        }(_xfa_object.StringObject);\n        var SoapAction = /*#__PURE__*/function (_xfa_object$StringObj34) {\n          _inherits(SoapAction, _xfa_object$StringObj34);\n          function SoapAction(attributes) {\n            var _this275;\n            _classCallCheck(this, SoapAction);\n            _this275 = _possibleConstructorReturn(this, _getPrototypeOf(SoapAction).call(this, CONNECTION_SET_NS_ID, \"soapAction\"));\n            _this275.id = attributes.id || \"\";\n            _this275.name = attributes.name || \"\";\n            _this275.use = attributes.use || \"\";\n            _this275.usehref = attributes.usehref || \"\";\n            return _this275;\n          }\n          return SoapAction;\n        }(_xfa_object.StringObject);\n        var SoapAddress = /*#__PURE__*/function (_xfa_object$StringObj35) {\n          _inherits(SoapAddress, _xfa_object$StringObj35);\n          function SoapAddress(attributes) {\n            var _this276;\n            _classCallCheck(this, SoapAddress);\n            _this276 = _possibleConstructorReturn(this, _getPrototypeOf(SoapAddress).call(this, CONNECTION_SET_NS_ID, \"soapAddress\"));\n            _this276.id = attributes.id || \"\";\n            _this276.name = attributes.name || \"\";\n            _this276.use = attributes.use || \"\";\n            _this276.usehref = attributes.usehref || \"\";\n            return _this276;\n          }\n          return SoapAddress;\n        }(_xfa_object.StringObject);\n        var Uri = /*#__PURE__*/function (_xfa_object$StringObj36) {\n          _inherits(Uri, _xfa_object$StringObj36);\n          function Uri(attributes) {\n            var _this277;\n            _classCallCheck(this, Uri);\n            _this277 = _possibleConstructorReturn(this, _getPrototypeOf(Uri).call(this, CONNECTION_SET_NS_ID, \"uri\"));\n            _this277.id = attributes.id || \"\";\n            _this277.name = attributes.name || \"\";\n            _this277.use = attributes.use || \"\";\n            _this277.usehref = attributes.usehref || \"\";\n            return _this277;\n          }\n          return Uri;\n        }(_xfa_object.StringObject);\n        var WsdlAddress = /*#__PURE__*/function (_xfa_object$StringObj37) {\n          _inherits(WsdlAddress, _xfa_object$StringObj37);\n          function WsdlAddress(attributes) {\n            var _this278;\n            _classCallCheck(this, WsdlAddress);\n            _this278 = _possibleConstructorReturn(this, _getPrototypeOf(WsdlAddress).call(this, CONNECTION_SET_NS_ID, \"wsdlAddress\"));\n            _this278.id = attributes.id || \"\";\n            _this278.name = attributes.name || \"\";\n            _this278.use = attributes.use || \"\";\n            _this278.usehref = attributes.usehref || \"\";\n            return _this278;\n          }\n          return WsdlAddress;\n        }(_xfa_object.StringObject);\n        var WsdlConnection = /*#__PURE__*/function (_xfa_object$XFAObject141) {\n          _inherits(WsdlConnection, _xfa_object$XFAObject141);\n          function WsdlConnection(attributes) {\n            var _this279;\n            _classCallCheck(this, WsdlConnection);\n            _this279 = _possibleConstructorReturn(this, _getPrototypeOf(WsdlConnection).call(this, CONNECTION_SET_NS_ID, \"wsdlConnection\", true));\n            _this279.dataDescription = attributes.dataDescription || \"\";\n            _this279.name = attributes.name || \"\";\n            _this279.effectiveInputPolicy = null;\n            _this279.effectiveOutputPolicy = null;\n            _this279.operation = null;\n            _this279.soapAction = null;\n            _this279.soapAddress = null;\n            _this279.wsdlAddress = null;\n            return _this279;\n          }\n          return WsdlConnection;\n        }(_xfa_object.XFAObject);\n        var XmlConnection = /*#__PURE__*/function (_xfa_object$XFAObject142) {\n          _inherits(XmlConnection, _xfa_object$XFAObject142);\n          function XmlConnection(attributes) {\n            var _this280;\n            _classCallCheck(this, XmlConnection);\n            _this280 = _possibleConstructorReturn(this, _getPrototypeOf(XmlConnection).call(this, CONNECTION_SET_NS_ID, \"xmlConnection\", true));\n            _this280.dataDescription = attributes.dataDescription || \"\";\n            _this280.name = attributes.name || \"\";\n            _this280.uri = null;\n            return _this280;\n          }\n          return XmlConnection;\n        }(_xfa_object.XFAObject);\n        var XsdConnection = /*#__PURE__*/function (_xfa_object$XFAObject143) {\n          _inherits(XsdConnection, _xfa_object$XFAObject143);\n          function XsdConnection(attributes) {\n            var _this281;\n            _classCallCheck(this, XsdConnection);\n            _this281 = _possibleConstructorReturn(this, _getPrototypeOf(XsdConnection).call(this, CONNECTION_SET_NS_ID, \"xsdConnection\", true));\n            _this281.dataDescription = attributes.dataDescription || \"\";\n            _this281.name = attributes.name || \"\";\n            _this281.rootElement = null;\n            _this281.uri = null;\n            return _this281;\n          }\n          return XsdConnection;\n        }(_xfa_object.XFAObject);\n        var ConnectionSetNamespace = /*#__PURE__*/function () {\n          function ConnectionSetNamespace() {\n            _classCallCheck(this, ConnectionSetNamespace);\n          }\n          _createClass(ConnectionSetNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (ConnectionSetNamespace.hasOwnProperty(name)) {\n                return ConnectionSetNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"connectionSet\",\n            value: function connectionSet(attrs) {\n              return new ConnectionSet(attrs);\n            }\n          }, {\n            key: \"effectiveInputPolicy\",\n            value: function effectiveInputPolicy(attrs) {\n              return new EffectiveInputPolicy(attrs);\n            }\n          }, {\n            key: \"effectiveOutputPolicy\",\n            value: function effectiveOutputPolicy(attrs) {\n              return new EffectiveOutputPolicy(attrs);\n            }\n          }, {\n            key: \"operation\",\n            value: function operation(attrs) {\n              return new Operation(attrs);\n            }\n          }, {\n            key: \"rootElement\",\n            value: function rootElement(attrs) {\n              return new RootElement(attrs);\n            }\n          }, {\n            key: \"soapAction\",\n            value: function soapAction(attrs) {\n              return new SoapAction(attrs);\n            }\n          }, {\n            key: \"soapAddress\",\n            value: function soapAddress(attrs) {\n              return new SoapAddress(attrs);\n            }\n          }, {\n            key: \"uri\",\n            value: function uri(attrs) {\n              return new Uri(attrs);\n            }\n          }, {\n            key: \"wsdlAddress\",\n            value: function wsdlAddress(attrs) {\n              return new WsdlAddress(attrs);\n            }\n          }, {\n            key: \"wsdlConnection\",\n            value: function wsdlConnection(attrs) {\n              return new WsdlConnection(attrs);\n            }\n          }, {\n            key: \"xmlConnection\",\n            value: function xmlConnection(attrs) {\n              return new XmlConnection(attrs);\n            }\n          }, {\n            key: \"xsdConnection\",\n            value: function xsdConnection(attrs) {\n              return new XsdConnection(attrs);\n            }\n          }]);\n          return ConnectionSetNamespace;\n        }();\n        exports.ConnectionSetNamespace = ConnectionSetNamespace;\n\n        /***/\n      }, /* 93 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.DatasetsNamespace = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _namespaces = __w_pdfjs_require__(79);\n        var DATASETS_NS_ID = _namespaces.NamespaceIds.datasets.id;\n        var Data = /*#__PURE__*/function (_xfa_object$XmlObject) {\n          _inherits(Data, _xfa_object$XmlObject);\n          function Data(attributes) {\n            _classCallCheck(this, Data);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Data).call(this, DATASETS_NS_ID, \"data\", attributes));\n          }\n          _createClass(Data, [{\n            key: _xfa_object.$isNsAgnostic,\n            value: function value() {\n              return true;\n            }\n          }]);\n          return Data;\n        }(_xfa_object.XmlObject);\n        var Datasets = /*#__PURE__*/function (_xfa_object$XFAObject144) {\n          _inherits(Datasets, _xfa_object$XFAObject144);\n          function Datasets(attributes) {\n            var _this282;\n            _classCallCheck(this, Datasets);\n            _this282 = _possibleConstructorReturn(this, _getPrototypeOf(Datasets).call(this, DATASETS_NS_ID, \"datasets\", true));\n            _this282.data = null;\n            _this282.Signature = null;\n            return _this282;\n          }\n          _createClass(Datasets, [{\n            key: _xfa_object.$onChild,\n            value: function value(child) {\n              var name = child[_xfa_object.$nodeName];\n              if (name === \"data\" && child[_xfa_object.$namespaceId] === DATASETS_NS_ID || name === \"Signature\" && child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.signature.id) {\n                this[name] = child;\n              }\n              this[_xfa_object.$appendChild](child);\n            }\n          }]);\n          return Datasets;\n        }(_xfa_object.XFAObject);\n        var DatasetsNamespace = /*#__PURE__*/function () {\n          function DatasetsNamespace() {\n            _classCallCheck(this, DatasetsNamespace);\n          }\n          _createClass(DatasetsNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (DatasetsNamespace.hasOwnProperty(name)) {\n                return DatasetsNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"datasets\",\n            value: function datasets(attributes) {\n              return new Datasets(attributes);\n            }\n          }, {\n            key: \"data\",\n            value: function data(attributes) {\n              return new Data(attributes);\n            }\n          }]);\n          return DatasetsNamespace;\n        }();\n        exports.DatasetsNamespace = DatasetsNamespace;\n\n        /***/\n      }, /* 94 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.LocaleSetNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _utils = __w_pdfjs_require__(78);\n        var LOCALE_SET_NS_ID = _namespaces.NamespaceIds.localeSet.id;\n        var CalendarSymbols = /*#__PURE__*/function (_xfa_object$XFAObject145) {\n          _inherits(CalendarSymbols, _xfa_object$XFAObject145);\n          function CalendarSymbols(attributes) {\n            var _this283;\n            _classCallCheck(this, CalendarSymbols);\n            _this283 = _possibleConstructorReturn(this, _getPrototypeOf(CalendarSymbols).call(this, LOCALE_SET_NS_ID, \"calendarSymbols\", true));\n            _this283.name = \"gregorian\";\n            _this283.dayNames = new _xfa_object.XFAObjectArray(2);\n            _this283.eraNames = null;\n            _this283.meridiemNames = null;\n            _this283.monthNames = new _xfa_object.XFAObjectArray(2);\n            return _this283;\n          }\n          return CalendarSymbols;\n        }(_xfa_object.XFAObject);\n        var CurrencySymbol = /*#__PURE__*/function (_xfa_object$StringObj38) {\n          _inherits(CurrencySymbol, _xfa_object$StringObj38);\n          function CurrencySymbol(attributes) {\n            var _this284;\n            _classCallCheck(this, CurrencySymbol);\n            _this284 = _possibleConstructorReturn(this, _getPrototypeOf(CurrencySymbol).call(this, LOCALE_SET_NS_ID, \"currencySymbol\"));\n            _this284.name = (0, _utils.getStringOption)(attributes.name, [\"symbol\", \"isoname\", \"decimal\"]);\n            return _this284;\n          }\n          return CurrencySymbol;\n        }(_xfa_object.StringObject);\n        var CurrencySymbols = /*#__PURE__*/function (_xfa_object$XFAObject146) {\n          _inherits(CurrencySymbols, _xfa_object$XFAObject146);\n          function CurrencySymbols(attributes) {\n            var _this285;\n            _classCallCheck(this, CurrencySymbols);\n            _this285 = _possibleConstructorReturn(this, _getPrototypeOf(CurrencySymbols).call(this, LOCALE_SET_NS_ID, \"currencySymbols\", true));\n            _this285.currencySymbol = new _xfa_object.XFAObjectArray(3);\n            return _this285;\n          }\n          return CurrencySymbols;\n        }(_xfa_object.XFAObject);\n        var DatePattern = /*#__PURE__*/function (_xfa_object$StringObj39) {\n          _inherits(DatePattern, _xfa_object$StringObj39);\n          function DatePattern(attributes) {\n            var _this286;\n            _classCallCheck(this, DatePattern);\n            _this286 = _possibleConstructorReturn(this, _getPrototypeOf(DatePattern).call(this, LOCALE_SET_NS_ID, \"datePattern\"));\n            _this286.name = (0, _utils.getStringOption)(attributes.name, [\"full\", \"long\", \"med\", \"short\"]);\n            return _this286;\n          }\n          return DatePattern;\n        }(_xfa_object.StringObject);\n        var DatePatterns = /*#__PURE__*/function (_xfa_object$XFAObject147) {\n          _inherits(DatePatterns, _xfa_object$XFAObject147);\n          function DatePatterns(attributes) {\n            var _this287;\n            _classCallCheck(this, DatePatterns);\n            _this287 = _possibleConstructorReturn(this, _getPrototypeOf(DatePatterns).call(this, LOCALE_SET_NS_ID, \"datePatterns\", true));\n            _this287.datePattern = new _xfa_object.XFAObjectArray(4);\n            return _this287;\n          }\n          return DatePatterns;\n        }(_xfa_object.XFAObject);\n        var DateTimeSymbols = /*#__PURE__*/function (_xfa_object$ContentOb21) {\n          _inherits(DateTimeSymbols, _xfa_object$ContentOb21);\n          function DateTimeSymbols(attributes) {\n            _classCallCheck(this, DateTimeSymbols);\n            return _possibleConstructorReturn(this, _getPrototypeOf(DateTimeSymbols).call(this, LOCALE_SET_NS_ID, \"dateTimeSymbols\"));\n          }\n          return DateTimeSymbols;\n        }(_xfa_object.ContentObject);\n        var Day = /*#__PURE__*/function (_xfa_object$StringObj40) {\n          _inherits(Day, _xfa_object$StringObj40);\n          function Day(attributes) {\n            _classCallCheck(this, Day);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Day).call(this, LOCALE_SET_NS_ID, \"day\"));\n          }\n          return Day;\n        }(_xfa_object.StringObject);\n        var DayNames = /*#__PURE__*/function (_xfa_object$XFAObject148) {\n          _inherits(DayNames, _xfa_object$XFAObject148);\n          function DayNames(attributes) {\n            var _this288;\n            _classCallCheck(this, DayNames);\n            _this288 = _possibleConstructorReturn(this, _getPrototypeOf(DayNames).call(this, LOCALE_SET_NS_ID, \"dayNames\", true));\n            _this288.abbr = (0, _utils.getInteger)({\n              data: attributes.abbr,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this288.day = new _xfa_object.XFAObjectArray(7);\n            return _this288;\n          }\n          return DayNames;\n        }(_xfa_object.XFAObject);\n        var Era = /*#__PURE__*/function (_xfa_object$StringObj41) {\n          _inherits(Era, _xfa_object$StringObj41);\n          function Era(attributes) {\n            _classCallCheck(this, Era);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Era).call(this, LOCALE_SET_NS_ID, \"era\"));\n          }\n          return Era;\n        }(_xfa_object.StringObject);\n        var EraNames = /*#__PURE__*/function (_xfa_object$XFAObject149) {\n          _inherits(EraNames, _xfa_object$XFAObject149);\n          function EraNames(attributes) {\n            var _this289;\n            _classCallCheck(this, EraNames);\n            _this289 = _possibleConstructorReturn(this, _getPrototypeOf(EraNames).call(this, LOCALE_SET_NS_ID, \"eraNames\", true));\n            _this289.era = new _xfa_object.XFAObjectArray(2);\n            return _this289;\n          }\n          return EraNames;\n        }(_xfa_object.XFAObject);\n        var Locale = /*#__PURE__*/function (_xfa_object$XFAObject150) {\n          _inherits(Locale, _xfa_object$XFAObject150);\n          function Locale(attributes) {\n            var _this290;\n            _classCallCheck(this, Locale);\n            _this290 = _possibleConstructorReturn(this, _getPrototypeOf(Locale).call(this, LOCALE_SET_NS_ID, \"locale\", true));\n            _this290.desc = attributes.desc || \"\";\n            _this290.name = \"isoname\";\n            _this290.calendarSymbols = null;\n            _this290.currencySymbols = null;\n            _this290.datePatterns = null;\n            _this290.dateTimeSymbols = null;\n            _this290.numberPatterns = null;\n            _this290.numberSymbols = null;\n            _this290.timePatterns = null;\n            _this290.typeFaces = null;\n            return _this290;\n          }\n          return Locale;\n        }(_xfa_object.XFAObject);\n        var LocaleSet = /*#__PURE__*/function (_xfa_object$XFAObject151) {\n          _inherits(LocaleSet, _xfa_object$XFAObject151);\n          function LocaleSet(attributes) {\n            var _this291;\n            _classCallCheck(this, LocaleSet);\n            _this291 = _possibleConstructorReturn(this, _getPrototypeOf(LocaleSet).call(this, LOCALE_SET_NS_ID, \"localeSet\", true));\n            _this291.locale = new _xfa_object.XFAObjectArray();\n            return _this291;\n          }\n          return LocaleSet;\n        }(_xfa_object.XFAObject);\n        var Meridiem = /*#__PURE__*/function (_xfa_object$StringObj42) {\n          _inherits(Meridiem, _xfa_object$StringObj42);\n          function Meridiem(attributes) {\n            _classCallCheck(this, Meridiem);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Meridiem).call(this, LOCALE_SET_NS_ID, \"meridiem\"));\n          }\n          return Meridiem;\n        }(_xfa_object.StringObject);\n        var MeridiemNames = /*#__PURE__*/function (_xfa_object$XFAObject152) {\n          _inherits(MeridiemNames, _xfa_object$XFAObject152);\n          function MeridiemNames(attributes) {\n            var _this292;\n            _classCallCheck(this, MeridiemNames);\n            _this292 = _possibleConstructorReturn(this, _getPrototypeOf(MeridiemNames).call(this, LOCALE_SET_NS_ID, \"meridiemNames\", true));\n            _this292.meridiem = new _xfa_object.XFAObjectArray(2);\n            return _this292;\n          }\n          return MeridiemNames;\n        }(_xfa_object.XFAObject);\n        var Month = /*#__PURE__*/function (_xfa_object$StringObj43) {\n          _inherits(Month, _xfa_object$StringObj43);\n          function Month(attributes) {\n            _classCallCheck(this, Month);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Month).call(this, LOCALE_SET_NS_ID, \"month\"));\n          }\n          return Month;\n        }(_xfa_object.StringObject);\n        var MonthNames = /*#__PURE__*/function (_xfa_object$XFAObject153) {\n          _inherits(MonthNames, _xfa_object$XFAObject153);\n          function MonthNames(attributes) {\n            var _this293;\n            _classCallCheck(this, MonthNames);\n            _this293 = _possibleConstructorReturn(this, _getPrototypeOf(MonthNames).call(this, LOCALE_SET_NS_ID, \"monthNames\", true));\n            _this293.abbr = (0, _utils.getInteger)({\n              data: attributes.abbr,\n              defaultValue: 0,\n              validate: function validate(x) {\n                return x === 1;\n              }\n            });\n            _this293.month = new _xfa_object.XFAObjectArray(12);\n            return _this293;\n          }\n          return MonthNames;\n        }(_xfa_object.XFAObject);\n        var NumberPattern = /*#__PURE__*/function (_xfa_object$StringObj44) {\n          _inherits(NumberPattern, _xfa_object$StringObj44);\n          function NumberPattern(attributes) {\n            var _this294;\n            _classCallCheck(this, NumberPattern);\n            _this294 = _possibleConstructorReturn(this, _getPrototypeOf(NumberPattern).call(this, LOCALE_SET_NS_ID, \"numberPattern\"));\n            _this294.name = (0, _utils.getStringOption)(attributes.name, [\"full\", \"long\", \"med\", \"short\"]);\n            return _this294;\n          }\n          return NumberPattern;\n        }(_xfa_object.StringObject);\n        var NumberPatterns = /*#__PURE__*/function (_xfa_object$XFAObject154) {\n          _inherits(NumberPatterns, _xfa_object$XFAObject154);\n          function NumberPatterns(attributes) {\n            var _this295;\n            _classCallCheck(this, NumberPatterns);\n            _this295 = _possibleConstructorReturn(this, _getPrototypeOf(NumberPatterns).call(this, LOCALE_SET_NS_ID, \"numberPatterns\", true));\n            _this295.numberPattern = new _xfa_object.XFAObjectArray(4);\n            return _this295;\n          }\n          return NumberPatterns;\n        }(_xfa_object.XFAObject);\n        var NumberSymbol = /*#__PURE__*/function (_xfa_object$StringObj45) {\n          _inherits(NumberSymbol, _xfa_object$StringObj45);\n          function NumberSymbol(attributes) {\n            var _this296;\n            _classCallCheck(this, NumberSymbol);\n            _this296 = _possibleConstructorReturn(this, _getPrototypeOf(NumberSymbol).call(this, LOCALE_SET_NS_ID, \"numberSymbol\"));\n            _this296.name = (0, _utils.getStringOption)(attributes.name, [\"decimal\", \"grouping\", \"percent\", \"minus\", \"zero\"]);\n            return _this296;\n          }\n          return NumberSymbol;\n        }(_xfa_object.StringObject);\n        var NumberSymbols = /*#__PURE__*/function (_xfa_object$XFAObject155) {\n          _inherits(NumberSymbols, _xfa_object$XFAObject155);\n          function NumberSymbols(attributes) {\n            var _this297;\n            _classCallCheck(this, NumberSymbols);\n            _this297 = _possibleConstructorReturn(this, _getPrototypeOf(NumberSymbols).call(this, LOCALE_SET_NS_ID, \"numberSymbols\", true));\n            _this297.numberSymbol = new _xfa_object.XFAObjectArray(5);\n            return _this297;\n          }\n          return NumberSymbols;\n        }(_xfa_object.XFAObject);\n        var TimePattern = /*#__PURE__*/function (_xfa_object$StringObj46) {\n          _inherits(TimePattern, _xfa_object$StringObj46);\n          function TimePattern(attributes) {\n            var _this298;\n            _classCallCheck(this, TimePattern);\n            _this298 = _possibleConstructorReturn(this, _getPrototypeOf(TimePattern).call(this, LOCALE_SET_NS_ID, \"timePattern\"));\n            _this298.name = (0, _utils.getStringOption)(attributes.name, [\"full\", \"long\", \"med\", \"short\"]);\n            return _this298;\n          }\n          return TimePattern;\n        }(_xfa_object.StringObject);\n        var TimePatterns = /*#__PURE__*/function (_xfa_object$XFAObject156) {\n          _inherits(TimePatterns, _xfa_object$XFAObject156);\n          function TimePatterns(attributes) {\n            var _this299;\n            _classCallCheck(this, TimePatterns);\n            _this299 = _possibleConstructorReturn(this, _getPrototypeOf(TimePatterns).call(this, LOCALE_SET_NS_ID, \"timePatterns\", true));\n            _this299.timePattern = new _xfa_object.XFAObjectArray(4);\n            return _this299;\n          }\n          return TimePatterns;\n        }(_xfa_object.XFAObject);\n        var TypeFace = /*#__PURE__*/function (_xfa_object$XFAObject157) {\n          _inherits(TypeFace, _xfa_object$XFAObject157);\n          function TypeFace(attributes) {\n            var _this300;\n            _classCallCheck(this, TypeFace);\n            _this300 = _possibleConstructorReturn(this, _getPrototypeOf(TypeFace).call(this, LOCALE_SET_NS_ID, \"typeFace\", true));\n            _this300.name = attributes.name | \"\";\n            return _this300;\n          }\n          return TypeFace;\n        }(_xfa_object.XFAObject);\n        var TypeFaces = /*#__PURE__*/function (_xfa_object$XFAObject158) {\n          _inherits(TypeFaces, _xfa_object$XFAObject158);\n          function TypeFaces(attributes) {\n            var _this301;\n            _classCallCheck(this, TypeFaces);\n            _this301 = _possibleConstructorReturn(this, _getPrototypeOf(TypeFaces).call(this, LOCALE_SET_NS_ID, \"typeFaces\", true));\n            _this301.typeFace = new _xfa_object.XFAObjectArray();\n            return _this301;\n          }\n          return TypeFaces;\n        }(_xfa_object.XFAObject);\n        var LocaleSetNamespace = /*#__PURE__*/function () {\n          function LocaleSetNamespace() {\n            _classCallCheck(this, LocaleSetNamespace);\n          }\n          _createClass(LocaleSetNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (LocaleSetNamespace.hasOwnProperty(name)) {\n                return LocaleSetNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"calendarSymbols\",\n            value: function calendarSymbols(attrs) {\n              return new CalendarSymbols(attrs);\n            }\n          }, {\n            key: \"currencySymbol\",\n            value: function currencySymbol(attrs) {\n              return new CurrencySymbol(attrs);\n            }\n          }, {\n            key: \"currencySymbols\",\n            value: function currencySymbols(attrs) {\n              return new CurrencySymbols(attrs);\n            }\n          }, {\n            key: \"datePattern\",\n            value: function datePattern(attrs) {\n              return new DatePattern(attrs);\n            }\n          }, {\n            key: \"datePatterns\",\n            value: function datePatterns(attrs) {\n              return new DatePatterns(attrs);\n            }\n          }, {\n            key: \"dateTimeSymbols\",\n            value: function dateTimeSymbols(attrs) {\n              return new DateTimeSymbols(attrs);\n            }\n          }, {\n            key: \"day\",\n            value: function day(attrs) {\n              return new Day(attrs);\n            }\n          }, {\n            key: \"dayNames\",\n            value: function dayNames(attrs) {\n              return new DayNames(attrs);\n            }\n          }, {\n            key: \"era\",\n            value: function era(attrs) {\n              return new Era(attrs);\n            }\n          }, {\n            key: \"eraNames\",\n            value: function eraNames(attrs) {\n              return new EraNames(attrs);\n            }\n          }, {\n            key: \"locale\",\n            value: function locale(attrs) {\n              return new Locale(attrs);\n            }\n          }, {\n            key: \"localeSet\",\n            value: function localeSet(attrs) {\n              return new LocaleSet(attrs);\n            }\n          }, {\n            key: \"meridiem\",\n            value: function meridiem(attrs) {\n              return new Meridiem(attrs);\n            }\n          }, {\n            key: \"meridiemNames\",\n            value: function meridiemNames(attrs) {\n              return new MeridiemNames(attrs);\n            }\n          }, {\n            key: \"month\",\n            value: function month(attrs) {\n              return new Month(attrs);\n            }\n          }, {\n            key: \"monthNames\",\n            value: function monthNames(attrs) {\n              return new MonthNames(attrs);\n            }\n          }, {\n            key: \"numberPattern\",\n            value: function numberPattern(attrs) {\n              return new NumberPattern(attrs);\n            }\n          }, {\n            key: \"numberPatterns\",\n            value: function numberPatterns(attrs) {\n              return new NumberPatterns(attrs);\n            }\n          }, {\n            key: \"numberSymbol\",\n            value: function numberSymbol(attrs) {\n              return new NumberSymbol(attrs);\n            }\n          }, {\n            key: \"numberSymbols\",\n            value: function numberSymbols(attrs) {\n              return new NumberSymbols(attrs);\n            }\n          }, {\n            key: \"timePattern\",\n            value: function timePattern(attrs) {\n              return new TimePattern(attrs);\n            }\n          }, {\n            key: \"timePatterns\",\n            value: function timePatterns(attrs) {\n              return new TimePatterns(attrs);\n            }\n          }, {\n            key: \"typeFace\",\n            value: function typeFace(attrs) {\n              return new TypeFace(attrs);\n            }\n          }, {\n            key: \"typeFaces\",\n            value: function typeFaces(attrs) {\n              return new TypeFaces(attrs);\n            }\n          }]);\n          return LocaleSetNamespace;\n        }();\n        exports.LocaleSetNamespace = LocaleSetNamespace;\n\n        /***/\n      }, /* 95 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SignatureNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var SIGNATURE_NS_ID = _namespaces.NamespaceIds.signature.id;\n        var Signature = /*#__PURE__*/function (_xfa_object$XFAObject159) {\n          _inherits(Signature, _xfa_object$XFAObject159);\n          function Signature(attributes) {\n            _classCallCheck(this, Signature);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Signature).call(this, SIGNATURE_NS_ID, \"signature\", true));\n          }\n          return Signature;\n        }(_xfa_object.XFAObject);\n        var SignatureNamespace = /*#__PURE__*/function () {\n          function SignatureNamespace() {\n            _classCallCheck(this, SignatureNamespace);\n          }\n          _createClass(SignatureNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (SignatureNamespace.hasOwnProperty(name)) {\n                return SignatureNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"signature\",\n            value: function signature(attributes) {\n              return new Signature(attributes);\n            }\n          }]);\n          return SignatureNamespace;\n        }();\n        exports.SignatureNamespace = SignatureNamespace;\n\n        /***/\n      }, /* 96 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StylesheetNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var STYLESHEET_NS_ID = _namespaces.NamespaceIds.stylesheet.id;\n        var Stylesheet = /*#__PURE__*/function (_xfa_object$XFAObject160) {\n          _inherits(Stylesheet, _xfa_object$XFAObject160);\n          function Stylesheet(attributes) {\n            _classCallCheck(this, Stylesheet);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Stylesheet).call(this, STYLESHEET_NS_ID, \"stylesheet\", true));\n          }\n          return Stylesheet;\n        }(_xfa_object.XFAObject);\n        var StylesheetNamespace = /*#__PURE__*/function () {\n          function StylesheetNamespace() {\n            _classCallCheck(this, StylesheetNamespace);\n          }\n          _createClass(StylesheetNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (StylesheetNamespace.hasOwnProperty(name)) {\n                return StylesheetNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"stylesheet\",\n            value: function stylesheet(attributes) {\n              return new Stylesheet(attributes);\n            }\n          }]);\n          return StylesheetNamespace;\n        }();\n        exports.StylesheetNamespace = StylesheetNamespace;\n\n        /***/\n      }, /* 97 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XdpNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var XDP_NS_ID = _namespaces.NamespaceIds.xdp.id;\n        var Xdp = /*#__PURE__*/function (_xfa_object$XFAObject161) {\n          _inherits(Xdp, _xfa_object$XFAObject161);\n          function Xdp(attributes) {\n            var _this302;\n            _classCallCheck(this, Xdp);\n            _this302 = _possibleConstructorReturn(this, _getPrototypeOf(Xdp).call(this, XDP_NS_ID, \"xdp\", true));\n            _this302.uuid = attributes.uuid || \"\";\n            _this302.timeStamp = attributes.timeStamp || \"\";\n            _this302.config = null;\n            _this302.connectionSet = null;\n            _this302.datasets = null;\n            _this302.localeSet = null;\n            _this302.stylesheet = new _xfa_object.XFAObjectArray();\n            _this302.template = null;\n            return _this302;\n          }\n          _createClass(Xdp, [{\n            key: _xfa_object.$onChildCheck,\n            value: function value(child) {\n              var ns = _namespaces.NamespaceIds[child[_xfa_object.$nodeName]];\n              return ns && child[_xfa_object.$namespaceId] === ns.id;\n            }\n          }]);\n          return Xdp;\n        }(_xfa_object.XFAObject);\n        var XdpNamespace = /*#__PURE__*/function () {\n          function XdpNamespace() {\n            _classCallCheck(this, XdpNamespace);\n          }\n          _createClass(XdpNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (XdpNamespace.hasOwnProperty(name)) {\n                return XdpNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"xdp\",\n            value: function xdp(attributes) {\n              return new Xdp(attributes);\n            }\n          }]);\n          return XdpNamespace;\n        }();\n        exports.XdpNamespace = XdpNamespace;\n\n        /***/\n      }, /* 98 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XhtmlNamespace = void 0;\n        var _xfa_object = __w_pdfjs_require__(77);\n        var _namespaces = __w_pdfjs_require__(79);\n        var _html_utils = __w_pdfjs_require__(84);\n        var _utils = __w_pdfjs_require__(78);\n        var XHTML_NS_ID = _namespaces.NamespaceIds.xhtml.id;\n        var $richText = Symbol();\n        var VALID_STYLES = new Set([\"color\", \"font\", \"font-family\", \"font-size\", \"font-stretch\", \"font-style\", \"font-weight\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"letter-spacing\", \"line-height\", \"orphans\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"tab-interval\", \"tab-stop\", \"text-align\", \"text-decoration\", \"text-indent\", \"vertical-align\", \"widows\", \"kerning-mode\", \"xfa-font-horizontal-scale\", \"xfa-font-vertical-scale\", \"xfa-spacerun\", \"xfa-tab-stops\"]);\n        var StyleMapping = new Map([[\"page-break-after\", \"breakAfter\"], [\"page-break-before\", \"breakBefore\"], [\"page-break-inside\", \"breakInside\"], [\"kerning-mode\", function (value) {\n          return value === \"none\" ? \"none\" : \"normal\";\n        }], [\"xfa-font-horizontal-scale\", function (value) {\n          return \"scaleX(\".concat(Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2), \")\");\n        }], [\"xfa-font-vertical-scale\", function (value) {\n          return \"scaleY(\".concat(Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2), \")\");\n        }], [\"xfa-spacerun\", \"\"], [\"xfa-tab-stops\", \"\"], [\"font-size\", function (value, original) {\n          value = original.fontSize = (0, _utils.getMeasurement)(value);\n          return (0, _html_utils.measureToString)(0.99 * value);\n        }], [\"letter-spacing\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"line-height\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"margin\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"margin-bottom\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"margin-left\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"margin-right\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"margin-top\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"text-indent\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }], [\"font-family\", function (value) {\n          return value;\n        }], [\"vertical-align\", function (value) {\n          return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));\n        }]]);\n        var spacesRegExp = /\\s+/g;\n        var crlfRegExp = /[\\r\\n]+/g;\n        var crlfForRichTextRegExp = /\\r\\n?/g;\n        function mapStyle(styleStr, node, richText) {\n          var style = Object.create(null);\n          if (!styleStr) {\n            return style;\n          }\n          var original = Object.create(null);\n          var _iterator182 = _createForOfIteratorHelper(styleStr.split(\";\").map(function (s) {\n              return s.split(\":\", 2);\n            })),\n            _step182;\n          try {\n            for (_iterator182.s(); !(_step182 = _iterator182.n()).done;) {\n              var _step182$value = _slicedToArray(_step182.value, 2),\n                key = _step182$value[0],\n                _value23 = _step182$value[1];\n              var mapping = StyleMapping.get(key);\n              if (mapping === \"\") {\n                continue;\n              }\n              var newValue = _value23;\n              if (mapping) {\n                if (typeof mapping === \"string\") {\n                  newValue = mapping;\n                } else {\n                  newValue = mapping(_value23, original);\n                }\n              }\n              if (key.endsWith(\"scale\")) {\n                if (style.transform) {\n                  style.transform = \"\".concat(style[key], \" \").concat(newValue);\n                } else {\n                  style.transform = newValue;\n                }\n              } else {\n                style[key.replaceAll(/-([a-zA-Z])/g, function (_, x) {\n                  return x.toUpperCase();\n                })] = newValue;\n              }\n            }\n          } catch (err) {\n            _iterator182.e(err);\n          } finally {\n            _iterator182.f();\n          }\n          if (style.fontFamily) {\n            (0, _html_utils.setFontFamily)({\n              typeface: style.fontFamily,\n              weight: style.fontWeight || \"normal\",\n              posture: style.fontStyle || \"normal\",\n              size: original.fontSize || 0\n            }, node, node[_xfa_object.$globalData].fontFinder, style);\n          }\n          if (richText && style.verticalAlign && style.verticalAlign !== \"0px\" && style.fontSize) {\n            var SUB_SUPER_SCRIPT_FACTOR = 0.583;\n            var VERTICAL_FACTOR = 0.333;\n            var fontSize = (0, _utils.getMeasurement)(style.fontSize);\n            style.fontSize = (0, _html_utils.measureToString)(fontSize * SUB_SUPER_SCRIPT_FACTOR);\n            style.verticalAlign = (0, _html_utils.measureToString)(Math.sign((0, _utils.getMeasurement)(style.verticalAlign)) * fontSize * VERTICAL_FACTOR);\n          }\n          if (richText && style.fontSize) {\n            style.fontSize = \"calc(\".concat(style.fontSize, \" * var(--scale-factor))\");\n          }\n          (0, _html_utils.fixTextIndent)(style);\n          return style;\n        }\n        function checkStyle(node) {\n          if (!node.style) {\n            return \"\";\n          }\n          return node.style.trim().split(/\\s*;\\s*/).filter(function (s) {\n            return !!s;\n          }).map(function (s) {\n            return s.split(/\\s*:\\s*/, 2);\n          }).filter(function (_ref101) {\n            var _ref102 = _slicedToArray(_ref101, 2),\n              key = _ref102[0],\n              value = _ref102[1];\n            if (key === \"font-family\") {\n              node[_xfa_object.$globalData].usedTypefaces.add(value);\n            }\n            return VALID_STYLES.has(key);\n          }).map(function (kv) {\n            return kv.join(\":\");\n          }).join(\";\");\n        }\n        var NoWhites = new Set([\"body\", \"html\"]);\n        var XhtmlObject = /*#__PURE__*/function (_xfa_object$XmlObject2) {\n          _inherits(XhtmlObject, _xfa_object$XmlObject2);\n          function XhtmlObject(attributes, name) {\n            var _this303;\n            _classCallCheck(this, XhtmlObject);\n            _this303 = _possibleConstructorReturn(this, _getPrototypeOf(XhtmlObject).call(this, XHTML_NS_ID, name));\n            _this303[$richText] = false;\n            _this303.style = attributes.style || \"\";\n            return _this303;\n          }\n          _createClass(XhtmlObject, [{\n            key: _xfa_object.$clean,\n            value: function value(builder) {\n              _get(_getPrototypeOf(XhtmlObject.prototype), _xfa_object.$clean, this).call(this, builder);\n              this.style = checkStyle(this);\n            }\n          }, {\n            key: _xfa_object.$acceptWhitespace,\n            value: function value() {\n              return !NoWhites.has(this[_xfa_object.$nodeName]);\n            }\n          }, {\n            key: _xfa_object.$onText,\n            value: function value(str) {\n              var richText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              if (!richText) {\n                str = str.replace(crlfRegExp, \"\");\n                if (!this.style.includes(\"xfa-spacerun:yes\")) {\n                  str = str.replace(spacesRegExp, \" \");\n                }\n              } else {\n                this[$richText] = true;\n              }\n              if (str) {\n                this[_xfa_object.$content] += str;\n              }\n            }\n          }, {\n            key: _xfa_object.$pushGlyphs,\n            value: function value(measure) {\n              var mustPop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n              var xfaFont = Object.create(null);\n              var margin = {\n                top: NaN,\n                bottom: NaN,\n                left: NaN,\n                right: NaN\n              };\n              var lineHeight = null;\n              var _iterator183 = _createForOfIteratorHelper(this.style.split(\";\").map(function (s) {\n                  return s.split(\":\", 2);\n                })),\n                _step183;\n              try {\n                for (_iterator183.s(); !(_step183 = _iterator183.n()).done;) {\n                  var _step183$value = _slicedToArray(_step183.value, 2),\n                    key = _step183$value[0],\n                    _value24 = _step183$value[1];\n                  switch (key) {\n                    case \"font-family\":\n                      xfaFont.typeface = (0, _utils.stripQuotes)(_value24);\n                      break;\n                    case \"font-size\":\n                      xfaFont.size = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"font-weight\":\n                      xfaFont.weight = _value24;\n                      break;\n                    case \"font-style\":\n                      xfaFont.posture = _value24;\n                      break;\n                    case \"letter-spacing\":\n                      xfaFont.letterSpacing = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"margin\":\n                      var values = _value24.split(/ \\t/).map(function (x) {\n                        return (0, _utils.getMeasurement)(x);\n                      });\n                      switch (values.length) {\n                        case 1:\n                          margin.top = margin.bottom = margin.left = margin.right = values[0];\n                          break;\n                        case 2:\n                          margin.top = margin.bottom = values[0];\n                          margin.left = margin.right = values[1];\n                          break;\n                        case 3:\n                          margin.top = values[0];\n                          margin.bottom = values[2];\n                          margin.left = margin.right = values[1];\n                          break;\n                        case 4:\n                          margin.top = values[0];\n                          margin.left = values[1];\n                          margin.bottom = values[2];\n                          margin.right = values[3];\n                          break;\n                      }\n                      break;\n                    case \"margin-top\":\n                      margin.top = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"margin-bottom\":\n                      margin.bottom = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"margin-left\":\n                      margin.left = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"margin-right\":\n                      margin.right = (0, _utils.getMeasurement)(_value24);\n                      break;\n                    case \"line-height\":\n                      lineHeight = (0, _utils.getMeasurement)(_value24);\n                      break;\n                  }\n                }\n              } catch (err) {\n                _iterator183.e(err);\n              } finally {\n                _iterator183.f();\n              }\n              measure.pushData(xfaFont, margin, lineHeight);\n              if (this[_xfa_object.$content]) {\n                measure.addString(this[_xfa_object.$content]);\n              } else {\n                var _iterator184 = _createForOfIteratorHelper(this[_xfa_object.$getChildren]()),\n                  _step184;\n                try {\n                  for (_iterator184.s(); !(_step184 = _iterator184.n()).done;) {\n                    var child = _step184.value;\n                    if (child[_xfa_object.$nodeName] === \"#text\") {\n                      measure.addString(child[_xfa_object.$content]);\n                      continue;\n                    }\n                    child[_xfa_object.$pushGlyphs](measure);\n                  }\n                } catch (err) {\n                  _iterator184.e(err);\n                } finally {\n                  _iterator184.f();\n                }\n              }\n              if (mustPop) {\n                measure.popFont();\n              }\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var children = [];\n              this[_xfa_object.$extra] = {\n                children: children\n              };\n              this[_xfa_object.$childrenToHTML]({});\n              if (children.length === 0 && !this[_xfa_object.$content]) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              var value;\n              if (this[$richText]) {\n                value = this[_xfa_object.$content] ? this[_xfa_object.$content].replace(crlfForRichTextRegExp, \"\\n\") : undefined;\n              } else {\n                value = this[_xfa_object.$content] || undefined;\n              }\n              return _utils.HTMLResult.success({\n                name: this[_xfa_object.$nodeName],\n                attributes: {\n                  href: this.href,\n                  style: mapStyle(this.style, this, this[$richText])\n                },\n                children: children,\n                value: value\n              });\n            }\n          }]);\n          return XhtmlObject;\n        }(_xfa_object.XmlObject);\n        var A = /*#__PURE__*/function (_XhtmlObject) {\n          _inherits(A, _XhtmlObject);\n          function A(attributes) {\n            var _this304;\n            _classCallCheck(this, A);\n            _this304 = _possibleConstructorReturn(this, _getPrototypeOf(A).call(this, attributes, \"a\"));\n            _this304.href = (0, _html_utils.fixURL)(attributes.href) || \"\";\n            return _this304;\n          }\n          return A;\n        }(XhtmlObject);\n        var B = /*#__PURE__*/function (_XhtmlObject2) {\n          _inherits(B, _XhtmlObject2);\n          function B(attributes) {\n            _classCallCheck(this, B);\n            return _possibleConstructorReturn(this, _getPrototypeOf(B).call(this, attributes, \"b\"));\n          }\n          _createClass(B, [{\n            key: _xfa_object.$pushGlyphs,\n            value: function value(measure) {\n              measure.pushFont({\n                weight: \"bold\"\n              });\n              _get(_getPrototypeOf(B.prototype), _xfa_object.$pushGlyphs, this).call(this, measure);\n              measure.popFont();\n            }\n          }]);\n          return B;\n        }(XhtmlObject);\n        var Body = /*#__PURE__*/function (_XhtmlObject3) {\n          _inherits(Body, _XhtmlObject3);\n          function Body(attributes) {\n            _classCallCheck(this, Body);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Body).call(this, attributes, \"body\"));\n          }\n          _createClass(Body, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var res = _get(_getPrototypeOf(Body.prototype), _xfa_object.$toHTML, this).call(this, availableSpace);\n              var html = res.html;\n              if (!html) {\n                return _utils.HTMLResult.EMPTY;\n              }\n              html.name = \"div\";\n              html.attributes.class = [\"xfaRich\"];\n              return res;\n            }\n          }]);\n          return Body;\n        }(XhtmlObject);\n        var Br = /*#__PURE__*/function (_XhtmlObject4) {\n          _inherits(Br, _XhtmlObject4);\n          function Br(attributes) {\n            _classCallCheck(this, Br);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Br).call(this, attributes, \"br\"));\n          }\n          _createClass(Br, [{\n            key: _xfa_object.$text,\n            value: function value() {\n              return \"\\n\";\n            }\n          }, {\n            key: _xfa_object.$pushGlyphs,\n            value: function value(measure) {\n              measure.addString(\"\\n\");\n            }\n          }, {\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              return _utils.HTMLResult.success({\n                name: \"br\"\n              });\n            }\n          }]);\n          return Br;\n        }(XhtmlObject);\n        var Html = /*#__PURE__*/function (_XhtmlObject5) {\n          _inherits(Html, _XhtmlObject5);\n          function Html(attributes) {\n            _classCallCheck(this, Html);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Html).call(this, attributes, \"html\"));\n          }\n          _createClass(Html, [{\n            key: _xfa_object.$toHTML,\n            value: function value(availableSpace) {\n              var children = [];\n              this[_xfa_object.$extra] = {\n                children: children\n              };\n              this[_xfa_object.$childrenToHTML]({});\n              if (children.length === 0) {\n                return _utils.HTMLResult.success({\n                  name: \"div\",\n                  attributes: {\n                    class: [\"xfaRich\"],\n                    style: {}\n                  },\n                  value: this[_xfa_object.$content] || \"\"\n                });\n              }\n              if (children.length === 1) {\n                var child = children[0];\n                if (child.attributes && child.attributes.class.includes(\"xfaRich\")) {\n                  return _utils.HTMLResult.success(child);\n                }\n              }\n              return _utils.HTMLResult.success({\n                name: \"div\",\n                attributes: {\n                  class: [\"xfaRich\"],\n                  style: {}\n                },\n                children: children\n              });\n            }\n          }]);\n          return Html;\n        }(XhtmlObject);\n        var I = /*#__PURE__*/function (_XhtmlObject6) {\n          _inherits(I, _XhtmlObject6);\n          function I(attributes) {\n            _classCallCheck(this, I);\n            return _possibleConstructorReturn(this, _getPrototypeOf(I).call(this, attributes, \"i\"));\n          }\n          _createClass(I, [{\n            key: _xfa_object.$pushGlyphs,\n            value: function value(measure) {\n              measure.pushFont({\n                posture: \"italic\"\n              });\n              _get(_getPrototypeOf(I.prototype), _xfa_object.$pushGlyphs, this).call(this, measure);\n              measure.popFont();\n            }\n          }]);\n          return I;\n        }(XhtmlObject);\n        var Li = /*#__PURE__*/function (_XhtmlObject7) {\n          _inherits(Li, _XhtmlObject7);\n          function Li(attributes) {\n            _classCallCheck(this, Li);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Li).call(this, attributes, \"li\"));\n          }\n          return Li;\n        }(XhtmlObject);\n        var Ol = /*#__PURE__*/function (_XhtmlObject8) {\n          _inherits(Ol, _XhtmlObject8);\n          function Ol(attributes) {\n            _classCallCheck(this, Ol);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Ol).call(this, attributes, \"ol\"));\n          }\n          return Ol;\n        }(XhtmlObject);\n        var P = /*#__PURE__*/function (_XhtmlObject9) {\n          _inherits(P, _XhtmlObject9);\n          function P(attributes) {\n            _classCallCheck(this, P);\n            return _possibleConstructorReturn(this, _getPrototypeOf(P).call(this, attributes, \"p\"));\n          }\n          _createClass(P, [{\n            key: _xfa_object.$pushGlyphs,\n            value: function value(measure) {\n              _get(_getPrototypeOf(P.prototype), _xfa_object.$pushGlyphs, this).call(this, measure, false);\n              measure.addString(\"\\n\");\n              measure.addPara();\n              measure.popFont();\n            }\n          }, {\n            key: _xfa_object.$text,\n            value: function value() {\n              var siblings = this[_xfa_object.$getParent]()[_xfa_object.$getChildren]();\n              if (siblings.at(-1) === this) {\n                return _get(_getPrototypeOf(P.prototype), _xfa_object.$text, this).call(this);\n              }\n              return _get(_getPrototypeOf(P.prototype), _xfa_object.$text, this).call(this) + \"\\n\";\n            }\n          }]);\n          return P;\n        }(XhtmlObject);\n        var Span = /*#__PURE__*/function (_XhtmlObject10) {\n          _inherits(Span, _XhtmlObject10);\n          function Span(attributes) {\n            _classCallCheck(this, Span);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Span).call(this, attributes, \"span\"));\n          }\n          return Span;\n        }(XhtmlObject);\n        var Sub = /*#__PURE__*/function (_XhtmlObject11) {\n          _inherits(Sub, _XhtmlObject11);\n          function Sub(attributes) {\n            _classCallCheck(this, Sub);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Sub).call(this, attributes, \"sub\"));\n          }\n          return Sub;\n        }(XhtmlObject);\n        var Sup = /*#__PURE__*/function (_XhtmlObject12) {\n          _inherits(Sup, _XhtmlObject12);\n          function Sup(attributes) {\n            _classCallCheck(this, Sup);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Sup).call(this, attributes, \"sup\"));\n          }\n          return Sup;\n        }(XhtmlObject);\n        var Ul = /*#__PURE__*/function (_XhtmlObject13) {\n          _inherits(Ul, _XhtmlObject13);\n          function Ul(attributes) {\n            _classCallCheck(this, Ul);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Ul).call(this, attributes, \"ul\"));\n          }\n          return Ul;\n        }(XhtmlObject);\n        var XhtmlNamespace = /*#__PURE__*/function () {\n          function XhtmlNamespace() {\n            _classCallCheck(this, XhtmlNamespace);\n          }\n          _createClass(XhtmlNamespace, null, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              if (XhtmlNamespace.hasOwnProperty(name)) {\n                return XhtmlNamespace[name](attributes);\n              }\n              return undefined;\n            }\n          }, {\n            key: \"a\",\n            value: function a(attributes) {\n              return new A(attributes);\n            }\n          }, {\n            key: \"b\",\n            value: function b(attributes) {\n              return new B(attributes);\n            }\n          }, {\n            key: \"body\",\n            value: function body(attributes) {\n              return new Body(attributes);\n            }\n          }, {\n            key: \"br\",\n            value: function br(attributes) {\n              return new Br(attributes);\n            }\n          }, {\n            key: \"html\",\n            value: function html(attributes) {\n              return new Html(attributes);\n            }\n          }, {\n            key: \"i\",\n            value: function i(attributes) {\n              return new I(attributes);\n            }\n          }, {\n            key: \"li\",\n            value: function li(attributes) {\n              return new Li(attributes);\n            }\n          }, {\n            key: \"ol\",\n            value: function ol(attributes) {\n              return new Ol(attributes);\n            }\n          }, {\n            key: \"p\",\n            value: function p(attributes) {\n              return new P(attributes);\n            }\n          }, {\n            key: \"span\",\n            value: function span(attributes) {\n              return new Span(attributes);\n            }\n          }, {\n            key: \"sub\",\n            value: function sub(attributes) {\n              return new Sub(attributes);\n            }\n          }, {\n            key: \"sup\",\n            value: function sup(attributes) {\n              return new Sup(attributes);\n            }\n          }, {\n            key: \"ul\",\n            value: function ul(attributes) {\n              return new Ul(attributes);\n            }\n          }]);\n          return XhtmlNamespace;\n        }();\n        exports.XhtmlNamespace = XhtmlNamespace;\n\n        /***/\n      }, /* 99 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.UnknownNamespace = void 0;\n        var _namespaces = __w_pdfjs_require__(79);\n        var _xfa_object = __w_pdfjs_require__(77);\n        var UnknownNamespace = /*#__PURE__*/function () {\n          function UnknownNamespace(nsId) {\n            _classCallCheck(this, UnknownNamespace);\n            this.namespaceId = nsId;\n          }\n          _createClass(UnknownNamespace, [{\n            key: _namespaces.$buildXFAObject,\n            value: function value(name, attributes) {\n              return new _xfa_object.XmlObject(this.namespaceId, name, attributes);\n            }\n          }]);\n          return UnknownNamespace;\n        }();\n        exports.UnknownNamespace = UnknownNamespace;\n\n        /***/\n      }, /* 100 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.DatasetReader = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _xml_parser = __w_pdfjs_require__(66);\n        function decodeString(str) {\n          try {\n            return (0, _util.stringToUTF8String)(str);\n          } catch (ex) {\n            (0, _util.warn)(\"UTF-8 decoding failed: \\\"\".concat(ex, \"\\\".\"));\n            return str;\n          }\n        }\n        var DatasetXMLParser = /*#__PURE__*/function (_xml_parser$SimpleXML) {\n          _inherits(DatasetXMLParser, _xml_parser$SimpleXML);\n          function DatasetXMLParser(options) {\n            var _this305;\n            _classCallCheck(this, DatasetXMLParser);\n            _this305 = _possibleConstructorReturn(this, _getPrototypeOf(DatasetXMLParser).call(this, options));\n            _this305.node = null;\n            return _this305;\n          }\n          _createClass(DatasetXMLParser, [{\n            key: \"onEndElement\",\n            value: function onEndElement(name) {\n              var node = _get(_getPrototypeOf(DatasetXMLParser.prototype), \"onEndElement\", this).call(this, name);\n              if (node && name === \"xfa:datasets\") {\n                this.node = node;\n                throw new Error(\"Aborting DatasetXMLParser.\");\n              }\n            }\n          }]);\n          return DatasetXMLParser;\n        }(_xml_parser.SimpleXMLParser);\n        var DatasetReader = /*#__PURE__*/function () {\n          function DatasetReader(data) {\n            _classCallCheck(this, DatasetReader);\n            if (data.datasets) {\n              this.node = new _xml_parser.SimpleXMLParser({\n                hasAttributes: true\n              }).parseFromString(data.datasets).documentElement;\n            } else {\n              var parser = new DatasetXMLParser({\n                hasAttributes: true\n              });\n              try {\n                parser.parseFromString(data[\"xdp:xdp\"]);\n              } catch (_) {}\n              this.node = parser.node;\n            }\n          }\n          _createClass(DatasetReader, [{\n            key: \"getValue\",\n            value: function getValue(path) {\n              if (!this.node || !path) {\n                return \"\";\n              }\n              var node = this.node.searchNode((0, _core_utils.parseXFAPath)(path), 0);\n              if (!node) {\n                return \"\";\n              }\n              var first = node.firstChild;\n              if (first && first.nodeName === \"value\") {\n                return node.children.map(function (child) {\n                  return decodeString(child.textContent);\n                });\n              }\n              return decodeString(node.textContent);\n            }\n          }]);\n          return DatasetReader;\n        }();\n        exports.DatasetReader = DatasetReader;\n\n        /***/\n      }, /* 101 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XRef = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var _primitives = __w_pdfjs_require__(5);\n        var _core_utils = __w_pdfjs_require__(6);\n        var _parser = __w_pdfjs_require__(17);\n        var _base_stream = __w_pdfjs_require__(7);\n        var _crypto = __w_pdfjs_require__(67);\n        var XRef = /*#__PURE__*/function () {\n          function XRef(stream, pdfManager) {\n            _classCallCheck(this, XRef);\n            this.stream = stream;\n            this.pdfManager = pdfManager;\n            this.entries = [];\n            this.xrefstms = Object.create(null);\n            this._cacheMap = new Map();\n            this._pendingRefs = new _primitives.RefSet();\n            this.stats = new _core_utils.DocStats(pdfManager.msgHandler);\n            this._newRefNum = null;\n          }\n          _createClass(XRef, [{\n            key: \"getNewRef\",\n            value: function getNewRef() {\n              if (this._newRefNum === null) {\n                this._newRefNum = this.entries.length || 1;\n              }\n              return _primitives.Ref.get(this._newRefNum++, 0);\n            }\n          }, {\n            key: \"resetNewRef\",\n            value: function resetNewRef() {\n              this._newRefNum = null;\n            }\n          }, {\n            key: \"setStartXRef\",\n            value: function setStartXRef(startXRef) {\n              this.startXRefQueue = [startXRef];\n            }\n          }, {\n            key: \"parse\",\n            value: function parse() {\n              var recoveryMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var trailerDict;\n              if (!recoveryMode) {\n                trailerDict = this.readXRef();\n              } else {\n                (0, _util.warn)(\"Indexing all PDF objects\");\n                trailerDict = this.indexObjects();\n              }\n              trailerDict.assignXref(this);\n              this.trailer = trailerDict;\n              var encrypt;\n              try {\n                encrypt = trailerDict.get(\"Encrypt\");\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"XRef.parse - Invalid \\\"Encrypt\\\" reference: \\\"\".concat(ex, \"\\\".\"));\n              }\n              if (encrypt instanceof _primitives.Dict) {\n                var ids = trailerDict.get(\"ID\");\n                var fileId = ids && ids.length ? ids[0] : \"\";\n                encrypt.suppressEncryption = true;\n                this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);\n              }\n              var root;\n              try {\n                root = trailerDict.get(\"Root\");\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n                (0, _util.warn)(\"XRef.parse - Invalid \\\"Root\\\" reference: \\\"\".concat(ex, \"\\\".\"));\n              }\n              if (root instanceof _primitives.Dict) {\n                try {\n                  var pages = root.get(\"Pages\");\n                  if (pages instanceof _primitives.Dict) {\n                    this.root = root;\n                    return;\n                  }\n                } catch (ex) {\n                  if (ex instanceof _core_utils.MissingDataException) {\n                    throw ex;\n                  }\n                  (0, _util.warn)(\"XRef.parse - Invalid \\\"Pages\\\" reference: \\\"\".concat(ex, \"\\\".\"));\n                }\n              }\n              if (!recoveryMode) {\n                throw new _core_utils.XRefParseException();\n              }\n              throw new _util.InvalidPDFException(\"Invalid Root reference.\");\n            }\n          }, {\n            key: \"processXRefTable\",\n            value: function processXRefTable(parser) {\n              if (!(\"tableState\" in this)) {\n                this.tableState = {\n                  entryNum: 0,\n                  streamPos: parser.lexer.stream.pos,\n                  parserBuf1: parser.buf1,\n                  parserBuf2: parser.buf2\n                };\n              }\n              var obj = this.readXRefTable(parser);\n              if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n                throw new _util.FormatError(\"Invalid XRef table: could not find trailer dictionary\");\n              }\n              var dict = parser.getObj();\n              if (!(dict instanceof _primitives.Dict) && dict.dict) {\n                dict = dict.dict;\n              }\n              if (!(dict instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"Invalid XRef table: could not parse trailer dictionary\");\n              }\n              delete this.tableState;\n              return dict;\n            }\n          }, {\n            key: \"readXRefTable\",\n            value: function readXRefTable(parser) {\n              var stream = parser.lexer.stream;\n              var tableState = this.tableState;\n              stream.pos = tableState.streamPos;\n              parser.buf1 = tableState.parserBuf1;\n              parser.buf2 = tableState.parserBuf2;\n              var obj;\n              while (true) {\n                if (!(\"firstEntryNum\" in tableState) || !(\"entryCount\" in tableState)) {\n                  if ((0, _primitives.isCmd)(obj = parser.getObj(), \"trailer\")) {\n                    break;\n                  }\n                  tableState.firstEntryNum = obj;\n                  tableState.entryCount = parser.getObj();\n                }\n                var first = tableState.firstEntryNum;\n                var count = tableState.entryCount;\n                if (!Number.isInteger(first) || !Number.isInteger(count)) {\n                  throw new _util.FormatError(\"Invalid XRef table: wrong types in subsection header\");\n                }\n                for (var i = tableState.entryNum; i < count; i++) {\n                  tableState.streamPos = stream.pos;\n                  tableState.entryNum = i;\n                  tableState.parserBuf1 = parser.buf1;\n                  tableState.parserBuf2 = parser.buf2;\n                  var entry = {};\n                  entry.offset = parser.getObj();\n                  entry.gen = parser.getObj();\n                  var type = parser.getObj();\n                  if (type instanceof _primitives.Cmd) {\n                    switch (type.cmd) {\n                      case \"f\":\n                        entry.free = true;\n                        break;\n                      case \"n\":\n                        entry.uncompressed = true;\n                        break;\n                    }\n                  }\n                  if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {\n                    throw new _util.FormatError(\"Invalid entry in XRef subsection: \".concat(first, \", \").concat(count));\n                  }\n                  if (i === 0 && entry.free && first === 1) {\n                    first = 0;\n                  }\n                  if (!this.entries[i + first]) {\n                    this.entries[i + first] = entry;\n                  }\n                }\n                tableState.entryNum = 0;\n                tableState.streamPos = stream.pos;\n                tableState.parserBuf1 = parser.buf1;\n                tableState.parserBuf2 = parser.buf2;\n                delete tableState.firstEntryNum;\n                delete tableState.entryCount;\n              }\n              if (this.entries[0] && !this.entries[0].free) {\n                throw new _util.FormatError(\"Invalid XRef table: unexpected first object\");\n              }\n              return obj;\n            }\n          }, {\n            key: \"processXRefStream\",\n            value: function processXRefStream(stream) {\n              if (!(\"streamState\" in this)) {\n                var streamParameters = stream.dict;\n                var byteWidths = streamParameters.get(\"W\");\n                var range = streamParameters.get(\"Index\");\n                if (!range) {\n                  range = [0, streamParameters.get(\"Size\")];\n                }\n                this.streamState = {\n                  entryRanges: range,\n                  byteWidths: byteWidths,\n                  entryNum: 0,\n                  streamPos: stream.pos\n                };\n              }\n              this.readXRefStream(stream);\n              delete this.streamState;\n              return stream.dict;\n            }\n          }, {\n            key: \"readXRefStream\",\n            value: function readXRefStream(stream) {\n              var streamState = this.streamState;\n              stream.pos = streamState.streamPos;\n              var _streamState$byteWidt = _slicedToArray(streamState.byteWidths, 3),\n                typeFieldWidth = _streamState$byteWidt[0],\n                offsetFieldWidth = _streamState$byteWidt[1],\n                generationFieldWidth = _streamState$byteWidt[2];\n              var entryRanges = streamState.entryRanges;\n              while (entryRanges.length > 0) {\n                var _entryRanges = _slicedToArray(entryRanges, 2),\n                  first = _entryRanges[0],\n                  n = _entryRanges[1];\n                if (!Number.isInteger(first) || !Number.isInteger(n)) {\n                  throw new _util.FormatError(\"Invalid XRef range fields: \".concat(first, \", \").concat(n));\n                }\n                if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {\n                  throw new _util.FormatError(\"Invalid XRef entry fields length: \".concat(first, \", \").concat(n));\n                }\n                for (var i = streamState.entryNum; i < n; ++i) {\n                  streamState.entryNum = i;\n                  streamState.streamPos = stream.pos;\n                  var type = 0,\n                    offset = 0,\n                    generation = 0;\n                  for (var j = 0; j < typeFieldWidth; ++j) {\n                    var typeByte = stream.getByte();\n                    if (typeByte === -1) {\n                      throw new _util.FormatError(\"Invalid XRef byteWidths 'type'.\");\n                    }\n                    type = type << 8 | typeByte;\n                  }\n                  if (typeFieldWidth === 0) {\n                    type = 1;\n                  }\n                  for (var _j16 = 0; _j16 < offsetFieldWidth; ++_j16) {\n                    var offsetByte = stream.getByte();\n                    if (offsetByte === -1) {\n                      throw new _util.FormatError(\"Invalid XRef byteWidths 'offset'.\");\n                    }\n                    offset = offset << 8 | offsetByte;\n                  }\n                  for (var _j17 = 0; _j17 < generationFieldWidth; ++_j17) {\n                    var generationByte = stream.getByte();\n                    if (generationByte === -1) {\n                      throw new _util.FormatError(\"Invalid XRef byteWidths 'generation'.\");\n                    }\n                    generation = generation << 8 | generationByte;\n                  }\n                  var entry = {};\n                  entry.offset = offset;\n                  entry.gen = generation;\n                  switch (type) {\n                    case 0:\n                      entry.free = true;\n                      break;\n                    case 1:\n                      entry.uncompressed = true;\n                      break;\n                    case 2:\n                      break;\n                    default:\n                      throw new _util.FormatError(\"Invalid XRef entry type: \".concat(type));\n                  }\n                  if (!this.entries[first + i]) {\n                    this.entries[first + i] = entry;\n                  }\n                }\n                streamState.entryNum = 0;\n                streamState.streamPos = stream.pos;\n                entryRanges.splice(0, 2);\n              }\n            }\n          }, {\n            key: \"indexObjects\",\n            value: function indexObjects() {\n              var TAB = 0x9,\n                LF = 0xa,\n                CR = 0xd,\n                SPACE = 0x20;\n              var PERCENT = 0x25,\n                LT = 0x3c;\n              function readToken(data, offset) {\n                var token = \"\",\n                  ch = data[offset];\n                while (ch !== LF && ch !== CR && ch !== LT) {\n                  if (++offset >= data.length) {\n                    break;\n                  }\n                  token += String.fromCharCode(ch);\n                  ch = data[offset];\n                }\n                return token;\n              }\n              function skipUntil(data, offset, what) {\n                var length = what.length,\n                  dataLength = data.length;\n                var skipped = 0;\n                while (offset < dataLength) {\n                  var i = 0;\n                  while (i < length && data[offset + i] === what[i]) {\n                    ++i;\n                  }\n                  if (i >= length) {\n                    break;\n                  }\n                  offset++;\n                  skipped++;\n                }\n                return skipped;\n              }\n              var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n              var endobjRegExp = /\\bendobj[\\b\\s]$/;\n              var nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n              var CHECK_CONTENT_LENGTH = 25;\n              var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n              var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);\n              var objBytes = new Uint8Array([111, 98, 106]);\n              var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n              this.entries.length = 0;\n              this._cacheMap.clear();\n              var stream = this.stream;\n              stream.pos = 0;\n              var buffer = stream.getBytes(),\n                length = buffer.length;\n              var position = stream.start;\n              var trailers = [],\n                xrefStms = [];\n              while (position < length) {\n                var ch = buffer[position];\n                if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n                  ++position;\n                  continue;\n                }\n                if (ch === PERCENT) {\n                  do {\n                    ++position;\n                    if (position >= length) {\n                      break;\n                    }\n                    ch = buffer[position];\n                  } while (ch !== LF && ch !== CR);\n                  continue;\n                }\n                var token = readToken(buffer, position);\n                var m = void 0;\n                if (token.startsWith(\"xref\") && (token.length === 4 || /\\s/.test(token[4]))) {\n                  position += skipUntil(buffer, position, trailerBytes);\n                  trailers.push(position);\n                  position += skipUntil(buffer, position, startxrefBytes);\n                } else if (m = objRegExp.exec(token)) {\n                  var num = m[1] | 0,\n                    gen = m[2] | 0;\n                  var contentLength = void 0,\n                    startPos = position + token.length,\n                    updateEntries = false;\n                  if (!this.entries[num]) {\n                    updateEntries = true;\n                  } else if (this.entries[num].gen === gen) {\n                    try {\n                      var parser = new _parser.Parser({\n                        lexer: new _parser.Lexer(stream.makeSubStream(startPos))\n                      });\n                      parser.getObj();\n                      updateEntries = true;\n                    } catch (ex) {\n                      if (ex instanceof _core_utils.ParserEOFException) {\n                        (0, _util.warn)(\"indexObjects -- checking object (\".concat(token, \"): \\\"\").concat(ex, \"\\\".\"));\n                      } else {\n                        updateEntries = true;\n                      }\n                    }\n                  }\n                  if (updateEntries) {\n                    this.entries[num] = {\n                      offset: position - stream.start,\n                      gen: gen,\n                      uncompressed: true\n                    };\n                  }\n                  while (startPos < buffer.length) {\n                    var endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n                    contentLength = endPos - position;\n                    var checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n                    var tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));\n                    if (endobjRegExp.test(tokenStr)) {\n                      break;\n                    } else {\n                      var objToken = nestedObjRegExp.exec(tokenStr);\n                      if (objToken && objToken[1]) {\n                        (0, _util.warn)('indexObjects: Found new \"obj\" inside of another \"obj\", ' + 'caused by missing \"endobj\" -- trying to recover.');\n                        contentLength -= objToken[1].length;\n                        break;\n                      }\n                    }\n                    startPos = endPos;\n                  }\n                  var content = buffer.subarray(position, position + contentLength);\n                  var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n                  if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {\n                    xrefStms.push(position - stream.start);\n                    this.xrefstms[position - stream.start] = 1;\n                  }\n                  position += contentLength;\n                } else if (token.startsWith(\"trailer\") && (token.length === 7 || /\\s/.test(token[7]))) {\n                  trailers.push(position);\n                  position += skipUntil(buffer, position, startxrefBytes);\n                } else {\n                  position += token.length + 1;\n                }\n              }\n              for (var i = 0, ii = xrefStms.length; i < ii; ++i) {\n                this.startXRefQueue.push(xrefStms[i]);\n                this.readXRef(true);\n              }\n              var trailerDict;\n              for (var _i70 = 0, _ii12 = trailers.length; _i70 < _ii12; ++_i70) {\n                stream.pos = trailers[_i70];\n                var _parser2 = new _parser.Parser({\n                  lexer: new _parser.Lexer(stream),\n                  xref: this,\n                  allowStreams: true,\n                  recoveryMode: true\n                });\n                var obj = _parser2.getObj();\n                if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n                  continue;\n                }\n                var dict = _parser2.getObj();\n                if (!(dict instanceof _primitives.Dict)) {\n                  continue;\n                }\n                try {\n                  var rootDict = dict.get(\"Root\");\n                  if (!(rootDict instanceof _primitives.Dict)) {\n                    continue;\n                  }\n                  var pagesDict = rootDict.get(\"Pages\");\n                  if (!(pagesDict instanceof _primitives.Dict)) {\n                    continue;\n                  }\n                  var pagesCount = pagesDict.get(\"Count\");\n                  if (!Number.isInteger(pagesCount)) {\n                    continue;\n                  }\n                } catch (ex) {\n                  continue;\n                }\n                if (dict.has(\"ID\")) {\n                  return dict;\n                }\n                trailerDict = dict;\n              }\n              if (trailerDict) {\n                return trailerDict;\n              }\n              if (this.topDict) {\n                return this.topDict;\n              }\n              throw new _util.InvalidPDFException(\"Invalid PDF structure.\");\n            }\n          }, {\n            key: \"readXRef\",\n            value: function readXRef() {\n              var recoveryMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              var stream = this.stream;\n              var startXRefParsedCache = new Set();\n              try {\n                while (this.startXRefQueue.length) {\n                  var startXRef = this.startXRefQueue[0];\n                  if (startXRefParsedCache.has(startXRef)) {\n                    (0, _util.warn)(\"readXRef - skipping XRef table since it was already parsed.\");\n                    this.startXRefQueue.shift();\n                    continue;\n                  }\n                  startXRefParsedCache.add(startXRef);\n                  stream.pos = startXRef + stream.start;\n                  var parser = new _parser.Parser({\n                    lexer: new _parser.Lexer(stream),\n                    xref: this,\n                    allowStreams: true\n                  });\n                  var obj = parser.getObj();\n                  var dict = void 0;\n                  if ((0, _primitives.isCmd)(obj, \"xref\")) {\n                    dict = this.processXRefTable(parser);\n                    if (!this.topDict) {\n                      this.topDict = dict;\n                    }\n                    obj = dict.get(\"XRefStm\");\n                    if (Number.isInteger(obj)) {\n                      var pos = obj;\n                      if (!(pos in this.xrefstms)) {\n                        this.xrefstms[pos] = 1;\n                        this.startXRefQueue.push(pos);\n                      }\n                    }\n                  } else if (Number.isInteger(obj)) {\n                    if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), \"obj\") || !((obj = parser.getObj()) instanceof _base_stream.BaseStream)) {\n                      throw new _util.FormatError(\"Invalid XRef stream\");\n                    }\n                    dict = this.processXRefStream(obj);\n                    if (!this.topDict) {\n                      this.topDict = dict;\n                    }\n                    if (!dict) {\n                      throw new _util.FormatError(\"Failed to read XRef stream\");\n                    }\n                  } else {\n                    throw new _util.FormatError(\"Invalid XRef stream header\");\n                  }\n                  obj = dict.get(\"Prev\");\n                  if (Number.isInteger(obj)) {\n                    this.startXRefQueue.push(obj);\n                  } else if (obj instanceof _primitives.Ref) {\n                    this.startXRefQueue.push(obj.num);\n                  }\n                  this.startXRefQueue.shift();\n                }\n                return this.topDict;\n              } catch (e) {\n                if (e instanceof _core_utils.MissingDataException) {\n                  throw e;\n                }\n                (0, _util.info)(\"(while reading XRef): \" + e);\n                this.startXRefQueue.shift();\n              }\n              if (recoveryMode) {\n                return undefined;\n              }\n              throw new _core_utils.XRefParseException();\n            }\n          }, {\n            key: \"getEntry\",\n            value: function getEntry(i) {\n              var xrefEntry = this.entries[i];\n              if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n                return xrefEntry;\n              }\n              return null;\n            }\n          }, {\n            key: \"fetchIfRef\",\n            value: function fetchIfRef(obj) {\n              var suppressEncryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              if (obj instanceof _primitives.Ref) {\n                return this.fetch(obj, suppressEncryption);\n              }\n              return obj;\n            }\n          }, {\n            key: \"fetch\",\n            value: function fetch(ref) {\n              var suppressEncryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n              if (!(ref instanceof _primitives.Ref)) {\n                throw new Error(\"ref object is not a reference\");\n              }\n              var num = ref.num;\n              var cacheEntry = this._cacheMap.get(num);\n              if (cacheEntry !== undefined) {\n                if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {\n                  cacheEntry.objId = ref.toString();\n                }\n                return cacheEntry;\n              }\n              var xrefEntry = this.getEntry(num);\n              if (xrefEntry === null) {\n                this._cacheMap.set(num, xrefEntry);\n                return xrefEntry;\n              }\n              if (this._pendingRefs.has(ref)) {\n                this._pendingRefs.remove(ref);\n                (0, _util.warn)(\"Ignoring circular reference: \".concat(ref, \".\"));\n                return _primitives.CIRCULAR_REF;\n              }\n              this._pendingRefs.put(ref);\n              try {\n                if (xrefEntry.uncompressed) {\n                  xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n                } else {\n                  xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n                }\n                this._pendingRefs.remove(ref);\n              } catch (ex) {\n                this._pendingRefs.remove(ref);\n                throw ex;\n              }\n              if (xrefEntry instanceof _primitives.Dict) {\n                xrefEntry.objId = ref.toString();\n              } else if (xrefEntry instanceof _base_stream.BaseStream) {\n                xrefEntry.dict.objId = ref.toString();\n              }\n              return xrefEntry;\n            }\n          }, {\n            key: \"fetchUncompressed\",\n            value: function fetchUncompressed(ref, xrefEntry) {\n              var suppressEncryption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              var gen = ref.gen;\n              var num = ref.num;\n              if (xrefEntry.gen !== gen) {\n                throw new _core_utils.XRefEntryException(\"Inconsistent generation in XRef: \".concat(ref));\n              }\n              var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);\n              var parser = new _parser.Parser({\n                lexer: new _parser.Lexer(stream),\n                xref: this,\n                allowStreams: true\n              });\n              var obj1 = parser.getObj();\n              var obj2 = parser.getObj();\n              var obj3 = parser.getObj();\n              if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {\n                throw new _core_utils.XRefEntryException(\"Bad (uncompressed) XRef entry: \".concat(ref));\n              }\n              if (obj3.cmd !== \"obj\") {\n                if (obj3.cmd.startsWith(\"obj\")) {\n                  num = parseInt(obj3.cmd.substring(3), 10);\n                  if (!Number.isNaN(num)) {\n                    return num;\n                  }\n                }\n                throw new _core_utils.XRefEntryException(\"Bad (uncompressed) XRef entry: \".concat(ref));\n              }\n              if (this.encrypt && !suppressEncryption) {\n                xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n              } else {\n                xrefEntry = parser.getObj();\n              }\n              if (!(xrefEntry instanceof _base_stream.BaseStream)) {\n                this._cacheMap.set(num, xrefEntry);\n              }\n              return xrefEntry;\n            }\n          }, {\n            key: \"fetchCompressed\",\n            value: function fetchCompressed(ref, xrefEntry) {\n              var suppressEncryption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              var tableOffset = xrefEntry.offset;\n              var stream = this.fetch(_primitives.Ref.get(tableOffset, 0));\n              if (!(stream instanceof _base_stream.BaseStream)) {\n                throw new _util.FormatError(\"bad ObjStm stream\");\n              }\n              var first = stream.dict.get(\"First\");\n              var n = stream.dict.get(\"N\");\n              if (!Number.isInteger(first) || !Number.isInteger(n)) {\n                throw new _util.FormatError(\"invalid first and n parameters for ObjStm stream\");\n              }\n              var parser = new _parser.Parser({\n                lexer: new _parser.Lexer(stream),\n                xref: this,\n                allowStreams: true\n              });\n              var nums = new Array(n);\n              var offsets = new Array(n);\n              for (var i = 0; i < n; ++i) {\n                var num = parser.getObj();\n                if (!Number.isInteger(num)) {\n                  throw new _util.FormatError(\"invalid object number in the ObjStm stream: \".concat(num));\n                }\n                var offset = parser.getObj();\n                if (!Number.isInteger(offset)) {\n                  throw new _util.FormatError(\"invalid object offset in the ObjStm stream: \".concat(offset));\n                }\n                nums[i] = num;\n                offsets[i] = offset;\n              }\n              var start = (stream.start || 0) + first;\n              var entries = new Array(n);\n              for (var _i71 = 0; _i71 < n; ++_i71) {\n                var length = _i71 < n - 1 ? offsets[_i71 + 1] - offsets[_i71] : undefined;\n                if (length < 0) {\n                  throw new _util.FormatError(\"Invalid offset in the ObjStm stream.\");\n                }\n                parser = new _parser.Parser({\n                  lexer: new _parser.Lexer(stream.makeSubStream(start + offsets[_i71], length, stream.dict)),\n                  xref: this,\n                  allowStreams: true\n                });\n                var obj = parser.getObj();\n                entries[_i71] = obj;\n                if (obj instanceof _base_stream.BaseStream) {\n                  continue;\n                }\n                var _num = nums[_i71],\n                  entry = this.entries[_num];\n                if (entry && entry.offset === tableOffset && entry.gen === _i71) {\n                  this._cacheMap.set(_num, obj);\n                }\n              }\n              xrefEntry = entries[xrefEntry.gen];\n              if (xrefEntry === undefined) {\n                throw new _core_utils.XRefEntryException(\"Bad (compressed) XRef entry: \".concat(ref));\n              }\n              return xrefEntry;\n            }\n          }, {\n            key: \"fetchIfRefAsync\",\n            value: function () {\n              var _fetchIfRefAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(obj, suppressEncryption) {\n                return _regeneratorRuntime().wrap(function _callee62$(_context73) {\n                  while (1) {\n                    switch (_context73.prev = _context73.next) {\n                      case 0:\n                        if (!(obj instanceof _primitives.Ref)) {\n                          _context73.next = 2;\n                          break;\n                        }\n                        return _context73.abrupt(\"return\", this.fetchAsync(obj, suppressEncryption));\n                      case 2:\n                        return _context73.abrupt(\"return\", obj);\n                      case 3:\n                      case \"end\":\n                        return _context73.stop();\n                    }\n                  }\n                }, _callee62, this);\n              }));\n              function fetchIfRefAsync(_x131, _x132) {\n                return _fetchIfRefAsync.apply(this, arguments);\n              }\n              return fetchIfRefAsync;\n            }()\n          }, {\n            key: \"fetchAsync\",\n            value: function () {\n              var _fetchAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(ref, suppressEncryption) {\n                return _regeneratorRuntime().wrap(function _callee63$(_context74) {\n                  while (1) {\n                    switch (_context74.prev = _context74.next) {\n                      case 0:\n                        _context74.prev = 0;\n                        return _context74.abrupt(\"return\", this.fetch(ref, suppressEncryption));\n                      case 4:\n                        _context74.prev = 4;\n                        _context74.t0 = _context74[\"catch\"](0);\n                        if (_context74.t0 instanceof _core_utils.MissingDataException) {\n                          _context74.next = 8;\n                          break;\n                        }\n                        throw _context74.t0;\n                      case 8:\n                        _context74.next = 10;\n                        return this.pdfManager.requestRange(_context74.t0.begin, _context74.t0.end);\n                      case 10:\n                        return _context74.abrupt(\"return\", this.fetchAsync(ref, suppressEncryption));\n                      case 11:\n                      case \"end\":\n                        return _context74.stop();\n                    }\n                  }\n                }, _callee63, this, [[0, 4]]);\n              }));\n              function fetchAsync(_x133, _x134) {\n                return _fetchAsync.apply(this, arguments);\n              }\n              return fetchAsync;\n            }()\n          }, {\n            key: \"getCatalogObj\",\n            value: function getCatalogObj() {\n              return this.root;\n            }\n          }]);\n          return XRef;\n        }();\n        exports.XRef = XRef;\n\n        /***/\n      }, /* 102 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        var StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n        function wrapReason(reason) {\n          if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n            (0, _util.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n          }\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n            case \"PasswordException\":\n              return new _util.PasswordException(reason.message, reason.code);\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n        var MessageHandler = /*#__PURE__*/function () {\n          function MessageHandler(sourceName, targetName, comObj) {\n            var _this306 = this;\n            _classCallCheck(this, MessageHandler);\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n            this._onComObjOnMessage = function (event) {\n              var data = event.data;\n              if (data.targetName !== _this306.sourceName) {\n                return;\n              }\n              if (data.stream) {\n                _this306._processStreamMessage(data);\n                return;\n              }\n              if (data.callback) {\n                var callbackId = data.callbackId;\n                var capability = _this306.callbackCapabilities[callbackId];\n                if (!capability) {\n                  throw new Error(\"Cannot resolve callback \".concat(callbackId));\n                }\n                delete _this306.callbackCapabilities[callbackId];\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n                return;\n              }\n              var action = _this306.actionHandler[data.action];\n              if (!action) {\n                throw new Error(\"Unknown action from worker: \".concat(data.action));\n              }\n              if (data.callbackId) {\n                var cbSourceName = _this306.sourceName;\n                var cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n              if (data.streamId) {\n                _this306._createStreamSink(data);\n                return;\n              }\n              action(data.data);\n            };\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n          _createClass(MessageHandler, [{\n            key: \"on\",\n            value: function on(actionName, handler) {\n              var ah = this.actionHandler;\n              if (ah[actionName]) {\n                throw new Error(\"There is already an actionName called \\\"\".concat(actionName, \"\\\"\"));\n              }\n              ah[actionName] = handler;\n            }\n          }, {\n            key: \"send\",\n            value: function send(actionName, data, transfers) {\n              this.comObj.postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                data: data\n              }, transfers);\n            }\n          }, {\n            key: \"sendWithPromise\",\n            value: function sendWithPromise(actionName, data, transfers) {\n              var callbackId = this.callbackId++;\n              var capability = (0, _util.createPromiseCapability)();\n              this.callbackCapabilities[callbackId] = capability;\n              try {\n                this.comObj.postMessage({\n                  sourceName: this.sourceName,\n                  targetName: this.targetName,\n                  action: actionName,\n                  callbackId: callbackId,\n                  data: data\n                }, transfers);\n              } catch (ex) {\n                capability.reject(ex);\n              }\n              return capability.promise;\n            }\n          }, {\n            key: \"sendWithStream\",\n            value: function sendWithStream(actionName, data, queueingStrategy, transfers) {\n              var _this307 = this;\n              var streamId = this.streamId++,\n                sourceName = this.sourceName,\n                targetName = this.targetName,\n                comObj = this.comObj;\n              return new ReadableStream({\n                start: function start(controller) {\n                  var startCapability = (0, _util.createPromiseCapability)();\n                  _this307.streamControllers[streamId] = {\n                    controller: controller,\n                    startCall: startCapability,\n                    pullCall: null,\n                    cancelCall: null,\n                    isClosed: false\n                  };\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    action: actionName,\n                    streamId: streamId,\n                    data: data,\n                    desiredSize: controller.desiredSize\n                  }, transfers);\n                  return startCapability.promise;\n                },\n                pull: function pull(controller) {\n                  var pullCapability = (0, _util.createPromiseCapability)();\n                  _this307.streamControllers[streamId].pullCall = pullCapability;\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    stream: StreamKind.PULL,\n                    streamId: streamId,\n                    desiredSize: controller.desiredSize\n                  });\n                  return pullCapability.promise;\n                },\n                cancel: function cancel(reason) {\n                  (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                  var cancelCapability = (0, _util.createPromiseCapability)();\n                  _this307.streamControllers[streamId].cancelCall = cancelCapability;\n                  _this307.streamControllers[streamId].isClosed = true;\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    stream: StreamKind.CANCEL,\n                    streamId: streamId,\n                    reason: wrapReason(reason)\n                  });\n                  return cancelCapability.promise;\n                }\n              }, queueingStrategy);\n            }\n          }, {\n            key: \"_createStreamSink\",\n            value: function _createStreamSink(data) {\n              var streamId = data.streamId,\n                sourceName = this.sourceName,\n                targetName = data.sourceName,\n                comObj = this.comObj;\n              var self = this,\n                action = this.actionHandler[data.action];\n              var streamSink = {\n                enqueue: function enqueue(chunk) {\n                  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                  var transfers = arguments.length > 2 ? arguments[2] : undefined;\n                  if (this.isCancelled) {\n                    return;\n                  }\n                  var lastDesiredSize = this.desiredSize;\n                  this.desiredSize -= size;\n                  if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                    this.sinkCapability = (0, _util.createPromiseCapability)();\n                    this.ready = this.sinkCapability.promise;\n                  }\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    stream: StreamKind.ENQUEUE,\n                    streamId: streamId,\n                    chunk: chunk\n                  }, transfers);\n                },\n                close: function close() {\n                  if (this.isCancelled) {\n                    return;\n                  }\n                  this.isCancelled = true;\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    stream: StreamKind.CLOSE,\n                    streamId: streamId\n                  });\n                  delete self.streamSinks[streamId];\n                },\n                error: function error(reason) {\n                  (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n                  if (this.isCancelled) {\n                    return;\n                  }\n                  this.isCancelled = true;\n                  comObj.postMessage({\n                    sourceName: sourceName,\n                    targetName: targetName,\n                    stream: StreamKind.ERROR,\n                    streamId: streamId,\n                    reason: wrapReason(reason)\n                  });\n                },\n                sinkCapability: (0, _util.createPromiseCapability)(),\n                onPull: null,\n                onCancel: null,\n                isCancelled: false,\n                desiredSize: data.desiredSize,\n                ready: null\n              };\n              streamSink.sinkCapability.resolve();\n              streamSink.ready = streamSink.sinkCapability.promise;\n              this.streamSinks[streamId] = streamSink;\n              new Promise(function (resolve) {\n                resolve(action(data.data, streamSink));\n              }).then(function () {\n                comObj.postMessage({\n                  sourceName: sourceName,\n                  targetName: targetName,\n                  stream: StreamKind.START_COMPLETE,\n                  streamId: streamId,\n                  success: true\n                });\n              }, function (reason) {\n                comObj.postMessage({\n                  sourceName: sourceName,\n                  targetName: targetName,\n                  stream: StreamKind.START_COMPLETE,\n                  streamId: streamId,\n                  reason: wrapReason(reason)\n                });\n              });\n            }\n          }, {\n            key: \"_processStreamMessage\",\n            value: function _processStreamMessage(data) {\n              var streamId = data.streamId,\n                sourceName = this.sourceName,\n                targetName = data.sourceName,\n                comObj = this.comObj;\n              var streamController = this.streamControllers[streamId],\n                streamSink = this.streamSinks[streamId];\n              switch (data.stream) {\n                case StreamKind.START_COMPLETE:\n                  if (data.success) {\n                    streamController.startCall.resolve();\n                  } else {\n                    streamController.startCall.reject(wrapReason(data.reason));\n                  }\n                  break;\n                case StreamKind.PULL_COMPLETE:\n                  if (data.success) {\n                    streamController.pullCall.resolve();\n                  } else {\n                    streamController.pullCall.reject(wrapReason(data.reason));\n                  }\n                  break;\n                case StreamKind.PULL:\n                  if (!streamSink) {\n                    comObj.postMessage({\n                      sourceName: sourceName,\n                      targetName: targetName,\n                      stream: StreamKind.PULL_COMPLETE,\n                      streamId: streamId,\n                      success: true\n                    });\n                    break;\n                  }\n                  if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                    streamSink.sinkCapability.resolve();\n                  }\n                  streamSink.desiredSize = data.desiredSize;\n                  new Promise(function (resolve) {\n                    resolve(streamSink.onPull && streamSink.onPull());\n                  }).then(function () {\n                    comObj.postMessage({\n                      sourceName: sourceName,\n                      targetName: targetName,\n                      stream: StreamKind.PULL_COMPLETE,\n                      streamId: streamId,\n                      success: true\n                    });\n                  }, function (reason) {\n                    comObj.postMessage({\n                      sourceName: sourceName,\n                      targetName: targetName,\n                      stream: StreamKind.PULL_COMPLETE,\n                      streamId: streamId,\n                      reason: wrapReason(reason)\n                    });\n                  });\n                  break;\n                case StreamKind.ENQUEUE:\n                  (0, _util.assert)(streamController, \"enqueue should have stream controller\");\n                  if (streamController.isClosed) {\n                    break;\n                  }\n                  streamController.controller.enqueue(data.chunk);\n                  break;\n                case StreamKind.CLOSE:\n                  (0, _util.assert)(streamController, \"close should have stream controller\");\n                  if (streamController.isClosed) {\n                    break;\n                  }\n                  streamController.isClosed = true;\n                  streamController.controller.close();\n                  this._deleteStreamController(streamController, streamId);\n                  break;\n                case StreamKind.ERROR:\n                  (0, _util.assert)(streamController, \"error should have stream controller\");\n                  streamController.controller.error(wrapReason(data.reason));\n                  this._deleteStreamController(streamController, streamId);\n                  break;\n                case StreamKind.CANCEL_COMPLETE:\n                  if (data.success) {\n                    streamController.cancelCall.resolve();\n                  } else {\n                    streamController.cancelCall.reject(wrapReason(data.reason));\n                  }\n                  this._deleteStreamController(streamController, streamId);\n                  break;\n                case StreamKind.CANCEL:\n                  if (!streamSink) {\n                    break;\n                  }\n                  new Promise(function (resolve) {\n                    resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));\n                  }).then(function () {\n                    comObj.postMessage({\n                      sourceName: sourceName,\n                      targetName: targetName,\n                      stream: StreamKind.CANCEL_COMPLETE,\n                      streamId: streamId,\n                      success: true\n                    });\n                  }, function (reason) {\n                    comObj.postMessage({\n                      sourceName: sourceName,\n                      targetName: targetName,\n                      stream: StreamKind.CANCEL_COMPLETE,\n                      streamId: streamId,\n                      reason: wrapReason(reason)\n                    });\n                  });\n                  streamSink.sinkCapability.reject(wrapReason(data.reason));\n                  streamSink.isCancelled = true;\n                  delete this.streamSinks[streamId];\n                  break;\n                default:\n                  throw new Error(\"Unexpected stream case\");\n              }\n            }\n          }, {\n            key: \"_deleteStreamController\",\n            value: function () {\n              var _deleteStreamController2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(streamController, streamId) {\n                return _regeneratorRuntime().wrap(function _callee64$(_context75) {\n                  while (1) {\n                    switch (_context75.prev = _context75.next) {\n                      case 0:\n                        _context75.next = 2;\n                        return Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);\n                      case 2:\n                        delete this.streamControllers[streamId];\n                      case 3:\n                      case \"end\":\n                        return _context75.stop();\n                    }\n                  }\n                }, _callee64, this);\n              }));\n              function _deleteStreamController(_x135, _x136) {\n                return _deleteStreamController2.apply(this, arguments);\n              }\n              return _deleteStreamController;\n            }()\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n            }\n          }]);\n          return MessageHandler;\n        }();\n        exports.MessageHandler = MessageHandler;\n\n        /***/\n      }, /* 103 */\n      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFWorkerStream = void 0;\n        var _util = __w_pdfjs_require__(2);\n        var PDFWorkerStream = /*#__PURE__*/function () {\n          function PDFWorkerStream(msgHandler) {\n            _classCallCheck(this, PDFWorkerStream);\n            this._msgHandler = msgHandler;\n            this._contentLength = null;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n          _createClass(PDFWorkerStream, [{\n            key: \"getFullReader\",\n            value: function getFullReader() {\n              (0, _util.assert)(!this._fullRequestReader, \"PDFWorkerStream.getFullReader can only be called once.\");\n              this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n              return this._fullRequestReader;\n            }\n          }, {\n            key: \"getRangeReader\",\n            value: function getRangeReader(begin, end) {\n              var reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n              this._rangeRequestReaders.push(reader);\n              return reader;\n            }\n          }, {\n            key: \"cancelAllRequests\",\n            value: function cancelAllRequests(reason) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader.cancel(reason);\n              }\n              var _iterator185 = _createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),\n                _step185;\n              try {\n                for (_iterator185.s(); !(_step185 = _iterator185.n()).done;) {\n                  var reader = _step185.value;\n                  reader.cancel(reason);\n                }\n              } catch (err) {\n                _iterator185.e(err);\n              } finally {\n                _iterator185.f();\n              }\n            }\n          }]);\n          return PDFWorkerStream;\n        }();\n        exports.PDFWorkerStream = PDFWorkerStream;\n        var PDFWorkerStreamReader = /*#__PURE__*/function () {\n          function PDFWorkerStreamReader(msgHandler) {\n            var _this308 = this;\n            _classCallCheck(this, PDFWorkerStreamReader);\n            this._msgHandler = msgHandler;\n            this.onProgress = null;\n            this._contentLength = null;\n            this._isRangeSupported = false;\n            this._isStreamingSupported = false;\n            var readableStream = this._msgHandler.sendWithStream(\"GetReader\");\n            this._reader = readableStream.getReader();\n            this._headersReady = this._msgHandler.sendWithPromise(\"ReaderHeadersReady\").then(function (data) {\n              _this308._isStreamingSupported = data.isStreamingSupported;\n              _this308._isRangeSupported = data.isRangeSupported;\n              _this308._contentLength = data.contentLength;\n            });\n          }\n          _createClass(PDFWorkerStreamReader, [{\n            key: \"read\",\n            value: function () {\n              var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {\n                var _yield$this$_reader$r, value, done;\n                return _regeneratorRuntime().wrap(function _callee65$(_context76) {\n                  while (1) {\n                    switch (_context76.prev = _context76.next) {\n                      case 0:\n                        _context76.next = 2;\n                        return this._reader.read();\n                      case 2:\n                        _yield$this$_reader$r = _context76.sent;\n                        value = _yield$this$_reader$r.value;\n                        done = _yield$this$_reader$r.done;\n                        if (!done) {\n                          _context76.next = 7;\n                          break;\n                        }\n                        return _context76.abrupt(\"return\", {\n                          value: undefined,\n                          done: true\n                        });\n                      case 7:\n                        return _context76.abrupt(\"return\", {\n                          value: value.buffer,\n                          done: false\n                        });\n                      case 8:\n                      case \"end\":\n                        return _context76.stop();\n                    }\n                  }\n                }, _callee65, this);\n              }));\n              function read() {\n                return _read.apply(this, arguments);\n              }\n              return read;\n            }()\n          }, {\n            key: \"cancel\",\n            value: function cancel(reason) {\n              this._reader.cancel(reason);\n            }\n          }, {\n            key: \"headersReady\",\n            get: function get() {\n              return this._headersReady;\n            }\n          }, {\n            key: \"contentLength\",\n            get: function get() {\n              return this._contentLength;\n            }\n          }, {\n            key: \"isStreamingSupported\",\n            get: function get() {\n              return this._isStreamingSupported;\n            }\n          }, {\n            key: \"isRangeSupported\",\n            get: function get() {\n              return this._isRangeSupported;\n            }\n          }]);\n          return PDFWorkerStreamReader;\n        }();\n        var PDFWorkerStreamRangeReader = /*#__PURE__*/function () {\n          function PDFWorkerStreamRangeReader(begin, end, msgHandler) {\n            _classCallCheck(this, PDFWorkerStreamRangeReader);\n            this._msgHandler = msgHandler;\n            this.onProgress = null;\n            var readableStream = this._msgHandler.sendWithStream(\"GetRangeReader\", {\n              begin: begin,\n              end: end\n            });\n            this._reader = readableStream.getReader();\n          }\n          _createClass(PDFWorkerStreamRangeReader, [{\n            key: \"read\",\n            value: function () {\n              var _read2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {\n                var _yield$this$_reader$r2, value, done;\n                return _regeneratorRuntime().wrap(function _callee66$(_context77) {\n                  while (1) {\n                    switch (_context77.prev = _context77.next) {\n                      case 0:\n                        _context77.next = 2;\n                        return this._reader.read();\n                      case 2:\n                        _yield$this$_reader$r2 = _context77.sent;\n                        value = _yield$this$_reader$r2.value;\n                        done = _yield$this$_reader$r2.done;\n                        if (!done) {\n                          _context77.next = 7;\n                          break;\n                        }\n                        return _context77.abrupt(\"return\", {\n                          value: undefined,\n                          done: true\n                        });\n                      case 7:\n                        return _context77.abrupt(\"return\", {\n                          value: value.buffer,\n                          done: false\n                        });\n                      case 8:\n                      case \"end\":\n                        return _context77.stop();\n                    }\n                  }\n                }, _callee66, this);\n              }));\n              function read() {\n                return _read2.apply(this, arguments);\n              }\n              return read;\n            }()\n          }, {\n            key: \"cancel\",\n            value: function cancel(reason) {\n              this._reader.cancel(reason);\n            }\n          }, {\n            key: \"isStreamingSupported\",\n            get: function get() {\n              return false;\n            }\n          }]);\n          return PDFWorkerStreamRangeReader;\n        }();\n        /***/\n      }\n      /******/];\n      /************************************************************************/\n      /******/ // The module cache\n      /******/\n      var __webpack_module_cache__ = {};\n      /******/\n      /******/ // The require function\n      /******/\n      function __w_pdfjs_require__(moduleId) {\n        /******/ // Check if module is in cache\n        /******/var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n        if (cachedModule !== undefined) {\n          /******/return cachedModule.exports;\n          /******/\n        }\n        /******/ // Create a new module (and put it into the cache)\n        /******/\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/ // no module.id needed\n          /******/ // no module.loaded needed\n          /******/exports: {}\n          /******/\n        };\n        /******/\n        /******/ // Execute the module function\n        /******/\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n        /******/ // Return the exports of the module\n        /******/\n        return module.exports;\n        /******/\n      }\n      /******/\n      /************************************************************************/\n      /******/ /* webpack/runtime/define property getters */\n      /******/\n      (function () {\n        /******/ // define getter functions for harmony exports\n        /******/__w_pdfjs_require__.d = function (exports, definition) {\n          /******/for (var key in definition) {\n            /******/if (__w_pdfjs_require__.o(definition, key) && !__w_pdfjs_require__.o(exports, key)) {\n              /******/Object.defineProperty(exports, key, {\n                enumerable: true,\n                get: definition[key]\n              });\n              /******/\n            }\n            /******/\n          }\n          /******/\n        };\n        /******/\n      })();\n      /******/\n      /******/ /* webpack/runtime/hasOwnProperty shorthand */\n      /******/\n      (function () {\n        /******/__w_pdfjs_require__.o = function (obj, prop) {\n          return Object.prototype.hasOwnProperty.call(obj, prop);\n        };\n        /******/\n      })();\n      /******/\n      /******/ /* webpack/runtime/make namespace object */\n      /******/\n      (function () {\n        /******/ // define __esModule on exports\n        /******/__w_pdfjs_require__.r = function (exports) {\n          /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/Object.defineProperty(exports, Symbol.toStringTag, {\n              value: 'Module'\n            });\n            /******/\n          }\n          /******/\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          /******/\n        };\n        /******/\n      })();\n      /******/\n      /************************************************************************/\n      var __webpack_exports__ = {};\n      // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n      (function () {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"WorkerMessageHandler\", {\n          enumerable: true,\n          get: function get() {\n            return _worker.WorkerMessageHandler;\n          }\n        });\n        var _worker = __w_pdfjs_require__(1);\n        var pdfjsVersion = '2.16.105';\n        var pdfjsBuild = '172ccdbe5';\n      })();\n\n      /******/\n      return __webpack_exports__;\n      /******/\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}